{"id": "2510.14558", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.14558", "abs": "https://arxiv.org/abs/2510.14558", "authors": ["Amir Mohammad Fadaei Ayyam", "Michael Sammler"], "title": "HITrees: Higher-Order Interaction Trees", "comment": null, "summary": "Recent years have witnessed the rise of compositional semantics as a\nfoundation for formal verification of complex systems. In particular,\ninteraction trees have emerged as a popular denotational semantics. Interaction\ntrees achieve compositionality by providing a reusable library of effects.\nHowever, their notion of effects does not support higher-order effects, i.e.,\neffects that take or return monadic computations. Such effects are essential to\nmodel complex semantic features like parallel composition and call/cc.\n  We introduce Higher-Order Interaction Trees (HITrees), the first variant of\ninteraction trees to support higher-order effects in a non-guarded type theory.\nHITrees accomplish this through two key techniques: first, by designing the\nnotion of effects such that the fixpoints of effects with higher-order input\ncan be expressed as inductive types inside the type theory; and second, using\ndefunctionalization to encode higher-order outputs into a first-order\nrepresentation. We implement HITrees in the Lean proof assistant, accompanied\nby a comprehensive library of effects including concurrency, recursion, and\ncall/cc. Furthermore, we provide two interpretations of HITrees, as state\ntransition systems and as monadic programs. To demonstrate the expressiveness\nof HITrees, we apply them to define the semantics of a language with parallel\ncomposition and call/cc.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u9ad8\u9636\u4ea4\u4e92\u6811(HITrees)\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u975e\u5b88\u536b\u7c7b\u578b\u7406\u8bba\u4e2d\u652f\u6301\u9ad8\u9636\u6548\u5e94\u7684\u4ea4\u4e92\u6811\u53d8\u4f53\uff0c\u80fd\u591f\u5efa\u6a21\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7b49\u590d\u6742\u8bed\u4e49\u7279\u6027\u3002", "motivation": "\u4f20\u7edf\u4ea4\u4e92\u6811\u867d\u7136\u63d0\u4f9b\u4e86\u53ef\u91cd\u7528\u7684\u6548\u5e94\u5e93\uff0c\u4f46\u5176\u6548\u5e94\u6982\u5ff5\u4e0d\u652f\u6301\u9ad8\u9636\u6548\u5e94\uff08\u5373\u63a5\u53d7\u6216\u8fd4\u56de\u5355\u5b50\u8ba1\u7b97\u7684\u6548\u5e94\uff09\uff0c\u800c\u8fd9\u4e9b\u6548\u5e94\u5bf9\u4e8e\u5efa\u6a21\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7b49\u590d\u6742\u8bed\u4e49\u7279\u6027\u81f3\u5173\u91cd\u8981\u3002", "method": "\u91c7\u7528\u4e24\u79cd\u5173\u952e\u6280\u672f\uff1a1\uff09\u8bbe\u8ba1\u6548\u5e94\u6982\u5ff5\u4f7f\u5f97\u5177\u6709\u9ad8\u9636\u8f93\u5165\u7684\u6548\u5e94\u7684\u4e0d\u52a8\u70b9\u53ef\u4ee5\u5728\u7c7b\u578b\u7406\u8bba\u4e2d\u8868\u793a\u4e3a\u5f52\u7eb3\u7c7b\u578b\uff1b2\uff09\u4f7f\u7528\u53bb\u51fd\u6570\u5316\u5c06\u9ad8\u9636\u8f93\u51fa\u7f16\u7801\u4e3a\u4e00\u9636\u8868\u793a\u3002\u5728Lean\u8bc1\u660e\u52a9\u624b\u4e2d\u5b9e\u73b0HITrees\uff0c\u5e76\u63d0\u4f9b\u4e86\u5305\u62ec\u5e76\u53d1\u3001\u9012\u5f52\u548ccall/cc\u5728\u5185\u7684\u5168\u9762\u6548\u5e94\u5e93\u3002", "result": "\u6210\u529f\u5b9e\u73b0\u4e86HITrees\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u89e3\u91ca\uff1a\u4f5c\u4e3a\u72b6\u6001\u8f6c\u79fb\u7cfb\u7edf\u548c\u4f5c\u4e3a\u5355\u5b50\u7a0b\u5e8f\u3002\u901a\u8fc7\u5b9a\u4e49\u5177\u6709\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7684\u8bed\u8a00\u8bed\u4e49\uff0c\u5c55\u793a\u4e86HITrees\u7684\u8868\u8fbe\u80fd\u529b\u3002", "conclusion": "HITrees\u662f\u7b2c\u4e00\u4e2a\u5728\u975e\u5b88\u536b\u7c7b\u578b\u7406\u8bba\u4e2d\u652f\u6301\u9ad8\u9636\u6548\u5e94\u7684\u4ea4\u4e92\u6811\u53d8\u4f53\uff0c\u4e3a\u590d\u6742\u7cfb\u7edf\u7684\u5f62\u5f0f\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u7ec4\u5408\u8bed\u4e49\u57fa\u7840\u3002"}}
{"id": "2510.14279", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.14279", "abs": "https://arxiv.org/abs/2510.14279", "authors": ["Evangelos Lamprou", "Seong-Heon Jung", "Mayank Keoliya", "Lukas Lazarek", "Konstantinos Kallas", "Michael Greenberg", "Nikos Vasilakis"], "title": "Caruca: Effective and Efficient Specification Mining for Opaque Software Components", "comment": null, "summary": "A wealth of state-of-the-art systems demonstrate impressive improvements in\nperformance, security, and reliability on programs composed of opaque\ncomponents, such as Unix shell commands. To reason about commands, these\nsystems require partial specifications. However, creating such specifications\nis a manual, laborious, and error-prone process, limiting the practicality of\nthese systems. This paper presents Caruca, a system for automatic specification\nmining for opaque commands. To overcome the challenge of language diversity\nacross commands, Caruca first instruments a large language model to translate a\ncommand's user-facing documentation into a structured invocation syntax. Using\nthis representation, Caruca explores the space of syntactically valid command\ninvocations and execution environments. Caruca concretely executes each\ncommand-environment pair, interposing at the system-call and filesystem level\nto extract key command properties such as parallelizability and filesystem pre-\nand post-conditions. These properties can be exported in multiple specification\nformats and are immediately usable by existing systems. Applying Caruca across\n60 GNU Coreutils, POSIX, and third-party commands across several\nspecification-dependent systems shows that Caruca generates correct\nspecifications for all but one case, completely eliminating manual effort from\nthe process and currently powering the full specifications for a\nstate-of-the-art static analysis tool.", "AI": {"tldr": "Caruca\u662f\u4e00\u4e2a\u7528\u4e8e\u81ea\u52a8\u6316\u6398\u4e0d\u900f\u660e\u547d\u4ee4\u89c4\u8303\u7684\u7cfb\u7edf\uff0c\u901a\u8fc7LLM\u7ffb\u8bd1\u6587\u6863\u3001\u63a2\u7d22\u6709\u6548\u8c03\u7528\u7a7a\u95f4\u3001\u7cfb\u7edf\u8c03\u7528\u62e6\u622a\u7b49\u65b9\u5f0f\uff0c\u4e3a\u73b0\u6709\u7cfb\u7edf\u751f\u6210\u53ef\u76f4\u63a5\u4f7f\u7528\u7684\u547d\u4ee4\u89c4\u8303\u3002", "motivation": "\u73b0\u6709\u7cfb\u7edf\u9700\u8981\u624b\u52a8\u521b\u5efa\u547d\u4ee4\u89c4\u8303\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7e41\u7410\u3001\u6613\u9519\u4e14\u8017\u65f6\uff0c\u9650\u5236\u4e86\u8fd9\u4e9b\u7cfb\u7edf\u7684\u5b9e\u7528\u6027\u3002", "method": "\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\u5c06\u547d\u4ee4\u6587\u6863\u7ffb\u8bd1\u4e3a\u7ed3\u6784\u5316\u8c03\u7528\u8bed\u6cd5\uff0c\u63a2\u7d22\u8bed\u6cd5\u6709\u6548\u7684\u547d\u4ee4\u8c03\u7528\u548c\u6267\u884c\u73af\u5883\u7a7a\u95f4\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u548c\u6587\u4ef6\u7cfb\u7edf\u62e6\u622a\u63d0\u53d6\u5173\u952e\u547d\u4ee4\u5c5e\u6027\u3002", "result": "\u572860\u4e2aGNU Coreutils\u3001POSIX\u548c\u7b2c\u4e09\u65b9\u547d\u4ee4\u4e0a\u6d4b\u8bd5\uff0c\u9664\u4e00\u4e2a\u6848\u4f8b\u5916\u90fd\u80fd\u751f\u6210\u6b63\u786e\u89c4\u8303\uff0c\u5b8c\u5168\u6d88\u9664\u4e86\u624b\u52a8\u5de5\u4f5c\uff0c\u76ee\u524d\u4e3a\u6700\u5148\u8fdb\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\u63d0\u4f9b\u5b8c\u6574\u89c4\u8303\u3002", "conclusion": "Caruca\u80fd\u591f\u81ea\u52a8\u751f\u6210\u51c6\u786e\u4e14\u53ef\u7528\u7684\u547d\u4ee4\u89c4\u8303\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u4f9d\u8d56\u89c4\u8303\u7cfb\u7edf\u7684\u5b9e\u7528\u6027\u3002"}}
{"id": "2510.13857", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.13857", "abs": "https://arxiv.org/abs/2510.13857", "authors": ["Qiang Xu", "Xiangyu Wen", "Changran Xu", "Zeju Li", "Jianyuan Zhong"], "title": "From Craft to Constitution: A Governance-First Paradigm for Principled Agent Engineering", "comment": null, "summary": "The advent of powerful Large Language Models (LLMs) has ushered in an ``Age\nof the Agent,'' enabling autonomous systems to tackle complex goals. However,\nthe transition from prototype to production is hindered by a pervasive ``crisis\nof craft,'' resulting in agents that are brittle, unpredictable, and ultimately\nuntrustworthy in mission-critical applications. This paper argues this crisis\nstems from a fundamental paradigm mismatch -- attempting to command inherently\nprobabilistic processors with the deterministic mental models of traditional\nsoftware engineering. To solve this crisis, we introduce a governance-first\nparadigm for principled agent engineering, embodied in a formal architecture we\ncall ArbiterOS.", "AI": {"tldr": "\u63d0\u51fa\u4e86ArbiterOS\u67b6\u6784\uff0c\u65e8\u5728\u89e3\u51b3LLM\u4ee3\u7406\u4ece\u539f\u578b\u5230\u751f\u4ea7\u90e8\u7f72\u4e2d\u5b58\u5728\u7684\"\u5de5\u827a\u5371\u673a\"\u95ee\u9898\uff0c\u901a\u8fc7\u6cbb\u7406\u4f18\u5148\u7684\u8303\u5f0f\u6765\u6784\u5efa\u53ef\u4fe1\u8d56\u7684\u81ea\u4e3b\u7cfb\u7edf\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u63a8\u52a8\u4e86\"\u4ee3\u7406\u65f6\u4ee3\"\u7684\u5230\u6765\uff0c\u4f46\u73b0\u6709\u4ee3\u7406\u7cfb\u7edf\u5728\u5173\u952e\u4efb\u52a1\u5e94\u7528\u4e2d\u8868\u73b0\u51fa\u8106\u5f31\u6027\u3001\u4e0d\u53ef\u9884\u6d4b\u6027\u548c\u4e0d\u53ef\u4fe1\u8d56\u6027\uff0c\u5b58\u5728\u4ece\u539f\u578b\u5230\u751f\u4ea7\u7684\"\u5de5\u827a\u5371\u673a\"\u3002", "method": "\u5f15\u5165\u6cbb\u7406\u4f18\u5148\u7684\u4ee3\u7406\u5de5\u7a0b\u8303\u5f0f\uff0c\u63d0\u51fa\u4e86\u540d\u4e3aArbiterOS\u7684\u6b63\u5f0f\u67b6\u6784\uff0c\u65e8\u5728\u89e3\u51b3\u6982\u7387\u6027\u5904\u7406\u5668\u4e0e\u786e\u5b9a\u6027\u8f6f\u4ef6\u5de5\u7a0b\u601d\u7ef4\u4e4b\u95f4\u7684\u8303\u5f0f\u4e0d\u5339\u914d\u95ee\u9898\u3002", "result": "\u63d0\u51fa\u4e86\u89e3\u51b3\u4ee3\u7406\u7cfb\u7edf\"\u5de5\u827a\u5371\u673a\"\u7684\u7406\u8bba\u6846\u67b6\u548c\u67b6\u6784\u8bbe\u8ba1\uff0c\u4f46\u672a\u63d0\u4f9b\u5177\u4f53\u5b9e\u9a8c\u7ed3\u679c\u3002", "conclusion": "\u9700\u8981\u91c7\u7528\u6cbb\u7406\u4f18\u5148\u7684\u5de5\u7a0b\u8303\u5f0f\u6765\u6784\u5efa\u53ef\u4fe1\u8d56\u7684\u81ea\u4e3b\u4ee3\u7406\u7cfb\u7edf\uff0cArbiterOS\u67b6\u6784\u4e3a\u6b64\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2510.13859", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.13859", "abs": "https://arxiv.org/abs/2510.13859", "authors": ["Ruchit Rawal", "Jeffrey Yang Fan Chiang", "Chihao Shen", "Jeffery Siyuan Tian", "Aastha Mahajan", "Tom Goldstein", "Yizheng Chen"], "title": "Benchmarking Correctness and Security in Multi-Turn Code Generation", "comment": null, "summary": "AI coding assistants powered by large language models (LLMs) have transformed\nsoftware development, significantly boosting productivity. While existing\nbenchmarks evaluate the correctness and security of LLM-generated code, they\nare typically limited to single-turn tasks that do not reflect the iterative\nnature of real-world development. We introduce MT-Sec, the first benchmark to\nsystematically evaluate both correctness and security in multi-turn coding\nscenarios. We construct this using a synthetic data pipeline that transforms\nexisting single-turn tasks into semantically aligned multi-turn interaction\nsequences, allowing reuse of original test suites while modeling the complexity\nof real-world coding processes. We evaluate 32 open- and closed-source models,\nand three agent-scaffolding on MT-Sec and observe a consistent 20-27% drop in\n\"correct and secure\" outputs from single-turn to multi-turn settings -- even\namong state-of-the-art models. Beyond full-program generation, we also evaluate\nmodels on multi-turn code-diff generation -- an unexplored yet practically\nrelevant setting -- and find that models perform worse here, with increased\nrates of functionally incorrect and insecure outputs. Finally, we find that\nwhile agent scaffoldings boost single-turn code generation performance, they\nare not quite as effective in multi-turn evaluations. Together, these findings\nhighlight the need for benchmarks that jointly evaluate correctness and\nsecurity in multi-turn, real-world coding workflows.", "AI": {"tldr": "Error", "motivation": "Error", "method": "Error", "result": "Error", "conclusion": "Error"}}
{"id": "2510.14361", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.14361", "abs": "https://arxiv.org/abs/2510.14361", "authors": ["Pawel Pawlowski"], "title": "T-BAT semantics and its logics", "comment": null, "summary": "\\textbf{T-BAT} logic is a formal system designed to express the notion of\ninformal provability. This type of provability is closely related to\nmathematical practice and is quite often contrasted with formal provability,\nunderstood as a formal derivation in an appropriate formal system.\n\\textbf{T-BAT} is a non-deterministic four-valued logic. The logical values in\n\\textbf{T-BAT} semantics convey not only the information whether a given\nformula is true but also about its provability status.\n  The primary aim of our paper is to study the proposed four-valued\nnon-deterministic semantics. We look into the intricacies of the interactions\nbetween various weakenings and strengthenings of the semantics with axioms that\nthey induce. We prove the completeness of all the logics that are definable in\nthis semantics by transforming truth values into specific expressions\nformulated within the object language of the semantics. Additionally, we\nutilize Kripke semantics to examine these axioms from a modal perspective by\nproviding a frame condition that they induce. The secondary aim of this paper\nis to provide an intuitive axiomatization of \\textbf{T-BAT} logic.", "AI": {"tldr": "T-BAT\u903b\u8f91\u662f\u4e00\u4e2a\u56db\u503c\u975e\u786e\u5b9a\u6027\u903b\u8f91\u7cfb\u7edf\uff0c\u7528\u4e8e\u8868\u8fbe\u975e\u6b63\u5f0f\u53ef\u8bc1\u6027\u6982\u5ff5\u3002\u672c\u6587\u7814\u7a76\u4e86\u8be5\u8bed\u4e49\u7684\u5404\u79cd\u5f31\u5316\u548c\u5f3a\u5316\u53d8\u4f53\uff0c\u8bc1\u660e\u4e86\u6240\u6709\u53ef\u5b9a\u4e49\u903b\u8f91\u7684\u5b8c\u5907\u6027\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f4\u89c2\u7684\u516c\u7406\u5316\u3002", "motivation": "\u7814\u7a76T-BAT\u903b\u8f91\u7684\u56db\u503c\u975e\u786e\u5b9a\u6027\u8bed\u4e49\uff0c\u63a2\u7d22\u4e0d\u540c\u8bed\u4e49\u53d8\u4f53\u4e0e\u6240\u8bf1\u5bfc\u516c\u7406\u4e4b\u95f4\u7684\u590d\u6742\u76f8\u4e92\u4f5c\u7528\uff0c\u5e76\u4e3a\u8be5\u903b\u8f91\u63d0\u4f9b\u76f4\u89c2\u7684\u516c\u7406\u5316\u3002", "method": "\u901a\u8fc7\u5c06\u771f\u503c\u8f6c\u6362\u4e3a\u8bed\u4e49\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684\u7279\u5b9a\u8868\u8fbe\u5f0f\u6765\u8bc1\u660e\u6240\u6709\u53ef\u5b9a\u4e49\u903b\u8f91\u7684\u5b8c\u5907\u6027\uff0c\u540c\u65f6\u4f7f\u7528\u514b\u91cc\u666e\u514b\u8bed\u4e49\u4ece\u6a21\u6001\u89d2\u5ea6\u5206\u6790\u516c\u7406\uff0c\u63d0\u4f9b\u5b83\u4eec\u8bf1\u5bfc\u7684\u6846\u67b6\u6761\u4ef6\u3002", "result": "\u8bc1\u660e\u4e86\u6240\u6709\u5728T-BAT\u8bed\u4e49\u4e2d\u53ef\u5b9a\u4e49\u903b\u8f91\u7684\u5b8c\u5907\u6027\uff0c\u5e76\u901a\u8fc7\u514b\u91cc\u666e\u514b\u8bed\u4e49\u4e3a\u8fd9\u4e9b\u516c\u7406\u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u6846\u67b6\u6761\u4ef6\u3002", "conclusion": "\u6210\u529f\u7814\u7a76\u4e86T-BAT\u903b\u8f91\u7684\u56db\u503c\u975e\u786e\u5b9a\u6027\u8bed\u4e49\uff0c\u5efa\u7acb\u4e86\u5b8c\u5907\u6027\u7ed3\u679c\uff0c\u5e76\u4e3a\u8be5\u903b\u8f91\u63d0\u4f9b\u4e86\u76f4\u89c2\u7684\u516c\u7406\u5316\u7cfb\u7edf\u3002"}}
{"id": "2510.14568", "categories": ["cs.FL", "cs.DM"], "pdf": "https://arxiv.org/pdf/2510.14568", "abs": "https://arxiv.org/abs/2510.14568", "authors": ["Niccolo' Castronuovo", "Alberto Dennunzio", "Luciano Margara"], "title": "Decidability and Characterization of Expansivity for Group Cellular Automata", "comment": null, "summary": "Group cellular automata are continuous, shift-commuting endomorphisms of\n$G^\\mathbb{Z}$, where $G$ is a finite group. We provide an easy-to-check\ncharacterization of expansivity for group cellular automata on abelian groups\nand we prove that expansivity is a decidable property for general (non-abelian)\ngroups. Moreover, we show that the class of expansive group cellular automata\nis strictly contained in that of topologically transitive injective group\ncellular automata.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u7684\u6269\u5c55\u6027\uff0c\u4e3a\u963f\u8d1d\u5c14\u7fa4\u63d0\u4f9b\u4e86\u6613\u4e8e\u68c0\u67e5\u7684\u6269\u5c55\u6027\u7279\u5f81\uff0c\u8bc1\u660e\u4e86\u6269\u5c55\u6027\u5bf9\u4e8e\u4e00\u822c\uff08\u975e\u963f\u8d1d\u5c14\uff09\u7fa4\u662f\u53ef\u5224\u5b9a\u6027\u8d28\uff0c\u5e76\u8bc1\u660e\u6269\u5c55\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u4e25\u683c\u5305\u542b\u5728\u62d3\u6251\u4f20\u9012\u7684\u5355\u5c04\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u4e2d\u3002", "motivation": "\u7814\u7a76\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u7684\u6269\u5c55\u6027\u7279\u5f81\u548c\u53ef\u5224\u5b9a\u6027\uff0c\u7279\u522b\u5173\u6ce8\u963f\u8d1d\u5c14\u7fa4\u548c\u4e00\u822c\u7fa4\u7684\u533a\u522b\uff0c\u4ee5\u53ca\u6269\u5c55\u6027\u4e0e\u62d3\u6251\u4f20\u9012\u6027\u4e4b\u95f4\u7684\u5173\u7cfb\u3002", "method": "\u4f7f\u7528\u7fa4\u8bba\u548c\u52a8\u529b\u7cfb\u7edf\u7406\u8bba\u7684\u65b9\u6cd5\uff0c\u5206\u6790\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u7684\u4ee3\u6570\u7ed3\u6784\uff0c\u901a\u8fc7\u6784\u9020\u6027\u8bc1\u660e\u6765\u5efa\u7acb\u6269\u5c55\u6027\u7684\u7279\u5f81\u548c\u53ef\u5224\u5b9a\u6027\u3002", "result": "\u4e3a\u963f\u8d1d\u5c14\u7fa4\u63d0\u4f9b\u4e86\u6613\u4e8e\u68c0\u67e5\u7684\u6269\u5c55\u6027\u7279\u5f81\uff0c\u8bc1\u660e\u4e86\u6269\u5c55\u6027\u5bf9\u4e8e\u4e00\u822c\u7fa4\u662f\u53ef\u5224\u5b9a\u7684\uff0c\u5e76\u5efa\u7acb\u4e86\u6269\u5c55\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u4e0e\u62d3\u6251\u4f20\u9012\u5355\u5c04\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u4e4b\u95f4\u7684\u4e25\u683c\u5305\u542b\u5173\u7cfb\u3002", "conclusion": "\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u7684\u6269\u5c55\u6027\u5728\u963f\u8d1d\u5c14\u7fa4\u4e2d\u5177\u6709\u7b80\u6d01\u7684\u7279\u5f81\u5316\uff0c\u5728\u4e00\u822c\u7fa4\u4e2d\u662f\u53ef\u5224\u5b9a\u7684\uff0c\u4e14\u6269\u5c55\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u662f\u62d3\u6251\u4f20\u9012\u5355\u5c04\u7fa4\u5143\u80de\u81ea\u52a8\u673a\u7684\u771f\u5b50\u7c7b\u3002"}}
{"id": "2510.13914", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.13914", "abs": "https://arxiv.org/abs/2510.13914", "authors": ["Janghan Yoon", "Jaegwan Cho", "Junhyeok Kim", "Jiwan Chung", "Jaehyun Jeon", "Youngjae Yu"], "title": "A11YN: aligning LLMs for accessible web UI code generation", "comment": null, "summary": "Large language models (LLMs) have recently demonstrated strong capabilities\nin generating functional and aesthetic web interfaces directly from\ninstructions. However, these models often replicate accessibility flaws from\ntheir training data, resulting in interfaces that exclude users with diverse\nneeds and contexts. To address this gap, we introduce A11yn, the first method\nthat aligns code-generating LLMs to reliably produce accessibility-compliant\nweb UIs. A11yn optimizes a novel reward function that penalizes violations of\nthe Web Content Accessibility Guidelines (WCAG), with penalties scaled to the\nseverity of each violation as identified by an accessibility testing engine. To\nsupport training, we construct UIReq-6.8K, a dataset of 6,800 diverse\ninstructions for web UI generation. For evaluation, we introduce RealUIReq-300,\na benchmark of 300 real-world web UI requests grounded and manually curated\nfrom public web pages, spanning a broad range of use cases. Empirical results\nshow that A11yn significantly outperforms strong baselines, lowering the\nInaccessibility Rate by 60% over the base model while preserving semantic\nfidelity and visual quality of generated UIs. These findings demonstrate that\naccessibility can be systematically optimized within LLMs, showing the\nfeasibility of aligning code generation for accessibility.", "AI": {"tldr": "A11yn\u65b9\u6cd5\u901a\u8fc7\u4f18\u5316\u5956\u52b1\u51fd\u6570\u6765\u5bf9\u9f50\u4ee3\u7801\u751f\u6210LLM\uff0c\u4f7f\u5176\u53ef\u9760\u5730\u751f\u6210\u7b26\u5408\u53ef\u8bbf\u95ee\u6027\u6807\u51c6\u7684\u7f51\u9875UI\uff0c\u5c06\u4e0d\u53ef\u8bbf\u95ee\u7387\u964d\u4f4e60%\u3002", "motivation": "\u73b0\u6709LLM\u5728\u751f\u6210\u7f51\u9875\u754c\u9762\u65f6\u7ecf\u5e38\u590d\u5236\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u53ef\u8bbf\u95ee\u6027\u7f3a\u9677\uff0c\u5bfc\u81f4\u754c\u9762\u65e0\u6cd5\u6ee1\u8db3\u591a\u6837\u5316\u7528\u6237\u7684\u9700\u6c42\u548c\u60c5\u5883\u3002", "method": "A11yn\u4f18\u5316\u4e86\u4e00\u4e2a\u65b0\u9896\u7684\u5956\u52b1\u51fd\u6570\uff0c\u6839\u636e\u53ef\u8bbf\u95ee\u6027\u6d4b\u8bd5\u5f15\u64ce\u8bc6\u522b\u7684\u8fdd\u89c4\u4e25\u91cd\u7a0b\u5ea6\u6765\u60e9\u7f5a\u8fdd\u53cdWeb\u5185\u5bb9\u53ef\u8bbf\u95ee\u6027\u6307\u5357(WCAG)\u7684\u884c\u4e3a\uff0c\u5e76\u6784\u5efa\u4e86UIReq-6.8K\u6570\u636e\u96c6\u7528\u4e8e\u8bad\u7ec3\u3002", "result": "A11yn\u663e\u8457\u4f18\u4e8e\u5f3a\u57fa\u7ebf\u65b9\u6cd5\uff0c\u5c06\u4e0d\u53ef\u8bbf\u95ee\u7387\u6bd4\u57fa\u7840\u6a21\u578b\u964d\u4f4e\u4e8660%\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u751f\u6210UI\u7684\u8bed\u4e49\u4fdd\u771f\u5ea6\u548c\u89c6\u89c9\u8d28\u91cf\u3002", "conclusion": "\u7814\u7a76\u8868\u660e\u53ef\u8bbf\u95ee\u6027\u53ef\u4ee5\u5728LLM\u4e2d\u7cfb\u7edf\u4f18\u5316\uff0c\u8bc1\u660e\u4e86\u4e3a\u53ef\u8bbf\u95ee\u6027\u5bf9\u9f50\u4ee3\u7801\u751f\u6210\u7684\u53ef\u884c\u6027\u3002"}}
{"id": "2510.14550", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.14550", "abs": "https://arxiv.org/abs/2510.14550", "authors": ["S Hitarth", "Alessio Mansutti", "Guruprerana Shabadi"], "title": "Optimization Modulo Integer Linear-Exponential Programs", "comment": "Extended version of a SODA 2026 paper", "summary": "This paper presents the first study of the complexity of the optimization\nproblem for integer linear-exponential programs which extend classical integer\nlinear programs with the exponential function $x \\mapsto 2^x$ and the remainder\nfunction ${(x,y) \\mapsto (x \\bmod 2^y)}$. The problem of deciding if such a\nprogram has a solution was recently shown to be NP-complete in [Chistikov et\nal., ICALP'24]. The optimization problem instead asks for a solution that\nmaximizes (or minimizes) a linear-exponential objective function, subject to\nthe constraints of an integer linear-exponential program. We establish the\nfollowing results:\n  1. If an optimal solution exists, then one of them can be succinctly\nrepresented as an integer linear-exponential straight-line program (ILESLP): an\narithmetic circuit whose gates always output an integer value (by construction)\nand implement the operations of addition, exponentiation, and multiplication by\nrational numbers.\n  2. There is an algorithm that runs in polynomial time, given access to an\ninteger factoring oracle, which determines whether an ILESLP encodes a solution\nto an integer linear-exponential program. This algorithm can also be used to\ncompare the values taken by the objective function on two given solutions.\n  Building on these results, we place the optimization problem for integer\nlinear-exponential programs within an extension of the optimization class\n$\\text{NPO}$ that lies within $\\text{FNP}^{\\text{NP}}$. In essence, this\nextension forgoes determining the optimal solution via binary search.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u6574\u6570\u7ebf\u6027\u6307\u6570\u89c4\u5212\u7684\u4f18\u5316\u95ee\u9898\u590d\u6742\u6027\uff0c\u5efa\u7acb\u4e86\u6700\u4f18\u89e3\u53ef\u4ee5\u7528\u6574\u6570\u7ebf\u6027\u6307\u6570\u76f4\u7ebf\u7a0b\u5e8f(ILESLP)\u7b80\u6d01\u8868\u793a\uff0c\u5e76\u7ed9\u51fa\u4e86\u5728\u6574\u6570\u5206\u89e3\u9884\u8a00\u673a\u4e0b\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff0c\u5c06\u8be5\u95ee\u9898\u7f6e\u4e8eNPO\u6269\u5c55\u7c7b\u4e2d\u3002", "motivation": "\u7814\u7a76\u6574\u6570\u7ebf\u6027\u6307\u6570\u89c4\u5212\u7684\u4f18\u5316\u95ee\u9898\u590d\u6742\u6027\uff0c\u8fd9\u7c7b\u95ee\u9898\u6269\u5c55\u4e86\u7ecf\u5178\u6574\u6570\u7ebf\u6027\u89c4\u5212\uff0c\u52a0\u5165\u4e86\u6307\u6570\u51fd\u6570\u548c\u53d6\u6a21\u8fd0\u7b97\uff0c\u5176\u5224\u5b9a\u95ee\u9898\u5df2\u88ab\u8bc1\u660e\u662fNP\u5b8c\u5168\u7684\u3002", "method": "1. \u8bc1\u660e\u6700\u4f18\u89e3\u53ef\u4ee5\u7528ILESLP\u7b80\u6d01\u8868\u793a\uff1b2. \u8bbe\u8ba1\u5728\u6574\u6570\u5206\u89e3\u9884\u8a00\u673a\u4e0b\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u6765\u9a8c\u8bc1ILESLP\u7f16\u7801\u7684\u89e3\uff1b3. \u5c06\u8be5\u4f18\u5316\u95ee\u9898\u7f6e\u4e8eNPO\u7684\u6269\u5c55\u7c7b\u4e2d\u3002", "result": "1. \u6700\u4f18\u89e3\u53ef\u4ee5\u7528ILESLP\u8868\u793a\uff1b2. \u5b58\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u9a8c\u8bc1ILESLP\u89e3\uff1b3. \u8be5\u4f18\u5316\u95ee\u9898\u5c5e\u4e8eFNP^NP\u7c7b\u4e2d\u7684NPO\u6269\u5c55\u3002", "conclusion": "\u6574\u6570\u7ebf\u6027\u6307\u6570\u89c4\u5212\u7684\u4f18\u5316\u95ee\u9898\u5177\u6709\u53ef\u7b80\u6d01\u8868\u793a\u7684\u6700\u4f18\u89e3\uff0c\u5728\u9002\u5f53\u8ba1\u7b97\u6a21\u578b\u4e0b\u53ef\u9ad8\u6548\u5904\u7406\uff0c\u5e76\u88ab\u7f6e\u4e8e\u5408\u9002\u7684\u590d\u6742\u6027\u7c7b\u4e2d\u3002"}}
{"id": "2510.14699", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2510.14699", "abs": "https://arxiv.org/abs/2510.14699", "authors": ["S. Akshay", "Prerak Contractor", "Paul Gastin", "R. Govind", "B. Srivathsan"], "title": "Efficient Verification of Metric Temporal Properties with Past in Pointwise Semantics", "comment": null, "summary": "Model checking for real-timed systems is a rich and diverse topic. Among the\ndifferent logics considered, Metric Interval Temporal Logic (MITL) is a\npowerful and commonly used logic, which can succinctly encode many interesting\ntimed properties especially when past and future modalities are used together.\nIn this work, we develop a new approach for MITL model checking in the\npointwise semantics, where our focus is on integrating past and maximizing\ndeterminism in the translated automata.\n  Towards this goal, we define synchronous networks of timed automata with\nshared variables and show that the past fragment of MITL can be translated in\nlinear time to synchronous networks of deterministic timed automata. Moreover\ndeterminism can be preserved even when the logic is extended with future\nmodalities at the top-level of the formula. We further extend this approach to\nthe full MITL with past, translating it into networks of generalized timed\nautomata (GTA) with future clocks (which extend timed automata and event clock\nautomata). We present an SCC-based liveness algorithm to analyse GTA. We\nimplement our translation in a prototype tool which handles both finite and\ninfinite timed words and supports past modalities. Our experimental evaluation\ndemonstrates that our approach significantly outperforms the state-of-the-art\nin MITL satisfiability checking in pointwise semantics on a benchmark suite of\n72 formulas. Finally, we implement an end-to-end model checking algorithm for\npointwise semantics and demonstrate its effectiveness on two well-known\nbenchmarks.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684MITL\u6a21\u578b\u68c0\u67e5\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u5728\u70b9\u8bed\u4e49\u4e0b\u6574\u5408\u8fc7\u53bb\u65f6\u6001\u5e76\u6700\u5927\u5316\u81ea\u52a8\u673a\u786e\u5b9a\u6027\uff0c\u901a\u8fc7\u5c06MITL\u8f6c\u6362\u4e3a\u540c\u6b65\u7f51\u7edc\u5b9a\u65f6\u81ea\u52a8\u673a\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6027\u80fd\u3002", "motivation": "MITL\u662f\u8868\u8fbe\u5b9a\u65f6\u5c5e\u6027\u7684\u5f3a\u5927\u903b\u8f91\uff0c\u4f46\u73b0\u6709\u65b9\u6cd5\u5728\u5904\u7406\u8fc7\u53bb\u548c\u672a\u6765\u65f6\u6001\u7ec4\u5408\u65f6\u6548\u7387\u4e0d\u9ad8\uff0c\u9700\u8981\u5f00\u53d1\u66f4\u6709\u6548\u7684\u6a21\u578b\u68c0\u67e5\u6280\u672f\u3002", "method": "\u5b9a\u4e49\u540c\u6b65\u7f51\u7edc\u5b9a\u65f6\u81ea\u52a8\u673a\uff0c\u5c06MITL\u8fc7\u53bb\u7247\u6bb5\u7ebf\u6027\u65f6\u95f4\u8f6c\u6362\u4e3a\u786e\u5b9a\u6027\u5b9a\u65f6\u81ea\u52a8\u673a\uff0c\u6269\u5c55\u5230\u5b8c\u6574MITL\u65f6\u4f7f\u7528\u5e7f\u4e49\u5b9a\u65f6\u81ea\u52a8\u673a\uff0c\u5e76\u91c7\u7528SCC-based\u6d3b\u6027\u7b97\u6cd5\u5206\u6790\u3002", "result": "\u539f\u578b\u5de5\u5177\u572872\u4e2a\u516c\u5f0f\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u6280\u672f\uff0c\u5728\u70b9\u8bed\u4e49\u4e0bMITL\u53ef\u6ee1\u8db3\u6027\u68c0\u67e5\u6027\u80fd\u5927\u5e45\u63d0\u5347\uff0c\u5e76\u5728\u4e24\u4e2a\u77e5\u540d\u57fa\u51c6\u4e0a\u9a8c\u8bc1\u4e86\u7aef\u5230\u7aef\u6a21\u578b\u68c0\u67e5\u7b97\u6cd5\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6210\u529f\u6574\u5408\u4e86MITL\u7684\u8fc7\u53bb\u548c\u672a\u6765\u65f6\u6001\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u786e\u5b9a\u6027\u81ea\u52a8\u673a\u8f6c\u6362\uff0c\u4e3a\u5b9e\u65f6\u7cfb\u7edf\u6a21\u578b\u68c0\u67e5\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u5de5\u5177\u3002"}}
{"id": "2510.13992", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.13992", "abs": "https://arxiv.org/abs/2510.13992", "authors": ["Quoc Hung Le", "Thanh Le-Cong", "Bach Le", "Bowen Xu"], "title": "Signature in Code Backdoor Detection, how far are we?", "comment": "20 pages, 3 figures", "summary": "As Large Language Models (LLMs) become increasingly integrated into software\ndevelopment workflows, they also become prime targets for adversarial attacks.\nAmong these, backdoor attacks are a significant threat, allowing attackers to\nmanipulate model outputs through hidden triggers embedded in training data.\nDetecting such backdoors remains a challenge, and one promising approach is the\nuse of Spectral Signature defense methods that identify poisoned data by\nanalyzing feature representations through eigenvectors. While some prior works\nhave explored Spectral Signatures for backdoor detection in neural networks,\nrecent studies suggest that these methods may not be optimally effective for\ncode models. In this paper, we revisit the applicability of Spectral\nSignature-based defenses in the context of backdoor attacks on code models. We\nsystematically evaluate their effectiveness under various attack scenarios and\ndefense configurations, analyzing their strengths and limitations. We found\nthat the widely used setting of Spectral Signature in code backdoor detection\nis often suboptimal. Hence, we explored the impact of different settings of the\nkey factors. We discovered a new proxy metric that can more accurately estimate\nthe actual performance of Spectral Signature without model retraining after the\ndefense.", "AI": {"tldr": "\u91cd\u65b0\u8bc4\u4f30\u8c31\u7b7e\u540d\u9632\u5fa1\u65b9\u6cd5\u5728\u4ee3\u7801\u6a21\u578b\u540e\u95e8\u653b\u51fb\u68c0\u6d4b\u4e2d\u7684\u9002\u7528\u6027\uff0c\u53d1\u73b0\u4f20\u7edf\u8bbe\u7f6e\u6548\u679c\u4e0d\u4f73\uff0c\u63d0\u51fa\u65b0\u7684\u4ee3\u7406\u6307\u6807\u6765\u66f4\u51c6\u786e\u8bc4\u4f30\u9632\u5fa1\u6027\u80fd", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u540e\u95e8\u653b\u51fb\u6210\u4e3a\u91cd\u5927\u5a01\u80c1\uff0c\u800c\u73b0\u6709\u7684\u8c31\u7b7e\u540d\u9632\u5fa1\u65b9\u6cd5\u5728\u4ee3\u7801\u6a21\u578b\u4e2d\u7684\u6548\u679c\u53ef\u80fd\u4e0d\u7406\u60f3", "method": "\u7cfb\u7edf\u8bc4\u4f30\u8c31\u7b7e\u540d\u9632\u5fa1\u5728\u4e0d\u540c\u653b\u51fb\u573a\u666f\u548c\u9632\u5fa1\u914d\u7f6e\u4e0b\u7684\u6709\u6548\u6027\uff0c\u5206\u6790\u5173\u952e\u56e0\u7d20\u7684\u4e0d\u540c\u8bbe\u7f6e\u5bf9\u68c0\u6d4b\u6548\u679c\u7684\u5f71\u54cd", "result": "\u53d1\u73b0\u4ee3\u7801\u540e\u95e8\u68c0\u6d4b\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u8c31\u7b7e\u540d\u8bbe\u7f6e\u901a\u5e38\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u63a2\u7d22\u4e86\u5173\u952e\u56e0\u7d20\u7684\u4e0d\u540c\u8bbe\u7f6e\u5f71\u54cd\uff0c\u5e76\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u4ee3\u7406\u6307\u6807", "conclusion": "\u8c31\u7b7e\u540d\u9632\u5fa1\u5728\u4ee3\u7801\u6a21\u578b\u540e\u95e8\u68c0\u6d4b\u4e2d\u9700\u8981\u4f18\u5316\u914d\u7f6e\uff0c\u65b0\u63d0\u51fa\u7684\u4ee3\u7406\u6307\u6807\u80fd\u591f\u66f4\u51c6\u786e\u5730\u8bc4\u4f30\u9632\u5fa1\u6027\u80fd\u800c\u65e0\u9700\u6a21\u578b\u91cd\u65b0\u8bad\u7ec3"}}
{"id": "2510.14619", "categories": ["cs.LO", "math.LO"], "pdf": "https://arxiv.org/pdf/2510.14619", "abs": "https://arxiv.org/abs/2510.14619", "authors": ["Sara Ayhan"], "title": "Problems and Consequences of Bilateral Notions of (Meta-)Derivability", "comment": null, "summary": "A bilateralist take on proof-theoretic semantics can be understood as\ndemanding of a proof system to display not only rules giving the connectives'\nprovability conditions but also their refutability conditions. On such a view,\nthen, a system with two derivability relations is obtained, which can be quite\nnaturally expressed in a proof system of natural deduction but which faces\nobstacles in a sequent calculus representation. Since in a sequent calculus\nthere are two derivability relations inherent, one expressed by the sequent\nsign and one by the horizontal lines holding between sequents, in a truly\nbilateral calculus both need to be dualized. While dualizing the sequent sign\nis rather straightforwardly corresponding to dualizing the horizontal lines in\nnatural deduction, dualizing the horizontal lines in sequent calculus, uncovers\nproblems that, as will be argued in this paper, shed light on deeper conceptual\nissues concerning an imbalance between the notions of proof vs. refutation. The\nroots of this problem will be further analyzed and possible solutions on how to\nretain a bilaterally desired balance in our system are presented.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u53cc\u8fb9\u4e3b\u4e49\u8bc1\u660e\u8bba\u8bed\u4e49\u5b66\u5728\u5e8f\u5217\u6f14\u7b97\u4e2d\u7684\u5b9e\u73b0\u95ee\u9898\uff0c\u6307\u51fa\u9700\u8981\u540c\u65f6\u53cc\u5316\u5e8f\u5217\u7b26\u53f7\u548c\u6c34\u5e73\u7ebf\uff0c\u8fd9\u63ed\u793a\u4e86\u8bc1\u660e\u4e0e\u53cd\u9a73\u6982\u5ff5\u4e4b\u95f4\u7684\u4e0d\u5e73\u8861\u95ee\u9898\u3002", "motivation": "\u53cc\u8fb9\u4e3b\u4e49\u8981\u6c42\u8bc1\u660e\u7cfb\u7edf\u4e0d\u4ec5\u8981\u663e\u793a\u8fde\u63a5\u8bcd\u7684\u53ef\u8bc1\u6027\u6761\u4ef6\uff0c\u8fd8\u8981\u663e\u793a\u5176\u53ef\u53cd\u9a73\u6027\u6761\u4ef6\u3002\u5728\u5e8f\u5217\u6f14\u7b97\u4e2d\u5b9e\u73b0\u8fd9\u4e00\u70b9\u9762\u4e34\u7279\u6b8a\u6311\u6218\uff0c\u56e0\u4e3a\u5e8f\u5217\u6f14\u7b97\u672c\u8eab\u5305\u542b\u4e24\u79cd\u53ef\u63a8\u5bfc\u5173\u7cfb\u3002", "method": "\u5206\u6790\u5e8f\u5217\u6f14\u7b97\u4e2d\u5e8f\u5217\u7b26\u53f7\u548c\u6c34\u5e73\u7ebf\u8fd9\u4e24\u79cd\u53ef\u63a8\u5bfc\u5173\u7cfb\u7684\u53cc\u5316\u8fc7\u7a0b\uff0c\u63a2\u8ba8\u53cc\u5316\u6c34\u5e73\u7ebf\u65f6\u51fa\u73b0\u7684\u95ee\u9898\u53ca\u5176\u6982\u5ff5\u6839\u6e90\u3002", "result": "\u53d1\u73b0\u53cc\u5316\u5e8f\u5217\u7b26\u53f7\u76f8\u5bf9\u76f4\u63a5\uff0c\u4f46\u53cc\u5316\u6c34\u5e73\u7ebf\u4f1a\u63ed\u793a\u8bc1\u660e\u4e0e\u53cd\u9a73\u6982\u5ff5\u4e4b\u95f4\u7684\u6df1\u5c42\u4e0d\u5e73\u8861\u95ee\u9898\u3002", "conclusion": "\u672c\u6587\u5206\u6790\u4e86\u95ee\u9898\u7684\u6839\u6e90\uff0c\u5e76\u63d0\u51fa\u4e86\u5728\u7cfb\u7edf\u4e2d\u4fdd\u6301\u53cc\u8fb9\u4e3b\u4e49\u6240\u9700\u5e73\u8861\u7684\u53ef\u80fd\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.14841", "categories": ["cs.FL", "math.DS", "math.GR", "nlin.CG"], "pdf": "https://arxiv.org/pdf/2510.14841", "abs": "https://arxiv.org/abs/2510.14841", "authors": ["Edgar Alcal\u00e1-Arroyo", "Alonso Castillo-Ramirez"], "title": "On the order of lazy cellular automata", "comment": "12 pages", "summary": "We study the most elementary family of cellular automata defined over an\narbitrary group universe $G$ and an alphabet $A$: the lazy cellular automata,\nwhich act as the identity on configurations in $A^G$, except when they read a\nunique active transition $p \\in A^S$, in which case they write a fixed symbol\n$a \\in A$. As expected, the dynamical behavior of lazy cellular automata is\nrelatively simple, yet subtle questions arise since they completely depend on\nthe choice of $p$ and $a$. In this paper, we investigate the order of a lazy\ncellular automaton $\\tau : A^G \\to A^G$, defined as the cardinality of the set\n$\\{ \\tau^k : k \\in \\mathbb{N} \\}$. In particular, we establish a general upper\nbound for the order of $\\tau$ in terms of $p$ and $a$, and we prove that this\nbound is attained when $p$ is a quasi-constant pattern.", "AI": {"tldr": "\u7814\u7a76\u5728\u4efb\u610f\u7fa4G\u548c\u5b57\u6bcd\u8868A\u4e0a\u5b9a\u4e49\u7684\u61d2\u60f0\u5143\u80de\u81ea\u52a8\u673a\uff0c\u5206\u6790\u5176\u9636\u6570\uff08\u5373\u53d8\u6362\u5e42\u6b21\u7684\u57fa\u6570\uff09\uff0c\u5efa\u7acb\u4e86\u9636\u6570\u5173\u4e8e\u6d3b\u8dc3\u8f6c\u79fb\u6a21\u5f0fp\u548c\u56fa\u5b9a\u7b26\u53f7a\u7684\u4e00\u822c\u4e0a\u754c\uff0c\u5e76\u8bc1\u660e\u5f53p\u662f\u62df\u5e38\u6570\u6a21\u5f0f\u65f6\u8be5\u4e0a\u754c\u53ef\u8fbe\u3002", "motivation": "\u7814\u7a76\u6700\u7b80\u5355\u7684\u4e00\u7c7b\u5143\u80de\u81ea\u52a8\u673a\u2014\u2014\u61d2\u60f0\u5143\u80de\u81ea\u52a8\u673a\u7684\u52a8\u529b\u5b66\u884c\u4e3a\uff0c\u7279\u522b\u662f\u5176\u9636\u6570\u6027\u8d28\uff0c\u56e0\u4e3a\u867d\u7136\u8fd9\u7c7b\u81ea\u52a8\u673a\u884c\u4e3a\u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u5176\u9636\u6570\u5b8c\u5168\u4f9d\u8d56\u4e8e\u6d3b\u8dc3\u8f6c\u79fb\u6a21\u5f0fp\u548c\u56fa\u5b9a\u7b26\u53f7a\u7684\u9009\u62e9\uff0c\u5b58\u5728\u5fae\u5999\u7684\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u5206\u6790\u61d2\u60f0\u5143\u80de\u81ea\u52a8\u673a\u7684\u5b9a\u4e49\u7279\u6027\uff0c\u5efa\u7acb\u9636\u6570\u7684\u4e00\u822c\u4e0a\u754c\uff0c\u5e76\u9488\u5bf9\u62df\u5e38\u6570\u6a21\u5f0f\u8fd9\u4e00\u7279\u6b8a\u60c5\u51b5\u8bc1\u660e\u4e0a\u754c\u7684\u53ef\u8fbe\u6027\u3002", "result": "\u5efa\u7acb\u4e86\u61d2\u60f0\u5143\u80de\u81ea\u52a8\u673a\u9636\u6570\u5173\u4e8ep\u548ca\u7684\u4e00\u822c\u4e0a\u754c\uff0c\u5e76\u8bc1\u660e\u4e86\u5f53p\u662f\u62df\u5e38\u6570\u6a21\u5f0f\u65f6\u8be5\u4e0a\u754c\u53ef\u4ee5\u8fbe\u5230\u3002", "conclusion": "\u61d2\u60f0\u5143\u80de\u81ea\u52a8\u673a\u7684\u9636\u6570\u6027\u8d28\u53ef\u4ee5\u901a\u8fc7\u6d3b\u8dc3\u8f6c\u79fb\u6a21\u5f0fp\u548c\u56fa\u5b9a\u7b26\u53f7a\u6765\u523b\u753b\uff0c\u5728\u62df\u5e38\u6570\u6a21\u5f0f\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fbe\u5230\u7406\u8bba\u4e0a\u7684\u6700\u5927\u9636\u6570\u3002"}}
{"id": "2510.14036", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.14036", "abs": "https://arxiv.org/abs/2510.14036", "authors": ["Qiushi Wu", "Yue Xiao", "Dhilung Kirat", "Kevin Eykholt", "Jiyong Jang", "Douglas Lee Schales"], "title": "One Bug, Hundreds Behind: LLMs for Large-Scale Bug Discovery", "comment": null, "summary": "Fixing bugs in large programs is a challenging task that demands substantial\ntime and effort. Once a bug is found, it is reported to the project\nmaintainers, who work with the reporter to fix it and eventually close the\nissue. However, across the program, there are often similar code segments,\nwhich may also contain the bug, but were missed during discovery. Finding and\nfixing each recurring bug instance individually is labor intensive. Even more\nconcerning, bug reports can inadvertently widen the attack surface as they\nprovide attackers with an exploitable pattern that may be unresolved in other\nparts of the program.\n  In this paper, we explore these Recurring Pattern Bugs (RPBs) that appear\nrepeatedly across various code segments of a program or even in different\nprograms, stemming from a same root cause, but are unresolved. Our\ninvestigation reveals that RPBs are widespread and can significantly compromise\nthe security of software programs. This paper introduces BugStone, a program\nanalysis system empowered by LLVM and a Large Language Model (LLM). The key\nobservation is that many RPBs have one patched instance, which can be leveraged\nto identify a consistent error pattern, such as a specific API misuse. By\nexamining the entire program for this pattern, it is possible to identify\nsimilar sections of code that may be vulnerable. Starting with 135 unique RPBs,\nBugStone identified more than 22K new potential issues in the Linux kernel.\nManual analysis of 400 of these findings confirmed that 246 were valid. We also\ncreated a dataset from over 1.9K security bugs reported by 23 recent top-tier\nconference works. We manually annotate the dataset, identify 80 recurring\npatterns and 850 corresponding fixes. Even with a cost-efficient model choice,\nBugStone achieved 92.2% precision and 79.1% pairwise accuracy on the dataset.", "AI": {"tldr": "BugStone\u662f\u4e00\u4e2a\u57fa\u4e8eLLVM\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u7a0b\u5e8f\u5206\u6790\u7cfb\u7edf\uff0c\u7528\u4e8e\u68c0\u6d4b\u8f6f\u4ef6\u4e2d\u91cd\u590d\u51fa\u73b0\u7684\u6a21\u5f0f\u9519\u8bef(RPBs)\u3002\u8be5\u7cfb\u7edf\u5229\u7528\u5df2\u4fee\u590d\u7684\u9519\u8bef\u5b9e\u4f8b\u6765\u8bc6\u522b\u4e00\u81f4\u9519\u8bef\u6a21\u5f0f\uff0c\u7136\u540e\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u67e5\u627e\u76f8\u4f3c\u4ee3\u7801\u6bb5\u3002\u5728Linux\u5185\u6838\u4e2d\u53d1\u73b0\u4e8622K+\u6f5c\u5728\u95ee\u9898\uff0c\u9a8c\u8bc1\u4e86246\u4e2a\u6709\u6548\u9519\u8bef\u3002", "motivation": "\u5927\u578b\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u4fee\u590d\u8017\u65f6\u8017\u529b\uff0c\u4f46\u4fee\u590d\u4e00\u4e2a\u9519\u8bef\u540e\uff0c\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u8fd8\u5b58\u5728\u7c7b\u4f3c\u7684\u672a\u4fee\u590d\u9519\u8bef\u5b9e\u4f8b\u3002\u8fd9\u4e9b\u91cd\u590d\u6a21\u5f0f\u9519\u8bef(RPBs)\u4f1a\u6269\u5927\u653b\u51fb\u9762\uff0c\u56e0\u4e3a\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528\u5df2\u62a5\u544a\u4f46\u672a\u5728\u5176\u4ed6\u5730\u65b9\u4fee\u590d\u7684\u9519\u8bef\u6a21\u5f0f\u3002", "method": "BugStone\u7ed3\u5408LLVM\u7a0b\u5e8f\u5206\u6790\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff0c\u901a\u8fc7\u5206\u6790\u5df2\u4fee\u590d\u7684\u9519\u8bef\u5b9e\u4f8b\u6765\u8bc6\u522b\u4e00\u81f4\u9519\u8bef\u6a21\u5f0f(\u5982\u7279\u5b9aAPI\u8bef\u7528)\uff0c\u7136\u540e\u5728\u5168\u7a0b\u5e8f\u4e2d\u641c\u7d22\u76f8\u4f3c\u4ee3\u7801\u6bb5\u3002\u7cfb\u7edf\u4ece135\u4e2a\u72ec\u7279RPBs\u5f00\u59cb\uff0c\u6269\u5c55\u5230\u5927\u89c4\u6a21\u68c0\u6d4b\u3002", "result": "\u5728Linux\u5185\u6838\u4e2d\u8bc6\u522b\u4e86\u8d85\u8fc722,000\u4e2a\u6f5c\u5728\u95ee\u9898\uff0c\u624b\u52a8\u5206\u6790400\u4e2a\u53d1\u73b0\u4e2d\u6709246\u4e2a\u6709\u6548\u3002\u5728\u5305\u542b1.9K\u5b89\u5168\u9519\u8bef\u7684\u6570\u636e\u96c6\u4e0a\uff0cBugStone\u8fbe\u523092.2%\u7684\u7cbe\u786e\u5ea6\u548c79.1%\u7684\u6210\u5bf9\u51c6\u786e\u7387\u3002", "conclusion": "RPBs\u5728\u8f6f\u4ef6\u4e2d\u666e\u904d\u5b58\u5728\u4e14\u4e25\u91cd\u5f71\u54cd\u5b89\u5168\u6027\u3002BugStone\u8bc1\u660e\u4e86\u5229\u7528\u5df2\u4fee\u590d\u9519\u8bef\u5b9e\u4f8b\u6765\u68c0\u6d4b\u7c7b\u4f3c\u6f0f\u6d1e\u7684\u6709\u6548\u6027\uff0c\u4e3a\u5927\u89c4\u6a21\u8f6f\u4ef6\u5b89\u5168\u5206\u6790\u63d0\u4f9b\u4e86\u5b9e\u7528\u5de5\u5177\u3002"}}
{"id": "2510.14749", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.14749", "abs": "https://arxiv.org/abs/2510.14749", "authors": ["Kenji Saotome", "Koji Nakazawa"], "title": "Admissibility of Substitution Rule in Cyclic-Proof Systems", "comment": "20 pages, 4 figures(Including the derivation trees inserted within\n  the main text, there are 8 JPEG files)", "summary": "This paper investigates the admissibility of the substitution rule in\ncyclic-proof systems. The substitution rule complicates theoretical case\nanalysis and increases computational cost in proof search since every sequent\ncan be a conclusion of an instance of the substitution rule; hence,\nadmissibility is desirable on both fronts. While admissibility is often shown\nby local proof transformations in non-cyclic systems, such transformations may\ndisrupt cyclic structure and do not readily apply. Prior remarks suggested that\nthe substitution rule is likely nonadmissible in the cyclic-proof system\nCLKID^omega for first-order logic with inductive predicates. In this paper, we\nprove admissibility in CLKID^omega, assuming the presence of the cut rule. Our\napproach unfolds a cyclic proof into an infinitary form, lifts the substitution\nrules, and places back edges to construct a cyclic proof without the\nsubstitution rule. If we restrict substitutions to exclude function symbols,\nthe result extends to a broader class of systems, including cut-free\nCLKID^omega and cyclic-proof systems for the separation logic.", "AI": {"tldr": "\u672c\u6587\u8bc1\u660e\u4e86\u5728\u5faa\u73af\u8bc1\u660e\u7cfb\u7edfCLKID^\u03c9\u4e2d\uff0c\u5047\u8bbe\u5b58\u5728\u5207\u5272\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\uff0c\u66ff\u6362\u89c4\u5219\u662f\u53ef\u91c7\u7eb3\u7684\u3002\u901a\u8fc7\u5c06\u5faa\u73af\u8bc1\u660e\u5c55\u5f00\u4e3a\u65e0\u7a77\u5f62\u5f0f\uff0c\u63d0\u5347\u66ff\u6362\u89c4\u5219\uff0c\u5e76\u91cd\u65b0\u653e\u7f6e\u56de\u8fb9\u6765\u6784\u9020\u4e0d\u542b\u66ff\u6362\u89c4\u5219\u7684\u5faa\u73af\u8bc1\u660e\u3002", "motivation": "\u66ff\u6362\u89c4\u5219\u5728\u5faa\u73af\u8bc1\u660e\u7cfb\u7edf\u4e2d\u4f7f\u7406\u8bba\u6848\u4f8b\u5206\u6790\u590d\u6742\u5316\u5e76\u589e\u52a0\u8bc1\u660e\u641c\u7d22\u7684\u8ba1\u7b97\u6210\u672c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5e8f\u5217\u90fd\u53ef\u4ee5\u662f\u66ff\u6362\u89c4\u5219\u7684\u5b9e\u4f8b\u7684\u7ed3\u8bba\u3002\u56e0\u6b64\uff0c\u5728\u7406\u8bba\u548c\u8ba1\u7b97\u5c42\u9762\u90fd\u5e0c\u671b\u8bc1\u660e\u66ff\u6362\u89c4\u5219\u7684\u53ef\u91c7\u7eb3\u6027\u3002", "method": "\u5c06\u5faa\u73af\u8bc1\u660e\u5c55\u5f00\u4e3a\u65e0\u7a77\u5f62\u5f0f\uff0c\u63d0\u5347\u66ff\u6362\u89c4\u5219\uff0c\u7136\u540e\u91cd\u65b0\u653e\u7f6e\u56de\u8fb9\u6765\u6784\u9020\u4e0d\u542b\u66ff\u6362\u89c4\u5219\u7684\u5faa\u73af\u8bc1\u660e\u3002\u5982\u679c\u9650\u5236\u66ff\u6362\u4e2d\u4e0d\u5305\u542b\u51fd\u6570\u7b26\u53f7\uff0c\u8be5\u65b9\u6cd5\u8fd8\u53ef\u6269\u5c55\u5230\u66f4\u5e7f\u6cdb\u7684\u7cfb\u7edf\u3002", "result": "\u8bc1\u660e\u4e86\u5728CLKID^\u03c9\u7cfb\u7edf\u4e2d\uff08\u5047\u8bbe\u5b58\u5728\u5207\u5272\u89c4\u5219\uff09\u66ff\u6362\u89c4\u5219\u662f\u53ef\u91c7\u7eb3\u7684\u3002\u5f53\u9650\u5236\u66ff\u6362\u4e0d\u5305\u542b\u51fd\u6570\u7b26\u53f7\u65f6\uff0c\u8be5\u7ed3\u679c\u53ef\u6269\u5c55\u5230\u65e0\u5207\u5272CLKID^\u03c9\u548c\u5206\u79bb\u903b\u8f91\u7684\u5faa\u73af\u8bc1\u660e\u7cfb\u7edf\u3002", "conclusion": "\u901a\u8fc7\u5c06\u5faa\u73af\u8bc1\u660e\u5c55\u5f00\u4e3a\u65e0\u7a77\u5f62\u5f0f\u5e76\u91cd\u65b0\u6784\u9020\u56de\u8fb9\u7684\u65b9\u6cd5\uff0c\u6210\u529f\u8bc1\u660e\u4e86\u5faa\u73af\u8bc1\u660e\u7cfb\u7edf\u4e2d\u66ff\u6362\u89c4\u5219\u7684\u53ef\u91c7\u7eb3\u6027\uff0c\u8fd9\u4e00\u7ed3\u679c\u5bf9\u7406\u8bba\u548c\u8ba1\u7b97\u5c42\u9762\u90fd\u5177\u6709\u91cd\u8981\u610f\u4e49\u3002"}}
{"id": "2510.14115", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.14115", "abs": "https://arxiv.org/abs/2510.14115", "authors": ["Philipp Bauerfeind", "Amir Salarpour", "David Fernandez", "Pedram MohajerAnsari", "Johannes Reschke", "Mert D. Pes\u00e9"], "title": "David vs. Goliath: A comparative study of different-sized LLMs for code generation in the domain of automotive scenario generation", "comment": null, "summary": "Scenario simulation is central to testing autonomous driving systems. Scenic,\na domain-specific language (DSL) for CARLA, enables precise and reproducible\nscenarios, but NL-to-Scenic generation with large language models (LLMs)\nsuffers from scarce data, limited reproducibility, and inconsistent metrics. We\nintroduce NL2Scenic, an open dataset and framework with 146 NL/Scenic pairs, a\ndifficulty-stratified 30-case test split, an Example Retriever, and 14\nprompting variants (ZS, FS, CoT, SP, MoT). We evaluate 13 models: four\nproprietary (GPT-4o, GPT-5, Claude-Sonnet-4, Gemini-2.5-pro) and nine\nopen-source code models (Qwen2.5Coder 0.5B-32B; CodeLlama 7B/13B/34B), using\ntext metrics (BLEU, ChrF, EDIT-SIM, CrystalBLEU) and execution metrics\n(compilation and generation), and compare them with an expert study (n=11).\nEDIT-SIM correlates best with human judgments; we also propose EDIT-COMP (F1 of\nEDIT-SIM and compilation) as a robust dataset-level proxy that improves ranking\nfidelity. GPT-4o performs best overall, while Qwen2.5Coder-14B reaches about 88\npercent of its expert score on local hardware. Retrieval-augmented prompting,\nFew-Shot with Example Retriever (FSER), consistently boosts smaller models, and\nscaling shows diminishing returns beyond mid-size, with Qwen2.5Coder\noutperforming CodeLlama at comparable scales. NL2Scenic and EDIT-COMP offer a\nstandardized, reproducible basis for evaluating Scenic code generation and\nindicate that mid-size open-source models are practical, cost-effective options\nfor autonomous-driving scenario programming.", "AI": {"tldr": "NL2Scenic\u662f\u4e00\u4e2a\u7528\u4e8e\u8bc4\u4f30\u4ece\u81ea\u7136\u8bed\u8a00\u751f\u6210Scenic\u81ea\u52a8\u9a7e\u9a76\u573a\u666f\u4ee3\u7801\u7684\u6570\u636e\u96c6\u548c\u6846\u67b6\uff0c\u5305\u542b146\u4e2aNL/Scenic\u5bf9\u548c30\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8bc4\u4f30\u4e8613\u4e2a\u6a21\u578b\u5e76\u63d0\u51fa\u4e86EDIT-COMP\u4f5c\u4e3a\u4e0e\u4eba\u7c7b\u5224\u65ad\u76f8\u5173\u6027\u6700\u597d\u7684\u8bc4\u4f30\u6307\u6807\u3002", "motivation": "\u89e3\u51b3\u73b0\u6709NL-to-Scenic\u751f\u6210\u4e2d\u6570\u636e\u7a00\u7f3a\u3001\u53ef\u590d\u73b0\u6027\u5dee\u548c\u8bc4\u4f30\u6307\u6807\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\uff0c\u4e3a\u81ea\u52a8\u9a7e\u9a76\u573a\u666f\u7f16\u7a0b\u63d0\u4f9b\u6807\u51c6\u5316\u8bc4\u4f30\u57fa\u51c6\u3002", "method": "\u6784\u5efa\u5305\u542b146\u4e2aNL/Scenic\u5bf9\u7684\u6570\u636e\u96c6\uff0c\u8bbe\u8ba130\u4e2a\u96be\u5ea6\u5206\u5c42\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f7f\u7528Example Retriever\u548c14\u79cd\u63d0\u793a\u53d8\u4f53\uff0c\u8bc4\u4f3013\u4e2a\u6a21\u578b\uff084\u4e2a\u4e13\u6709\u6a21\u578b\u548c9\u4e2a\u5f00\u6e90\u4ee3\u7801\u6a21\u578b\uff09\uff0c\u4f7f\u7528\u6587\u672c\u6307\u6807\u548c\u6267\u884c\u6307\u6807\uff0c\u5e76\u4e0e\u4e13\u5bb6\u7814\u7a76\u6bd4\u8f83\u3002", "result": "EDIT-SIM\u4e0e\u4eba\u7c7b\u5224\u65ad\u76f8\u5173\u6027\u6700\u597d\uff0c\u63d0\u51fa\u7684EDIT-COMP\u6307\u6807\u63d0\u9ad8\u4e86\u6392\u540d\u4fdd\u771f\u5ea6\uff1bGPT-4o\u8868\u73b0\u6700\u4f73\uff0cQwen2.5Coder-14B\u8fbe\u5230\u517688%\u7684\u4e13\u5bb6\u5206\u6570\uff1b\u68c0\u7d22\u589e\u5f3a\u63d0\u793a\u80fd\u63d0\u5347\u5c0f\u6a21\u578b\u6027\u80fd\uff1b\u4e2d\u7b49\u89c4\u6a21\u5f00\u6e90\u6a21\u578b\u662f\u5b9e\u7528\u4e14\u7ecf\u6d4e\u7684\u9009\u62e9\u3002", "conclusion": "NL2Scenic\u548cEDIT-COMP\u4e3aScenic\u4ee3\u7801\u751f\u6210\u63d0\u4f9b\u4e86\u6807\u51c6\u5316\u3001\u53ef\u590d\u73b0\u7684\u8bc4\u4f30\u57fa\u7840\uff0c\u8868\u660e\u4e2d\u7b49\u89c4\u6a21\u5f00\u6e90\u6a21\u578b\u662f\u81ea\u52a8\u9a7e\u9a76\u573a\u666f\u7f16\u7a0b\u7684\u5b9e\u7528\u4e14\u7ecf\u6d4e\u6709\u6548\u7684\u9009\u62e9\u3002"}}
{"id": "2510.14292", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14292", "abs": "https://arxiv.org/abs/2510.14292", "authors": ["Haolin Pan", "Hongbin Zhang", "Mingjie Xing", "Yanjun Wu"], "title": "A Hybrid, Knowledge-Guided Evolutionary Framework for Personalized Compiler Auto-Tuning", "comment": null, "summary": "Compiler pass auto-tuning is critical for enhancing software performance, yet\nfinding the optimal pass sequence for a specific program is an NP-hard problem.\nTraditional, general-purpose optimization flags like -O3 and -Oz adopt a\none-size-fits-all approach, often failing to unlock a program's full\nperformance potential. To address this challenge, we propose a novel Hybrid,\nKnowledge-Guided Evolutionary Framework. This framework intelligently guides\nonline, personalized optimization using knowledge extracted from a large-scale\noffline analysis phase. During the offline stage, we construct a comprehensive\ncompilation knowledge base composed of four key components: (1) Pass Behavioral\nVectors to quantitatively capture the effectiveness of each optimization; (2)\nPass Groups derived from clustering these vectors based on behavior similarity;\n(3) a Synergy Pass Graph to model beneficial sequential interactions; and (4) a\nlibrary of Prototype Pass Sequences evolved for distinct program types. In the\nonline stage, a bespoke genetic algorithm leverages this rich knowledge base\nthrough specially designed, knowledge-infused genetic operators. These\noperators transform the search by performing semantically-aware recombination\nand targeted, restorative mutations. On a suite of seven public datasets, our\nframework achieves an average of 11.0% additional LLVM IR instruction reduction\nover the highly-optimized opt -Oz baseline, demonstrating its state-of-the-art\ncapability in discovering personalized, high-performance optimization\nsequences.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u6df7\u5408\u77e5\u8bc6\u5f15\u5bfc\u8fdb\u5316\u6846\u67b6\uff0c\u901a\u8fc7\u79bb\u7ebf\u6784\u5efa\u7f16\u8bd1\u77e5\u8bc6\u5e93\u548c\u5728\u7ebf\u4f7f\u7528\u77e5\u8bc6\u589e\u5f3a\u7684\u9057\u4f20\u7b97\u6cd5\uff0c\u81ea\u52a8\u4f18\u5316\u7f16\u8bd1\u5668pass\u5e8f\u5217\uff0c\u76f8\u6bd4-Oz\u57fa\u51c6\u5e73\u5747\u51cf\u5c1111.0%\u7684LLVM IR\u6307\u4ee4\u3002", "motivation": "\u4f20\u7edf\u7f16\u8bd1\u5668\u4f18\u5316\u6807\u5fd7\uff08\u5982-O3\u3001-Oz\uff09\u91c7\u7528\u4e00\u5200\u5207\u65b9\u6cd5\uff0c\u65e0\u6cd5\u5145\u5206\u53d1\u6325\u7a0b\u5e8f\u6027\u80fd\u6f5c\u529b\u3002\u7f16\u8bd1\u5668pass\u5e8f\u5217\u4f18\u5316\u662fNP\u96be\u95ee\u9898\uff0c\u9700\u8981\u66f4\u667a\u80fd\u7684\u4e2a\u6027\u5316\u4f18\u5316\u65b9\u6cd5\u3002", "method": "\u6df7\u5408\u77e5\u8bc6\u5f15\u5bfc\u8fdb\u5316\u6846\u67b6\uff1a\u79bb\u7ebf\u9636\u6bb5\u6784\u5efa\u5305\u542bpass\u884c\u4e3a\u5411\u91cf\u3001pass\u5206\u7ec4\u3001\u534f\u540cpass\u56fe\u548c\u539f\u578bpass\u5e8f\u5217\u7684\u77e5\u8bc6\u5e93\uff1b\u5728\u7ebf\u9636\u6bb5\u4f7f\u7528\u77e5\u8bc6\u589e\u5f3a\u7684\u9057\u4f20\u7b97\u6cd5\u8fdb\u884c\u8bed\u4e49\u611f\u77e5\u91cd\u7ec4\u548c\u5b9a\u5411\u4fee\u590d\u7a81\u53d8\u3002", "result": "\u57287\u4e2a\u516c\u5f00\u6570\u636e\u96c6\u4e0a\uff0c\u76f8\u6bd4\u9ad8\u5ea6\u4f18\u5316\u7684opt -Oz\u57fa\u51c6\uff0c\u5e73\u5747\u989d\u5916\u51cf\u5c1111.0%\u7684LLVM IR\u6307\u4ee4\uff0c\u5c55\u73b0\u4e86\u53d1\u73b0\u4e2a\u6027\u5316\u9ad8\u6027\u80fd\u4f18\u5316\u5e8f\u5217\u7684\u6700\u5148\u8fdb\u80fd\u529b\u3002", "conclusion": "\u8be5\u6846\u67b6\u901a\u8fc7\u7ed3\u5408\u79bb\u7ebf\u77e5\u8bc6\u63d0\u53d6\u548c\u5728\u7ebf\u8fdb\u5316\u641c\u7d22\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u7f16\u8bd1\u5668pass\u5e8f\u5217\u4f18\u5316\u7684NP\u96be\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002"}}
{"id": "2510.14339", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14339", "abs": "https://arxiv.org/abs/2510.14339", "authors": ["Jialu Zhang", "Jialiang Gu", "Wangmeiyu Zhang", "Jos\u00e9 Pablo Cambronero", "John Kolesar", "Ruzica Piskac", "Daming Li", "Hanyuan Shi"], "title": "A Systematic Study of Time Limit Exceeded Errors in Online Programming Assignments", "comment": null, "summary": "Online programming platforms such as Codeforces and LeetCode attract millions\nof users seeking to learn to program or refine their skills for industry\ninterviews. A major challenge for these users is the Time Limit Exceeded (TLE)\nerror, triggered when a program exceeds the execution time bound. Although\ndesigned as a performance safeguard, TLE errors are difficult to resolve: error\nmessages provide no diagnostic insight, platform support is minimal, and\nexisting debugging tools offer little help. As a result, many users abandon\ntheir submissions after repeated TLE failures.\n  This paper presents the first large-scale empirical study of TLE errors in\nonline programming. We manually analyzed 1000 Codeforces submissions with TLE\nerrors, classified their root causes, and traced how users attempted to fix\nthem. Our analysis shows that TLE errors often arise not only from inefficient\nalgorithms but also from infinite loops, improper data structure use, and\ninefficient I/O, challenging the conventional view that TLEs are purely\nperformance issues.\n  Guided by these findings, we introduce Nettle, the first automated repair\ntool specifically designed for TLE errors, and Nettle-Eval, the first framework\nfor evaluating TLE repairs. Integrating LLMs with targeted automated feedback\ngenerated by the compiler and test cases, Nettle produces small, correct code\nedits that eliminate TLEs while preserving functionality. Evaluated on the same\n1000 real-world cases, Nettle achieves a 98.5% fix rate, far exceeding the\nstrongest LLM baseline, and all of its repairs pass both Nettle-Eval and the\nplatform's official checker, confirming the reliability of our framework.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u9996\u4e2a\u9488\u5bf9\u5728\u7ebf\u7f16\u7a0b\u4e2dTLE\u9519\u8bef\u7684\u5927\u89c4\u6a21\u5b9e\u8bc1\u7814\u7a76\uff0c\u5f00\u53d1\u4e86\u81ea\u52a8\u5316\u4fee\u590d\u5de5\u5177Nettle\u548c\u8bc4\u4f30\u6846\u67b6Nettle-Eval\uff0c\u663e\u8457\u63d0\u5347\u4e86TLE\u9519\u8bef\u7684\u4fee\u590d\u6210\u529f\u7387\u3002", "motivation": "\u5728\u7ebf\u7f16\u7a0b\u5e73\u53f0\u4e0a\u7684\u65f6\u95f4\u9650\u5236\u8d85\u51fa(TLE)\u9519\u8bef\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff0c\u9519\u8bef\u4fe1\u606f\u7f3a\u4e4f\u8bca\u65ad\u6d1e\u5bdf\uff0c\u5e73\u53f0\u652f\u6301\u6709\u9650\uff0c\u5bfc\u81f4\u8bb8\u591a\u7528\u6237\u653e\u5f03\u63d0\u4ea4\u3002", "method": "\u624b\u52a8\u5206\u67901000\u4e2aCodeforces\u7684TLE\u63d0\u4ea4\uff0c\u5206\u7c7b\u6839\u672c\u539f\u56e0\uff1b\u5f00\u53d1Nettle\u5de5\u5177\uff0c\u7ed3\u5408LLM\u3001\u7f16\u8bd1\u5668\u53cd\u9988\u548c\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u81ea\u52a8\u5316\u4fee\u590d\uff1b\u521b\u5efaNettle-Eval\u8bc4\u4f30\u6846\u67b6\u3002", "result": "TLE\u9519\u8bef\u4e0d\u4ec5\u6e90\u4e8e\u4f4e\u6548\u7b97\u6cd5\uff0c\u8fd8\u5305\u62ec\u65e0\u9650\u5faa\u73af\u3001\u6570\u636e\u7ed3\u6784\u4f7f\u7528\u4e0d\u5f53\u548cI/O\u4f4e\u6548\uff1bNettle\u57281000\u4e2a\u771f\u5b9e\u6848\u4f8b\u4e2d\u8fbe\u523098.5%\u7684\u4fee\u590d\u7387\uff0c\u8fdc\u8d85LLM\u57fa\u7ebf\u3002", "conclusion": "TLE\u9519\u8bef\u5177\u6709\u591a\u6837\u6027\uff0cNettle\u5de5\u5177\u80fd\u6709\u6548\u81ea\u52a8\u5316\u4fee\u590dTLE\u9519\u8bef\uff0c\u5176\u4fee\u590d\u5747\u901a\u8fc7\u5b98\u65b9\u68c0\u67e5\u5668\u9a8c\u8bc1\uff0c\u8bc1\u660e\u4e86\u6846\u67b6\u7684\u53ef\u9760\u6027\u3002"}}
{"id": "2510.14341", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14341", "abs": "https://arxiv.org/abs/2510.14341", "authors": ["Xu He", "Shu Wang", "Kun Sun"], "title": "PathFix: Automated Program Repair with Expected Path", "comment": "This is the author's version of a paper accepted at SecDev 2025\n  (IEEE)", "summary": "Automated program repair (APR) techniques are effective in fixing inevitable\ndefects in software, enhancing development efficiency and software robustness.\nHowever, due to the difficulty of generating precise specifications, existing\nAPR methods face two main challenges: generating too many plausible patch\ncandidates and overfitting them to partial test cases. To tackle these\nchallenges, we introduce a new APR method named PathFix, which leverages\npath-sensitive constraints extracted from correct execution paths to generate\npatches for repairing buggy code. It is based on one observation: if a buggy\nprogram is repairable, at least one expected path is supposed to replace the\nfault path in the patched program. PathFix operates in four main steps. First,\nit traces fault paths reaching the fault output in the buggy program. Second,\nit derives expected paths by analyzing the desired correct output on the\ncontrol flow graph, where an expected path defines how a feasible patch leads\nto the correct execution. Third, PathFix generates and evaluates patches by\nsolving state constraints along the expected path. Fourth, we validate the\ncorrectness of the generated patch. To further enhance repair performance and\nmitigate scalability issues introduced by path-sensitive analysis, we integrate\na large language model (LLM) into our framework. Experimental results show that\nPathFix outperforms existing solutions, particularly in handling complex\nprogram structures such as loops and recursion.", "AI": {"tldr": "PathFix\u662f\u4e00\u79cd\u65b0\u7684\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u65b9\u6cd5\uff0c\u901a\u8fc7\u4ece\u6b63\u786e\u6267\u884c\u8def\u5f84\u4e2d\u63d0\u53d6\u8def\u5f84\u654f\u611f\u7ea6\u675f\u6765\u751f\u6210\u8865\u4e01\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u751f\u6210\u8fc7\u591a\u5019\u9009\u8865\u4e01\u548c\u8fc7\u62df\u5408\u6d4b\u8bd5\u7528\u4f8b\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u65b9\u6cd5\u7531\u4e8e\u96be\u4ee5\u751f\u6210\u7cbe\u786e\u89c4\u8303\uff0c\u9762\u4e34\u751f\u6210\u8fc7\u591a\u5408\u7406\u8865\u4e01\u5019\u9009\u548c\u8fc7\u62df\u5408\u90e8\u5206\u6d4b\u8bd5\u7528\u4f8b\u7684\u6311\u6218\u3002", "method": "PathFix\u91c7\u7528\u56db\u6b65\u6cd5\uff1a\u8ffd\u8e2a\u9519\u8bef\u8def\u5f84\u3001\u63a8\u5bfc\u671f\u671b\u8def\u5f84\u3001\u901a\u8fc7\u89e3\u51b3\u72b6\u6001\u7ea6\u675f\u751f\u6210\u548c\u8bc4\u4f30\u8865\u4e01\u3001\u9a8c\u8bc1\u8865\u4e01\u6b63\u786e\u6027\u3002\u8fd8\u96c6\u6210\u5927\u8bed\u8a00\u6a21\u578b\u63d0\u5347\u4fee\u590d\u6027\u80fd\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793aPathFix\u4f18\u4e8e\u73b0\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u7279\u522b\u662f\u5728\u5904\u7406\u5faa\u73af\u548c\u9012\u5f52\u7b49\u590d\u6742\u7a0b\u5e8f\u7ed3\u6784\u65b9\u9762\u8868\u73b0\u7a81\u51fa\u3002", "conclusion": "PathFix\u901a\u8fc7\u8def\u5f84\u654f\u611f\u7ea6\u675f\u548cLLM\u96c6\u6210\uff0c\u6709\u6548\u63d0\u5347\u4e86\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u7684\u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\u3002"}}
{"id": "2510.14465", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14465", "abs": "https://arxiv.org/abs/2510.14465", "authors": ["Adem Ait", "Gwendal Jouneaux", "Javier Luis C\u00e1novas Izquierdo", "Jordi Cabot"], "title": "Towards Automated Governance: A DSL for Human-Agent Collaboration in Software Projects", "comment": "Accepted in the 40th IEEE/ACM International Conference on Automated\n  Software Engineering, ASE 2025", "summary": "The stakeholders involved in software development are becoming increasingly\ndiverse, with both human contributors from varied backgrounds and AI-powered\nagents collaborating together in the process. This situation presents unique\ngovernance challenges, particularly in Open-Source Software (OSS) projects,\nwhere explicit policies are often lacking or unclear. This paper presents the\nvision and foundational concepts for a novel Domain-Specific Language (DSL)\ndesigned to define and enforce rich governance policies in systems involving\ndiverse stakeholders, including agents. This DSL offers a pathway towards more\nrobust, adaptable, and ultimately automated governance, paving the way for more\neffective collaboration in software projects, especially OSS ones.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u65b0\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00(DSL)\uff0c\u7528\u4e8e\u5728\u6d89\u53ca\u591a\u6837\u5316\u5229\u76ca\u76f8\u5173\u8005\uff08\u5305\u62ecAI\u4ee3\u7406\uff09\u7684\u8f6f\u4ef6\u9879\u76ee\u4e2d\u5b9a\u4e49\u548c\u6267\u884c\u6cbb\u7406\u653f\u7b56\u3002", "motivation": "\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5229\u76ca\u76f8\u5173\u8005\u65e5\u76ca\u591a\u6837\u5316\uff0c\u5305\u62ec\u6765\u81ea\u4e0d\u540c\u80cc\u666f\u7684\u4eba\u7c7b\u8d21\u732e\u8005\u548cAI\u4ee3\u7406\uff0c\u8fd9\u5728\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u4e2d\u5e26\u6765\u4e86\u72ec\u7279\u7684\u6cbb\u7406\u6311\u6218\uff0c\u56e0\u4e3a\u660e\u786e\u7684\u653f\u7b56\u5f80\u5f80\u7f3a\u4e4f\u6216\u4e0d\u6e05\u6670\u3002", "method": "\u8bbe\u8ba1\u4e00\u79cd\u9886\u57df\u7279\u5b9a\u8bed\u8a00(DSL)\uff0c\u80fd\u591f\u5b9a\u4e49\u548c\u6267\u884c\u4e30\u5bcc\u7684\u6cbb\u7406\u653f\u7b56\uff0c\u652f\u6301\u5728\u591a\u6837\u5316\u5229\u76ca\u76f8\u5173\u8005\u7cfb\u7edf\u4e2d\u7684\u6cbb\u7406\u9700\u6c42\u3002", "result": "\u8be5DSL\u4e3a\u5b9e\u73b0\u66f4\u5f3a\u5927\u3001\u9002\u5e94\u6027\u66f4\u5f3a\u4e14\u6700\u7ec8\u81ea\u52a8\u5316\u7684\u6cbb\u7406\u63d0\u4f9b\u4e86\u9014\u5f84\u3002", "conclusion": "\u8fd9\u79cdDSL\u4e3a\u8f6f\u4ef6\u9879\u76ee\uff08\u7279\u522b\u662f\u5f00\u6e90\u9879\u76ee\uff09\u4e2d\u66f4\u6709\u6548\u7684\u534f\u4f5c\u94fa\u5e73\u4e86\u9053\u8def\u3002"}}
{"id": "2510.14509", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.14509", "abs": "https://arxiv.org/abs/2510.14509", "authors": ["Jingyao Liu", "Chen Huang", "Zhizhao Guan", "Wenqiang Lei", "Yang Deng"], "title": "E2Edev: Benchmarking Large Language Models in End-to-End Software Development Task", "comment": null, "summary": "E2EDev comprises (i) a fine-grained set of user requirements, (ii) {multiple\nBDD test scenarios with corresponding Python step implementations for each\nrequirement}, and (iii) a fully automated testing pipeline built on the Behave\nframework. To ensure its quality while reducing the annotation effort, E2EDev\nleverages our proposed Human-in-the-Loop Multi-Agent Annotation Framework\n(HITL-MAA). {By evaluating various E2ESD frameworks and LLM backbones with\nE2EDev}, our analysis reveals a persistent struggle to effectively solve these\ntasks, underscoring the critical need for more effective and cost-efficient\nE2ESD solutions. Our codebase and benchmark are publicly available at\nhttps://github.com/SCUNLP/E2EDev.", "AI": {"tldr": "E2EDev\u662f\u4e00\u4e2a\u7aef\u5230\u7aef\u8f6f\u4ef6\u5f00\u53d1\u57fa\u51c6\uff0c\u5305\u542b\u7ec6\u7c92\u5ea6\u7528\u6237\u9700\u6c42\u3001BDD\u6d4b\u8bd5\u573a\u666f\u548c\u81ea\u52a8\u5316\u6d4b\u8bd5\u6d41\u6c34\u7ebf\uff0c\u901a\u8fc7\u4eba\u673a\u534f\u540c\u591a\u667a\u80fd\u4f53\u6807\u6ce8\u6846\u67b6\u51cf\u5c11\u6807\u6ce8\u5de5\u4f5c\u91cf\uff0c\u8bc4\u4f30\u663e\u793a\u73b0\u6709E2ESD\u6846\u67b6\u5728\u89e3\u51b3\u8fd9\u4e9b\u4efb\u52a1\u65f6\u4ecd\u9762\u4e34\u6311\u6218\u3002", "motivation": "\u89e3\u51b3\u7aef\u5230\u7aef\u8f6f\u4ef6\u5f00\u53d1(E2ESD)\u4e2d\u7f3a\u4e4f\u9ad8\u8d28\u91cf\u57fa\u51c6\u7684\u95ee\u9898\uff0c\u540c\u65f6\u51cf\u5c11\u4eba\u5de5\u6807\u6ce8\u5de5\u4f5c\u91cf\uff0c\u4e3a\u8bc4\u4f30\u548c\u6539\u8fdbE2ESD\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u53ef\u9760\u5de5\u5177\u3002", "method": "\u63d0\u51faE2EDev\u57fa\u51c6\uff0c\u5305\u542b\u7ec6\u7c92\u5ea6\u9700\u6c42\u3001BDD\u6d4b\u8bd5\u573a\u666f\u548c\u81ea\u52a8\u5316\u6d4b\u8bd5\u6d41\u6c34\u7ebf\uff1b\u4f7f\u7528\u4eba\u673a\u534f\u540c\u591a\u667a\u80fd\u4f53\u6807\u6ce8\u6846\u67b6(HITL-MAA)\u786e\u4fdd\u8d28\u91cf\u5e76\u51cf\u5c11\u6807\u6ce8\u5de5\u4f5c\u91cf\uff1b\u8bc4\u4f30\u591a\u79cdE2ESD\u6846\u67b6\u548cLLM\u9aa8\u5e72\u6a21\u578b\u3002", "result": "\u8bc4\u4f30\u663e\u793a\u73b0\u6709E2ESD\u6846\u67b6\u5728\u89e3\u51b3\u8fd9\u4e9b\u4efb\u52a1\u65f6\u6301\u7eed\u9762\u4e34\u56f0\u96be\uff0c\u7a81\u663e\u4e86\u5bf9\u66f4\u6709\u6548\u548c\u6210\u672c\u6548\u76ca\u7684E2ESD\u89e3\u51b3\u65b9\u6848\u7684\u8feb\u5207\u9700\u6c42\u3002", "conclusion": "E2EDev\u4e3a\u7aef\u5230\u7aef\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u4e86\u9ad8\u8d28\u91cf\u57fa\u51c6\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u5f3a\u8c03\u4e86\u5f00\u53d1\u66f4\u6709\u6548E2ESD\u89e3\u51b3\u65b9\u6848\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2510.14625", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14625", "abs": "https://arxiv.org/abs/2510.14625", "authors": ["Mehrdad Saadatmand", "Abbas Khan", "Beatriz Marin", "Ana C. R Paiva", "Nele Van Asch", "Graham Moran", "Felix Cammaerts", "Monique Snoeck", "Alexandra Mendes"], "title": "Software Testing Education and Industry Needs - Report from the ENACTEST EU Project", "comment": "* The paper is going to appear in the proceedings of the 26th\n  International Conference on Product-Focused Software Process Improvement\n  (PROFES 2025). To cite the paper, please check and refer to the PROFES 2025\n  proceedings", "summary": "The evolving landscape of software development demands that software testers\ncontinuously adapt to new tools, practices, and acquire new skills. This study\ninvestigates software testing competency needs in industry, identifies\nknowledge gaps in current testing education, and highlights competencies and\ngaps not addressed in academic literature. This is done by conducting two focus\ngroup sessions and interviews with professionals across diverse domains,\nincluding railway industry, healthcare, and software consulting and performing\na curated small-scale scoping review. The study instrument, co-designed by\nmembers of the ENACTEST project consortium, was developed collaboratively and\nrefined through multiple iterations to ensure comprehensive coverage of\nindustry needs and educational gaps. In particular, by performing a thematic\nqualitative analysis, we report our findings and observations regarding:\nprofessional training methods, challenges in offering training in industry,\ndifferent ways of evaluating the quality of training, identified knowledge gaps\nwith respect to academic education and industry needs, future needs and trends\nin testing education, and knowledge transfer methods within companies. Finally,\nthe scoping review results confirm knowledge gaps in areas such as AI testing,\nsecurity testing and soft skills.", "AI": {"tldr": "\u8be5\u7814\u7a76\u8c03\u67e5\u4e86\u8f6f\u4ef6\u6d4b\u8bd5\u884c\u4e1a\u7684\u80fd\u529b\u9700\u6c42\uff0c\u8bc6\u522b\u4e86\u5f53\u524d\u6d4b\u8bd5\u6559\u80b2\u7684\u77e5\u8bc6\u5dee\u8ddd\uff0c\u5e76\u901a\u8fc7\u7126\u70b9\u5c0f\u7ec4\u3001\u8bbf\u8c08\u548c\u8303\u56f4\u7efc\u8ff0\u63ed\u793a\u4e86\u5b66\u672f\u6587\u732e\u4e2d\u672a\u6d89\u53ca\u7684\u80fd\u529b\u548c\u5dee\u8ddd\u3002", "motivation": "\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e0d\u65ad\u6f14\u53d8\u8981\u6c42\u6d4b\u8bd5\u4eba\u5458\u6301\u7eed\u9002\u5e94\u65b0\u5de5\u5177\u548c\u5b9e\u8df5\uff0c\u9700\u8981\u7814\u7a76\u884c\u4e1a\u4e2d\u7684\u6d4b\u8bd5\u80fd\u529b\u9700\u6c42\u4ee5\u53ca\u5f53\u524d\u6559\u80b2\u5b58\u5728\u7684\u77e5\u8bc6\u5dee\u8ddd\u3002", "method": "\u901a\u8fc7\u4e24\u4e2a\u7126\u70b9\u5c0f\u7ec4\u4f1a\u8bae\u548c\u5bf9\u591a\u4e2a\u9886\u57df\u4e13\u4e1a\u4eba\u58eb\u7684\u8bbf\u8c08\uff0c\u7ed3\u5408\u7cbe\u5fc3\u7b56\u5212\u7684\u5c0f\u89c4\u6a21\u8303\u56f4\u7efc\u8ff0\uff0c\u4f7f\u7528\u4e3b\u9898\u5b9a\u6027\u5206\u6790\u65b9\u6cd5\u8fdb\u884c\u7814\u7a76\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u4e13\u4e1a\u57f9\u8bad\u65b9\u6cd5\u3001\u884c\u4e1a\u57f9\u8bad\u6311\u6218\u3001\u57f9\u8bad\u8d28\u91cf\u8bc4\u4f30\u65b9\u5f0f\u3001\u5b66\u672f\u6559\u80b2\u4e0e\u884c\u4e1a\u9700\u6c42\u4e4b\u95f4\u7684\u77e5\u8bc6\u5dee\u8ddd\u3001\u6d4b\u8bd5\u6559\u80b2\u7684\u672a\u6765\u9700\u6c42\u548c\u8d8b\u52bf\uff0c\u4ee5\u53ca\u516c\u53f8\u5185\u90e8\u77e5\u8bc6\u8f6c\u79fb\u65b9\u6cd5\u7b49\u65b9\u9762\u7684\u95ee\u9898\u3002\u8303\u56f4\u7efc\u8ff0\u8bc1\u5b9e\u4e86AI\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u548c\u8f6f\u6280\u80fd\u7b49\u9886\u57df\u7684\u77e5\u8bc6\u5dee\u8ddd\u3002", "conclusion": "\u8f6f\u4ef6\u6d4b\u8bd5\u6559\u80b2\u9700\u8981\u66f4\u597d\u5730\u4e0e\u884c\u4e1a\u9700\u6c42\u5bf9\u63a5\uff0c\u7279\u522b\u662f\u5728\u65b0\u5174\u6280\u672f\u9886\u57df\u5982AI\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u548c\u8f6f\u6280\u80fd\u57f9\u517b\u65b9\u9762\u5b58\u5728\u663e\u8457\u7684\u77e5\u8bc6\u5dee\u8ddd\uff0c\u9700\u8981\u6539\u8fdb\u57f9\u8bad\u65b9\u6cd5\u548c\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\u3002"}}
{"id": "2510.14635", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.14635", "abs": "https://arxiv.org/abs/2510.14635", "authors": ["Qingyao Li", "Xinyi Dai", "Weiwen Liu", "Xiangyang Li", "Yasheng Wang", "Ruiming Tang", "Yong Yu", "Weinan Zhang"], "title": "ATGen: Adversarial Reinforcement Learning for Test Case Generation", "comment": null, "summary": "Large Language Models (LLMs) excel at code generation, yet their outputs\noften contain subtle bugs, for which effective test cases are a critical\nbottleneck. Existing test generation methods, whether based on prompting or\nsupervised fine-tuning, rely on static datasets. This imposes a\n``fixed-difficulty ceiling'', fundamentally limiting their ability to uncover\nnovel or more complex bugs beyond their training scope. To overcome this, we\nintroduce ATGen, a framework that trains a test case generator via adversarial\nreinforcement learning. ATGen pits a test generator against an adversarial code\ngenerator that continuously crafts harder bugs to evade the current policy.\nThis dynamic loop creates a curriculum of increasing difficulty challenging\ncurrent policy. The test generator is optimized via Reinforcement Learning (RL)\nto jointly maximize ``Output Accuracy'' and ``Attack Success'', enabling it to\nlearn a progressively stronger policy that breaks the fixed-difficulty ceiling\nof static training. Extensive experiments demonstrate that ATGen significantly\noutperforms state-of-the-art baselines. We further validate its practical\nutility, showing it serves as both a more effective filter for Best-of-N\ninference and a higher-quality reward source for training code generation\nmodels. Our work establishes a new, dynamic paradigm for improving the\nreliability of LLM-generated code.", "AI": {"tldr": "ATGen\u662f\u4e00\u4e2a\u901a\u8fc7\u5bf9\u6297\u6027\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u7684\u6846\u67b6\uff0c\u7a81\u7834\u9759\u6001\u6570\u636e\u96c6\u7684\u56fa\u5b9a\u96be\u5ea6\u9650\u5236\uff0c\u6301\u7eed\u751f\u6210\u66f4\u590d\u6742\u7684bug\u6765\u63d0\u5347\u6d4b\u8bd5\u6548\u679c\u3002", "motivation": "\u73b0\u6709\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\u4f9d\u8d56\u9759\u6001\u6570\u636e\u96c6\uff0c\u5b58\u5728\"\u56fa\u5b9a\u96be\u5ea6\u4e0a\u9650\"\uff0c\u65e0\u6cd5\u53d1\u73b0\u8d85\u51fa\u8bad\u7ec3\u8303\u56f4\u7684\u65b0\u9896\u6216\u590d\u6742bug\uff0c\u9650\u5236\u4e86LLM\u751f\u6210\u4ee3\u7801\u7684\u53ef\u9760\u6027\u63d0\u5347\u3002", "method": "\u91c7\u7528\u5bf9\u6297\u6027\u5f3a\u5316\u5b66\u4e60\u6846\u67b6\uff0c\u8ba9\u6d4b\u8bd5\u751f\u6210\u5668\u4e0e\u5bf9\u6297\u6027\u4ee3\u7801\u751f\u6210\u5668\u76f8\u4e92\u535a\u5f08\uff0c\u52a8\u6001\u521b\u5efa\u96be\u5ea6\u9012\u589e\u7684\u8bfe\u7a0b\uff0c\u901a\u8fc7RL\u4f18\u5316\u540c\u65f6\u6700\u5927\u5316\"\u8f93\u51fa\u51c6\u786e\u6027\"\u548c\"\u653b\u51fb\u6210\u529f\u7387\"\u3002", "result": "\u5b9e\u9a8c\u8868\u660eATGen\u663e\u8457\u4f18\u4e8e\u6700\u5148\u8fdb\u57fa\u7ebf\u65b9\u6cd5\uff0c\u65e2\u80fd\u4f5c\u4e3a\u66f4\u6709\u6548\u7684Best-of-N\u63a8\u7406\u8fc7\u6ee4\u5668\uff0c\u4e5f\u80fd\u4f5c\u4e3a\u8bad\u7ec3\u4ee3\u7801\u751f\u6210\u6a21\u578b\u7684\u66f4\u9ad8\u8d28\u91cf\u5956\u52b1\u6e90\u3002", "conclusion": "ATGen\u5efa\u7acb\u4e86\u4e00\u79cd\u65b0\u7684\u52a8\u6001\u8303\u5f0f\uff0c\u901a\u8fc7\u6301\u7eed\u63d0\u5347\u6d4b\u8bd5\u96be\u5ea6\u6765\u6539\u8fdbLLM\u751f\u6210\u4ee3\u7801\u7684\u53ef\u9760\u6027\uff0c\u7a81\u7834\u4e86\u9759\u6001\u8bad\u7ec3\u7684\u5c40\u9650\u6027\u3002"}}
{"id": "2510.14653", "categories": ["cs.SE", "cs.RO"], "pdf": "https://arxiv.org/pdf/2510.14653", "abs": "https://arxiv.org/abs/2510.14653", "authors": ["Sven Tarlowski", "Lutz Eckstein"], "title": "Requirement Identification for Traffic Simulations in Driving Simulators", "comment": "2 Pages, 1 figure", "summary": "This paper addresses the challenge of ensuring realistic traffic conditions\nby proposing a methodology that systematically identifies traffic simulation\nrequirements. Using a structured approach based on sub-goals in each study\nphase, specific technical needs are derived for microscopic levels, agent\nmodels, and visual representation. The methodology aims to maintain a high\ndegree of fidelity, enhancing both the validity of experimental outcomes and\nparticipant engagement. By providing a clear link between study objectives and\ntraffic simulation design, this approach supports robust automotive development\nand testing.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7cfb\u7edf\u8bc6\u522b\u4ea4\u901a\u4eff\u771f\u9700\u6c42\u7684\u65b9\u6cd5\u8bba\uff0c\u901a\u8fc7\u7ed3\u6784\u5316\u65b9\u6cd5\u786e\u4fdd\u4ea4\u901a\u4eff\u771f\u7684\u771f\u5b9e\u6027\u548c\u6709\u6548\u6027\u3002", "motivation": "\u89e3\u51b3\u786e\u4fdd\u4ea4\u901a\u4eff\u771f\u771f\u5b9e\u6027\u7684\u6311\u6218\uff0c\u4e3a\u6c7d\u8f66\u5f00\u53d1\u548c\u6d4b\u8bd5\u63d0\u4f9b\u53ef\u9760\u7684\u4eff\u771f\u73af\u5883\u3002", "method": "\u57fa\u4e8e\u5404\u7814\u7a76\u9636\u6bb5\u7684\u5b50\u76ee\u6807\uff0c\u91c7\u7528\u7ed3\u6784\u5316\u65b9\u6cd5\u63a8\u5bfc\u5fae\u89c2\u5c42\u9762\u3001\u667a\u80fd\u4f53\u6a21\u578b\u548c\u89c6\u89c9\u8868\u793a\u7684\u5177\u4f53\u6280\u672f\u9700\u6c42\u3002", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u4fdd\u6301\u9ad8\u4fdd\u771f\u5ea6\uff0c\u63d0\u9ad8\u5b9e\u9a8c\u7ed3\u679c\u7684\u6548\u5ea6\u548c\u53c2\u4e0e\u8005\u53c2\u4e0e\u5ea6\u3002", "conclusion": "\u901a\u8fc7\u660e\u786e\u7814\u7a76\u76ee\u6807\u4e0e\u4ea4\u901a\u4eff\u771f\u8bbe\u8ba1\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u8be5\u65b9\u6cd5\u652f\u6301\u7a33\u5065\u7684\u6c7d\u8f66\u5f00\u53d1\u548c\u6d4b\u8bd5\u3002"}}
{"id": "2510.14700", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.14700", "abs": "https://arxiv.org/abs/2510.14700", "authors": ["Bin Liu", "Yanjie Zhao", "Guoai Xu", "Haoyu Wang"], "title": "LLM Agents for Automated Web Vulnerability Reproduction: Are We There Yet?", "comment": null, "summary": "Large language model (LLM) agents have demonstrated remarkable capabilities\nin software engineering and cybersecurity tasks, including code generation,\nvulnerability discovery, and automated testing. One critical but underexplored\napplication is automated web vulnerability reproduction, which transforms\nvulnerability reports into working exploits. Although recent advances suggest\npromising potential, challenges remain in applying LLM agents to real-world web\nvulnerability reproduction scenarios. In this paper, we present the first\ncomprehensive evaluation of state-of-the-art LLM agents for automated web\nvulnerability reproduction. We systematically assess 20 agents from software\nengineering, cybersecurity, and general domains across 16 dimensions, including\ntechnical capabilities, environment adaptability, and user experience factors,\non 3 representative web vulnerabilities. Based on the results, we select three\ntop-performing agents (OpenHands, SWE-agent, and CAI) for in-depth evaluation\non our benchmark dataset of 80 real-world CVEs spanning 7 vulnerability types\nand 6 web technologies. Our results reveal that while LLM agents achieve\nreasonable success on simple library-based vulnerabilities, they consistently\nfail on complex service-based vulnerabilities requiring multi-component\nenvironments. Complex environment configurations and authentication barriers\ncreate a gap where agents can execute exploit code but fail to trigger actual\nvulnerabilities. We observe high sensitivity to input guidance, with\nperformance degrading by over 33% under incomplete authentication information.\nOur findings highlight the significant gap between current LLM agent\ncapabilities and the demands of reliable automated vulnerability reproduction,\nemphasizing the need for advances in environmental adaptation and autonomous\nproblem-solving capabilities.", "AI": {"tldr": "\u672c\u6587\u9996\u6b21\u5168\u9762\u8bc4\u4f30\u4e86\u6700\u5148\u8fdb\u7684LLM\u4ee3\u7406\u5728\u81ea\u52a8\u5316Web\u6f0f\u6d1e\u590d\u73b0\u4e2d\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u867d\u7136LLM\u4ee3\u7406\u5728\u7b80\u5355\u6f0f\u6d1e\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u9700\u8981\u590d\u6742\u73af\u5883\u914d\u7f6e\u548c\u591a\u7ec4\u4ef6\u4ea4\u4e92\u7684\u590d\u6742\u6f0f\u6d1e\u4e0a\u5b58\u5728\u663e\u8457\u5dee\u8ddd\u3002", "motivation": "LLM\u4ee3\u7406\u5728\u8f6f\u4ef6\u5de5\u7a0b\u548c\u7f51\u7edc\u5b89\u5168\u4efb\u52a1\u4e2d\u5c55\u73b0\u51fa\u5f3a\u5927\u80fd\u529b\uff0c\u4f46\u81ea\u52a8\u5316Web\u6f0f\u6d1e\u590d\u73b0\u8fd9\u4e00\u5173\u952e\u5e94\u7528\u5c1a\u672a\u5f97\u5230\u5145\u5206\u63a2\u7d22\u3002\u672c\u6587\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u8bc4\u4f30LLM\u4ee3\u7406\u5728\u771f\u5b9e\u4e16\u754cWeb\u6f0f\u6d1e\u590d\u73b0\u573a\u666f\u4e2d\u7684\u5b9e\u9645\u8868\u73b0\u3002", "method": "\u7cfb\u7edf\u8bc4\u4f30\u4e8620\u4e2a\u6765\u81ea\u4e0d\u540c\u9886\u57df\u7684LLM\u4ee3\u7406\u572816\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u8868\u73b0\uff0c\u5305\u62ec\u6280\u672f\u80fd\u529b\u3001\u73af\u5883\u9002\u5e94\u6027\u548c\u7528\u6237\u4f53\u9a8c\u56e0\u7d20\uff0c\u5e76\u57283\u4e2a\u4ee3\u8868\u6027Web\u6f0f\u6d1e\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002\u968f\u540e\u9009\u62e93\u4e2a\u8868\u73b0\u6700\u4f73\u7684\u4ee3\u7406\u5728\u5305\u542b80\u4e2a\u771f\u5b9e\u4e16\u754cCVE\u7684\u57fa\u51c6\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u6df1\u5165\u8bc4\u4f30\u3002", "result": "LLM\u4ee3\u7406\u5728\u7b80\u5355\u7684\u57fa\u4e8e\u5e93\u7684\u6f0f\u6d1e\u4e0a\u53d6\u5f97\u4e86\u5408\u7406\u6210\u529f\uff0c\u4f46\u5728\u9700\u8981\u591a\u7ec4\u4ef6\u73af\u5883\u7684\u590d\u6742\u57fa\u4e8e\u670d\u52a1\u7684\u6f0f\u6d1e\u4e0a\u6301\u7eed\u5931\u8d25\u3002\u590d\u6742\u7684\u73af\u5883\u914d\u7f6e\u548c\u8ba4\u8bc1\u969c\u788d\u5bfc\u81f4\u4ee3\u7406\u80fd\u591f\u6267\u884c\u5229\u7528\u4ee3\u7801\u4f46\u65e0\u6cd5\u89e6\u53d1\u5b9e\u9645\u6f0f\u6d1e\u3002\u5728\u8ba4\u8bc1\u4fe1\u606f\u4e0d\u5b8c\u6574\u65f6\uff0c\u6027\u80fd\u4e0b\u964d\u8d85\u8fc733%\u3002", "conclusion": "\u5f53\u524dLLM\u4ee3\u7406\u80fd\u529b\u4e0e\u53ef\u9760\u81ea\u52a8\u5316\u6f0f\u6d1e\u590d\u73b0\u9700\u6c42\u4e4b\u95f4\u5b58\u5728\u663e\u8457\u5dee\u8ddd\uff0c\u9700\u8981\u5728\u73af\u5883\u9002\u5e94\u6027\u548c\u81ea\u4e3b\u95ee\u9898\u89e3\u51b3\u80fd\u529b\u65b9\u9762\u53d6\u5f97\u8fdb\u5c55\u3002"}}
{"id": "2510.14778", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.14778", "abs": "https://arxiv.org/abs/2510.14778", "authors": ["Maor Reuben", "Ido Mendel", "Or Feldman", "Moshe Kravchik", "Mordehai Guri", "Rami Puzis"], "title": "Leveraging Code Cohesion Analysis to Identify Source Code Supply Chain Attacks", "comment": null, "summary": "Supply chain attacks significantly threaten software security with malicious\ncode injections within legitimate projects. Such attacks are very rare but may\nhave a devastating impact. Detecting spurious code injections using automated\ntools is further complicated as it often requires deciphering the intention of\nboth the inserted code and its context. In this study, we propose an\nunsupervised approach for highlighting spurious code injections by quantifying\ncohesion disruptions in the source code. Using a name-prediction-based cohesion\n(NPC) metric, we analyze how function cohesion changes when malicious code is\nintroduced compared to natural cohesion fluctuations. An analysis of 54,707\nfunctions over 369 open-source C++ repositories reveals that code injection\nreduces cohesion and shifts naming patterns toward shorter, less descriptive\nnames compared to genuine function updates. Considering the sporadic nature of\nreal supply-chain attacks, we evaluate the proposed method with extreme\ntest-set imbalance and show that monitoring high-cohesion functions with NPC\ncan effectively detect functions with injected code, achieving a Precision@100\nof 36.41% at a 1:1,000 ratio and 12.47% at 1:10,000. These results suggest that\nautomated cohesion measurements, in general, and name-prediction-based\ncohesion, in particular, may help identify supply chain attacks, improving\nsource code integrity.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u57fa\u4e8e\u547d\u540d\u9884\u6d4b\u7684\u5185\u805a\u5ea6\uff08NPC\uff09\u6307\u6807\u7684\u65e0\u76d1\u7763\u65b9\u6cd5\uff0c\u901a\u8fc7\u91cf\u5316\u6e90\u4ee3\u7801\u4e2d\u7684\u5185\u805a\u5ea6\u7834\u574f\u6765\u68c0\u6d4b\u6076\u610f\u4ee3\u7801\u6ce8\u5165\u3002", "motivation": "\u4f9b\u5e94\u94fe\u653b\u51fb\u901a\u8fc7\u5408\u6cd5\u9879\u76ee\u4e2d\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e25\u91cd\u5a01\u80c1\u8f6f\u4ef6\u5b89\u5168\uff0c\u8fd9\u7c7b\u653b\u51fb\u867d\u7136\u7f55\u89c1\u4f46\u7834\u574f\u6027\u6781\u5927\uff0c\u9700\u8981\u81ea\u52a8\u5316\u5de5\u5177\u6765\u68c0\u6d4b\u610f\u56fe\u6a21\u7cca\u7684\u4ee3\u7801\u6ce8\u5165\u3002", "method": "\u4f7f\u7528\u57fa\u4e8e\u547d\u540d\u9884\u6d4b\u7684\u5185\u805a\u5ea6\u6307\u6807\u5206\u6790\u51fd\u6570\u5185\u805a\u5ea6\u53d8\u5316\uff0c\u6bd4\u8f83\u6076\u610f\u4ee3\u7801\u6ce8\u5165\u4e0e\u81ea\u7136\u4ee3\u7801\u66f4\u65b0\u65f6\u7684\u5185\u805a\u5ea6\u6ce2\u52a8\u5dee\u5f02\u3002", "result": "\u572854,707\u4e2a\u51fd\u6570\u548c369\u4e2a\u5f00\u6e90C++\u4ed3\u5e93\u7684\u5206\u6790\u4e2d\uff0c\u4ee3\u7801\u6ce8\u5165\u4f1a\u964d\u4f4e\u5185\u805a\u5ea6\u5e76\u4f7f\u547d\u540d\u6a21\u5f0f\u8f6c\u5411\u66f4\u77ed\u3001\u63cf\u8ff0\u6027\u66f4\u5dee\u7684\u540d\u79f0\u3002\u5728\u6781\u7aef\u4e0d\u5e73\u8861\u6d4b\u8bd5\u96c6\u4e0b\uff0cNPC\u65b9\u6cd5\u57281:1000\u6bd4\u4f8b\u4e0b\u8fbe\u523036.41%\u7684Precision@100\uff0c\u57281:10000\u6bd4\u4f8b\u4e0b\u8fbe\u523012.47%\u3002", "conclusion": "\u81ea\u52a8\u5316\u7684\u5185\u805a\u5ea6\u6d4b\u91cf\uff0c\u7279\u522b\u662f\u57fa\u4e8e\u547d\u540d\u9884\u6d4b\u7684\u5185\u805a\u5ea6\uff0c\u6709\u52a9\u4e8e\u8bc6\u522b\u4f9b\u5e94\u94fe\u653b\u51fb\uff0c\u63d0\u9ad8\u6e90\u4ee3\u7801\u5b8c\u6574\u6027\u3002"}}
{"id": "2510.14928", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.14928", "abs": "https://arxiv.org/abs/2510.14928", "authors": ["Eric Christopher", "Kevin Crossan", "Wolff Dobson", "Chris Kennelly", "Drew Lewis", "Kun Lin", "Martin Maas", "Parthasarathy Ranganathan", "Emma Rapati", "Brian Yang"], "title": "Instruction Set Migration at Warehouse Scale", "comment": null, "summary": "Migrating codebases from one instruction set architecture (ISA) to another is\na major engineering challenge. A recent example is the adoption of Arm (in\naddition to x86) across the major Cloud hyperscalers. Yet, this problem has\nseen limited attention by the academic community. Most work has focused on\nstatic and dynamic binary translation, and the traditional conventional wisdom\nhas been that this is the primary challenge.\n  In this paper, we show that this is no longer the case. Modern ISA migrations\ncan often build on a robust open-source ecosystem, making it possible to\nrecompile all relevant software from scratch. This introduces a new and\nmultifaceted set of challenges, which are different from binary translation.\n  By analyzing a large-scale migration from x86 to Arm at Google, spanning\nalmost 40,000 code commits, we derive a taxonomy of tasks involved in ISA\nmigration. We show how Google automated many of the steps involved, and\ndemonstrate how AI can play a major role in automatically addressing these\ntasks. We identify tasks that remain challenging and highlight research\nchallenges that warrant further attention.", "AI": {"tldr": "\u672c\u6587\u5206\u6790\u4e86\u4ecex86\u5230Arm\u67b6\u6784\u7684\u5927\u89c4\u6a21\u4ee3\u7801\u8fc1\u79fb\u6311\u6218\uff0c\u53d1\u73b0\u73b0\u4ee3ISA\u8fc1\u79fb\u4e3b\u8981\u4f9d\u8d56\u91cd\u65b0\u7f16\u8bd1\u800c\u975e\u4e8c\u8fdb\u5236\u7ffb\u8bd1\uff0c\u5e76\u5c55\u793a\u4e86AI\u5728\u81ea\u52a8\u5316\u8fc1\u79fb\u8fc7\u7a0b\u4e2d\u7684\u91cd\u8981\u4f5c\u7528\u3002", "motivation": "\u4f20\u7edf\u89c2\u70b9\u8ba4\u4e3aISA\u8fc1\u79fb\u7684\u4e3b\u8981\u6311\u6218\u662f\u4e8c\u8fdb\u5236\u7ffb\u8bd1\uff0c\u4f46\u73b0\u4ee3\u5f00\u6e90\u751f\u6001\u7cfb\u7edf\u4f7f\u5f97\u91cd\u65b0\u7f16\u8bd1\u6210\u4e3a\u53ef\u80fd\uff0c\u8fd9\u5e26\u6765\u4e86\u65b0\u7684\u591a\u65b9\u9762\u6311\u6218\u3002", "method": "\u901a\u8fc7\u5206\u6790Google\u4ecex86\u5230Arm\u7684\u5927\u89c4\u6a21\u8fc1\u79fb\uff08\u6db5\u76d6\u8fd140,000\u4e2a\u4ee3\u7801\u63d0\u4ea4\uff09\uff0c\u63a8\u5bfc\u51faISA\u8fc1\u79fb\u4efb\u52a1\u5206\u7c7b\uff0c\u5e76\u5c55\u793a\u81ea\u52a8\u5316\u65b9\u6cd5\u548cAI\u7684\u5e94\u7528\u3002", "result": "\u8bc6\u522b\u4e86ISA\u8fc1\u79fb\u4e2d\u7684\u5173\u952e\u4efb\u52a1\uff0c\u8bc1\u660e\u4e86AI\u5728\u81ea\u52a8\u89e3\u51b3\u8fd9\u4e9b\u4efb\u52a1\u4e2d\u7684\u91cd\u8981\u4f5c\u7528\uff0c\u5e76\u5c55\u793a\u4e86Google\u7684\u81ea\u52a8\u5316\u8fc1\u79fb\u5b9e\u8df5\u3002", "conclusion": "\u73b0\u4ee3ISA\u8fc1\u79fb\u9762\u4e34\u4e0e\u4e8c\u8fdb\u5236\u7ffb\u8bd1\u4e0d\u540c\u7684\u65b0\u6311\u6218\uff0cAI\u6280\u672f\u5728\u5176\u4e2d\u53d1\u6325\u5173\u952e\u4f5c\u7528\uff0c\u4f46\u4ecd\u6709\u4e00\u4e9b\u6311\u6218\u6027\u4efb\u52a1\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u3002"}}

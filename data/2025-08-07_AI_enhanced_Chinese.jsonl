{"id": "2508.03830", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.03830", "abs": "https://arxiv.org/abs/2508.03830", "authors": ["Hanwen Guo", "Ben Greenman"], "title": "If-T: A Benchmark for Type Narrowing", "comment": null, "summary": "**Context:** The design of static type systems that can validate\ndynamically-typed programs (**gradually**) is an ongoing challenge. A key\ndifficulty is that dynamic code rarely follows datatype-driven design. Programs\ninstead use runtime tests to narrow down the proper usage of incoming data.\nType systems for dynamic languages thus need a **type narrowing** mechanism\nthat refines the type environment along individual control paths based on\ndominating tests, a form of flow-sensitive typing. In order to express\nrefinements, the type system must have some notion of sets and subsets. Since\nset-theoretic types are computationally and ergonomically complex, the need for\ntype narrowing raises design questions about how to balance precision and\nperformance. **Inquiry:** To date, the design of type narrowing systems has\nbeen driven by intuition, past experience, and examples from users in various\nlanguage communities. There is no standard that captures desirable and\nundesirable behaviors. Prior formalizations of narrowing are also significantly\nmore complex than a standard type system, and it is unclear how the extra\ncomplexity pays off in terms of concrete examples. This paper addresses the\nproblems through If-T, a language-agnostic **design benchmark** for type\nnarrowing that characterizes the abilities of implementations using simple\nprograms that draw attention to fundamental questions. Unlike a traditional\nperformance-focused benchmark, If-T measures a narrowing system's ability to\nvalidate correct code and reject incorrect code. Unlike a test suite, systems\nare not required to fully conform to If-T. Deviations are acceptable provided\nthey are justified by well-reasoned design considerations, such as compile-time\nperformance. **Approach:** If-T is guided by the literature on type narrowing,\nthe documentation of gradual languages such as TypeScript, and experiments with\ntypechecker implementations. We have identified a set of core technical\ndimensions for type narrowing. For each dimension, the benchmark contains a set\nof topics and (at least) two characterizing programs per topic: one that should\ntypecheck and one that should not typecheck. **Knowledge:** If-T provides a\nbaseline to measure type narrowing systems. For researchers, it provides\ncriteria to categorize future designs via its collection of positive and\nnegative examples. For language designers, the benchmark demonstrates the\npayoff of typechecker complexity in terms of concrete examples. Designers can\nuse the examples to decide whether supporting a particular example is\nworthwhile. Both the benchmark and its implementations are freely available\nonline. **Grounding:** We have implemented the benchmark for five typecheckers:\nTypeScript, Flow, Typed Racket, mypy, and Pyright. The results highlight\nimportant differences, such as the ability to track logical implications among\nprogram variables and typechecking for user-defined narrowing predicates.\n**Importance:** Type narrowing is essential for gradual type systems, but the\ntradeoffs between systems with different complexity have been unclear. If-T\nclarifies these tradeoffs by illustrating the benefits and limitations of each\nlevel of complexity. With If-T as a way to assess implementations in a fair,\ncross-language manner, future type system designs can strive for a better\nbalance among precision, annotation burden, and performance.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86If-T\uff0c\u4e00\u79cd\u8bed\u8a00\u65e0\u5173\u7684\u7c7b\u578b\u7ec6\u5316\u8bbe\u8ba1\u57fa\u51c6\uff0c\u7528\u4e8e\u8bc4\u4f30\u7c7b\u578b\u7ec6\u5316\u7cfb\u7edf\u7684\u80fd\u529b\uff0c\u901a\u8fc7\u7b80\u5355\u7a0b\u5e8f\u5c55\u793a\u5176\u4f18\u7f3a\u70b9\u3002", "motivation": "\u52a8\u6001\u7c7b\u578b\u4ee3\u7801\u901a\u5e38\u4f9d\u8d56\u8fd0\u884c\u65f6\u6d4b\u8bd5\u800c\u975e\u6570\u636e\u7c7b\u578b\u9a71\u52a8\u8bbe\u8ba1\uff0c\u56e0\u6b64\u9700\u8981\u7c7b\u578b\u7ec6\u5316\u673a\u5236\u3002\u73b0\u6709\u7cfb\u7edf\u7f3a\u4e4f\u7edf\u4e00\u6807\u51c6\uff0c\u8bbe\u8ba1\u590d\u6742\u4e14\u6548\u679c\u4e0d\u660e\u786e\u3002", "method": "\u57fa\u4e8e\u6587\u732e\u3001\u8bed\u8a00\u6587\u6863\u548c\u7c7b\u578b\u68c0\u67e5\u5668\u5b9e\u9a8c\uff0cIf-T\u5b9a\u4e49\u4e86\u6838\u5fc3\u6280\u672f\u7ef4\u5ea6\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u5305\u542b\u6b63\u53cd\u793a\u4f8b\u7a0b\u5e8f\u3002", "result": "If-T\u4e3a\u4e94\u79cd\u7c7b\u578b\u68c0\u67e5\u5668\uff08\u5982TypeScript\u3001Flow\u7b49\uff09\u63d0\u4f9b\u4e86\u57fa\u51c6\u6d4b\u8bd5\uff0c\u63ed\u793a\u4e86\u5b83\u4eec\u5728\u903b\u8f91\u63a8\u7406\u548c\u7528\u6237\u5b9a\u4e49\u8c13\u8bcd\u7b49\u65b9\u9762\u7684\u5dee\u5f02\u3002", "conclusion": "If-T\u4e3a\u7c7b\u578b\u7ec6\u5316\u7cfb\u7edf\u63d0\u4f9b\u4e86\u8bc4\u4f30\u6807\u51c6\uff0c\u5e2e\u52a9\u7814\u7a76\u8005\u548c\u8bbe\u8ba1\u8005\u5728\u7cbe\u5ea6\u3001\u6027\u80fd\u548c\u590d\u6742\u6027\u4e4b\u95f4\u627e\u5230\u5e73\u8861\u3002"}}
{"id": "2508.03831", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.03831", "abs": "https://arxiv.org/abs/2508.03831", "authors": ["Chinmayi Prabhu Baramashetru", "Paola Giannini", "Silvia Lizeth Tapia Tarifa", "Olaf Owe"], "title": "A Type System for Data Privacy Compliance in Active Object Languages", "comment": null, "summary": "Data protection laws such as GDPR aim to give users unprecedented control\nover their personal data. Compliance with these regulations requires\nsystematically considering information flow and interactions among entities\nhandling sensitive data. Privacy-by-design principles advocate embedding data\nprotection into system architectures as a default. However, translating these\nabstract principles into concrete, explicit methods remains a significant\nchallenge. This paper addresses this gap by proposing a language-based approach\nto privacy integration, combining static and runtime techniques. By employing\ntype checking and type inference in an active object language, the framework\nenables the tracking of authorised data flows and the automatic generation of\nconstraints checked at runtime based on user consent. This ensures that\npersonal data is processed in compliance with GDPR constraints. The key\ncontribution of this work is a type system that gather the compliance checks\nand the changes to users consent and integrates data privacy compliance\nverification into system execution. The paper demonstrates the feasibility of\nthis approach through a soundness proof and several examples, illustrating how\nthe proposed language addresses common GDPR requirements, such as user consent,\npurpose limitation, and data subject rights. This work advances the state of\nthe art in privacy-aware system design by offering a systematic and automated\nmethod for integrating GDPR compliance into programming languages. This\ncapability has implications for building trustworthy systems in domains such as\nhealthcare or finance, where data privacy is crucial.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8bed\u8a00\u7684\u9690\u79c1\u96c6\u6210\u65b9\u6cd5\uff0c\u7ed3\u5408\u9759\u6001\u548c\u8fd0\u884c\u65f6\u6280\u672f\uff0c\u901a\u8fc7\u7c7b\u578b\u68c0\u67e5\u548c\u63a8\u65ad\u786e\u4fddGDPR\u5408\u89c4\u6027\u3002", "motivation": "GDPR\u7b49\u6570\u636e\u4fdd\u62a4\u6cd5\u89c4\u8981\u6c42\u7cfb\u7edf\u5728\u8bbe\u8ba1\u65f6\u5d4c\u5165\u9690\u79c1\u4fdd\u62a4\uff0c\u4f46\u5c06\u62bd\u8c61\u539f\u5219\u8f6c\u5316\u4e3a\u5177\u4f53\u65b9\u6cd5\u4ecd\u5177\u6311\u6218\u6027\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u8bed\u8a00\u7684\u6846\u67b6\uff0c\u7ed3\u5408\u7c7b\u578b\u68c0\u67e5\u548c\u8fd0\u884c\u65f6\u7ea6\u675f\u751f\u6210\uff0c\u8ddf\u8e2a\u6388\u6743\u6570\u636e\u6d41\u5e76\u9a8c\u8bc1\u7528\u6237\u540c\u610f\u3002", "result": "\u901a\u8fc7\u7c7b\u578b\u7cfb\u7edf\u5b9e\u73b0\u5408\u89c4\u6027\u9a8c\u8bc1\uff0c\u5e76\u5c55\u793a\u4e86\u65b9\u6cd5\u7684\u53ef\u884c\u6027\uff0c\u6ee1\u8db3GDPR\u5e38\u89c1\u8981\u6c42\uff08\u5982\u7528\u6237\u540c\u610f\u3001\u76ee\u7684\u9650\u5236\uff09\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u4e3a\u9690\u79c1\u611f\u77e5\u7cfb\u7edf\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u533b\u7597\u3001\u91d1\u878d\u7b49\u5173\u952e\u9886\u57df\u3002"}}
{"id": "2508.03832", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.03832", "abs": "https://arxiv.org/abs/2508.03832", "authors": ["Andreas Pointner", "Josef Pichler", "Herbert Pr\u00e4hofer"], "title": "Generating Inputs for Grammar Mining using Dynamic Symbolic Execution", "comment": null, "summary": "A vast number of software systems include components that parse and process\nstructured input. In addition to programming languages, which are analyzed by\ncompilers or interpreters, there are numerous components that process\nstandardized or proprietary data formats of varying complexity. Even if such\ncomponents were initially developed and tested based on a specification, such\nas a grammar, numerous modifications and adaptations over the course of\nsoftware evolution can make it impossible to precisely determine which inputs\nthey actually accept. In this situation, grammar mining can be used to\nreconstruct the specification in the form of a grammar. Established approaches\nalready produce useful results, provided that sufficient input data is\navailable to fully cover the input language. However, achieving this\ncompleteness is a major challenge. In practice, only input data recorded during\nthe operation of the software systems is available. If this data is used for\ngrammar mining, the resulting grammar reflects only the actual processed inputs\nbut not the complete grammar of the input language accepted by the software\ncomponent. As a result, edge cases or previously supported features that no\nlonger appear in the available input data are missing from the generated\ngrammar. This work addresses this challenge by introducing a novel approach for\nthe automatic generation of inputs for grammar mining. Although input\ngenerators have already been used for fuzz testing, it remains unclear whether\nthey are also suitable for grammar miners. Building on the grammar miner Mimid,\nthis work presents a fully automated approach to input generation. The approach\nleverages Dynamic Symbolic Execution (DSE) and extends it with two mechanisms\nto overcome the limitations of DSE regarding structured input parsers. First,\nthe search for new inputs is guided by an iterative expansion that starts with\na single-character input and gradually extends it. Second, input generation is\nstructured into a novel three-phase approach, which separates the generation of\ninputs for parser functions. The proposed method was evaluated against a\ndiverse set of eleven benchmark applications from the existing literature.\nResults demonstrate that the approach achieves precision and recall for\nextracted grammars close to those derived from state-of-the-art grammar miners\nsuch as Mimid. Notably, it successfully uncovers subtle features and edge cases\nin parsers that are typically missed by such grammar miners. The effectiveness\nof the method is supported by empirical evidence, showing that it can achieve\nhigh performance in various domains without requiring prior input samples. This\ncontribution is significant for researchers and practitioners in software\nengineering, offering an automated, scalable, and precise solution for grammar\nmining. By eliminating the need for manual input generation, the approach not\nonly reduces workload but also enhances the robustness and comprehensiveness of\nthe extracted grammars. Following this approach, software engineers can\nreconstruct specification from existing (legacy) parsers.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u52a8\u6001\u7b26\u53f7\u6267\u884c\uff08DSE\uff09\u7684\u81ea\u52a8\u5316\u8f93\u5165\u751f\u6210\u65b9\u6cd5\uff0c\u7528\u4e8e\u6539\u8fdb\u8bed\u6cd5\u6316\u6398\u7684\u5b8c\u6574\u6027\u548c\u51c6\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u8bed\u6cd5\u6316\u6398\u65b9\u6cd5\u4f9d\u8d56\u8f93\u5165\u6570\u636e\u7684\u5b8c\u6574\u6027\uff0c\u4f46\u5b9e\u9645\u8fd0\u884c\u4e2d\u6570\u636e\u5f80\u5f80\u4e0d\u5b8c\u6574\uff0c\u5bfc\u81f4\u751f\u6210\u7684\u8bed\u6cd5\u9057\u6f0f\u8fb9\u7f18\u60c5\u51b5\u6216\u65e7\u529f\u80fd\u3002", "method": "\u7ed3\u5408DSE\uff0c\u91c7\u7528\u8fed\u4ee3\u6269\u5c55\u8f93\u5165\u548c\u5206\u4e09\u9636\u6bb5\u751f\u6210\u8f93\u5165\u7684\u65b9\u6cd5\uff0c\u514b\u670dDSE\u5728\u7ed3\u6784\u5316\u8f93\u5165\u89e3\u6790\u4e2d\u7684\u9650\u5236\u3002", "result": "\u572811\u4e2a\u57fa\u51c6\u5e94\u7528\u4e2d\u9a8c\u8bc1\uff0c\u8be5\u65b9\u6cd5\u751f\u6210\u7684\u8bed\u6cd5\u63a5\u8fd1\u73b0\u6709\u6700\u4f73\u8bed\u6cd5\u6316\u6398\u5de5\u5177\uff08\u5982Mimid\uff09\u7684\u7cbe\u5ea6\u548c\u53ec\u56de\u7387\uff0c\u5e76\u80fd\u53d1\u73b0\u66f4\u591a\u8fb9\u7f18\u60c5\u51b5\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u63d0\u4f9b\u4e86\u4e00\u79cd\u81ea\u52a8\u5316\u3001\u53ef\u6269\u5c55\u4e14\u7cbe\u786e\u7684\u8bed\u6cd5\u6316\u6398\u89e3\u51b3\u65b9\u6848\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u624b\u52a8\u8f93\u5165\u751f\u6210\u7684\u5de5\u4f5c\u91cf\u3002"}}
{"id": "2508.04115", "categories": ["cs.PL", "A.1; C.1.2; D.3.1; F.3.1; F.3.2"], "pdf": "https://arxiv.org/pdf/2508.04115", "abs": "https://arxiv.org/abs/2508.04115", "authors": ["Roger C. Su", "Robert J. Colvin"], "title": "Weak Memory Model Formalisms: Introduction and Survey", "comment": null, "summary": "Memory consistency models define the order in which accesses to shared memory\nin a concurrent system may be observed to occur. Such models are a necessity\nsince program order is not a reliable indicator of execution order, due to\nmicroarchitectural features or compiler transformations. Concurrent\nprogramming, already a challenging task, is thus made even harder when weak\nmemory effects must be addressed. A rigorous specification of weak memory\nmodels is therefore essential to make this problem tractable for developers of\nsafety- and security-critical, low-level software.\n  In this paper we survey the field of formalisations of weak memory models,\nincluding their specification, their effects on execution, and tools and\ninference systems for reasoning about code. To assist the discussion we also\nprovide an introduction to two styles of formal representation found commonly\nin the literature (using a much simplified version of Intel's x86 as the\nexample): a step-by-step construction of traces of the system (operational\nsemantics); and with respect to relations between memory events (axiomatic\nsemantics). The survey covers some long-standing hardware features that lead to\nobservable weak behaviours, a description of historical developments in\npractice and in theory, an overview of computability and complexity results,\nand outlines current and future directions in the field.", "AI": {"tldr": "\u672c\u6587\u7efc\u8ff0\u4e86\u5f31\u5185\u5b58\u6a21\u578b\u7684\u6b63\u5f0f\u5316\u7814\u7a76\uff0c\u5305\u62ec\u5176\u89c4\u8303\u3001\u6267\u884c\u5f71\u54cd\u53ca\u63a8\u7406\u5de5\u5177\uff0c\u5e76\u4ecb\u7ecd\u4e86\u4e24\u79cd\u5e38\u89c1\u7684\u8868\u793a\u65b9\u6cd5\u3002", "motivation": "\u7531\u4e8e\u5e76\u53d1\u7f16\u7a0b\u4e2d\u5f31\u5185\u5b58\u6548\u5e94\u589e\u52a0\u4e86\u5f00\u53d1\u96be\u5ea6\uff0c\u9700\u5bf9\u5176\u6a21\u578b\u8fdb\u884c\u4e25\u683c\u89c4\u8303\u4ee5\u652f\u6301\u5b89\u5168\u5173\u952e\u8f6f\u4ef6\u5f00\u53d1\u3002", "method": "\u901a\u8fc7\u64cd\u4f5c\u8bed\u4e49\u548c\u516c\u7406\u8bed\u4e49\u4e24\u79cd\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u7ed3\u5408\u7b80\u5316\u7248x86\u67b6\u6784\u793a\u4f8b\uff0c\u5206\u6790\u5f31\u5185\u5b58\u6a21\u578b\u7684\u89c4\u8303\u53ca\u5176\u5f71\u54cd\u3002", "result": "\u7efc\u8ff0\u6db5\u76d6\u4e86\u786c\u4ef6\u7279\u6027\u3001\u5386\u53f2\u53d1\u5c55\u3001\u7406\u8bba\u6210\u679c\u53ca\u672a\u6765\u65b9\u5411\uff0c\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u7814\u7a76\u89c6\u89d2\u3002", "conclusion": "\u5f31\u5185\u5b58\u6a21\u578b\u7684\u6b63\u5f0f\u5316\u7814\u7a76\u5bf9\u5f00\u53d1\u5b89\u5168\u5173\u952e\u8f6f\u4ef6\u81f3\u5173\u91cd\u8981\uff0c\u672a\u6765\u9700\u8fdb\u4e00\u6b65\u63a2\u7d22\u5176\u590d\u6742\u6027\u548c\u5e94\u7528\u3002"}}
{"id": "2508.03826", "categories": ["cs.FL", "F.1.1; F.4.2; F.4.3"], "pdf": "https://arxiv.org/pdf/2508.03826", "abs": "https://arxiv.org/abs/2508.03826", "authors": ["Smayan Agarwal", "Shobhit Singh", "Aalok Thakkar"], "title": "Identity Testing for Stochastic Languages", "comment": null, "summary": "Determining whether an unknown distribution matches a known reference is a\ncornerstone problem in distributional analysis. While classical results\nestablish a rigorous framework in the case of distributions over finite\ndomains, real-world applications in computational linguistics, bioinformatics,\nand program analysis demand testing over infinite combinatorial structures,\nparticularly strings. In this paper, we initiate the theoretical study of\nidentity testing for stochastic languages, bridging formal language theory with\nmodern distribution property testing.\n  We first propose a polynomial-time algorithm to verify if a finite state\nmachine represents a stochastic language, and then prove that rational\nstochastic languages can approximate an arbitrary probability distribution.\nBuilding on these representations, we develop a truncation-based identity\ntesting algorithm that distinguishes between a known and an unknown\ndistributions with sample complexity $\\widetilde{\\Theta}\\left(\n\\frac{\\sqrt{n}}{\\varepsilon^2} + \\frac{n}{\\log n} \\right)$ where $n$ is the\nsize of the truncated support. Our approach leverages the exponential decay\ninherent in rational stochastic languages to bound truncation error, then\napplies classical finite-domain testers to the restricted problem.\n  This work establishes the first identity testing framework for infinite\ndiscrete distributions, opening new directions in probabilistic formal methods\nand statistical analysis of structured data.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u6765\u9a8c\u8bc1\u6709\u9650\u72b6\u6001\u673a\u662f\u5426\u8868\u793a\u968f\u673a\u8bed\u8a00\uff0c\u5e76\u5f00\u53d1\u4e86\u4e00\u79cd\u57fa\u4e8e\u622a\u65ad\u7684\u8eab\u4efd\u6d4b\u8bd5\u7b97\u6cd5\uff0c\u7528\u4e8e\u533a\u5206\u5df2\u77e5\u548c\u672a\u77e5\u5206\u5e03\u3002", "motivation": "\u89e3\u51b3\u65e0\u9650\u7ec4\u5408\u7ed3\u6784\uff08\u7279\u522b\u662f\u5b57\u7b26\u4e32\uff09\u4e0a\u7684\u5206\u5e03\u5339\u914d\u95ee\u9898\uff0c\u586b\u8865\u4e86\u5f62\u5f0f\u8bed\u8a00\u7406\u8bba\u4e0e\u73b0\u4ee3\u5206\u5e03\u5c5e\u6027\u6d4b\u8bd5\u4e4b\u95f4\u7684\u7a7a\u767d\u3002", "method": "\u63d0\u51fa\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u9a8c\u8bc1\u968f\u673a\u8bed\u8a00\uff0c\u8bc1\u660e\u6709\u7406\u968f\u673a\u8bed\u8a00\u53ef\u4ee5\u8fd1\u4f3c\u4efb\u610f\u6982\u7387\u5206\u5e03\uff0c\u5e76\u5f00\u53d1\u57fa\u4e8e\u622a\u65ad\u7684\u6d4b\u8bd5\u7b97\u6cd5\u3002", "result": "\u7b97\u6cd5\u6837\u672c\u590d\u6742\u5ea6\u4e3a$\\widetilde{\\Theta}\\left( \\frac{\\sqrt{n}}{\\varepsilon^2} + \\frac{n}{\\log n} \\right)$\uff0c\u9996\u6b21\u4e3a\u65e0\u9650\u79bb\u6563\u5206\u5e03\u5efa\u7acb\u4e86\u8eab\u4efd\u6d4b\u8bd5\u6846\u67b6\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u6982\u7387\u5f62\u5f0f\u65b9\u6cd5\u548c\u7ed3\u6784\u5316\u6570\u636e\u7684\u7edf\u8ba1\u5206\u6790\u5f00\u8f9f\u4e86\u65b0\u65b9\u5411\u3002"}}
{"id": "2508.03846", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03846", "abs": "https://arxiv.org/abs/2508.03846", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "Empathy Guidelines for Improving Practitioner Well-being & Software Engineering Practices", "comment": null, "summary": "Empathy is a powerful yet often overlooked element in software engineering\n(SE), supporting better teamwork, smoother communication, and effective\ndecision-making. In our previous study, we identified a range of practitioner\nstrategies for fostering empathy in SE contexts. Building on these insights,\nthis paper introduces 17 actionable empathy guidelines designed to support\npractitioners, teams, and organisations. We also explore how these guidelines\ncan be implemented in practice by examining real-world applications,\nchallenges, and strategies to overcome them shared by software practitioners.\nTo support adoption, we present a visual prioritisation framework that\ncategorises the guidelines based on perceived importance, ease of\nimplementation, and willingness to adopt. The findings offer practical and\nflexible suggestions for integrating empathy into everyday SE work, helping\nteams move from principles to sustainable action.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e8617\u6761\u53ef\u64cd\u4f5c\u7684\u5171\u60c5\u6307\u5357\uff0c\u5e2e\u52a9\u8f6f\u4ef6\u5de5\u7a0b\u56e2\u961f\u6539\u5584\u6c9f\u901a\u4e0e\u51b3\u7b56\uff0c\u5e76\u63d0\u4f9b\u4e86\u53ef\u89c6\u5316\u4f18\u5148\u7ea7\u6846\u67b6\u3002", "motivation": "\u5171\u60c5\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u88ab\u5ffd\u89c6\uff0c\u4f46\u5176\u5bf9\u56e2\u961f\u5408\u4f5c\u3001\u6c9f\u901a\u548c\u51b3\u7b56\u81f3\u5173\u91cd\u8981\u3002", "method": "\u57fa\u4e8e\u5148\u524d\u7814\u7a76\uff0c\u63d0\u51fa17\u6761\u5171\u60c5\u6307\u5357\uff0c\u5e76\u901a\u8fc7\u5b9e\u8df5\u6848\u4f8b\u3001\u6311\u6218\u53ca\u5e94\u5bf9\u7b56\u7565\u9a8c\u8bc1\u5176\u53ef\u884c\u6027\u3002", "result": "\u5f00\u53d1\u4e86\u53ef\u89c6\u5316\u4f18\u5148\u7ea7\u6846\u67b6\uff0c\u5e2e\u52a9\u56e2\u961f\u6839\u636e\u91cd\u8981\u6027\u3001\u6613\u5b9e\u65bd\u6027\u548c\u91c7\u7eb3\u610f\u613f\u5206\u7c7b\u6307\u5357\u3002", "conclusion": "\u5171\u60c5\u6307\u5357\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u63d0\u4f9b\u4e86\u7075\u6d3b\u5b9e\u7528\u7684\u5efa\u8bae\uff0c\u63a8\u52a8\u4ece\u539f\u5219\u5230\u53ef\u6301\u7eed\u884c\u52a8\u7684\u8f6c\u53d8\u3002"}}
{"id": "2508.03947", "categories": ["cs.LO", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2508.03947", "abs": "https://arxiv.org/abs/2508.03947", "authors": ["Vishnu Murali", "Mohammed Adib Oumer", "Majid Zamani"], "title": "Control Closure Certificates", "comment": "28 pages, 4 figures, 6 Tables. To appear in International Symposium\n  on Automated Technology for Verification and Analysis (ATVA), 2025", "summary": "This paper introduces the notion of control closure certificates to\nsynthesize controllers for discrete-time control systems against\n$\\omega$-regular specifications. Typical functional approaches to synthesize\ncontrollers against $\\omega$-regular specifications rely on combining inductive\ninvariants (for example, via barrier certificates) with proofs of\nwell-foundedness (for example, via ranking functions). Transition invariants,\nprovide an alternative where instead of standard well-foundedness arguments one\nmay instead search for disjunctive well-foundedness arguments that together\nensure a well-foundedness argument. Closure certificates, functional analogs of\ntransition invariants, provide an effective, automated approach to verify\ndiscrete-time dynamical systems against linear temporal logic and\n$\\omega$-regular specifications. We build on this notion to synthesize\ncontrollers to ensure the satisfaction of $\\omega$-regular specifications. To\ndo so, we first illustrate how one may construct control closure certificates\nto visit a region infinitely often (or only finitely often) via disjunctive\nwell-founded arguments. We then combine these arguments to provide an argument\nfor parity specifications. Thus, finding an appropriate control closure\ncertificate over the product of the system and a parity automaton specifying a\ndesired $\\omega$-regular specification ensures that there exists a controller\n$\\kappa$ to enforce the $\\omega$-regular specification. We propose a\nsum-of-squares optimization approach to synthesize such certificates and\ndemonstrate their efficacy in designing controllers over some case studies.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u63a7\u5236\u95ed\u5305\u8bc1\u4e66\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u5408\u6210\u79bb\u6563\u65f6\u95f4\u63a7\u5236\u7cfb\u7edf\u6ee1\u8db3\u03c9-\u6b63\u5219\u89c4\u8303\u7684\u63a7\u5236\u5668\u3002\u901a\u8fc7\u7ed3\u5408\u4e0d\u53d8\u91cf\u548c\u8fc7\u6e21\u4e0d\u53d8\u91cf\uff0c\u63d0\u4f9b\u81ea\u52a8\u5316\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "motivation": "\u4f20\u7edf\u65b9\u6cd5\u4f9d\u8d56\u5f52\u7eb3\u4e0d\u53d8\u91cf\u548c\u826f\u57fa\u6027\u8bc1\u660e\uff0c\u800c\u8fc7\u6e21\u4e0d\u53d8\u91cf\u63d0\u4f9b\u4e86\u4e00\u79cd\u66ff\u4ee3\u65b9\u6848\u3002\u672c\u6587\u65e8\u5728\u901a\u8fc7\u95ed\u5305\u8bc1\u4e66\u81ea\u52a8\u9a8c\u8bc1\u548c\u5408\u6210\u63a7\u5236\u5668\uff0c\u6ee1\u8db3\u03c9-\u6b63\u5219\u89c4\u8303\u3002", "method": "\u63d0\u51fa\u63a7\u5236\u95ed\u5305\u8bc1\u4e66\u7684\u6982\u5ff5\uff0c\u7ed3\u5408\u4e0d\u53d8\u91cf\u548c\u826f\u57fa\u6027\u8bba\u8bc1\uff0c\u901a\u8fc7\u548c-\u5e73\u65b9\u4f18\u5316\u65b9\u6cd5\u5408\u6210\u8bc1\u4e66\uff0c\u5e76\u8bbe\u8ba1\u63a7\u5236\u5668\u3002", "result": "\u6210\u529f\u5408\u6210\u6ee1\u8db3\u03c9-\u6b63\u5219\u89c4\u8303\u7684\u63a7\u5236\u5668\uff0c\u5e76\u901a\u8fc7\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u63a7\u5236\u95ed\u5305\u8bc1\u4e66\u4e3a\u79bb\u6563\u65f6\u95f4\u63a7\u5236\u7cfb\u7edf\u7684\u03c9-\u6b63\u5219\u89c4\u8303\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u6548\u7684\u81ea\u52a8\u5316\u9a8c\u8bc1\u548c\u5408\u6210\u65b9\u6cd5\u3002"}}
{"id": "2508.04458", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2508.04458", "abs": "https://arxiv.org/abs/2508.04458", "authors": ["Hiroya Fujinami", "Masaki Waga", "Jie An", "Kohei Suenaga", "Nayuta Yanagisawa", "Hiroki Iseri", "Ichiro Hasuo"], "title": "Componentwise Automata Learning for System Integration (Extended Version)", "comment": null, "summary": "Compositional automata learning is attracting attention as an analysis\ntechnique for complex black-box systems. It exploits a target system's internal\ncompositional structure to reduce complexity. In this paper, we identify system\nintegration -- the process of building a new system as a composite of\npotentially third-party and black-box components -- as a new application domain\nof compositional automata learning. Accordingly, we propose a new problem\nsetting, where the learner has direct access to black-box components. This is\nin contrast with the usual problem settings of compositional learning, where\nthe target is a legacy black-box system and queries can only be made to the\nwhole system (but not to components). We call our problem componentwise\nautomata learning for distinction. We identify a challenge there called\ncomponent redundancies: some parts of components may not contribute to\nsystem-level behaviors, and learning them incurs unnecessary effort. We\nintroduce a contextual componentwise learning algorithm that systematically\nremoves such redundancies. We experimentally evaluate our proposal and show its\npractical relevance.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7ec4\u5408\u81ea\u52a8\u673a\u5b66\u4e60\u95ee\u9898\u8bbe\u7f6e\uff0c\u79f0\u4e3a\u7ec4\u4ef6\u5316\u81ea\u52a8\u673a\u5b66\u4e60\uff0c\u9488\u5bf9\u7cfb\u7edf\u96c6\u6210\u9886\u57df\uff0c\u901a\u8fc7\u76f4\u63a5\u8bbf\u95ee\u9ed1\u76d2\u7ec4\u4ef6\u51cf\u5c11\u5197\u4f59\u3002", "motivation": "\u4f20\u7edf\u7ec4\u5408\u5b66\u4e60\u53ea\u80fd\u5bf9\u6574\u4e2a\u7cfb\u7edf\u8fdb\u884c\u67e5\u8be2\uff0c\u800c\u672c\u6587\u65e8\u5728\u5229\u7528\u7cfb\u7edf\u96c6\u6210\u4e2d\u76f4\u63a5\u8bbf\u95ee\u7ec4\u4ef6\u7684\u4f18\u52bf\uff0c\u89e3\u51b3\u7ec4\u4ef6\u5197\u4f59\u95ee\u9898\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u4e0a\u4e0b\u6587\u7ec4\u4ef6\u5316\u5b66\u4e60\u7b97\u6cd5\uff0c\u7cfb\u7edf\u6027\u53bb\u9664\u7ec4\u4ef6\u5197\u4f59\u3002", "result": "\u5b9e\u9a8c\u8bc4\u4f30\u8bc1\u660e\u4e86\u8be5\u65b9\u6cd5\u7684\u5b9e\u7528\u6027\u548c\u6709\u6548\u6027\u3002", "conclusion": "\u7ec4\u4ef6\u5316\u81ea\u52a8\u673a\u5b66\u4e60\u4e3a\u7cfb\u7edf\u96c6\u6210\u63d0\u4f9b\u4e86\u65b0\u7684\u5206\u6790\u5de5\u5177\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u65b9\u6cd5\u4e2d\u7684\u5197\u4f59\u95ee\u9898\u3002"}}
{"id": "2508.03856", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2508.03856", "abs": "https://arxiv.org/abs/2508.03856", "authors": ["Richard Hegewald", "Rebecca Beyer"], "title": "Evaluating Software Supply Chain Security in Research Software", "comment": "Accepted at conference GI SKILL 2025", "summary": "The security of research software is essential for ensuring the integrity and\nreproducibility of scientific results. However, research software security is\nstill largely unexplored. Due to its dependence on open source components and\ndistributed development practices, research software is particularly vulnerable\nto supply chain attacks. This study analyses 3,248 high-quality, largely\npeer-reviewed research software repositories using the OpenSSF Scorecard. We\nfind a generally weak security posture with an average score of 3.5/10.\nImportant practices, such as signed releases and branch protection, are rarely\nimplemented. Finally, we present actionable, low-effort recommendations that\ncan help research teams improve software security and mitigate potential\nthreats to scientific integrity.", "AI": {"tldr": "\u7814\u7a76\u8f6f\u4ef6\u5b89\u5168\u6027\u666e\u904d\u8f83\u5f31\uff0c\u5e73\u5747\u5f97\u52063.5/10\uff0c\u9700\u6539\u8fdb\u7b7e\u540d\u53d1\u5e03\u548c\u5206\u652f\u4fdd\u62a4\u7b49\u5173\u952e\u5b9e\u8df5\u3002", "motivation": "\u7814\u7a76\u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u5bf9\u79d1\u5b66\u7ed3\u679c\u7684\u5b8c\u6574\u6027\u548c\u53ef\u91cd\u590d\u6027\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u76ee\u524d\u7814\u7a76\u4e0d\u8db3\u3002", "method": "\u4f7f\u7528OpenSSF Scorecard\u5206\u6790\u4e863,248\u4e2a\u9ad8\u8d28\u91cf\u7814\u7a76\u8f6f\u4ef6\u4ed3\u5e93\u3002", "result": "\u5e73\u5747\u5b89\u5168\u5f97\u5206\u4ec5\u4e3a3.5/10\uff0c\u5173\u952e\u5b9e\u8df5\u5982\u7b7e\u540d\u53d1\u5e03\u548c\u5206\u652f\u4fdd\u62a4\u5b9e\u65bd\u7387\u4f4e\u3002", "conclusion": "\u63d0\u51fa\u4e86\u4f4e\u6210\u672c\u7684\u6539\u8fdb\u5efa\u8bae\uff0c\u4ee5\u63d0\u5347\u7814\u7a76\u8f6f\u4ef6\u5b89\u5168\u6027\u5e76\u51cf\u5c11\u5bf9\u79d1\u5b66\u5b8c\u6574\u6027\u7684\u5a01\u80c1\u3002"}}
{"id": "2508.04438", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2508.04438", "abs": "https://arxiv.org/abs/2508.04438", "authors": ["Mark Chevallier", "Filip Smola", "Richard Schmoetten", "Jacques D. Fleuriot"], "title": "GradSTL: Comprehensive Signal Temporal Logic for Neurosymbolic Reasoning and Learning", "comment": "Accepted for presentation at TIME 2025", "summary": "We present GradSTL, the first fully comprehensive implementation of signal\ntemporal logic (STL) suitable for integration with neurosymbolic learning. In\nparticular, GradSTL can successfully evaluate any STL constraint over any\nsignal, regardless of how it is sampled. Our formally verified approach\nspecifies smooth STL semantics over tensors, with formal proofs of soundness\nand of correctness of its derivative function. Our implementation is generated\nautomatically from this formalisation, without manual coding, guaranteeing\ncorrectness by construction. We show via a case study that using our\nimplementation, a neurosymbolic process learns to satisfy a pre-specified STL\nconstraint. Our approach offers a highly rigorous foundation for integrating\nsignal temporal logic and learning by gradient descent.", "AI": {"tldr": "GradSTL\u662f\u9996\u4e2a\u5168\u9762\u652f\u6301\u4fe1\u53f7\u65f6\u5e8f\u903b\u8f91\uff08STL\uff09\u7684\u5b9e\u73b0\uff0c\u9002\u7528\u4e8e\u795e\u7ecf\u7b26\u53f7\u5b66\u4e60\uff0c\u80fd\u8bc4\u4f30\u4efb\u610f\u4fe1\u53f7\u4e0a\u7684STL\u7ea6\u675f\uff0c\u5e76\u901a\u8fc7\u5f62\u5f0f\u5316\u9a8c\u8bc1\u786e\u4fdd\u6b63\u786e\u6027\u3002", "motivation": "\u4e3a\u795e\u7ecf\u7b26\u53f7\u5b66\u4e60\u63d0\u4f9b\u4e00\u4e2a\u4e25\u683c\u4e14\u901a\u7528\u7684STL\u5b9e\u73b0\uff0c\u652f\u6301\u68af\u5ea6\u4e0b\u964d\u5b66\u4e60\u3002", "method": "\u901a\u8fc7\u5f62\u5f0f\u5316\u9a8c\u8bc1\u5b9a\u4e49\u5e73\u6ed1\u7684STL\u8bed\u4e49\uff0c\u81ea\u52a8\u751f\u6210\u5b9e\u73b0\u4ee3\u7801\uff0c\u786e\u4fdd\u6784\u9020\u6b63\u786e\u6027\u3002", "result": "\u6848\u4f8b\u7814\u7a76\u8868\u660e\uff0c\u795e\u7ecf\u7b26\u53f7\u8fc7\u7a0b\u80fd\u901a\u8fc7\u5b66\u4e60\u6ee1\u8db3\u9884\u5b9a\u4e49\u7684STL\u7ea6\u675f\u3002", "conclusion": "GradSTL\u4e3a\u4fe1\u53f7\u65f6\u5e8f\u903b\u8f91\u4e0e\u68af\u5ea6\u4e0b\u964d\u5b66\u4e60\u7684\u7ed3\u5408\u63d0\u4f9b\u4e86\u4e25\u8c28\u7684\u57fa\u7840\u3002"}}
{"id": "2508.03881", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03881", "abs": "https://arxiv.org/abs/2508.03881", "authors": ["Martin Obaidi", "Kushtrim Qengaj", "Jakob Droste", "Hannah Deters", "Marc Herrmann", "Jil Kl\u00fcnder", "Elisa Schmid", "Kurt Schneider"], "title": "From App Features to Explanation Needs: Analyzing Correlations and Predictive Potential", "comment": "This paper has been accepted at the 33rd IEEE International\n  Requirements Engineering Workshop (REW 2025)", "summary": "In today's digitized world, software systems must support users in\nunderstanding both how to interact with a system and why certain behaviors\noccur. This study investigates whether explanation needs, classified from user\nreviews, can be predicted based on app properties, enabling early consideration\nduring development and large-scale requirements mining. We analyzed a gold\nstandard dataset of 4,495 app reviews enriched with metadata (e.g., app\nversion, ratings, age restriction, in-app purchases). Correlation analyses\nidentified mostly weak associations between app properties and explanation\nneeds, with moderate correlations only for specific features such as app\nversion, number of reviews, and star ratings. Linear regression models showed\nlimited predictive power, with no reliable forecasts across configurations.\nValidation on a manually labeled dataset of 495 reviews confirmed these\nfindings. Categories such as Security & Privacy and System Behavior showed\nslightly higher predictive potential, while Interaction and User Interface\nremained most difficult to predict. Overall, our results highlight that\nexplanation needs are highly context-dependent and cannot be precisely inferred\nfrom app metadata alone. Developers and requirements engineers should therefore\nsupplement metadata analysis with direct user feedback to effectively design\nexplainable and user-centered software systems.", "AI": {"tldr": "\u7814\u7a76\u53d1\u73b0\uff0c\u5e94\u7528\u5c5e\u6027\u4e0e\u7528\u6237\u89e3\u91ca\u9700\u6c42\u4e4b\u95f4\u7684\u5173\u8054\u8f83\u5f31\uff0c\u4ec5\u7279\u5b9a\u5c5e\u6027\uff08\u5982\u5e94\u7528\u7248\u672c\u3001\u8bc4\u8bba\u6570\u91cf\u548c\u661f\u7ea7\uff09\u6709\u4e2d\u7b49\u76f8\u5173\u6027\u3002\u56de\u5f52\u6a21\u578b\u9884\u6d4b\u80fd\u529b\u6709\u9650\uff0c\u89e3\u91ca\u9700\u6c42\u9ad8\u5ea6\u4f9d\u8d56\u4e0a\u4e0b\u6587\uff0c\u9700\u7ed3\u5408\u7528\u6237\u53cd\u9988\u3002", "motivation": "\u63a2\u7d22\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528\u5c5e\u6027\u9884\u6d4b\u7528\u6237\u89e3\u91ca\u9700\u6c42\uff0c\u4ee5\u652f\u6301\u65e9\u671f\u5f00\u53d1\u548c\u5927\u89c4\u6a21\u9700\u6c42\u6316\u6398\u3002", "method": "\u5206\u6790\u4e864,495\u6761\u5e94\u7528\u8bc4\u8bba\u7684\u9ec4\u91d1\u6807\u51c6\u6570\u636e\u96c6\uff0c\u8fdb\u884c\u76f8\u5173\u6027\u5206\u6790\u548c\u7ebf\u6027\u56de\u5f52\u5efa\u6a21\uff0c\u5e76\u5728495\u6761\u624b\u52a8\u6807\u6ce8\u8bc4\u8bba\u4e0a\u9a8c\u8bc1\u3002", "result": "\u76f8\u5173\u6027\u5206\u6790\u663e\u793a\u5f31\u5173\u8054\uff0c\u56de\u5f52\u6a21\u578b\u9884\u6d4b\u80fd\u529b\u6709\u9650\u3002\u5b89\u5168\u4e0e\u9690\u79c1\u3001\u7cfb\u7edf\u884c\u4e3a\u7c7b\u522b\u9884\u6d4b\u6f5c\u529b\u7565\u9ad8\uff0c\u4ea4\u4e92\u548c\u7528\u6237\u754c\u9762\u6700\u96be\u9884\u6d4b\u3002", "conclusion": "\u89e3\u91ca\u9700\u6c42\u9ad8\u5ea6\u4f9d\u8d56\u4e0a\u4e0b\u6587\uff0c\u65e0\u6cd5\u4ec5\u901a\u8fc7\u5e94\u7528\u5143\u6570\u636e\u7cbe\u786e\u63a8\u65ad\uff0c\u9700\u7ed3\u5408\u7528\u6237\u53cd\u9988\u8bbe\u8ba1\u7528\u6237\u4e2d\u5fc3\u8f6f\u4ef6\u3002"}}
{"id": "2508.03922", "categories": ["cs.SE", "cs.HC", "D.2.1"], "pdf": "https://arxiv.org/pdf/2508.03922", "abs": "https://arxiv.org/abs/2508.03922", "authors": ["Soroush Heydari"], "title": "A Human Centric Requirements Engineering Framework for Assessing Github Copilot Output", "comment": "8 pages", "summary": "The rapid adoption of Artificial Intelligence(AI) programming assistants such\nas GitHub Copilot introduces new challenges in how these software tools address\nhuman needs. Many existing evaluation frameworks address technical aspects such\nas code correctness and efficiency, but often overlook crucial human factors\nthat affect the successful integration of AI assistants in software development\nworkflows. In this study, I analyzed GitHub Copilot's interaction with users\nthrough its chat interface, measured Copilot's ability to adapt explanations\nand code generation to user expertise levels, and assessed its effectiveness in\nfacilitating collaborative programming experiences. I established a\nhuman-centered requirements framework with clear metrics to evaluate these\nqualities in GitHub Copilot chat. I discussed the test results and their\nimplications for future analysis of human requirements in automated\nprogramming.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86GitHub Copilot\u5982\u4f55\u6ee1\u8db3\u4eba\u7c7b\u9700\u6c42\uff0c\u63d0\u51fa\u4e86\u4ee5\u4eba\u4e3a\u4e2d\u5fc3\u7684\u8bc4\u4f30\u6846\u67b6\uff0c\u5206\u6790\u4e86\u5176\u9002\u5e94\u6027\u548c\u534f\u4f5c\u6548\u679c\u3002", "motivation": "\u73b0\u6709\u8bc4\u4f30\u6846\u67b6\u591a\u5173\u6ce8\u6280\u672f\u5c42\u9762\uff0c\u5ffd\u89c6\u4e86AI\u7f16\u7a0b\u52a9\u624b\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4eba\u7c7b\u56e0\u7d20\u9700\u6c42\u3002", "method": "\u901a\u8fc7\u5206\u6790GitHub Copilot\u7684\u804a\u5929\u754c\u9762\u4ea4\u4e92\uff0c\u6d4b\u91cf\u5176\u9002\u5e94\u6027\u548c\u534f\u4f5c\u80fd\u529b\uff0c\u5efa\u7acb\u8bc4\u4f30\u6846\u67b6\u3002", "result": "\u63d0\u51fa\u4e86\u660e\u786e\u7684\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u8ba8\u8bba\u4e86\u6d4b\u8bd5\u7ed3\u679c\u53ca\u5176\u5bf9\u672a\u6765\u81ea\u52a8\u5316\u7f16\u7a0b\u4e2d\u4eba\u7c7b\u9700\u6c42\u5206\u6790\u7684\u542f\u793a\u3002", "conclusion": "\u5f3a\u8c03\u4e86\u4ee5\u4eba\u4e3a\u4e2d\u5fc3\u7684\u8bc4\u4f30\u5728AI\u7f16\u7a0b\u52a9\u624b\u5f00\u53d1\u4e2d\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2508.03931", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03931", "abs": "https://arxiv.org/abs/2508.03931", "authors": ["Everton Guimaraes", "Nathalia Nascimento", "Chandan Shivalingaiah", "Asish Nelapati"], "title": "Analyzing Prominent LLMs: An Empirical Study of Performance and Complexity in Solving LeetCode Problems", "comment": "11 pages, 13 figures, 29th International Conference on Evaluation and\n  Assessment in Software Engineering (EASE)", "summary": "Large Language Models (LLMs) like ChatGPT, Copilot, Gemini, and DeepSeek are\ntransforming software engineering by automating key tasks, including code\ngeneration, testing, and debugging. As these models become integral to\ndevelopment workflows, a systematic comparison of their performance is\nessential for optimizing their use in real world applications. This study\nbenchmarks these four prominent LLMs on one hundred and fifty LeetCode problems\nacross easy, medium, and hard difficulties, generating solutions in Java and\nPython. We evaluate each model based on execution time, memory usage, and\nalgorithmic complexity, revealing significant performance differences. ChatGPT\ndemonstrates consistent efficiency in execution time and memory usage, while\nCopilot and DeepSeek show variability as task complexity increases. Gemini,\nalthough effective on simpler tasks, requires more attempts as problem\ndifficulty rises. Our findings provide actionable insights into each model's\nstrengths and limitations, offering guidance for developers selecting LLMs for\nspecific coding tasks and providing insights on the performance and complexity\nof GPT-like generated solutions.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5bf9\u56db\u79cd\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08ChatGPT\u3001Copilot\u3001Gemini\u548cDeepSeek\uff09\u5728150\u9053LeetCode\u9898\u76ee\u4e0a\u7684\u8868\u73b0\u8fdb\u884c\u4e86\u7cfb\u7edf\u6bd4\u8f83\uff0c\u8bc4\u4f30\u4e86\u5b83\u4eec\u5728\u6267\u884c\u65f6\u95f4\u3001\u5185\u5b58\u4f7f\u7528\u548c\u7b97\u6cd5\u590d\u6742\u5ea6\u4e0a\u7684\u5dee\u5f02\u3002", "motivation": "\u968f\u7740\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5bf9\u5176\u6027\u80fd\u8fdb\u884c\u7cfb\u7edf\u6bd4\u8f83\u4ee5\u4f18\u5316\u5b9e\u9645\u5e94\u7528\u81f3\u5173\u91cd\u8981\u3002", "method": "\u7814\u7a76\u901a\u8fc7\u751f\u6210Java\u548cPython\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u6613\u3001\u4e2d\u3001\u96be\u4e09\u4e2a\u96be\u5ea6\u7ea7\u522b\u7684LeetCode\u9898\u76ee\u4e0a\u5bf9\u56db\u79cd\u6a21\u578b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "ChatGPT\u5728\u6267\u884c\u65f6\u95f4\u548c\u5185\u5b58\u4f7f\u7528\u4e0a\u8868\u73b0\u4e00\u81f4\u9ad8\u6548\uff0cCopilot\u548cDeepSeek\u5728\u4efb\u52a1\u590d\u6742\u5ea6\u589e\u52a0\u65f6\u8868\u73b0\u4e0d\u7a33\u5b9a\uff0cGemini\u5728\u7b80\u5355\u4efb\u52a1\u4e0a\u6709\u6548\u4f46\u96be\u5ea6\u589e\u52a0\u65f6\u9700\u8981\u66f4\u591a\u5c1d\u8bd5\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u63d0\u4f9b\u4e86\u6bcf\u79cd\u6a21\u578b\u7684\u4f18\u52bf\u548c\u5c40\u9650\u6027\uff0c\u4e3a\u5f00\u53d1\u8005\u9009\u62e9\u9002\u5408\u7279\u5b9a\u7f16\u7801\u4efb\u52a1\u7684\u6a21\u578b\u63d0\u4f9b\u4e86\u6307\u5bfc\u3002"}}
{"id": "2508.03949", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.03949", "abs": "https://arxiv.org/abs/2508.03949", "authors": ["Md. Abdul Awal", "Mrigank Rochan", "Chanchal K. Roy"], "title": "Model Compression vs. Adversarial Robustness: An Empirical Study on Language Models for Code", "comment": null, "summary": "Transformer-based language models for code have shown remarkable performance\nin various software analytics tasks, but their adoption is hindered by high\ncomputational costs, slow inference speeds, and substantial environmental\nimpact. Model compression techniques such as pruning, quantization, and\nknowledge distillation have gained traction in addressing these challenges.\nHowever, the impact of these strategies on the robustness of compressed\nlanguage models for code in adversarial scenarios remains poorly understood.\nUnderstanding how these compressed models behave under adversarial attacks is\nessential for their safe and effective deployment in real-world applications.\nTo bridge this knowledge gap, we conduct a comprehensive evaluation of how\ncommon compression strategies affect the adversarial robustness of compressed\nmodels. We assess the robustness of compressed versions of three widely used\nlanguage models for code across three software analytics tasks, using six\nevaluation metrics and four commonly used classical adversarial attacks. Our\nfindings indicate that compressed models generally maintain comparable\nperformance to their uncompressed counterparts. However, when subjected to\nadversarial attacks, compressed models exhibit significantly reduced\nrobustness. These results reveal a trade-off between model size reduction and\nadversarial robustness, underscoring the need for careful consideration when\ndeploying compressed models in security-critical software applications. Our\nstudy highlights the need for further research into compression strategies that\nstrike a balance between computational efficiency and adversarial robustness,\nwhich is essential for deploying reliable language models for code in\nreal-world software applications.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u6280\u672f\uff08\u5982\u526a\u679d\u3001\u91cf\u5316\u548c\u77e5\u8bc6\u84b8\u998f\uff09\u5728\u5bf9\u6297\u653b\u51fb\u4e0b\u7684\u9c81\u68d2\u6027\uff0c\u53d1\u73b0\u538b\u7f29\u6a21\u578b\u5728\u6027\u80fd\u4e0a\u63a5\u8fd1\u539f\u59cb\u6a21\u578b\uff0c\u4f46\u5728\u5bf9\u6297\u653b\u51fb\u4e0b\u9c81\u68d2\u6027\u663e\u8457\u964d\u4f4e\u3002", "motivation": "Transformer-based\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u7684\u9ad8\u8ba1\u7b97\u6210\u672c\u548c\u73af\u5883\u5f71\u54cd\u963b\u788d\u4e86\u5176\u5e94\u7528\uff0c\u538b\u7f29\u6280\u672f\u867d\u80fd\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u5176\u5728\u5bf9\u6297\u573a\u666f\u4e0b\u7684\u9c81\u68d2\u6027\u5f71\u54cd\u5c1a\u4e0d\u660e\u786e\u3002", "method": "\u901a\u8fc7\u8bc4\u4f30\u4e09\u79cd\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u5728\u4e09\u79cd\u8f6f\u4ef6\u5206\u6790\u4efb\u52a1\u4e2d\u7684\u538b\u7f29\u7248\u672c\uff0c\u4f7f\u7528\u516d\u79cd\u8bc4\u4f30\u6307\u6807\u548c\u56db\u79cd\u7ecf\u5178\u5bf9\u6297\u653b\u51fb\uff0c\u5206\u6790\u538b\u7f29\u7b56\u7565\u5bf9\u9c81\u68d2\u6027\u7684\u5f71\u54cd\u3002", "result": "\u538b\u7f29\u6a21\u578b\u5728\u6027\u80fd\u4e0a\u4e0e\u539f\u59cb\u6a21\u578b\u76f8\u5f53\uff0c\u4f46\u5728\u5bf9\u6297\u653b\u51fb\u4e0b\u9c81\u68d2\u6027\u663e\u8457\u964d\u4f4e\uff0c\u63ed\u793a\u4e86\u6a21\u578b\u5927\u5c0f\u4e0e\u9c81\u68d2\u6027\u4e4b\u95f4\u7684\u6743\u8861\u3002", "conclusion": "\u7814\u7a76\u5f3a\u8c03\u9700\u8fdb\u4e00\u6b65\u63a2\u7d22\u5e73\u8861\u8ba1\u7b97\u6548\u7387\u548c\u9c81\u68d2\u6027\u7684\u538b\u7f29\u7b56\u7565\uff0c\u4ee5\u786e\u4fdd\u4ee3\u7801\u8bed\u8a00\u6a21\u578b\u5728\u5b89\u5168\u5173\u952e\u5e94\u7528\u4e2d\u7684\u53ef\u9760\u90e8\u7f72\u3002"}}
{"id": "2508.04125", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.04125", "abs": "https://arxiv.org/abs/2508.04125", "authors": ["Sangwon Hyun", "Hyunjun Kim", "Jinhyuk Jang", "Hyojin Choi", "M. Ali Babar"], "title": "Experimental Analysis of Productive Interaction Strategy with ChatGPT: User Study on Function and Project-level Code Generation Tasks", "comment": "The benchmark repository has not been publicly released yet due to\n  the IP policy in our institutions. If you would like to use the benchmark or\n  collaborate on extension, please contact \"dr.sangwon.hyun@gmail.com\"", "summary": "The application of Large Language Models (LLMs) is growing in the productive\ncompletion of Software Engineering tasks. Yet, studies investigating the\nproductive prompting techniques often employed a limited problem space,\nprimarily focusing on well-known prompting patterns and mainly targeting\nfunction-level SE practices. We identify significant gaps in real-world\nworkflows that involve complexities beyond class-level (e.g., multi-class\ndependencies) and different features that can impact Human-LLM Interactions\n(HLIs) processes in code generation. To address these issues, we designed an\nexperiment that comprehensively analyzed the HLI features regarding the code\ngeneration productivity. Our study presents two project-level benchmark tasks,\nextending beyond function-level evaluations. We conducted a user study with 36\nparticipants from diverse backgrounds, asking them to solve the assigned tasks\nby interacting with the GPT assistant using specific prompting patterns. We\nalso examined the participants' experience and their behavioral features during\ninteractions by analyzing screen recordings and GPT chat logs. Our statistical\nand empirical investigation revealed (1) that three out of 15 HLI features\nsignificantly impacted the productivity in code generation; (2) five primary\nguidelines for enhancing productivity for HLI processes; and (3) a taxonomy of\n29 runtime and logic errors that can occur during HLI processes, along with\nsuggested mitigation plans.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u4e2d\u7684\u5e94\u7528\uff0c\u91cd\u70b9\u5173\u6ce8\u4e86\u8d85\u51fa\u51fd\u6570\u7ea7\u522b\u7684\u590d\u6742\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5e76\u63d0\u51fa\u4e86\u63d0\u5347\u4ee3\u7801\u751f\u6210\u6548\u7387\u7684\u6307\u5bfc\u539f\u5219\u548c\u9519\u8bef\u5206\u7c7b\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u5173\u6ce8\u51fd\u6570\u7ea7\u522b\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\uff0c\u800c\u5ffd\u7565\u4e86\u66f4\u590d\u6742\u7684\u7c7b\u7ea7\u522b\u548c\u591a\u7c7b\u4f9d\u8d56\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u586b\u8865\u8fd9\u4e00\u7814\u7a76\u7a7a\u767d\u3002", "method": "\u8bbe\u8ba1\u4e86\u5305\u542b\u4e24\u4e2a\u9879\u76ee\u7ea7\u57fa\u51c6\u4efb\u52a1\u7684\u5b9e\u9a8c\uff0c\u901a\u8fc736\u540d\u53c2\u4e0e\u8005\u7684\u7528\u6237\u7814\u7a76\uff0c\u5206\u6790\u5176\u4e0eGPT\u52a9\u624b\u7684\u4ea4\u4e92\u884c\u4e3a\u548c\u5c4f\u5e55\u8bb0\u5f55\u3002", "result": "\u7814\u7a76\u53d1\u73b015\u4e2a\u4ea4\u4e92\u7279\u5f81\u4e2d\u67093\u4e2a\u663e\u8457\u5f71\u54cd\u4ee3\u7801\u751f\u6210\u6548\u7387\uff0c\u63d0\u51fa\u4e865\u6761\u63d0\u5347\u6548\u7387\u7684\u6307\u5bfc\u539f\u5219\uff0c\u5e76\u5206\u7c7b\u4e8629\u79cd\u8fd0\u884c\u65f6\u548c\u903b\u8f91\u9519\u8bef\u53ca\u5176\u7f13\u89e3\u65b9\u6848\u3002", "conclusion": "\u7814\u7a76\u4e3a\u590d\u6742\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u4e2d\u7684\u4eba\u673a\u4ea4\u4e92\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc\uff0c\u5e76\u6269\u5c55\u4e86\u73b0\u6709\u7814\u7a76\u7684\u8303\u56f4\u3002"}}
{"id": "2508.04295", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04295", "abs": "https://arxiv.org/abs/2508.04295", "authors": ["Chaofan Wang", "Tingrui Yu", "Jie Wang", "Dong Chen", "Wenrui Zhang", "Yuling Shi", "Xiaodong Gu", "Beijun Shen"], "title": "EVOC2RUST: A Skeleton-guided Framework for Project-Level C-to-Rust Translation", "comment": null, "summary": "Rust's compile-time safety guarantees make it ideal for safety-critical\nsystems, creating demand for translating legacy C codebases to Rust. While\nvarious approaches have emerged for this task, they face inherent trade-offs:\nrule-based solutions face challenges in meeting code safety and idiomaticity\nrequirements, while LLM-based solutions often fail to generate semantically\nequivalent Rust code, due to the heavy dependencies of modules across the\nentire codebase. Recent studies have revealed that both solutions are limited\nto small-scale programs. In this paper, we propose EvoC2Rust, an automated\nframework for converting entire C projects to equivalent Rust ones. EvoC2Rust\nemploys a skeleton-guided translation strategy for project-level translation.\nThe pipeline consists of three evolutionary stages: 1) it first decomposes the\nC project into functional modules, employs a feature-mapping-enhanced LLM to\ntransform definitions and macros and generates type-checked function stubs,\nwhich form a compilable Rust skeleton; 2) it then incrementally translates the\nfunction, replacing the corresponding stub placeholder; 3) finally, it repairs\ncompilation errors by integrating LLM and static analysis. Through evolutionary\naugmentation, EvoC2Rust combines the advantages of both rule-based and\nLLM-based solutions. Our evaluation on open-source benchmarks and six\nindustrial projects demonstrates EvoC2Rust's superior performance in\nproject-level C-to-Rust translation. On average, it achieves 17.24% and 14.32%\nimprovements in syntax and semantic accuracy over the LLM-based approaches,\nalong with a 96.79% higher code safety rate than the rule-based tools. At the\nmodule level, EvoC2Rust reaches 92.25% compilation and 89.53% test pass rates\non industrial projects, even for complex codebases and long functions.", "AI": {"tldr": "EvoC2Rust\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u6846\u67b6\uff0c\u7528\u4e8e\u5c06\u6574\u4e2aC\u9879\u76ee\u8f6c\u6362\u4e3a\u7b49\u6548\u7684Rust\u9879\u76ee\uff0c\u7ed3\u5408\u4e86\u89c4\u5219\u548cLLM\u65b9\u6cd5\u7684\u4f18\u52bf\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7ffb\u8bd1\u7684\u51c6\u786e\u6027\u548c\u4ee3\u7801\u5b89\u5168\u6027\u3002", "motivation": "Rust\u7684\u7f16\u8bd1\u65f6\u5b89\u5168\u6027\u4f7f\u5176\u9002\u5408\u5b89\u5168\u5173\u952e\u7cfb\u7edf\uff0c\u4f46\u73b0\u6709C\u5230Rust\u7684\u8f6c\u6362\u65b9\u6cd5\u5728\u5c0f\u89c4\u6a21\u7a0b\u5e8f\u4e0a\u8868\u73b0\u6709\u9650\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5927\u89c4\u6a21\u9879\u76ee\u7684\u9700\u6c42\u3002", "method": "EvoC2Rust\u91c7\u7528\u9aa8\u67b6\u5f15\u5bfc\u7684\u7ffb\u8bd1\u7b56\u7565\uff0c\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a\u5206\u89e3C\u9879\u76ee\u3001\u589e\u91cf\u7ffb\u8bd1\u51fd\u6570\u548c\u4fee\u590d\u7f16\u8bd1\u9519\u8bef\uff0c\u7ed3\u5408LLM\u548c\u9759\u6001\u5206\u6790\u3002", "result": "\u5728\u5f00\u6e90\u57fa\u51c6\u548c\u5de5\u4e1a\u9879\u76ee\u4e0a\uff0cEvoC2Rust\u5728\u8bed\u6cd5\u548c\u8bed\u4e49\u51c6\u786e\u6027\u4e0a\u5206\u522b\u63d0\u5347\u4e8617.24%\u548c14.32%\uff0c\u4ee3\u7801\u5b89\u5168\u6027\u63d0\u9ad8\u4e8696.79%\u3002", "conclusion": "EvoC2Rust\u5728\u5927\u89c4\u6a21C\u5230Rust\u8f6c\u6362\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u9002\u7528\u4e8e\u590d\u6742\u4ee3\u7801\u5e93\u548c\u957f\u51fd\u6570\u3002"}}
{"id": "2508.04352", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04352", "abs": "https://arxiv.org/abs/2508.04352", "authors": ["Dragana Sunaric", "Charlotte Verbruggen", "Dominik Bork"], "title": "Vanilla-Converter: A Tool for Converting Camunda 7 BPMN Models into Camunda 8 Models", "comment": null, "summary": "As organizations prepare for the end-of-life of Camunda 7, manual migration\nremains complex due to fundamental differences between the two platforms. We\npresent Vanilla-Converter, a command-line tool that facilitates the migration\nof BPMN models from Camunda 7 to Camunda 8. Vanilla-Converter automates the\ntransformation process, supports a wide range of BPMN elements, and produces a\ntransformed model and a detailed transformation log indicating automatic\nchanges and remaining manual conversion tasks. The tool's effectiveness is\ndemonstrated through three case studies with real industrially used Camunda 7\nmodels, confirming its ability to convert these models into valid and\nexecutable Camunda 8 models.", "AI": {"tldr": "Vanilla-Converter\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u5c06BPMN\u6a21\u578b\u4eceCamunda 7\u8fc1\u79fb\u5230Camunda 8\uff0c\u652f\u6301\u591a\u79cdBPMN\u5143\u7d20\u5e76\u751f\u6210\u8f6c\u6362\u65e5\u5fd7\u3002", "motivation": "\u7531\u4e8eCamunda 7\u548c8\u4e4b\u95f4\u5b58\u5728\u6839\u672c\u5dee\u5f02\uff0c\u624b\u52a8\u8fc1\u79fb\u590d\u6742\u4e14\u8017\u65f6\uff0c\u56e0\u6b64\u5f00\u53d1\u81ea\u52a8\u5316\u5de5\u5177\u4ee5\u7b80\u5316\u8fc1\u79fb\u8fc7\u7a0b\u3002", "method": "Vanilla-Converter\u901a\u8fc7\u81ea\u52a8\u5316\u8f6c\u6362\u8fc7\u7a0b\uff0c\u652f\u6301\u5e7f\u6cdb\u7684BPMN\u5143\u7d20\uff0c\u5e76\u751f\u6210\u8f6c\u6362\u65e5\u5fd7\uff0c\u8be6\u7ec6\u8bb0\u5f55\u81ea\u52a8\u66f4\u6539\u548c\u5269\u4f59\u624b\u52a8\u4efb\u52a1\u3002", "result": "\u901a\u8fc7\u4e09\u4e2a\u5b9e\u9645\u5de5\u4e1a\u6848\u4f8b\u9a8c\u8bc1\uff0c\u5de5\u5177\u6210\u529f\u5c06Camunda 7\u6a21\u578b\u8f6c\u6362\u4e3a\u6709\u6548\u4e14\u53ef\u6267\u884c\u7684Camunda 8\u6a21\u578b\u3002", "conclusion": "Vanilla-Converter\u6709\u6548\u89e3\u51b3\u4e86Camunda 7\u52308\u7684\u8fc1\u79fb\u95ee\u9898\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u624b\u52a8\u5de5\u4f5c\u91cf\u3002"}}
{"id": "2508.04408", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2508.04408", "abs": "https://arxiv.org/abs/2508.04408", "authors": ["Carlos Andr\u00e9s Ram\u00edrez Cata\u00f1o", "Makoto Itoh"], "title": "Breaking New Ground in Software Defect Prediction: Introducing Practical and Actionable Metrics with Superior Predictive Power for Enhanced Decision-Making", "comment": "16 pages, 2 figures, 2 formulas, 12 tables", "summary": "Software defect prediction using code metrics has been extensively researched\nover the past five decades. However, prediction harnessing non-software metrics\nis under-researched. Considering that the root cause of software defects is\noften attributed to human error, human factors theory might offer key\nforecasting metrics for actionable insights. This paper explores automated\nsoftware defect prediction at the method level based on the developers' coding\nhabits. First, we propose a framework for deciding the metrics to conduct\npredictions. Next, we compare the performance of our metrics to that of the\ncode and commit history metrics shown by research to achieve the highest\nperformance to date. Finally, we analyze the prediction importance of each\nmetric. As a result of our analyses of twenty-one critical infrastructure\nlarge-scale open-source software projects, we have presented: (1) a human\nerror-based framework with metrics useful for defect prediction at method\nlevel; (2) models using our proposed metrics achieve better average prediction\nperformance than the state-of-the-art code metrics and history measures; (3)\nthe prediction importance of all metrics distributes differently with each of\nthe novel metrics having better average importance than code and history\nmetrics; (4) the novel metrics dramatically enhance the explainability,\npracticality, and actionability of software defect prediction models,\nsignificantly advancing the field. We present a systematic approach to\nforecasting defect-prone software methods via a human error framework. This\nwork empowers practitioners to act on predictions, empirically demonstrating\nhow developer coding habits contribute to defects in software systems.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5f00\u53d1\u8005\u7f16\u7801\u4e60\u60ef\u7684\u8f6f\u4ef6\u7f3a\u9677\u9884\u6d4b\u65b9\u6cd5\uff0c\u901a\u8fc7\u4eba\u7c7b\u56e0\u7d20\u7406\u8bba\u8bbe\u8ba1\u65b0\u6307\u6807\uff0c\u6027\u80fd\u4f18\u4e8e\u73b0\u6709\u4ee3\u7801\u548c\u5386\u53f2\u6307\u6807\uff0c\u5e76\u63d0\u5347\u4e86\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u5b9e\u7528\u6027\u3002", "motivation": "\u8f6f\u4ef6\u7f3a\u9677\u7684\u6839\u6e90\u5e38\u5f52\u56e0\u4e8e\u4eba\u4e3a\u9519\u8bef\uff0c\u4f46\u73b0\u6709\u7814\u7a76\u591a\u5173\u6ce8\u4ee3\u7801\u6307\u6807\uff0c\u800c\u5ffd\u7565\u975e\u8f6f\u4ef6\u6307\u6807\u3002\u672c\u6587\u63a2\u7d22\u5f00\u53d1\u8005\u7f16\u7801\u4e60\u60ef\u5bf9\u7f3a\u9677\u9884\u6d4b\u7684\u4f5c\u7528\u3002", "method": "\u63d0\u51fa\u4e00\u4e2a\u6846\u67b6\u9009\u62e9\u9884\u6d4b\u6307\u6807\uff0c\u6bd4\u8f83\u65b0\u6307\u6807\u4e0e\u73b0\u6709\u6700\u4f73\u4ee3\u7801\u548c\u5386\u53f2\u6307\u6807\u7684\u6027\u80fd\uff0c\u5e76\u5206\u6790\u5404\u6307\u6807\u7684\u91cd\u8981\u6027\u3002", "result": "\u65b0\u6307\u6807\u572821\u4e2a\u5927\u578b\u5f00\u6e90\u9879\u76ee\u4e2d\u8868\u73b0\u4f18\u4e8e\u73b0\u6709\u6307\u6807\uff0c\u63d0\u5347\u4e86\u9884\u6d4b\u6027\u80fd\u3001\u53ef\u89e3\u91ca\u6027\u548c\u5b9e\u7528\u6027\u3002", "conclusion": "\u57fa\u4e8e\u4eba\u7c7b\u9519\u8bef\u6846\u67b6\u7684\u7cfb\u7edf\u6027\u65b9\u6cd5\u663e\u8457\u63a8\u8fdb\u4e86\u8f6f\u4ef6\u7f3a\u9677\u9884\u6d4b\u9886\u57df\uff0c\u4e3a\u5b9e\u8df5\u8005\u63d0\u4f9b\u4e86\u53ef\u64cd\u4f5c\u7684\u9884\u6d4b\u5de5\u5177\u3002"}}
{"id": "2508.04448", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04448", "abs": "https://arxiv.org/abs/2508.04448", "authors": ["Damian Gnieciak", "Tomasz Szandala"], "title": "Large Language Models Versus Static Code Analysis Tools: A Systematic Benchmark for Vulnerability Detection", "comment": null, "summary": "Modern software relies on a multitude of automated testing and quality\nassurance tools to prevent errors, bugs and potential vulnerabilities. This\nstudy sets out to provide a head-to-head, quantitative and qualitative\nevaluation of six automated approaches: three industry-standard rule-based\nstatic code-analysis tools (SonarQube, CodeQL and Snyk Code) and three\nstate-of-the-art large language models hosted on the GitHub Models platform\n(GPT-4.1, Mistral Large and DeepSeek V3). Using a curated suite of ten\nreal-world C# projects that embed 63 vulnerabilities across common categories\nsuch as SQL injection, hard-coded secrets and outdated dependencies, we measure\nclassical detection accuracy (precision, recall, F-score), analysis latency,\nand the developer effort required to vet true positives. The language-based\nscanners achieve higher mean F-1 scores,0.797, 0.753 and 0.750, than their\nstatic counterparts, which score 0.260, 0.386 and 0.546, respectively. LLMs'\nadvantage originates from superior recall, confirming an ability to reason\nacross broader code contexts. However, this benefit comes with substantial\ntrade-offs: DeepSeek V3 exhibits the highest false-positive ratio, all language\nmodels mislocate issues at line-or-column granularity due to tokenisation\nartefacts. Overall, language models successfully rival traditional static\nanalysers in finding real vulnerabilities. Still, their noisier output and\nimprecise localisation limit their standalone use in safety-critical audits. We\ntherefore recommend a hybrid pipeline: employ language models early in\ndevelopment for broad, context-aware triage, while reserving deterministic\nrule-based scanners for high-assurance verification. The open benchmark and\nJSON-based result harness released with this paper lay a foundation for\nreproducible, practitioner-centric research into next-generation automated code\nsecurity.", "AI": {"tldr": "\u8be5\u7814\u7a76\u6bd4\u8f83\u4e86\u516d\u79cd\u81ea\u52a8\u5316\u4ee3\u7801\u5206\u6790\u5de5\u5177\uff08\u4e09\u79cd\u9759\u6001\u5206\u6790\u5de5\u5177\u548c\u4e09\u79cd\u5927\u8bed\u8a00\u6a21\u578b\uff09\u5728\u68c0\u6d4b\u6f0f\u6d1e\u65b9\u9762\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u8bed\u8a00\u6a21\u578b\u5728\u53ec\u56de\u7387\u4e0a\u8868\u73b0\u66f4\u4f18\uff0c\u4f46\u5b58\u5728\u8bef\u62a5\u548c\u5b9a\u4f4d\u4e0d\u7cbe\u786e\u7684\u95ee\u9898\uff0c\u5efa\u8bae\u7ed3\u5408\u4f7f\u7528\u3002", "motivation": "\u8bc4\u4f30\u73b0\u4ee3\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177\u5728\u68c0\u6d4b\u4ee3\u7801\u6f0f\u6d1e\u65b9\u9762\u7684\u6548\u679c\uff0c\u6bd4\u8f83\u9759\u6001\u5206\u6790\u5de5\u5177\u4e0e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u4f18\u52a3\u3002", "method": "\u4f7f\u7528\u5341\u4e2a\u771f\u5b9eC#\u9879\u76ee\uff08\u542b63\u4e2a\u6f0f\u6d1e\uff09\u6d4b\u8bd5\u516d\u79cd\u5de5\u5177\uff0c\u6d4b\u91cf\u7cbe\u5ea6\u3001\u53ec\u56de\u7387\u3001F\u5206\u6570\u3001\u5ef6\u8fdf\u548c\u5f00\u53d1\u8005\u5de5\u4f5c\u91cf\u3002", "result": "\u8bed\u8a00\u6a21\u578b\u7684\u5e73\u5747F-1\u5206\u6570\uff080.797\u30010.753\u30010.750\uff09\u9ad8\u4e8e\u9759\u6001\u5de5\u5177\uff080.260\u30010.386\u30010.546\uff09\uff0c\u4f46\u8bef\u62a5\u7387\u9ad8\u4e14\u5b9a\u4f4d\u4e0d\u7cbe\u786e\u3002", "conclusion": "\u5efa\u8bae\u7ed3\u5408\u8bed\u8a00\u6a21\u578b\u7684\u5e7f\u6cdb\u68c0\u6d4b\u548c\u9759\u6001\u5de5\u5177\u7684\u9ad8\u7cbe\u5ea6\u9a8c\u8bc1\uff0c\u5e76\u53d1\u5e03\u4e86\u5f00\u653e\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u3002"}}
{"id": "2508.04479", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.04479", "abs": "https://arxiv.org/abs/2508.04479", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "Manifestations of Empathy in Software Engineering: How, Why, and When It Matters", "comment": null, "summary": "Empathy plays a crucial role in software engineering (SE), influencing\ncollaboration, communication, and decision-making. While prior research has\nhighlighted the importance of empathy in SE, there is limited understanding of\nhow empathy manifests in SE practice, what motivates SE practitioners to\ndemonstrate empathy, and the factors that influence empathy in SE work. Our\nstudy explores these aspects through 22 interviews and a large scale survey\nwith 116 software practitioners. Our findings provide insights into the\nexpression of empathy in SE, the drivers behind empathetic practices, SE\nactivities where empathy is perceived as useful or not, and the other factors\nthat influence empathy. In addition, we offer practical implications for SE\npractitioners and researchers, offering a deeper understanding of how to\neffectively integrate empathy into SE processes.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u540c\u7406\u5fc3\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u8868\u73b0\u3001\u52a8\u673a\u53ca\u5f71\u54cd\u56e0\u7d20\uff0c\u901a\u8fc7\u8bbf\u8c08\u548c\u8c03\u67e5\u63ed\u793a\u4e86\u5176\u5b9e\u9645\u5e94\u7528\u548c\u9a71\u52a8\u56e0\u7d20\u3002", "motivation": "\u7406\u89e3\u540c\u7406\u5fc3\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u5177\u4f53\u8868\u73b0\u3001\u52a8\u673a\u53ca\u5f71\u54cd\u56e0\u7d20\uff0c\u586b\u8865\u73b0\u6709\u7814\u7a76\u7684\u7a7a\u767d\u3002", "method": "\u901a\u8fc722\u6b21\u8bbf\u8c08\u548c116\u540d\u8f6f\u4ef6\u4ece\u4e1a\u8005\u7684\u5927\u89c4\u6a21\u8c03\u67e5\u8fdb\u884c\u7814\u7a76\u3002", "result": "\u63ed\u793a\u4e86\u540c\u7406\u5fc3\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u8868\u8fbe\u65b9\u5f0f\u3001\u9a71\u52a8\u56e0\u7d20\u3001\u9002\u7528\u573a\u666f\u53ca\u5176\u4ed6\u5f71\u54cd\u56e0\u7d20\u3002", "conclusion": "\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u5b9e\u8df5\u548c\u7814\u7a76\u63d0\u4f9b\u4e86\u5982\u4f55\u6709\u6548\u6574\u5408\u540c\u7406\u5fc3\u7684\u5b9e\u7528\u5efa\u8bae\u3002"}}

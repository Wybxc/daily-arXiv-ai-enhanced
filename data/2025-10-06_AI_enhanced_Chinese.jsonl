{"id": "2510.02579", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.02579", "abs": "https://arxiv.org/abs/2510.02579", "authors": ["Santiago Cu\u00e9llar", "Naomi Spargo", "Jonathan Daugherty", "David Darais"], "title": "Designing Walrus: Relational Programming with Rich Types, On-Demand Laziness, and Structured Traces", "comment": "20 pages, miniKanren 2025", "summary": "We present Walrus, a functional relational programming language embedded in\nHaskell that extends the miniKanren model with type-polymorphic unification,\non-demand laziness, and a range of usability features aimed at practical\ndevelopment. These include use of Haskell Generics for boilerplate reduction,\nstructured debugging traces, and ergonomic support for product types. We\ndescribe the design and implementation of Walrus through the lens of our\nexperience developing bidirectional compilers, and reflect on key design\ndecisions and recurring usability challenges encountered in practice.", "AI": {"tldr": "Walrus\u662f\u4e00\u4e2a\u5d4c\u5165\u5728Haskell\u4e2d\u7684\u51fd\u6570\u5f0f\u5173\u7cfb\u7f16\u7a0b\u8bed\u8a00\uff0c\u6269\u5c55\u4e86miniKanren\u6a21\u578b\uff0c\u589e\u52a0\u4e86\u7c7b\u578b\u591a\u6001\u7edf\u4e00\u3001\u6309\u9700\u60f0\u6027\u6c42\u503c\u548c\u5b9e\u7528\u5f00\u53d1\u529f\u80fd\u3002", "motivation": "\u65e8\u5728\u89e3\u51b3\u5b9e\u9645\u5f00\u53d1\u4e2d\u7684\u53ef\u7528\u6027\u6311\u6218\uff0c\u4e3a\u53cc\u5411\u7f16\u8bd1\u5668\u5f00\u53d1\u7b49\u5e94\u7528\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u7a0b\u4f53\u9a8c\u548c\u5de5\u5177\u652f\u6301\u3002", "method": "\u901a\u8fc7Haskell\u6cdb\u578b\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u8c03\u8bd5\u8ddf\u8e2a\uff0c\u6539\u8fdb\u4e58\u79ef\u7c7b\u578b\u7684\u652f\u6301\uff0c\u5e76\u5728\u53cc\u5411\u7f16\u8bd1\u5668\u5f00\u53d1\u5b9e\u8df5\u4e2d\u9a8c\u8bc1\u8bbe\u8ba1\u3002", "result": "\u6210\u529f\u5b9e\u73b0\u4e86\u7c7b\u578b\u591a\u6001\u7edf\u4e00\u3001\u6309\u9700\u60f0\u6027\u6c42\u503c\u7b49\u6838\u5fc3\u529f\u80fd\uff0c\u5e76\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u5f00\u53d1\u5de5\u5177\u96c6\u3002", "conclusion": "Walrus\u901a\u8fc7\u6269\u5c55miniKanren\u6a21\u578b\u5e76\u6dfb\u52a0\u5b9e\u7528\u529f\u80fd\uff0c\u4e3a\u5173\u7cfb\u7f16\u7a0b\u63d0\u4f9b\u4e86\u66f4\u5b9e\u7528\u7684\u5f00\u53d1\u73af\u5883\uff0c\u8bbe\u8ba1\u51b3\u7b56\u5728\u5b9e\u8df5\u5e94\u7528\u4e2d\u5f97\u5230\u4e86\u9a8c\u8bc1\u3002"}}
{"id": "2510.03170", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.03170", "abs": "https://arxiv.org/abs/2510.03170", "authors": ["Rafaello Sanna", "William E. Byrd", "Nada Amin"], "title": "Beyond Cons: Purely Relational Data Structures", "comment": "17 pages, 6 figures, Source code available at\n  https://www.github.com/rvs314/faster-clpset-minikanren . To be published in\n  the 7th Workshop on miniKanren and Relational Programming (miniKanren'25)", "summary": "We present {Kanren} (read: set-Kanren), an extension to miniKanren with\nconstraints for reasoning about sets and association lists. {Kanren} includes\nfirst-class set objects, a functionally complete family of set-theoretic\nconstraints (including membership, union, and disjointedness), and new\nconstraints for reasoning about association lists with shadowing and scoped\nlookup. These additions allow programmers to describe collections declaratively\nand lazily, without relying on structural encodings and eager search over\nrepresentation spaces. The result is improved expressiveness and operational\nbehavior in programs that manipulate abstract data -- particularly interpreters\n-- by supporting set equality based on contents, enabling finite failure. We\ndescribe the design and implementation of {Kanren} in a constraint-enabled\nminiKanren system and illustrate its use in representative examples.", "AI": {"tldr": "Kanren\u662fminiKanren\u7684\u6269\u5c55\uff0c\u589e\u52a0\u4e86\u96c6\u5408\u548c\u5173\u8054\u5217\u8868\u7684\u7ea6\u675f\u63a8\u7406\u529f\u80fd\uff0c\u652f\u6301\u58f0\u660e\u5f0f\u7f16\u7a0b\u548c\u60f0\u6027\u6c42\u503c\u3002", "motivation": "\u4e3a\u4e86\u6539\u8fdb\u62bd\u8c61\u6570\u636e\u64cd\u4f5c\u7a0b\u5e8f\uff08\u7279\u522b\u662f\u89e3\u91ca\u5668\uff09\u7684\u8868\u8fbe\u80fd\u529b\u548c\u64cd\u4f5c\u884c\u4e3a\uff0c\u907f\u514d\u4f9d\u8d56\u7ed3\u6784\u7f16\u7801\u548c\u8868\u793a\u7a7a\u95f4\u7684\u6025\u5207\u641c\u7d22\u3002", "method": "\u5728\u652f\u6301\u7ea6\u675f\u7684miniKanren\u7cfb\u7edf\u4e2d\u8bbe\u8ba1\u5b9e\u73b0Kanren\uff0c\u5305\u62ec\u4e00\u9636\u96c6\u5408\u5bf9\u8c61\u3001\u5b8c\u6574\u7684\u96c6\u5408\u8bba\u7ea6\u675f\u65cf\uff08\u6210\u5458\u3001\u5e76\u96c6\u3001\u4e0d\u76f8\u4ea4\u6027\uff09\u4ee5\u53ca\u5173\u8054\u5217\u8868\u7684\u65b0\u7ea6\u675f\u3002", "result": "\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u652f\u6301\u57fa\u4e8e\u5185\u5bb9\u7684\u96c6\u5408\u76f8\u7b49\u6027\uff0c\u5b9e\u73b0\u6709\u9650\u5931\u8d25\u673a\u5236\u3002", "conclusion": "Kanren\u6269\u5c55\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u4ee5\u58f0\u660e\u5f0f\u548c\u60f0\u6027\u65b9\u5f0f\u63cf\u8ff0\u96c6\u5408\uff0c\u6539\u5584\u4e86\u62bd\u8c61\u6570\u636e\u64cd\u4f5c\u7a0b\u5e8f\u7684\u6027\u80fd\u3002"}}
{"id": "2510.02890", "categories": ["cs.LO", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.02890", "abs": "https://arxiv.org/abs/2510.02890", "authors": ["Philippe Balbiani", "Hans van Ditmarsch", "Clara Lerouvillois"], "title": "Axiomatisation for an asynchronous epistemic logic with sending and receiving messages", "comment": null, "summary": "We investigate a public announcement logic for asynchronous public\nannouncements wherein the sending of the announcements by the environment is\nseparated from the reception of the announcements by the individual agents.\nBoth come with different modalities. In the logical semantics, formulas are\ninterpreted in a world of a Kripke model but given a history of prior\nannouncements and receptions of announcements that already happened. An\naxiomatisation AA for such a logic has been given in prior work, for the\nformulas that are valid when interpreted in the Kripke model before any such\nannouncements have taken place. This axiomatisation is a reduction system\nwherein one can show that every formula is equivalent to a purely epistemic\nformula without dynamic modalities for announcements and receptions. We propose\na generalisation AA* of this axiomatisation, for the formulas that are valid\nwhen interpreted in the Kripke model given any history of prior announcements\nand receptions of announcements. It does not extend the axiomatisation AA, for\nexample it is no longer valid that nobody has received any announcement. Unlike\nAA, this axiomatisation AA* is infinitary and it is not a reduction system.", "AI": {"tldr": "Error", "motivation": "Error", "method": "Error", "result": "Error", "conclusion": "Error"}}
{"id": "2510.02387", "categories": ["cs.SE", "cs.AI", "cs.LG", "68T07", "I.2.7"], "pdf": "https://arxiv.org/pdf/2510.02387", "abs": "https://arxiv.org/abs/2510.02387", "authors": ["FAIR CodeGen team", "Quentin Carbonneaux", "Gal Cohen", "Jonas Gehring", "Jacob Kahn", "Jannik Kossen", "Felix Kreuk", "Emily McMilin", "Michel Meyer", "Yuxiang Wei", "David Zhang", "Kunhao Zheng", "Jordi Armengol-Estap\u00e9", "Pedram Bashiri", "Maximilian Beck", "Pierre Chambon", "Abhishek Charnalia", "Chris Cummins", "Juliette Decugis", "Zacharias V. Fisches", "Fran\u00e7ois Fleuret", "Fabian Gloeckle", "Alex Gu", "Michael Hassid", "Daniel Haziza", "Badr Youbi Idrissi", "Christian Keller", "Rahul Kindi", "Hugh Leather", "Gallil Maimon", "Aram Markosyan", "Francisco Massa", "Pierre-Emmanuel Mazar\u00e9", "Vegard Mella", "Naila Murray", "Keyur Muzumdar", "Peter O'Hearn", "Matteo Pagliardini", "Dmitrii Pedchenko", "Tal Remez", "Volker Seeker", "Marco Selvi", "Oren Sultan", "Sida Wang", "Luca Wehrstedt", "Ori Yoran", "Lingming Zhang", "Taco Cohen", "Yossi Adi", "Gabriel Synnaeve"], "title": "CWM: An Open-Weights LLM for Research on Code Generation with World Models", "comment": "58 pages", "summary": "We release Code World Model (CWM), a 32-billion-parameter open-weights LLM,\nto advance research on code generation with world models. To improve code\nunderstanding beyond what can be learned from training on static code alone, we\nmid-train CWM on a large amount of observation-action trajectories from Python\ninterpreter and agentic Docker environments, and perform extensive multi-task\nreasoning RL in verifiable coding, math, and multi-turn software engineering\nenvironments. With CWM, we provide a strong testbed for researchers to explore\nthe opportunities world modeling affords for improving code generation with\nreasoning and planning in computational environments. We present first steps of\nhow world models can benefit agentic coding, enable step-by-step simulation of\nPython code execution, and show early results of how reasoning can benefit from\nthe latter. CWM is a dense, decoder-only LLM trained with a context size of up\nto 131k tokens. Independent of its world modeling capabilities, CWM offers\nstrong performance on general coding and math tasks: it reaches pass@1 scores\nof 65.8% on SWE-bench Verified (with test-time scaling), 68.6% on\nLiveCodeBench, 96.6% on Math-500, and 76.0% on AIME 2024. To support further\nresearch on code world modeling, we release model checkpoints after\nmid-training, SFT, and RL.", "AI": {"tldr": "\u53d1\u5e03\u4e86Code World Model (CWM)\uff0c\u4e00\u4e2a320\u4ebf\u53c2\u6570\u7684\u5f00\u6e90LLM\uff0c\u901a\u8fc7\u4e16\u754c\u6a21\u578b\u8bad\u7ec3\u63d0\u5347\u4ee3\u7801\u751f\u6210\u80fd\u529b\uff0c\u5728\u591a\u79cd\u7f16\u7a0b\u548c\u6570\u5b66\u4efb\u52a1\u4e0a\u8868\u73b0\u4f18\u5f02\u3002", "motivation": "\u4e3a\u4e86\u8d85\u8d8a\u4ec5\u4ece\u9759\u6001\u4ee3\u7801\u8bad\u7ec3\u83b7\u5f97\u7684\u4ee3\u7801\u7406\u89e3\u80fd\u529b\uff0c\u63a2\u7d22\u4e16\u754c\u6a21\u578b\u5982\u4f55\u901a\u8fc7\u73af\u5883\u4ea4\u4e92\u8f68\u8ff9\u63d0\u5347\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u63a8\u7406\u548c\u89c4\u5212\u80fd\u529b\u3002", "method": "\u5728Python\u89e3\u91ca\u5668\u548cDocker\u73af\u5883\u4e2d\u8fdb\u884c\u5927\u89c4\u6a21\u89c2\u5bdf-\u884c\u52a8\u8f68\u8ff9\u7684\u4e2d\u671f\u8bad\u7ec3\uff0c\u5e76\u5728\u53ef\u9a8c\u8bc1\u7f16\u7801\u3001\u6570\u5b66\u548c\u591a\u8f6e\u8f6f\u4ef6\u5de5\u7a0b\u73af\u5883\u4e2d\u8fdb\u884c\u591a\u4efb\u52a1\u63a8\u7406\u5f3a\u5316\u5b66\u4e60\u3002", "result": "CWM\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8868\u73b0\u5f3a\u52b2\uff1aSWE-bench Verified 65.8%\u3001LiveCodeBench 68.6%\u3001Math-500 96.6%\u3001AIME 2024 76.0%\u3002", "conclusion": "CWM\u4e3a\u7814\u7a76\u4ee3\u7801\u4e16\u754c\u5efa\u6a21\u63d0\u4f9b\u4e86\u5f3a\u5927\u5e73\u53f0\uff0c\u5c55\u793a\u4e86\u4e16\u754c\u6a21\u578b\u5982\u4f55\u901a\u8fc7\u9010\u6b65\u6a21\u62df\u4ee3\u7801\u6267\u884c\u6765\u589e\u5f3a\u667a\u80fd\u7f16\u7801\u80fd\u529b\u3002"}}
{"id": "2510.03130", "categories": ["cs.LO", "D.3.1, F.3.2, F.4.3"], "pdf": "https://arxiv.org/pdf/2510.03130", "abs": "https://arxiv.org/abs/2510.03130", "authors": ["Robin Adams"], "title": "A Graded Modal Type Theory for Pulse Schedules", "comment": "12 pages, 1 figure", "summary": "We propose a language for representing the pulse schedules that a\nsuperconducting quantum computer accepts as input. The language is a graded\nmodal type theory named PSTT (Pulse Schedule Type Theory). Graded modals type\ntheories are type systems where each variable is annotated with a parameter or\ngrade. These can be used to represent, for example, resource usage, where the\ngrade denotes how many times a given resource may be used; or privacy levels,\nwhether a resource is private or public. In this system, we use the grades to\nrepresent timing information. We give categorical semantics to the system and\nprove soundness and completeness.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u8868\u793a\u8d85\u5bfc\u91cf\u5b50\u8ba1\u7b97\u673a\u8109\u51b2\u8c03\u5ea6\u8f93\u5165\u7684\u8bed\u8a00PSTT\uff0c\u8fd9\u662f\u4e00\u79cd\u5206\u7ea7\u6a21\u6001\u7c7b\u578b\u7406\u8bba\uff0c\u4f7f\u7528\u5206\u7ea7\u6765\u7f16\u7801\u65f6\u5e8f\u4fe1\u606f\u3002", "motivation": "\u9700\u8981\u4e00\u79cd\u80fd\u591f\u7cbe\u786e\u8868\u793a\u91cf\u5b50\u8ba1\u7b97\u673a\u8109\u51b2\u8c03\u5ea6\u7684\u8bed\u8a00\uff0c\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u5904\u7406\u65f6\u5e8f\u7ea6\u675f\u548c\u8d44\u6e90\u7ba1\u7406\u3002", "method": "\u5f00\u53d1\u4e86\u540d\u4e3aPSTT\u7684\u5206\u7ea7\u6a21\u6001\u7c7b\u578b\u7406\u8bba\uff0c\u5176\u4e2d\u53d8\u91cf\u7528\u53c2\u6570\u6216\u5206\u7ea7\u8fdb\u884c\u6ce8\u91ca\uff0c\u7528\u4e8e\u8868\u793a\u65f6\u5e8f\u4fe1\u606f\u3002\u63d0\u4f9b\u4e86\u8303\u7574\u8bed\u4e49\u5e76\u8bc1\u660e\u4e86\u7cfb\u7edf\u7684\u5b8c\u5907\u6027\u548c\u53ef\u9760\u6027\u3002", "result": "\u6210\u529f\u6784\u5efa\u4e86PSTT\u8bed\u8a00\uff0c\u80fd\u591f\u6709\u6548\u8868\u793a\u91cf\u5b50\u8109\u51b2\u8c03\u5ea6\uff0c\u5e76\u901a\u8fc7\u6570\u5b66\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4e86\u7cfb\u7edf\u7684\u6b63\u786e\u6027\u3002", "conclusion": "PSTT\u4e3a\u91cf\u5b50\u8ba1\u7b97\u4e2d\u7684\u8109\u51b2\u8c03\u5ea6\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f62\u5f0f\u5316\u3001\u7c7b\u578b\u5b89\u5168\u4e14\u5177\u6709\u65f6\u5e8f\u4fdd\u8bc1\u7684\u8868\u793a\u65b9\u6cd5\u3002"}}
{"id": "2510.02389", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.02389", "abs": "https://arxiv.org/abs/2510.02389", "authors": ["Haoran Xi", "Minghao Shao", "Brendan Dolan-Gavitt", "Muhammad Shafique", "Ramesh Karri"], "title": "From Trace to Line: LLM Agent for Real-World OSS Vulnerability Localization", "comment": null, "summary": "Large language models show promise for vulnerability discovery, yet\nprevailing methods inspect code in isolation, struggle with long contexts, and\nfocus on coarse function- or file-level detections - offering limited\nactionable guidance to engineers who need precise line-level localization and\ntargeted patches in real-world software development. We present T2L-Agent\n(Trace-to-Line Agent), a project-level, end-to-end framework that plans its own\nanalysis and progressively narrows scope from modules to exact vulnerable\nlines. T2L-Agent couples multi-round feedback with an Agentic Trace Analyzer\n(ATA) that fuses runtime evidence - crash points, stack traces, and coverage\ndeltas - with AST-based code chunking, enabling iterative refinement beyond\nsingle pass predictions and translating symptoms into actionable, line-level\ndiagnoses. To benchmark line-level vulnerability discovery, we introduce\nT2L-ARVO, a diverse, expert-verified 50-case benchmark spanning five crash\nfamilies and real-world projects. T2L-ARVO is specifically designed to support\nboth coarse-grained detection and fine-grained localization, enabling rigorous\nevaluation of systems that aim to move beyond file-level predictions. On\nT2L-ARVO, T2L-Agent achieves up to 58.0% detection and 54.8% line-level\nlocalization, substantially outperforming baselines. Together, the framework\nand benchmark push LLM-based vulnerability detection from coarse identification\ntoward deployable, robust, precision diagnostics that reduce noise and\naccelerate patching in open-source software workflows.", "AI": {"tldr": "T2L-Agent\u662f\u4e00\u4e2a\u9879\u76ee\u7ea7\u7684\u7aef\u5230\u7aef\u6846\u67b6\uff0c\u901a\u8fc7\u4ece\u6a21\u5757\u9010\u6b65\u7f29\u5c0f\u8303\u56f4\u5230\u5177\u4f53\u6f0f\u6d1e\u884c\uff0c\u7ed3\u5408\u8fd0\u884c\u65f6\u8bc1\u636e\u548cAST\u4ee3\u7801\u5206\u5757\uff0c\u5b9e\u73b0\u7cbe\u786e\u7684\u6f0f\u6d1e\u5b9a\u4f4d\u548c\u4fee\u590d\u6307\u5bfc\u3002", "motivation": "\u73b0\u6709\u6f0f\u6d1e\u68c0\u6d4b\u65b9\u6cd5\u5b64\u7acb\u5206\u6790\u4ee3\u7801\u3001\u96be\u4ee5\u5904\u7406\u957f\u4e0a\u4e0b\u6587\u3001\u4ec5\u63d0\u4f9b\u7c97\u7c92\u5ea6\u7684\u51fd\u6570\u6216\u6587\u4ef6\u7ea7\u68c0\u6d4b\uff0c\u65e0\u6cd5\u4e3a\u5de5\u7a0b\u5e08\u63d0\u4f9b\u7cbe\u786e\u7684\u884c\u7ea7\u5b9a\u4f4d\u548c\u9488\u5bf9\u6027\u4fee\u590d\u6307\u5bfc\u3002", "method": "T2L-Agent\u91c7\u7528\u591a\u8f6e\u53cd\u9988\u673a\u5236\uff0c\u7ed3\u5408Agentic Trace Analyzer(ATA)\u878d\u5408\u8fd0\u884c\u65f6\u8bc1\u636e\uff08\u5d29\u6e83\u70b9\u3001\u5806\u6808\u8ddf\u8e2a\u3001\u8986\u76d6\u7387\u5dee\u5f02\uff09\u548c\u57fa\u4e8eAST\u7684\u4ee3\u7801\u5206\u5757\uff0c\u5b9e\u73b0\u8fed\u4ee3\u7cbe\u70bc\u3002", "result": "\u5728T2L-ARVO\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cT2L-Agent\u8fbe\u523058.0%\u7684\u68c0\u6d4b\u7387\u548c54.8%\u7684\u884c\u7ea7\u5b9a\u4f4d\u7387\uff0c\u663e\u8457\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\u3002", "conclusion": "\u8be5\u6846\u67b6\u548c\u57fa\u51c6\u6d4b\u8bd5\u5c06\u57fa\u4e8eLLM\u7684\u6f0f\u6d1e\u68c0\u6d4b\u4ece\u7c97\u7c92\u5ea6\u8bc6\u522b\u63a8\u5411\u53ef\u90e8\u7f72\u3001\u9c81\u68d2\u3001\u7cbe\u786e\u7684\u8bca\u65ad\uff0c\u51cf\u5c11\u566a\u58f0\u5e76\u52a0\u901f\u5f00\u6e90\u8f6f\u4ef6\u5de5\u4f5c\u6d41\u4e2d\u7684\u4fee\u590d\u8fc7\u7a0b\u3002"}}
{"id": "2510.02393", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02393", "abs": "https://arxiv.org/abs/2510.02393", "authors": ["Jianqing Zhang", "Wei Xia", "Hande Dong", "Qiang Lin", "Jian Cao"], "title": "AP2O: Correcting LLM-Generated Code Errors Type by Type Like Humans via Adaptive Progressive Preference Optimization", "comment": null, "summary": "LLMs' code generation capabilities have yielded substantial improvements in\nthe effectiveness of programming tasks. However, LLM-generated code still\nsuffers from compilation and runtime errors. Existing offline preference\noptimization methods primarily focus on enhancing LLMs' coding abilities using\npass/fail signals in the preference data, overlooking the deep-level error\ntypes in the failed codes. To address this, we propose Adaptively Progressive\nPreference Optimization (AP2O) for coding (i.e., AP2O-Coder), a method that\nguides LLMs adaptively and methodically to reduce code errors for code\ngeneration. Specifically, we construct an error notebook from failed codes and\nprogressively optimize the LLM to correct errors type by type. Furthermore, we\nadaptively replay error types to tailor to the LLM's changing weaknesses\nthroughout the training process. Through extensive experiments on both code and\ngeneral LLMs (Llama, Qwen, and DeepSeek series) with parameters ranging from\n0.5B to 34B, our AP2O-Coder improves code generation performance by up to 3% in\npass@k while using less preference data. Code: https://github.com/TsingZ0/AP2O", "AI": {"tldr": "AP2O-Coder\u662f\u4e00\u79cd\u81ea\u9002\u5e94\u6e10\u8fdb\u504f\u597d\u4f18\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u5206\u6790\u5931\u8d25\u4ee3\u7801\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u9010\u6b65\u4f18\u5316LLM\u4ee5\u51cf\u5c11\u4ee3\u7801\u751f\u6210\u9519\u8bef\uff0c\u5728\u51cf\u5c11\u504f\u597d\u6570\u636e\u4f7f\u7528\u7684\u540c\u65f6\u63d0\u5347\u4ee3\u7801\u751f\u6210\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u79bb\u7ebf\u504f\u597d\u4f18\u5316\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u901a\u8fc7\u6210\u529f/\u5931\u8d25\u4fe1\u53f7\u63d0\u5347LLM\u7f16\u7801\u80fd\u529b\uff0c\u4f46\u5ffd\u7565\u4e86\u5931\u8d25\u4ee3\u7801\u4e2d\u7684\u6df1\u5c42\u9519\u8bef\u7c7b\u578b\u4fe1\u606f\u3002", "method": "\u6784\u5efa\u9519\u8bef\u7b14\u8bb0\u672c\u8bb0\u5f55\u5931\u8d25\u4ee3\u7801\uff0c\u6309\u9519\u8bef\u7c7b\u578b\u9010\u6b65\u4f18\u5316LLM\uff0c\u5e76\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u81ea\u9002\u5e94\u91cd\u653e\u9519\u8bef\u7c7b\u578b\u4ee5\u9002\u5e94LLM\u4e0d\u65ad\u53d8\u5316\u7684\u5f31\u70b9\u3002", "result": "\u57280.5B\u523034B\u53c2\u6570\u7684\u4ee3\u7801\u548c\u901a\u7528LLM\u4e0a\u5b9e\u9a8c\uff0cAP2O-Coder\u5c06\u4ee3\u7801\u751f\u6210\u6027\u80fd\u63d0\u5347\u9ad8\u8fbe3%\uff08pass@k\u6307\u6807\uff09\uff0c\u540c\u65f6\u4f7f\u7528\u66f4\u5c11\u7684\u504f\u597d\u6570\u636e\u3002", "conclusion": "AP2O-Coder\u901a\u8fc7\u5173\u6ce8\u9519\u8bef\u7c7b\u578b\u800c\u975e\u7b80\u5355\u6210\u529f/\u5931\u8d25\u4fe1\u53f7\uff0c\u6709\u6548\u63d0\u5347\u4e86LLM\u7684\u4ee3\u7801\u751f\u6210\u80fd\u529b\uff0c\u8bc1\u660e\u4e86\u6e10\u8fdb\u5f0f\u9519\u8bef\u7c7b\u578b\u4f18\u5316\u7684\u6709\u6548\u6027\u3002"}}
{"id": "2510.02404", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02404", "abs": "https://arxiv.org/abs/2510.02404", "authors": ["Siddharth Agarwal", "Maria A. Rodriguez", "Rajkumar Buyya"], "title": "Dynamic Function Configuration and its Management in Serverless Computing: A Taxonomy and Future Directions", "comment": "34 pages, 2 figures, 2 tables, journal", "summary": "The serverless cloud computing model offers a framework where the service\nprovider abstracts the underlying infrastructure management from developers. In\nthis serverless model, FaaS provides an event-driven, function-oriented\ncomputing service characterised by fine-grained, usage-based pricing that\neliminates cost for idle resources. Platforms like AWS Lambda, Azure Functions,\nand Cloud Run Functions require developers to configure their function(s) with\nminimum operational resources for its successful execution. This resource\nallocation influences both the operational expense and the performance quality\nof these functions. However, a noticeable lack of platform transparency forces\ndevelopers to rely on expert knowledge or experience-based ad-hoc decisions to\nrequest desired function resources. This makes optimal resource configuration a\nnon-trivial task while adhering to performance constraints. Furthermore, while\ncommercial platforms often scale resources like CPU and network bandwidth\nproportional to memory, open-source frameworks permit independent configuration\nof function resources, introducing additional complexity for developers aiming\nto optimise their functions. These complexities have directed researchers to\nresolve developer challenges and advance towards an efficient server-less\nexecution model. In this article, we identify different aspects of resource\nconfiguration techniques in FaaS settings and propose a taxonomy of factors\nthat influence function design, configuration, run-time cost, and performance\nguarantees. We conduct an analysis of existing literature on resource\nconfiguration to present a comprehensive review of current studies on function\nconfiguration. We also identify existing research gaps and suggest future\nresearch directions to enhance function configuration and strengthen the\ncapabilities of serverless computing environments to drive its broader\nadoption.", "AI": {"tldr": "\u672c\u6587\u5206\u6790\u4e86\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u4e2d\u51fd\u6570\u8d44\u6e90\u914d\u7f6e\u7684\u6311\u6218\uff0c\u63d0\u51fa\u4e86\u5f71\u54cd\u51fd\u6570\u8bbe\u8ba1\u3001\u914d\u7f6e\u3001\u6210\u672c\u548c\u6027\u80fd\u7684\u56e0\u7d20\u5206\u7c7b\u6cd5\uff0c\u5e76\u5bf9\u73b0\u6709\u8d44\u6e90\u914d\u7f6e\u7814\u7a76\u8fdb\u884c\u4e86\u5168\u9762\u7efc\u8ff0\u3002", "motivation": "\u65e0\u670d\u52a1\u5668\u5e73\u53f0\u7f3a\u4e4f\u900f\u660e\u5ea6\uff0c\u5f00\u53d1\u8005\u96be\u4ee5\u4f18\u5316\u8d44\u6e90\u914d\u7f6e\uff0c\u8fd9\u5f71\u54cd\u4e86\u8fd0\u8425\u6210\u672c\u548c\u6027\u80fd\u8d28\u91cf\u3002\u5f00\u6e90\u6846\u67b6\u5141\u8bb8\u72ec\u7acb\u914d\u7f6e\u8d44\u6e90\uff0c\u589e\u52a0\u4e86\u4f18\u5316\u590d\u6742\u6027\u3002", "method": "\u8bc6\u522b\u4e86FaaS\u73af\u5883\u4e2d\u8d44\u6e90\u914d\u7f6e\u6280\u672f\u7684\u4e0d\u540c\u65b9\u9762\uff0c\u63d0\u51fa\u4e86\u5f71\u54cd\u51fd\u6570\u8bbe\u8ba1\u3001\u914d\u7f6e\u3001\u8fd0\u884c\u6210\u672c\u548c\u6027\u80fd\u4fdd\u8bc1\u7684\u56e0\u7d20\u5206\u7c7b\u6cd5\uff0c\u5e76\u5bf9\u73b0\u6709\u6587\u732e\u8fdb\u884c\u4e86\u5206\u6790\u3002", "result": "\u5efa\u7acb\u4e86\u8d44\u6e90\u914d\u7f6e\u56e0\u7d20\u7684\u7efc\u5408\u5206\u7c7b\u6cd5\uff0c\u5bf9\u5f53\u524d\u51fd\u6570\u914d\u7f6e\u7814\u7a76\u8fdb\u884c\u4e86\u7cfb\u7edf\u7efc\u8ff0\uff0c\u8bc6\u522b\u4e86\u73b0\u6709\u7814\u7a76\u7a7a\u767d\u3002", "conclusion": "\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u6765\u589e\u5f3a\u51fd\u6570\u914d\u7f6e\u80fd\u529b\uff0c\u5f3a\u5316\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u73af\u5883\u7684\u529f\u80fd\uff0c\u63a8\u52a8\u5176\u66f4\u5e7f\u6cdb\u91c7\u7528\u3002"}}
{"id": "2510.02504", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02504", "abs": "https://arxiv.org/abs/2510.02504", "authors": ["Mara Ulloa", "Jenna L. Butler", "Sankeerti Haniyur", "Courtney Miller", "Barrett Amos", "Advait Sarkar", "Margaret-Anne Storey"], "title": "Product Manager Practices for Delegating Work to Generative AI: \"Accountability must not be delegated to non-human actors\"", "comment": "12 pages, 4 figures, 1 table", "summary": "Generative AI (GenAI) is changing the nature of knowledge work, particularly\nfor Product Managers (PMs) in software development teams. While much software\nengineering research has focused on developers' interactions with GenAI, there\nis less understanding of how the work of PMs is evolving due to GenAI. To\naddress this gap, we conducted a mixed-methods study at Microsoft, a large,\nmultinational software company: surveying 885 PMs, analyzing telemetry data for\na subset of PMs (N=731), and interviewing a subset of 15 PMs. We contribute:\n(1) PMs' current GenAI adoption rates, uses cases, and perceived benefits and\nbarriers and; (2) a framework capturing how PMs assess which tasks to delegate\nto GenAI; (3) PMs adaptation practices for integrating GenAI into their roles\nand perceptions of how their role is evolving. We end by discussing\nimplications on the broader GenAI workflow adoption process and software\ndevelopment roles.", "AI": {"tldr": "\u7814\u7a76\u5fae\u8f6f\u4ea7\u54c1\u7ecf\u7406\u5bf9\u751f\u6210\u5f0fAI\u7684\u91c7\u7528\u60c5\u51b5\u3001\u4f7f\u7528\u6848\u4f8b\u3001\u611f\u77e5\u6548\u76ca\u4e0e\u969c\u788d\uff0c\u4ee5\u53ca\u4efb\u52a1\u59d4\u6258\u6846\u67b6\u548c\u89d2\u8272\u9002\u5e94\u5b9e\u8df5\u3002", "motivation": "\u751f\u6210\u5f0fAI\u6b63\u5728\u6539\u53d8\u77e5\u8bc6\u5de5\u4f5c\u7684\u6027\u8d28\uff0c\u4f46\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u5173\u6ce8\u5f00\u53d1\u8005\u4e0eGenAI\u7684\u4e92\u52a8\uff0c\u5bf9\u4ea7\u54c1\u7ecf\u7406\u5de5\u4f5c\u5982\u4f55\u56e0GenAI\u800c\u6f14\u53d8\u7684\u7406\u89e3\u8f83\u5c11\u3002", "method": "\u5728\u5fae\u8f6f\u8fdb\u884c\u6df7\u5408\u65b9\u6cd5\u7814\u7a76\uff1a\u8c03\u67e5885\u540d\u4ea7\u54c1\u7ecf\u7406\uff0c\u5206\u6790731\u540d\u4ea7\u54c1\u7ecf\u7406\u7684\u9065\u6d4b\u6570\u636e\uff0c\u8bbf\u8c0815\u540d\u4ea7\u54c1\u7ecf\u7406\u3002", "result": "\u63d0\u4f9b\u4e86\u4ea7\u54c1\u7ecf\u7406\u5f53\u524d\u7684GenAI\u91c7\u7528\u7387\u3001\u4f7f\u7528\u6848\u4f8b\u3001\u611f\u77e5\u6548\u76ca\u548c\u969c\u788d\uff1b\u63d0\u51fa\u4e86\u4ea7\u54c1\u7ecf\u7406\u8bc4\u4f30\u54ea\u4e9b\u4efb\u52a1\u59d4\u6258\u7ed9GenAI\u7684\u6846\u67b6\uff1b\u63cf\u8ff0\u4e86\u4ea7\u54c1\u7ecf\u7406\u6574\u5408GenAI\u5230\u5176\u89d2\u8272\u7684\u9002\u5e94\u5b9e\u8df5\u3002", "conclusion": "\u8ba8\u8bba\u4e86GenAI\u5de5\u4f5c\u6d41\u91c7\u7528\u8fc7\u7a0b\u548c\u8f6f\u4ef6\u5f00\u53d1\u89d2\u8272\u7684\u66f4\u5e7f\u6cdb\u5f71\u54cd\u3002"}}
{"id": "2510.02534", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02534", "abs": "https://arxiv.org/abs/2510.02534", "authors": ["Mohsen Iranmanesh", "Sina Moradi Sabet", "Sina Marefat", "Ali Javidi Ghasr", "Allison Wilson", "Iman Sharafaldin", "Mohammad A. Tayebi"], "title": "ZeroFalse: Improving Precision in Static Analysis with LLMs", "comment": null, "summary": "Static Application Security Testing (SAST) tools are integral to modern\nsoftware development, yet their adoption is undermined by excessive false\npositives that weaken developer trust and demand costly manual triage. We\npresent ZeroFalse, a framework that integrates static analysis with large\nlanguage models (LLMs) to reduce false positives while preserving coverage.\nZeroFalse treats static analyzer outputs as structured contracts, enriching\nthem with flow-sensitive traces, contextual evidence, and CWE-specific\nknowledge before adjudication by an LLM. This design preserves the systematic\nreach of static analysis while leveraging the reasoning capabilities of LLMs.\nWe evaluate ZeroFalse across both benchmarks and real-world projects using ten\nstate-of-the-art LLMs. Our best-performing models achieve F1-scores of 0.912 on\nthe OWASP Java Benchmark and 0.955 on the OpenVuln dataset, maintaining recall\nand precision above 90%. Results further show that CWE-specialized prompting\nconsistently outperforms generic prompts, and reasoning-oriented LLMs provide\nthe most reliable precision-recall balance. These findings position ZeroFalse\nas a practical and scalable approach for enhancing the reliability of SAST and\nsupporting its integration into real-world CI/CD pipelines.", "AI": {"tldr": "ZeroFalse\u6846\u67b6\u7ed3\u5408\u9759\u6001\u5206\u6790\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff0c\u901a\u8fc7\u5c06\u9759\u6001\u5206\u6790\u5668\u8f93\u51fa\u4f5c\u4e3a\u7ed3\u6784\u5316\u5408\u7ea6\u5904\u7406\uff0c\u5e76\u6dfb\u52a0\u6d41\u654f\u611f\u8ffd\u8e2a\u3001\u4e0a\u4e0b\u6587\u8bc1\u636e\u548cCWE\u7279\u5b9a\u77e5\u8bc6\uff0c\u663e\u8457\u51cf\u5c11SAST\u5de5\u5177\u7684\u8bef\u62a5\u7387\uff0c\u540c\u65f6\u4fdd\u6301\u8986\u76d6\u7387\u3002", "motivation": "SAST\u5de5\u5177\u5728\u73b0\u4ee3\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u8fc7\u9ad8\u7684\u8bef\u62a5\u7387\u524a\u5f31\u4e86\u5f00\u53d1\u8005\u7684\u4fe1\u4efb\u5e76\u9700\u8981\u6602\u8d35\u7684\u4eba\u5de5\u6392\u67e5\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u51cf\u5c11\u8bef\u62a5\u540c\u65f6\u4fdd\u6301\u8986\u76d6\u8303\u56f4\u3002", "method": "\u5c06\u9759\u6001\u5206\u6790\u5668\u8f93\u51fa\u89c6\u4e3a\u7ed3\u6784\u5316\u5408\u7ea6\uff0c\u901a\u8fc7\u6dfb\u52a0\u6d41\u654f\u611f\u8ffd\u8e2a\u3001\u4e0a\u4e0b\u6587\u8bc1\u636e\u548cCWE\u7279\u5b9a\u77e5\u8bc6\u6765\u4e30\u5bcc\u5206\u6790\u7ed3\u679c\uff0c\u7136\u540e\u7531LLM\u8fdb\u884c\u88c1\u51b3\uff0c\u7ed3\u5408\u9759\u6001\u5206\u6790\u7684\u7cfb\u7edf\u6027\u8986\u76d6\u548cLLM\u7684\u63a8\u7406\u80fd\u529b\u3002", "result": "\u5728OWASP Java Benchmark\u4e0aF1\u5206\u6570\u8fbe\u52300.912\uff0c\u5728OpenVuln\u6570\u636e\u96c6\u4e0a\u8fbe\u52300.955\uff0c\u53ec\u56de\u7387\u548c\u7cbe\u786e\u7387\u5747\u4fdd\u6301\u572890%\u4ee5\u4e0a\uff0cCWE\u4e13\u7528\u63d0\u793a\u4f18\u4e8e\u901a\u7528\u63d0\u793a\uff0c\u63a8\u7406\u5bfc\u5411\u7684LLM\u63d0\u4f9b\u6700\u53ef\u9760\u7684\u7cbe\u786e\u7387-\u53ec\u56de\u7387\u5e73\u8861\u3002", "conclusion": "ZeroFalse\u662f\u4e00\u4e2a\u5b9e\u7528\u4e14\u53ef\u6269\u5c55\u7684\u65b9\u6cd5\uff0c\u53ef\u589e\u5f3aSAST\u7684\u53ef\u9760\u6027\u5e76\u652f\u6301\u5176\u96c6\u6210\u5230\u771f\u5b9e\u7684CI/CD\u6d41\u6c34\u7ebf\u4e2d\u3002"}}
{"id": "2510.02585", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02585", "abs": "https://arxiv.org/abs/2510.02585", "authors": ["Majid Dashtbani", "Ladan Tahvildari"], "title": "Key Considerations for Auto-Scaling: Lessons from Benchmark Microservices", "comment": null, "summary": "Microservices have become the dominant architectural paradigm for building\nscalable and modular cloud-native systems. However, achieving effective\nauto-scaling in such systems remains a non-trivial challenge, as it depends not\nonly on advanced scaling techniques but also on sound design, implementation,\nand deployment practices. Yet, these foundational aspects are often overlooked\nin existing benchmarks, making it difficult to evaluate autoscaling methods\nunder realistic conditions. In this paper, we identify a set of practical\nauto-scaling considerations by applying several state-of-the-art autoscaling\nmethods to widely used microservice benchmarks. To structure these findings, we\nclassify the issues based on when they arise during the software lifecycle:\nArchitecture, Implementation, and Deployment. The Architecture phase covers\nhigh-level decisions such as service decomposition and inter-service\ndependencies. The Implementation phase includes aspects like initialization\noverhead, metrics instrumentation, and error propagation. The Deployment phase\nfocuses on runtime configurations such as resource limits and health checks. We\nvalidate these considerations using the Sock-Shop benchmark and evaluate\ndiverse auto-scaling strategies, including threshold-based, control-theoretic,\nlearning-based, black-box optimization, and dependency-aware approaches. Our\nfindings show that overlooking key lifecycle concerns can degrade autoscaler\nperformance, while addressing them leads to more stable and efficient scaling.\nThese results underscore the importance of lifecycle-aware engineering for\nunlocking the full potential of auto-scaling in microservice-based systems.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u5c06\u591a\u79cd\u5148\u8fdb\u7684\u81ea\u52a8\u6269\u7f29\u65b9\u6cd5\u5e94\u7528\u4e8e\u5fae\u670d\u52a1\u57fa\u51c6\u6d4b\u8bd5\uff0c\u8bc6\u522b\u4e86\u5fae\u670d\u52a1\u81ea\u52a8\u6269\u7f29\u7684\u5b9e\u9645\u8003\u8651\u56e0\u7d20\uff0c\u5e76\u57fa\u4e8e\u8f6f\u4ef6\u751f\u547d\u5468\u671f\uff08\u67b6\u6784\u3001\u5b9e\u73b0\u3001\u90e8\u7f72\uff09\u5bf9\u8fd9\u4e9b\u56e0\u7d20\u8fdb\u884c\u5206\u7c7b\uff0c\u5f3a\u8c03\u4e86\u751f\u547d\u5468\u671f\u611f\u77e5\u5de5\u7a0b\u5bf9\u5b9e\u73b0\u6709\u6548\u81ea\u52a8\u6269\u7f29\u7684\u91cd\u8981\u6027\u3002", "motivation": "\u5fae\u670d\u52a1\u5df2\u6210\u4e3a\u6784\u5efa\u53ef\u6269\u5c55\u4e91\u539f\u751f\u7cfb\u7edf\u7684\u4e3b\u6d41\u67b6\u6784\u8303\u5f0f\uff0c\u4f46\u5b9e\u73b0\u6709\u6548\u7684\u81ea\u52a8\u6269\u7f29\u4ecd\u9762\u4e34\u6311\u6218\u3002\u73b0\u6709\u57fa\u51c6\u6d4b\u8bd5\u5f80\u5f80\u5ffd\u89c6\u8bbe\u8ba1\u3001\u5b9e\u73b0\u548c\u90e8\u7f72\u7b49\u57fa\u7840\u65b9\u9762\uff0c\u96be\u4ee5\u5728\u771f\u5b9e\u6761\u4ef6\u4e0b\u8bc4\u4f30\u81ea\u52a8\u6269\u7f29\u65b9\u6cd5\u3002", "method": "\u5c06\u591a\u79cd\u5148\u8fdb\u7684\u81ea\u52a8\u6269\u7f29\u65b9\u6cd5\u5e94\u7528\u4e8e\u5e7f\u6cdb\u4f7f\u7528\u7684\u5fae\u670d\u52a1\u57fa\u51c6\u6d4b\u8bd5\uff0c\u8bc6\u522b\u5b9e\u9645\u8003\u8651\u56e0\u7d20\uff0c\u5e76\u57fa\u4e8e\u8f6f\u4ef6\u751f\u547d\u5468\u671f\uff08\u67b6\u6784\u3001\u5b9e\u73b0\u3001\u90e8\u7f72\uff09\u8fdb\u884c\u5206\u7c7b\u3002\u4f7f\u7528Sock-Shop\u57fa\u51c6\u9a8c\u8bc1\u8fd9\u4e9b\u8003\u8651\u56e0\u7d20\uff0c\u8bc4\u4f30\u5305\u62ec\u57fa\u4e8e\u9608\u503c\u3001\u63a7\u5236\u7406\u8bba\u3001\u5b66\u4e60\u578b\u3001\u9ed1\u76d2\u4f18\u5316\u548c\u4f9d\u8d56\u611f\u77e5\u7b49\u591a\u6837\u5316\u81ea\u52a8\u6269\u7f29\u7b56\u7565\u3002", "result": "\u7814\u7a76\u7ed3\u679c\u8868\u660e\uff0c\u5ffd\u89c6\u5173\u952e\u751f\u547d\u5468\u671f\u95ee\u9898\u4f1a\u964d\u4f4e\u81ea\u52a8\u6269\u7f29\u5668\u6027\u80fd\uff0c\u800c\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u53ef\u5b9e\u73b0\u66f4\u7a33\u5b9a\u548c\u9ad8\u6548\u7684\u6269\u7f29\u3002", "conclusion": "\u8fd9\u4e9b\u7ed3\u679c\u5f3a\u8c03\u4e86\u751f\u547d\u5468\u671f\u611f\u77e5\u5de5\u7a0b\u5bf9\u4e8e\u91ca\u653e\u5fae\u670d\u52a1\u7cfb\u7edf\u4e2d\u81ea\u52a8\u6269\u7f29\u5168\u90e8\u6f5c\u529b\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2510.02609", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02609", "abs": "https://arxiv.org/abs/2510.02609", "authors": ["Chengquan Guo", "Chulin Xie", "Yu Yang", "Zhaorun Chen", "Zinan Lin", "Xander Davies", "Yarin Gal", "Dawn Song", "Bo Li"], "title": "RedCodeAgent: Automatic Red-teaming Agent against Diverse Code Agents", "comment": null, "summary": "Code agents have gained widespread adoption due to their strong code\ngeneration capabilities and integration with code interpreters, enabling\ndynamic execution, debugging, and interactive programming capabilities. While\nthese advancements have streamlined complex workflows, they have also\nintroduced critical safety and security risks. Current static safety benchmarks\nand red-teaming tools are inadequate for identifying emerging real-world risky\nscenarios, as they fail to cover certain boundary conditions, such as the\ncombined effects of different jailbreak tools. In this work, we propose\nRedCodeAgent, the first automated red-teaming agent designed to systematically\nuncover vulnerabilities in diverse code agents. With an adaptive memory module,\nRedCodeAgent can leverage existing jailbreak knowledge, dynamically select the\nmost effective red-teaming tools and tool combinations in a tailored toolbox\nfor a given input query, thus identifying vulnerabilities that might otherwise\nbe overlooked. For reliable evaluation, we develop simulated sandbox\nenvironments to additionally evaluate the execution results of code agents,\nmitigating potential biases of LLM-based judges that only rely on static code.\nThrough extensive evaluations across multiple state-of-the-art code agents,\ndiverse risky scenarios, and various programming languages, RedCodeAgent\nconsistently outperforms existing red-teaming methods, achieving higher attack\nsuccess rates and lower rejection rates with high efficiency. We further\nvalidate RedCodeAgent on real-world code assistants, e.g., Cursor and Codeium,\nexposing previously unidentified security risks. By automating and optimizing\nred-teaming processes, RedCodeAgent enables scalable, adaptive, and effective\nsafety assessments of code agents.", "AI": {"tldr": "\u63d0\u51fa\u4e86RedCodeAgent\uff0c\u9996\u4e2a\u81ea\u52a8\u5316\u7ea2\u961f\u4ee3\u7406\uff0c\u7528\u4e8e\u7cfb\u7edf\u6027\u5730\u53d1\u73b0\u4ee3\u7801\u4ee3\u7406\u4e2d\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u81ea\u9002\u5e94\u8bb0\u5fc6\u6a21\u5757\u548c\u5b9a\u5236\u5de5\u5177\u7bb1\uff0c\u80fd\u591f\u52a8\u6001\u9009\u62e9\u6700\u6709\u6548\u7684\u7ea2\u961f\u5de5\u5177\u7ec4\u5408\uff0c\u5728\u6a21\u62df\u6c99\u76d2\u73af\u5883\u4e2d\u8bc4\u4f30\u6267\u884c\u7ed3\u679c\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u4ee3\u7801\u4ee3\u7406\u7684\u5e7f\u6cdb\u5e94\u7528\u5e26\u6765\u4e86\u4e25\u91cd\u7684\u5b89\u5168\u98ce\u9669\uff0c\u73b0\u6709\u7684\u9759\u6001\u5b89\u5168\u57fa\u51c6\u548c\u7ea2\u961f\u5de5\u5177\u65e0\u6cd5\u8986\u76d6\u65b0\u5174\u7684\u771f\u5b9e\u98ce\u9669\u573a\u666f\uff0c\u7279\u522b\u662f\u4e0d\u540c\u8d8a\u72f1\u5de5\u5177\u7ec4\u5408\u7684\u8fb9\u754c\u6761\u4ef6\u3002", "method": "\u5f00\u53d1\u4e86RedCodeAgent\uff0c\u5305\u542b\u81ea\u9002\u5e94\u8bb0\u5fc6\u6a21\u5757\u6765\u5229\u7528\u73b0\u6709\u8d8a\u72f1\u77e5\u8bc6\uff0c\u52a8\u6001\u9009\u62e9\u6700\u6709\u6548\u7684\u7ea2\u961f\u5de5\u5177\u548c\u5de5\u5177\u7ec4\u5408\uff0c\u5e76\u5728\u6a21\u62df\u6c99\u76d2\u73af\u5883\u4e2d\u8bc4\u4f30\u4ee3\u7801\u4ee3\u7406\u7684\u6267\u884c\u7ed3\u679c\u3002", "result": "\u5728\u591a\u4e2a\u6700\u5148\u8fdb\u4ee3\u7801\u4ee3\u7406\u3001\u591a\u6837\u5316\u98ce\u9669\u573a\u666f\u548c\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u5e7f\u6cdb\u8bc4\u4f30\u4e2d\uff0cRedCodeAgent\u59cb\u7ec8\u4f18\u4e8e\u73b0\u6709\u7ea2\u961f\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e86\u66f4\u9ad8\u7684\u653b\u51fb\u6210\u529f\u7387\u3001\u66f4\u4f4e\u7684\u62d2\u7edd\u7387\u548c\u9ad8\u6548\u7387\u3002\u5728\u771f\u5b9e\u4e16\u754c\u4ee3\u7801\u52a9\u624b\uff08\u5982Cursor\u548cCodeium\uff09\u4e0a\u4e5f\u66b4\u9732\u4e86\u5148\u524d\u672a\u8bc6\u522b\u7684\u5b89\u5168\u98ce\u9669\u3002", "conclusion": "\u901a\u8fc7\u81ea\u52a8\u5316\u548c\u4f18\u5316\u7ea2\u961f\u6d41\u7a0b\uff0cRedCodeAgent\u5b9e\u73b0\u4e86\u5bf9\u4ee3\u7801\u4ee3\u7406\u7684\u53ef\u6269\u5c55\u3001\u81ea\u9002\u5e94\u548c\u6709\u6548\u7684\u5b89\u5168\u8bc4\u4f30\u3002"}}
{"id": "2510.02634", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.02634", "abs": "https://arxiv.org/abs/2510.02634", "authors": ["Hanlong Wan", "Weili Xu", "Michael Rosenberg", "Jian Zhang", "Aysha Siddika"], "title": "Automatic Building Code Review: A Case Study", "comment": null, "summary": "Building officials, particularly those in resource-constrained or rural\njurisdictions, face labor-intensive, error-prone, and costly manual reviews of\ndesign documents as projects increase in size and complexity. The growing\nadoption of Building Information Modeling (BIM) and Large Language Models\n(LLMs) presents opportunities for automated code review (ACR) solutions. This\nstudy introduces a novel agent-driven framework that integrates BIM-based data\nextraction with automated verification using both retrieval-augmented\ngeneration (RAG) and Model Context Protocol (MCP) agent pipelines. The\nframework employs LLM-enabled agents to extract geometry, schedules, and system\nattributes from heterogeneous file types, which are then processed for building\ncode checking through two complementary mechanisms: (1) direct API calls to the\nUS Department of Energy COMcheck engine, providing deterministic and\naudit-ready outputs, and (2) RAG-based reasoning over rule provisions, enabling\nflexible interpretation where coverage is incomplete or ambiguous.\n  The framework was evaluated through case demonstrations, including automated\nextraction of geometric attributes (such as surface area, tilt, and insulation\nvalues), parsing of operational schedules, and validation of lighting\nallowances under ASHRAE Standard 90.1-2022. Comparative performance tests\nacross multiple LLMs showed that GPT-4o achieved the best balance of efficiency\nand stability, while smaller models exhibited inconsistencies or failures.\nResults confirm that MCP agent pipelines outperform RAG reasoning pipelines in\nrigor and reliability. This work advances ACR research by demonstrating a\nscalable, interoperable, and production-ready approach that bridges BIM with\nauthoritative code review tools.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eBIM\u548cLLM\u7684\u81ea\u52a8\u5316\u5efa\u7b51\u89c4\u8303\u5ba1\u67e5\u6846\u67b6\uff0c\u7ed3\u5408RAG\u548cMCP\u4ee3\u7406\u7ba1\u9053\uff0c\u5b9e\u73b0\u51e0\u4f55\u5c5e\u6027\u63d0\u53d6\u548c\u89c4\u8303\u9a8c\u8bc1\u3002", "motivation": "\u89e3\u51b3\u8d44\u6e90\u53d7\u9650\u5730\u533a\u5efa\u7b51\u5b98\u5458\u9762\u4e34\u7684\u8bbe\u8ba1\u6587\u6863\u4eba\u5de5\u5ba1\u67e5\u52b3\u52a8\u5bc6\u96c6\u3001\u6613\u51fa\u9519\u4e14\u6210\u672c\u9ad8\u7684\u95ee\u9898\uff0c\u5229\u7528BIM\u548cLLM\u6280\u672f\u5b9e\u73b0\u81ea\u52a8\u5316\u89c4\u8303\u5ba1\u67e5\u3002", "method": "\u5f00\u53d1\u4ee3\u7406\u9a71\u52a8\u6846\u67b6\uff0c\u96c6\u6210BIM\u6570\u636e\u63d0\u53d6\u4e0e\u81ea\u52a8\u5316\u9a8c\u8bc1\uff0c\u4f7f\u7528RAG\u548cMCP\u4ee3\u7406\u7ba1\u9053\uff0c\u901a\u8fc7COMcheck API\u548c\u57fa\u4e8e\u89c4\u5219\u7684\u63a8\u7406\u8fdb\u884c\u5efa\u7b51\u89c4\u8303\u68c0\u67e5\u3002", "result": "GPT-4o\u5728\u6548\u7387\u548c\u7a33\u5b9a\u6027\u65b9\u9762\u8868\u73b0\u6700\u4f73\uff0cMCP\u4ee3\u7406\u7ba1\u9053\u5728\u4e25\u8c28\u6027\u548c\u53ef\u9760\u6027\u4e0a\u4f18\u4e8eRAG\u63a8\u7406\u7ba1\u9053\uff0c\u6210\u529f\u5b9e\u73b0\u51e0\u4f55\u5c5e\u6027\u63d0\u53d6\u548c\u7167\u660e\u89c4\u8303\u9a8c\u8bc1\u3002", "conclusion": "\u8be5\u7814\u7a76\u5c55\u793a\u4e86\u53ef\u6269\u5c55\u3001\u53ef\u4e92\u64cd\u4f5c\u4e14\u751f\u4ea7\u5c31\u7eea\u7684\u81ea\u52a8\u5316\u89c4\u8303\u5ba1\u67e5\u65b9\u6cd5\uff0c\u5c06BIM\u4e0e\u6743\u5a01\u89c4\u8303\u5ba1\u67e5\u5de5\u5177\u6709\u6548\u7ed3\u5408\u3002"}}
{"id": "2510.02718", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02718", "abs": "https://arxiv.org/abs/2510.02718", "authors": ["Ali Ghanbari", "Sasan Tavakkol"], "title": "Using Fourier Analysis and Mutant Clustering to Accelerate DNN Mutation Testing", "comment": "2025 40th IEEE/ACM International Conference on Automated Software\n  Engineering (ASE)", "summary": "Deep neural network (DNN) mutation analysis is a promising approach to\nevaluating test set adequacy. Due to the large number of generated mutants that\nmust be tested on large datasets, mutation analysis is costly. In this paper,\nwe present a technique, named DM#, for accelerating DNN mutation testing using\nFourier analysis. The key insight is that DNN outputs are real-valued functions\nsuitable for Fourier analysis that can be leveraged to quantify mutant behavior\nusing only a few data points. DM# uses the quantified mutant behavior to\ncluster the mutants so that the ones with similar behavior fall into the same\ngroup. A representative from each group is then selected for testing, and the\nresult of the test, e.g., whether the mutant is killed or survived, is reused\nfor all other mutants represented by the selected mutant, obviating the need\nfor testing other mutants. 14 DNN models of sizes ranging from thousands to\nmillions of parameters, trained on different datasets, are used to evaluate DM#\nand compare it to several baseline techniques. Our results provide empirical\nevidence on the effectiveness of DM# in accelerating mutation testing by\n28.38%, on average, at the average cost of only 0.72% error in mutation score.\nMoreover, on average, DM# incurs 11.78, 15.16, and 114.36 times less mutation\nscore error compared to random mutant selection, boundary sample selection, and\nrandom sample selection techniques, respectively, while generally offering\ncomparable speed-up.", "AI": {"tldr": "DM#\u662f\u4e00\u79cd\u57fa\u4e8e\u5085\u91cc\u53f6\u5206\u6790\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7a81\u53d8\u6d4b\u8bd5\u52a0\u901f\u6280\u672f\uff0c\u901a\u8fc7\u91cf\u5316\u7a81\u53d8\u4f53\u884c\u4e3a\u8fdb\u884c\u805a\u7c7b\uff0c\u4ec5\u6d4b\u8bd5\u4ee3\u8868\u6027\u7a81\u53d8\u4f53\uff0c\u663e\u8457\u51cf\u5c11\u6d4b\u8bd5\u6210\u672c\u3002", "motivation": "\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7a81\u53d8\u5206\u6790\u6210\u672c\u9ad8\u6602\uff0c\u56e0\u4e3a\u9700\u8981\u6d4b\u8bd5\u5927\u91cf\u751f\u6210\u7684\u7a81\u53d8\u4f53\u548c\u5927\u89c4\u6a21\u6570\u636e\u96c6\u3002", "method": "\u5229\u7528\u5085\u91cc\u53f6\u5206\u6790\u91cf\u5316\u7a81\u53d8\u4f53\u884c\u4e3a\uff0c\u8fdb\u884c\u805a\u7c7b\u5206\u7ec4\uff0c\u6bcf\u7ec4\u4ec5\u6d4b\u8bd5\u4e00\u4e2a\u4ee3\u8868\u6027\u7a81\u53d8\u4f53\uff0c\u7ed3\u679c\u590d\u7528\u7ed9\u540c\u7ec4\u5176\u4ed6\u7a81\u53d8\u4f53\u3002", "result": "\u572814\u4e2a\u4e0d\u540c\u89c4\u6a21\u7684DNN\u6a21\u578b\u4e0a\u8bc4\u4f30\uff0c\u5e73\u5747\u52a0\u901f28.38%\uff0c\u7a81\u53d8\u5206\u6570\u8bef\u5dee\u4ec50.72%\uff0c\u76f8\u6bd4\u5176\u4ed6\u65b9\u6cd5\u8bef\u5dee\u663e\u8457\u964d\u4f4e\u3002", "conclusion": "DM#\u80fd\u6709\u6548\u52a0\u901fDNN\u7a81\u53d8\u6d4b\u8bd5\uff0c\u5728\u4fdd\u6301\u51c6\u786e\u6027\u7684\u540c\u65f6\u5927\u5e45\u51cf\u5c11\u8ba1\u7b97\u6210\u672c\u3002"}}
{"id": "2510.02773", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.02773", "abs": "https://arxiv.org/abs/2510.02773", "authors": ["Tamjid Al Rahat", "Yanju Chen", "Yu Feng", "Yuan Tian"], "title": "Automated Repair of OpenID Connect Programs (Extended Version)", "comment": "This is an extended version. The original paper is accepted to ASE\n  2025", "summary": "OpenID Connect has revolutionized online authentication based on single\nsign-on (SSO) by providing a secure and convenient method for accessing\nmultiple services with a single set of credentials. Despite its widespread\nadoption, critical security bugs in OpenID Connect have resulted in significant\nfinancial losses and security breaches, highlighting the need for robust\nmitigation strategies. Automated program repair presents a promising solution\nfor generating candidate patches for OpenID implementations. However,\nchallenges such as domain-specific complexities and the necessity for precise\nfault localization and patch verification must be addressed. We propose\nAuthFix, a counterexample-guided repair engine leveraging LLMs for automated\nOpenID bug fixing. AuthFix integrates three key components: fault localization,\npatch synthesis, and patch verification. By employing a novel Petri-net-based\nmodel checker, AuthFix ensures the correctness of patches by effectively\nmodeling interactions. Our evaluation on a dataset of OpenID bugs demonstrates\nthat AuthFix successfully generated correct patches for 17 out of 23 bugs\n(74%), with a high proportion of patches semantically equivalent to\ndeveloper-written fixes.", "AI": {"tldr": "AuthFix\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u7684OpenID\u8fde\u63a5\u6f0f\u6d1e\u81ea\u52a8\u4fee\u590d\u5f15\u64ce\uff0c\u901a\u8fc7\u53cd\u4f8b\u5f15\u5bfc\u7684\u4fee\u590d\u65b9\u6cd5\uff0c\u6210\u529f\u4fee\u590d\u4e8674%\u7684OpenID\u6f0f\u6d1e\u3002", "motivation": "OpenID Connect\u867d\u7136\u5e7f\u6cdb\u91c7\u7528\uff0c\u4f46\u5b58\u5728\u4e25\u91cd\u5b89\u5168\u6f0f\u6d1e\u5bfc\u81f4\u91cd\u5927\u7ecf\u6d4e\u635f\u5931\uff0c\u9700\u8981\u5f3a\u5927\u7684\u81ea\u52a8\u5316\u4fee\u590d\u7b56\u7565\u3002", "method": "AuthFix\u96c6\u6210\u4e09\u4e2a\u5173\u952e\u7ec4\u4ef6\uff1a\u6545\u969c\u5b9a\u4f4d\u3001\u8865\u4e01\u5408\u6210\u548c\u8865\u4e01\u9a8c\u8bc1\uff0c\u91c7\u7528\u65b0\u9896\u7684Petri\u7f51\u6a21\u578b\u68c0\u67e5\u5668\u786e\u4fdd\u8865\u4e01\u6b63\u786e\u6027\u3002", "result": "\u572823\u4e2aOpenID\u6f0f\u6d1e\u6570\u636e\u96c6\u4e0a\uff0cAuthFix\u6210\u529f\u4e3a17\u4e2a\u6f0f\u6d1e\uff0874%\uff09\u751f\u6210\u4e86\u6b63\u786e\u8865\u4e01\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u8865\u4e01\u4e0e\u5f00\u53d1\u8005\u7f16\u5199\u7684\u4fee\u590d\u5728\u8bed\u4e49\u4e0a\u7b49\u4ef7\u3002", "conclusion": "AuthFix\u8bc1\u660e\u4e86\u57fa\u4e8eLLM\u7684\u81ea\u52a8\u5316\u7a0b\u5e8f\u4fee\u590d\u5728OpenID\u5b89\u5168\u6f0f\u6d1e\u4fee\u590d\u4e2d\u7684\u6709\u6548\u6027\uff0c\u4e3a\u590d\u6742\u9886\u57df\u7279\u5b9a\u7cfb\u7edf\u7684\u5b89\u5168\u4fee\u590d\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2510.02854", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02854", "abs": "https://arxiv.org/abs/2510.02854", "authors": ["Boshuai Ye", "Arif Ali Khan", "Teemu Pihkakoski", "Peng Liang", "Muhammad Azeem Akbar", "Matti Silveri", "Lauri Malmi"], "title": "C2|Q>: A Robust Framework for Bridging Classical and Quantum Software Development", "comment": "46 pages, 8 images, 14 tables, Manuscript submitted to a Journal\n  (2025)", "summary": "Quantum Software Engineering (QSE) is emerging as a critical discipline to\nmake quantum computing accessible to a broader developer community; however,\nmost quantum development environments still require developers to engage with\nlow-level details across the software stack - including problem encoding,\ncircuit construction, algorithm configuration, hardware selection, and result\ninterpretation - making them difficult for classical software engineers to use.\nTo bridge this gap, we present C2|Q>: a hardware-agnostic quantum software\ndevelopment framework that translates classical specifications (code) into\nquantum-executable programs while preserving methodological rigor. The\nframework applies modular software engineering principles by classifying the\nworkflow into three core modules: an encoder that classifies problems, produces\nQuantum-Compatible Formats (QCFs), and constructs quantum circuits, a\ndeployment module that generates circuits and recommends hardware based on\nfidelity, runtime, and cost, and a decoder that interprets quantum outputs into\nclassical solutions. In evaluation, the encoder module achieved a 93.8%\ncompletion rate, the hardware recommendation module consistently selected the\nappropriate quantum devices for workloads scaling up to 56 qubits, and the full\nC2|Q>: workflow successfully processed classical specifications (434 Python\nsnippets and 100 JSON inputs) with completion rates of 93.8% and 100%,\nrespectively. For case study problems executed on publicly available NISQ\nhardware, C2|Q>: reduced the required implementation effort by nearly 40X\ncompared to manual implementations using low-level quantum software development\nkits (SDKs), with empirical runs limited to small- and medium-sized instances\nconsistent with current NISQ capabilities. The open-source implementation of\nC2|Q>: is available at https://github.com/C2-Q/C2Q", "AI": {"tldr": "C2|Q>\u662f\u4e00\u4e2a\u786c\u4ef6\u65e0\u5173\u7684\u91cf\u5b50\u8f6f\u4ef6\u5f00\u53d1\u6846\u67b6\uff0c\u901a\u8fc7\u5c06\u7ecf\u5178\u4ee3\u7801\u89c4\u8303\u8f6c\u6362\u4e3a\u91cf\u5b50\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u4f7f\u7ecf\u5178\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u80fd\u591f\u66f4\u5bb9\u6613\u5730\u8fdb\u884c\u91cf\u5b50\u8ba1\u7b97\u5f00\u53d1\u3002", "motivation": "\u5f53\u524d\u91cf\u5b50\u5f00\u53d1\u73af\u5883\u8981\u6c42\u5f00\u53d1\u8005\u5904\u7406\u8f6f\u4ef6\u6808\u7684\u4f4e\u5c42\u7ec6\u8282\uff0c\u5305\u62ec\u95ee\u9898\u7f16\u7801\u3001\u7535\u8def\u6784\u5efa\u3001\u7b97\u6cd5\u914d\u7f6e\u3001\u786c\u4ef6\u9009\u62e9\u548c\u7ed3\u679c\u89e3\u91ca\u7b49\uff0c\u8fd9\u4f7f\u5f97\u7ecf\u5178\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u96be\u4ee5\u4f7f\u7528\u91cf\u5b50\u8ba1\u7b97\u3002", "method": "\u6846\u67b6\u91c7\u7528\u6a21\u5757\u5316\u8f6f\u4ef6\u5de5\u7a0b\u539f\u5219\uff0c\u5c06\u5de5\u4f5c\u6d41\u5206\u4e3a\u4e09\u4e2a\u6838\u5fc3\u6a21\u5757\uff1a\u7f16\u7801\u5668\uff08\u5206\u7c7b\u95ee\u9898\u3001\u751f\u6210\u91cf\u5b50\u517c\u5bb9\u683c\u5f0f\u3001\u6784\u5efa\u91cf\u5b50\u7535\u8def\uff09\u3001\u90e8\u7f72\u6a21\u5757\uff08\u751f\u6210\u7535\u8def\u3001\u57fa\u4e8e\u4fdd\u771f\u5ea6\u3001\u8fd0\u884c\u65f6\u95f4\u548c\u6210\u672c\u63a8\u8350\u786c\u4ef6\uff09\u3001\u89e3\u7801\u5668\uff08\u5c06\u91cf\u5b50\u8f93\u51fa\u89e3\u91ca\u4e3a\u7ecf\u5178\u89e3\u51b3\u65b9\u6848\uff09\u3002", "result": "\u7f16\u7801\u5668\u6a21\u5757\u5b8c\u6210\u7387\u8fbe\u523093.8%\uff0c\u786c\u4ef6\u63a8\u8350\u6a21\u5757\u4e3a\u6700\u591a56\u91cf\u5b50\u6bd4\u7279\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6b63\u786e\u9009\u62e9\u91cf\u5b50\u8bbe\u5907\uff0c\u5b8c\u6574C2|Q>\u5de5\u4f5c\u6d41\u5904\u7406\u4e86434\u4e2aPython\u4ee3\u7801\u7247\u6bb5\u548c100\u4e2aJSON\u8f93\u5165\uff0c\u5b8c\u6210\u7387\u5206\u522b\u4e3a93.8%\u548c100%\u3002\u5728NISQ\u786c\u4ef6\u4e0a\u7684\u6848\u4f8b\u7814\u7a76\u4e2d\uff0c\u76f8\u6bd4\u4f7f\u7528\u4f4e\u5c42\u91cf\u5b50SDK\u7684\u624b\u52a8\u5b9e\u73b0\uff0cC2|Q>\u51cf\u5c11\u4e86\u8fd140\u500d\u7684\u5b9e\u65bd\u5de5\u4f5c\u91cf\u3002", "conclusion": "C2|Q>\u6846\u67b6\u6210\u529f\u5730\u5c06\u91cf\u5b50\u8f6f\u4ef6\u5f00\u53d1\u62bd\u8c61\u5316\uff0c\u663e\u8457\u964d\u4f4e\u4e86\u7ecf\u5178\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u8fdb\u5165\u91cf\u5b50\u8ba1\u7b97\u9886\u57df\u7684\u95e8\u69db\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u65b9\u6cd5\u8bba\u7684\u4e25\u8c28\u6027\u3002"}}
{"id": "2510.02887", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02887", "abs": "https://arxiv.org/abs/2510.02887", "authors": ["Zhao Zhang", "Qingyuan Liang", "Zeyu Sun", "Yizhou Chen", "Guoqing Wang", "Yican Sun", "Lu Zhang", "Ge Li", "Yingfei Xiong"], "title": "GramTrans: A Better Code Representation Approach in Code Generation", "comment": null, "summary": "Code generation has shown great promise in assisting software development. A\nfundamental yet underexplored question is how the choice of code representation\naffects model performance. While existing studies employ various\nrepresentations, such as treating code as plain text, grammar rule sequences,\nor syntax tree sequences, they lack a principled understanding of the\nrelationship between parsing difficulty and model effectiveness. This paper\nproposes a conjecture: the easier a representation is to parse, the better\nperformance the model achieves. We formalize this idea using grammar classes,\nwhere representations in simpler classes (e.g., LL(1)) are easier to parse.\nThrough a controlled experiment on a Python-based DSL, we show that parsing\ndifficulty strongly correlates with model performance. Motivated by this\nfinding, we present GramTrans, a general approach that automatically transforms\na context-free language into a representation within the LL(1) class. GramTrans\nintroduces a novel hierarchical conflict elimination algorithm, enabling a\nflexible trade-off between syntactic simplicity and token efficiency. We\nevaluate GramTrans on both Python and Java using three code generation models:\nStarCoder 1B, DeepSeek-Coder 1.3B, and Qwen2.5 1.5B. Across multiple\nbenchmarks, GramTrans consistently delivers significant improvements over\nbaseline representations. Furthermore, our analysis of existing representations\nreconfirms the strong alignment between parsing difficulty and model\nperformance, providing additional support for the conjecture.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e00\u4e2a\u731c\u60f3\uff1a\u4ee3\u7801\u8868\u793a\u8d8a\u5bb9\u6613\u89e3\u6790\uff0c\u6a21\u578b\u6027\u80fd\u8d8a\u597d\u3002\u901a\u8fc7GramTrans\u65b9\u6cd5\u5c06\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\u8f6c\u6362\u4e3aLL(1)\u7c7b\u8868\u793a\uff0c\u5b9e\u9a8c\u8bc1\u660e\u89e3\u6790\u96be\u5ea6\u4e0e\u6a21\u578b\u6027\u80fd\u5f3a\u76f8\u5173\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u4f7f\u7528\u4e0d\u540c\u4ee3\u7801\u8868\u793a\uff08\u7eaf\u6587\u672c\u3001\u8bed\u6cd5\u89c4\u5219\u5e8f\u5217\u3001\u8bed\u6cd5\u6811\u5e8f\u5217\uff09\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u89e3\u6790\u96be\u5ea6\u4e0e\u6a21\u578b\u6548\u679c\u5173\u7cfb\u7684\u7cfb\u7edf\u6027\u7406\u89e3\u3002", "method": "\u63d0\u51faGramTrans\u65b9\u6cd5\uff0c\u4f7f\u7528\u5206\u5c42\u51b2\u7a81\u6d88\u9664\u7b97\u6cd5\u5c06\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\u8f6c\u6362\u4e3aLL(1)\u7c7b\u8868\u793a\uff0c\u5e73\u8861\u8bed\u6cd5\u7b80\u5355\u6027\u548c\u6807\u8bb0\u6548\u7387\u3002", "result": "\u5728Python\u548cJava\u4e0a\u4f7f\u7528\u4e09\u4e2a\u4ee3\u7801\u751f\u6210\u6a21\u578b\u8bc4\u4f30\uff0cGramTrans\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u663e\u8457\u4f18\u4e8e\u57fa\u7ebf\u8868\u793a\u3002", "conclusion": "\u89e3\u6790\u96be\u5ea6\u4e0e\u6a21\u578b\u6027\u80fd\u5f3a\u76f8\u5173\uff0cGramTrans\u65b9\u6cd5\u80fd\u6709\u6548\u63d0\u5347\u4ee3\u7801\u751f\u6210\u6a21\u578b\u6027\u80fd\u3002"}}
{"id": "2510.02917", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.02917", "abs": "https://arxiv.org/abs/2510.02917", "authors": ["Kriz Tahimic", "Charibeth Cheng"], "title": "Mechanistic Interpretability of Code Correctness in LLMs via Sparse Autoencoders", "comment": null, "summary": "As Large Language Models become integral to software development, with\nsubstantial portions of AI-suggested code entering production, understanding\ntheir internal correctness mechanisms becomes critical for safe deployment. We\napply sparse autoencoders to decompose LLM representations, identifying\ndirections that correspond to code correctness. We select predictor directions\nusing t-statistics and steering directions through separation scores from base\nmodel representations, then analyze their mechanistic properties through\nsteering, attention analysis, and weight orthogonalization. We find that code\ncorrectness directions in LLMs reliably predict incorrect code, while\ncorrection capabilities, though statistically significant, involve tradeoffs\nbetween fixing errors and preserving correct code. Mechanistically, successful\ncode generation depends on attending to test cases rather than problem\ndescriptions. Moreover, directions identified in base models retain their\neffectiveness after instruction-tuning, suggesting code correctness mechanisms\nlearned during pre-training are repurposed during fine-tuning. Our mechanistic\ninsights suggest three practical applications: prompting strategies should\nprioritize test examples over elaborate problem descriptions, predictor\ndirections can serve as error alarms for developer review, and these same\npredictors can guide selective steering, intervening only when errors are\nanticipated to prevent the code corruption from constant steering.", "AI": {"tldr": "\u8be5\u8bba\u6587\u901a\u8fc7\u7a00\u758f\u81ea\u7f16\u7801\u5668\u5206\u6790LLM\u5185\u90e8\u8868\u793a\uff0c\u8bc6\u522b\u51fa\u4e0e\u4ee3\u7801\u6b63\u786e\u6027\u76f8\u5173\u7684\u65b9\u5411\uff0c\u5e76\u53d1\u73b0\u8fd9\u4e9b\u65b9\u5411\u80fd\u53ef\u9760\u9884\u6d4b\u9519\u8bef\u4ee3\u7801\u3002\u7814\u7a76\u63ed\u793a\u4e86\u4ee3\u7801\u751f\u6210\u673a\u5236\u4f9d\u8d56\u4e8e\u5173\u6ce8\u6d4b\u8bd5\u7528\u4f8b\u800c\u975e\u95ee\u9898\u63cf\u8ff0\uff0c\u4e14\u57fa\u7840\u6a21\u578b\u4e2d\u5b66\u5230\u7684\u4ee3\u7801\u6b63\u786e\u6027\u673a\u5236\u5728\u6307\u4ee4\u5fae\u8c03\u540e\u4ecd\u4fdd\u6301\u6709\u6548\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u7406\u89e3\u5176\u5185\u90e8\u4ee3\u7801\u6b63\u786e\u6027\u673a\u5236\u5bf9\u4e8e\u5b89\u5168\u90e8\u7f72\u81f3\u5173\u91cd\u8981\u3002\u7814\u7a76\u65e8\u5728\u63ed\u793aLLM\u5982\u4f55\u5185\u90e8\u8868\u793a\u548c\u5904\u7406\u4ee3\u7801\u6b63\u786e\u6027\u3002", "method": "\u4f7f\u7528\u7a00\u758f\u81ea\u7f16\u7801\u5668\u5206\u89e3LLM\u8868\u793a\uff0c\u901a\u8fc7t\u7edf\u8ba1\u91cf\u9009\u62e9\u9884\u6d4b\u65b9\u5411\uff0c\u901a\u8fc7\u5206\u79bb\u5206\u6570\u4ece\u57fa\u7840\u6a21\u578b\u8868\u793a\u4e2d\u786e\u5b9a\u5f15\u5bfc\u65b9\u5411\uff0c\u7136\u540e\u901a\u8fc7\u5f15\u5bfc\u3001\u6ce8\u610f\u529b\u5206\u6790\u548c\u6743\u91cd\u6b63\u4ea4\u5316\u5206\u6790\u5176\u673a\u5236\u7279\u6027\u3002", "result": "\u53d1\u73b0\u4ee3\u7801\u6b63\u786e\u6027\u65b9\u5411\u80fd\u53ef\u9760\u9884\u6d4b\u9519\u8bef\u4ee3\u7801\uff0c\u4f46\u7ea0\u9519\u80fd\u529b\u6d89\u53ca\u4fee\u590d\u9519\u8bef\u4e0e\u4fdd\u7559\u6b63\u786e\u4ee3\u7801\u4e4b\u95f4\u7684\u6743\u8861\u3002\u6210\u529f\u7684\u4ee3\u7801\u751f\u6210\u4f9d\u8d56\u4e8e\u5173\u6ce8\u6d4b\u8bd5\u7528\u4f8b\u800c\u975e\u95ee\u9898\u63cf\u8ff0\u3002\u57fa\u7840\u6a21\u578b\u4e2d\u8bc6\u522b\u7684\u65b9\u5411\u5728\u6307\u4ee4\u5fae\u8c03\u540e\u4ecd\u4fdd\u6301\u6709\u6548\u6027\u3002", "conclusion": "\u7814\u7a76\u63d0\u51fa\u4e86\u4e09\u4e2a\u5b9e\u9645\u5e94\u7528\uff1a\u63d0\u793a\u7b56\u7565\u5e94\u4f18\u5148\u8003\u8651\u6d4b\u8bd5\u793a\u4f8b\u800c\u975e\u8be6\u7ec6\u95ee\u9898\u63cf\u8ff0\uff0c\u9884\u6d4b\u65b9\u5411\u53ef\u4f5c\u4e3a\u5f00\u53d1\u8005\u5ba1\u67e5\u7684\u9519\u8bef\u8b66\u62a5\uff0c\u8fd9\u4e9b\u9884\u6d4b\u5668\u53ef\u6307\u5bfc\u9009\u62e9\u6027\u5f15\u5bfc\uff0c\u4ec5\u5728\u9884\u671f\u9519\u8bef\u65f6\u8fdb\u884c\u5e72\u9884\u4ee5\u907f\u514d\u4ee3\u7801\u635f\u574f\u3002"}}
{"id": "2510.02934", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02934", "abs": "https://arxiv.org/abs/2510.02934", "authors": ["Thanh Trong Vu", "Tuan-Dung Bui", "Thu-Trang Nguyen", "Son Nguyen", "Hieu Dinh Vo"], "title": "Model-Agnostic Correctness Assessment for LLM-Generated Code via Dynamic Internal Representation Selection", "comment": null, "summary": "Large Language Models (LLMs) have demonstrated impressive capabilities in\ncode generation and are increasingly integrated into the software development\nprocess. However, ensuring the correctness of LLM-generated code remains a\ncritical concern. Prior work has shown that the internal representations of\nLLMs encode meaningful signals for assessing code correctness. Nevertheless,\nthe existing methods rely on representations from pre-selected/fixed layers and\ntoken positions, which could limit its generalizability across diverse model\narchitectures and tasks. In this work, we introduce AUTOPROBE, a novel\nmodel-agnostic approach that dynamically selects the most informative internal\nrepresentations for code correctness assessment. AUTOPROBE employs an\nattention-based mechanism to learn importance scores for hidden states,\nenabling it to focus on the most relevant features. These weighted\nrepresentations are then aggregated and passed to a probing classifier to\npredict code correctness across multiple dimensions, including compilability,\nfunctionality, and security. To evaluate the performance of AUTOPROBE, we\nconduct extensive experiments across multiple benchmarks and code LLMs. Our\nexperimental results show that AUTOPROBE consistently outperforms the\nbaselines. For security assessment, AUTOPROBE surpasses the state-of-the-art\nwhite-box approach by 18%. For compilability and functionality assessment,\nAUTOPROBE demonstrates its highest robustness to code complexity, with the\nperformance higher than the other approaches by up to 19% and 111%,\nrespectively. These findings highlight that dynamically selecting important\ninternal signals enables AUTOPROBE to serve as a robust and generalizable\nsolution for assessing the correctness of code generated by various LLMs.", "AI": {"tldr": "AUTOPROBE\u662f\u4e00\u79cd\u6a21\u578b\u65e0\u5173\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u52a8\u6001\u9009\u62e9LLM\u5185\u90e8\u6700\u6709\u4fe1\u606f\u91cf\u7684\u8868\u793a\u6765\u8bc4\u4f30\u4ee3\u7801\u6b63\u786e\u6027\uff0c\u5728\u7f16\u8bd1\u6027\u3001\u529f\u80fd\u6027\u548c\u5b89\u5168\u6027\u8bc4\u4f30\u65b9\u9762\u5747\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u4f9d\u8d56\u9884\u9009\u5c42\u548c\u6807\u8bb0\u4f4d\u7f6e\u7684\u8868\u793a\uff0c\u9650\u5236\u4e86\u5728\u4e0d\u540c\u6a21\u578b\u67b6\u6784\u548c\u4efb\u52a1\u95f4\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u9700\u8981\u4e00\u79cd\u66f4\u901a\u7528\u7684\u4ee3\u7801\u6b63\u786e\u6027\u8bc4\u4f30\u65b9\u6cd5\u3002", "method": "\u4f7f\u7528\u57fa\u4e8e\u6ce8\u610f\u529b\u7684\u673a\u5236\u5b66\u4e60\u9690\u85cf\u72b6\u6001\u7684\u91cd\u8981\u6027\u5206\u6570\uff0c\u805a\u7126\u6700\u76f8\u5173\u7279\u5f81\uff0c\u7136\u540e\u805a\u5408\u52a0\u6743\u8868\u793a\u5e76\u901a\u8fc7\u63a2\u6d4b\u5206\u7c7b\u5668\u9884\u6d4b\u4ee3\u7801\u6b63\u786e\u6027\u3002", "result": "\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u548c\u4ee3\u7801LLM\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0cAUTOPROBE\u59cb\u7ec8\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\u3002\u5b89\u5168\u6027\u8bc4\u4f30\u8d85\u8d8a\u6700\u5148\u8fdb\u767d\u76d2\u65b9\u6cd518%\uff0c\u7f16\u8bd1\u6027\u548c\u529f\u80fd\u6027\u8bc4\u4f30\u5206\u522b\u6bd4\u5176\u4ed6\u65b9\u6cd5\u9ad819%\u548c111%\u3002", "conclusion": "\u52a8\u6001\u9009\u62e9\u91cd\u8981\u5185\u90e8\u4fe1\u53f7\u4f7fAUTOPROBE\u6210\u4e3a\u8bc4\u4f30\u5404\u79cdLLM\u751f\u6210\u4ee3\u7801\u6b63\u786e\u6027\u7684\u9c81\u68d2\u4e14\u53ef\u6cdb\u5316\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.02991", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.02991", "abs": "https://arxiv.org/abs/2510.02991", "authors": ["Carlos Albuquerque", "Filipe F. Correia"], "title": "Tracing and Metrics Design Patterns for Monitoring Cloud-native Applications", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "Observability helps ensure the reliability and maintainability of\ncloud-native applications. As software architectures become increasingly\ndistributed and subject to change, it becomes a greater challenge to diagnose\nsystem issues effectively, often having to deal with fragmented observability\nand more difficult root cause analysis. This paper builds upon our previous\nwork and introduces three design patterns that address key challenges in\nmonitoring cloud-native applications. Distributed Tracing improves visibility\ninto request flows across services, aiding in latency analysis and root cause\ndetection, Application Metrics provides a structured approach to instrumenting\napplications with meaningful performance indicators, enabling real-time\nmonitoring and anomaly detection, and Infrastructure Metrics focuses on\nmonitoring the environment in which the system is operated, helping teams\nassess resource utilization, scalability, and operational health. These\npatterns are derived from industry practices and observability frameworks and\naim to offer guidance for software practitioners.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e09\u79cd\u4e91\u539f\u751f\u5e94\u7528\u76d1\u63a7\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u5206\u5e03\u5f0f\u8ffd\u8e2a\u3001\u5e94\u7528\u6307\u6807\u548c\u57fa\u7840\u8bbe\u65bd\u6307\u6807\uff0c\u4ee5\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u53ef\u89c2\u6d4b\u6027\u6311\u6218\u3002", "motivation": "\u968f\u7740\u8f6f\u4ef6\u67b6\u6784\u65e5\u76ca\u5206\u5e03\u5f0f\u548c\u6613\u53d8\uff0c\u8bca\u65ad\u7cfb\u7edf\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\uff0c\u9700\u8981\u5e94\u5bf9\u788e\u7247\u5316\u53ef\u89c2\u6d4b\u6027\u548c\u66f4\u590d\u6742\u7684\u6839\u56e0\u5206\u6790\u6311\u6218\u3002", "method": "\u57fa\u4e8e\u5148\u524d\u5de5\u4f5c\uff0c\u5f15\u5165\u4e09\u79cd\u8bbe\u8ba1\u6a21\u5f0f\uff1a\u5206\u5e03\u5f0f\u8ffd\u8e2a\u6539\u8fdb\u8de8\u670d\u52a1\u8bf7\u6c42\u6d41\u7684\u53ef\u89c1\u6027\uff0c\u5e94\u7528\u6307\u6807\u63d0\u4f9b\u7ed3\u6784\u5316\u5e94\u7528\u6027\u80fd\u76d1\u63a7\u65b9\u6cd5\uff0c\u57fa\u7840\u8bbe\u65bd\u6307\u6807\u76d1\u63a7\u7cfb\u7edf\u8fd0\u884c\u73af\u5883\u3002", "result": "\u8fd9\u4e9b\u6a21\u5f0f\u6e90\u81ea\u884c\u4e1a\u5b9e\u8df5\u548c\u53ef\u89c2\u6d4b\u6027\u6846\u67b6\uff0c\u4e3a\u8f6f\u4ef6\u4ece\u4e1a\u8005\u63d0\u4f9b\u6307\u5bfc\uff0c\u5e2e\u52a9\u6539\u5584\u7cfb\u7edf\u53ef\u9760\u6027\u3001\u5ef6\u8fdf\u5206\u6790\u548c\u6839\u56e0\u68c0\u6d4b\u3002", "conclusion": "\u4e09\u79cd\u8bbe\u8ba1\u6a21\u5f0f\u5171\u540c\u6784\u6210\u4e86\u4e91\u539f\u751f\u5e94\u7528\u53ef\u89c2\u6d4b\u6027\u7684\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u52a9\u4e8e\u786e\u4fdd\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002"}}
{"id": "2510.03005", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03005", "abs": "https://arxiv.org/abs/2510.03005", "authors": ["Daniel Pinho", "Petr P\u00edcha", "Filipe Correia", "P\u0159emek Brada"], "title": "Patterns for Teaching Agile with Student Projects -- Team and Project Setup", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "Higher education courses teaching about agile software development (ASD) have\nincreased in commonality as the ideas behind the Agile Manifesto became more\ncommonplace in the industry. However, a lot of the literature on how ASD is\napplied in the classroom does not provide much actionable advice, focusing on\nframeworks or even moving beyond the software development area into teaching in\nan agile way. We, therefore, showcase early work on a pattern language that\nfocuses on teaching ASD practices to university students, which stems from our\nown experiences as educators in higher education contexts. We present five\npatterns, specifically focused on team and project setup phase: Capping Team\nSize, Smaller Project Scope, Business Non-Critical Project, Self-assembling\nTeams, and Team Chooses Topic as a starting point for developing the overall\npattern language.", "AI": {"tldr": "\u63d0\u51fa\u7528\u4e8e\u6559\u6388\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1(ASD)\u7684\u5927\u5b66\u8bfe\u7a0b\u6a21\u5f0f\u8bed\u8a00\uff0c\u91cd\u70b9\u5173\u6ce8\u56e2\u961f\u548c\u9879\u76ee\u8bbe\u7f6e\u9636\u6bb5\u7684\u4e94\u4e2a\u5177\u4f53\u6a21\u5f0f\u3002", "motivation": "\u73b0\u6709\u5173\u4e8eASD\u6559\u5b66\u65b9\u6cd5\u7684\u6587\u732e\u7f3a\u4e4f\u53ef\u64cd\u4f5c\u5efa\u8bae\uff0c\u8981\u4e48\u8fc7\u4e8e\u5173\u6ce8\u6846\u67b6\uff0c\u8981\u4e48\u504f\u79bb\u8f6f\u4ef6\u5f00\u53d1\u672c\u8eab\u800c\u8f6c\u5411\u654f\u6377\u6559\u5b66\u65b9\u5f0f\u3002", "method": "\u57fa\u4e8e\u9ad8\u7b49\u6559\u80b2\u80cc\u666f\u4e0b\u7684\u6559\u5b66\u7ecf\u9a8c\uff0c\u5f00\u53d1\u6a21\u5f0f\u8bed\u8a00\uff0c\u63d0\u51fa\u4e94\u4e2a\u56e2\u961f\u548c\u9879\u76ee\u8bbe\u7f6e\u9636\u6bb5\u7684\u6a21\u5f0f\uff1a\u9650\u5236\u56e2\u961f\u89c4\u6a21\u3001\u7f29\u5c0f\u9879\u76ee\u8303\u56f4\u3001\u975e\u5173\u952e\u4e1a\u52a1\u9879\u76ee\u3001\u81ea\u7ec4\u7ec7\u56e2\u961f\u3001\u56e2\u961f\u9009\u62e9\u4e3b\u9898\u3002", "result": "\u5c55\u793a\u4e86\u6a21\u5f0f\u8bed\u8a00\u7684\u65e9\u671f\u5de5\u4f5c\uff0c\u63d0\u4f9b\u4e86\u4e94\u4e2a\u5177\u4f53\u6a21\u5f0f\u4f5c\u4e3a\u6574\u4f53\u6a21\u5f0f\u8bed\u8a00\u5f00\u53d1\u7684\u8d77\u70b9\u3002", "conclusion": "\u8fd9\u4e9b\u6a21\u5f0f\u4e3a\u6559\u6388ASD\u5b9e\u8df5\u63d0\u4f9b\u4e86\u5177\u4f53\u7684\u3001\u53ef\u64cd\u4f5c\u7684\u6559\u5b66\u6307\u5bfc\uff0c\u586b\u8865\u4e86\u73b0\u6709\u6587\u732e\u7684\u7a7a\u767d\u3002"}}
{"id": "2510.03029", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.03029", "abs": "https://arxiv.org/abs/2510.03029", "authors": ["Debalina Ghosh Paul", "Hong Zhu", "Ian Bayley"], "title": "Investigating The Smells of LLM Generated Code", "comment": null, "summary": "Context: Large Language Models (LLMs) are increasingly being used to generate\nprogram code. Much research has been reported on the functional correctness of\ngenerated code, but there is far less on code quality.\n  Objectives: In this study, we propose a scenario-based method of evaluating\nthe quality of LLM-generated code to identify the weakest scenarios in which\nthe quality of LLM generated code should be improved.\n  Methods: The method measures code smells, an important indicator of code\nquality, and compares them with a baseline formed from reference solutions of\nprofessionally written code. The test dataset is divided into various subsets\naccording to the topics of the code and complexity of the coding tasks to\nrepresent different scenarios of using LLMs for code generation. We will also\npresent an automated test system for this purpose and report experiments with\nthe Java programs generated in response to prompts given to four\nstate-of-the-art LLMs: Gemini Pro, ChatGPT, Codex, and Falcon.\n  Results: We find that LLM-generated code has a higher incidence of code\nsmells compared to reference solutions. Falcon performed the least badly, with\na smell increase of 42.28%, followed by Gemini Pro (62.07%), ChatGPT (65.05%)\nand finally Codex (84.97%). The average smell increase across all LLMs was\n63.34%, comprising 73.35% for implementation smells and 21.42% for design\nsmells. We also found that the increase in code smells is greater for more\ncomplex coding tasks and for more advanced topics, such as those involving\nobject-orientated concepts.\n  Conclusion: In terms of code smells, LLM's performances on various coding\ntask complexities and topics are highly correlated to the quality of human\nwritten code in the corresponding scenarios. However, the quality of LLM\ngenerated code is noticeably poorer than human written code.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u573a\u666f\u7684\u65b9\u6cd5\u6765\u8bc4\u4f30LLM\u751f\u6210\u4ee3\u7801\u7684\u8d28\u91cf\uff0c\u901a\u8fc7\u6d4b\u91cf\u4ee3\u7801\u5f02\u5473\u5e76\u4e0e\u4e13\u4e1a\u7f16\u5199\u7684\u53c2\u8003\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\uff0c\u53d1\u73b0\u5728\u4ee3\u7801\u8d28\u91cf\u65b9\u9762LLM\u751f\u6210\u7684\u4ee3\u7801\u660e\u663e\u5dee\u4e8e\u4eba\u7c7b\u7f16\u5199\u7684\u4ee3\u7801\u3002", "motivation": "\u76ee\u524d\u5173\u4e8eLLM\u751f\u6210\u4ee3\u7801\u7684\u7814\u7a76\u4e3b\u8981\u96c6\u4e2d\u5728\u529f\u80fd\u6b63\u786e\u6027\u4e0a\uff0c\u800c\u5bf9\u4ee3\u7801\u8d28\u91cf\u7684\u7814\u7a76\u8f83\u5c11\u3002\u672c\u6587\u65e8\u5728\u8bc4\u4f30LLM\u751f\u6210\u4ee3\u7801\u7684\u8d28\u91cf\uff0c\u8bc6\u522b\u6700\u9700\u8981\u6539\u8fdb\u7684\u573a\u666f\u3002", "method": "\u4f7f\u7528\u57fa\u4e8e\u573a\u666f\u7684\u65b9\u6cd5\uff0c\u6d4b\u91cf\u4ee3\u7801\u5f02\u5473\u4f5c\u4e3a\u4ee3\u7801\u8d28\u91cf\u6307\u6807\uff0c\u5e76\u4e0e\u4e13\u4e1a\u7f16\u5199\u7684\u53c2\u8003\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\u3002\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6309\u4ee3\u7801\u4e3b\u9898\u548c\u4efb\u52a1\u590d\u6742\u5ea6\u5212\u5206\u4e3a\u4e0d\u540c\u5b50\u96c6\uff0c\u6d4b\u8bd5\u4e86\u56db\u79cd\u5148\u8fdbLLM\uff1aGemini Pro\u3001ChatGPT\u3001Codex\u548cFalcon\u3002", "result": "LLM\u751f\u6210\u7684\u4ee3\u7801\u6bd4\u53c2\u8003\u89e3\u51b3\u65b9\u6848\u6709\u66f4\u9ad8\u7684\u4ee3\u7801\u5f02\u5473\u53d1\u751f\u7387\u3002Falcon\u8868\u73b0\u6700\u597d\uff08\u5f02\u5473\u589e\u52a042.28%\uff09\uff0c\u5176\u6b21\u662fGemini Pro\uff0862.07%\uff09\u3001ChatGPT\uff0865.05%\uff09\u548cCodex\uff0884.97%\uff09\u3002\u5e73\u5747\u5f02\u5473\u589e\u52a063.34%\uff0c\u5176\u4e2d\u5b9e\u73b0\u5f02\u5473\u589e\u52a073.35%\uff0c\u8bbe\u8ba1\u5f02\u5473\u589e\u52a021.42%\u3002\u66f4\u590d\u6742\u7684\u7f16\u7801\u4efb\u52a1\u548c\u6d89\u53ca\u9762\u5411\u5bf9\u8c61\u6982\u5ff5\u7684\u9898\u76ee\u5f02\u5473\u589e\u52a0\u66f4\u660e\u663e\u3002", "conclusion": "\u5728\u4ee3\u7801\u5f02\u5473\u65b9\u9762\uff0cLLM\u5728\u4e0d\u540c\u7f16\u7801\u4efb\u52a1\u590d\u6742\u5ea6\u548c\u4e3b\u9898\u4e0a\u7684\u8868\u73b0\u4e0e\u76f8\u5e94\u573a\u666f\u4e0b\u4eba\u7c7b\u7f16\u5199\u4ee3\u7801\u7684\u8d28\u91cf\u9ad8\u5ea6\u76f8\u5173\uff0c\u4f46LLM\u751f\u6210\u4ee3\u7801\u7684\u8d28\u91cf\u660e\u663e\u6bd4\u4eba\u7c7b\u7f16\u5199\u7684\u4ee3\u7801\u5dee\u3002"}}
{"id": "2510.03050", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03050", "abs": "https://arxiv.org/abs/2510.03050", "authors": ["Rita Peixoto", "Filipe F. Correia", "Thatiane Rosa", "Eduardo Guerra", "Alfredo Goldman"], "title": "Refactoring Towards Microservices: Preparing the Ground for Service Extraction", "comment": "Accepted for publication in the EuroPLoP 2025 proceedings", "summary": "As organizations increasingly transition from monolithic systems to\nmicroservices, they aim to achieve higher availability, automatic scaling,\nsimplified infrastructure management, enhanced collaboration, and streamlined\ndeployments. However, this migration process remains largely manual and\nlabour-intensive. While existing literature offers various strategies for\ndecomposing monoliths, these approaches primarily focus on architecture-level\nguidance, often overlooking the code-level challenges and dependencies that\ndevelopers must address during the migration. This article introduces a\ncatalogue of seven refactorings specifically designed to support the transition\nto a microservices architecture with a focus on handling dependencies. The\ncatalogue provides developers with a systematic guide that consolidates\nrefactorings identified in the literature and addresses the critical gap in\nsystematizing the process at the code level. By offering a structured,\nstep-by-step approach, this work simplifies the migration process and lays the\ngroundwork for its potential automation, empowering developers to implement\nthese changes efficiently and effectively.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u5305\u542b7\u79cd\u91cd\u6784\u65b9\u6cd5\u7684\u76ee\u5f55\uff0c\u4e13\u95e8\u7528\u4e8e\u652f\u6301\u5411\u5fae\u670d\u52a1\u67b6\u6784\u7684\u8fc1\u79fb\uff0c\u91cd\u70b9\u5904\u7406\u4f9d\u8d56\u5173\u7cfb\u95ee\u9898\u3002", "motivation": "\u968f\u7740\u7ec4\u7ec7\u4ece\u5355\u4f53\u7cfb\u7edf\u5411\u5fae\u670d\u52a1\u8fc1\u79fb\uff0c\u73b0\u6709\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u67b6\u6784\u5c42\u9762\u6307\u5bfc\uff0c\u5ffd\u7565\u4e86\u4ee3\u7801\u5c42\u9762\u7684\u6311\u6218\u548c\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bfc\u81f4\u8fc1\u79fb\u8fc7\u7a0b\u4ecd\u7136\u624b\u52a8\u4e14\u52b3\u52a8\u5bc6\u96c6\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u91cd\u6784\u76ee\u5f55\uff0c\u6574\u5408\u4e86\u6587\u732e\u4e2d\u5df2\u8bc6\u522b\u7684\u91cd\u6784\u65b9\u6cd5\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u9010\u6b65\u6307\u5bfc\u6765\u5904\u7406\u4ee3\u7801\u7ea7\u4f9d\u8d56\u3002", "result": "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u91cd\u6784\u6307\u5357\uff0c\u7b80\u5316\u4e86\u8fc1\u79fb\u8fc7\u7a0b\uff0c\u5e76\u4e3a\u6f5c\u5728\u81ea\u52a8\u5316\u5960\u5b9a\u4e86\u57fa\u7840\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u901a\u8fc7\u63d0\u4f9b\u7ed3\u6784\u5316\u65b9\u6cd5\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u66f4\u9ad8\u6548\u5730\u5b9e\u65bd\u5fae\u670d\u52a1\u8fc1\u79fb\uff0c\u586b\u8865\u4e86\u4ee3\u7801\u5c42\u9762\u7cfb\u7edf\u5316\u5904\u7406\u7684\u7a7a\u767d\u3002"}}
{"id": "2510.03071", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.03071", "abs": "https://arxiv.org/abs/2510.03071", "authors": ["Facundo Molina", "Nazareno Aguirre", "Alessandra Gorla"], "title": "State Field Coverage: A Metric for Oracle Quality", "comment": null, "summary": "The effectiveness of testing in uncovering software defects depends not only\non the characteristics of the test inputs and how thoroughly they exercise the\nsoftware, but also on the quality of the oracles used to determine whether the\nsoftware behaves as expected. Therefore, assessing the quality of oracles is\ncrucial to improve the overall effectiveness of the testing process. Existing\nmetrics have been used for this purpose, but they either fail to provide a\ncomprehensive basis for guiding oracle improvement, or they are tailored to\nspecific types of oracles, thus limiting their generality.\n  In this paper, we introduce state field coverage, a novel metric for\nassessing oracle quality. This metric measures the proportion of an object's\nstate, as statically defined by its class fields, that an oracle may access\nduring test execution. The main intuition of our metric is that oracles with a\nhigher state field coverage are more likely to detect faults in the software\nunder analysis, as they inspect a larger portion of the object states to\ndetermine whether tests pass or not.\n  We implement a mechanism to statically compute the state field coverage\nmetric. Being statically computed, the metric is efficient and provides direct\nguidance for improving test oracles by identifying state fields that remain\nunexamined. We evaluate state field coverage through experiments involving 273\nrepresentation invariants and 249,027 test assertions. The results show that\nstate field coverage is a well-suited metric for assessing oracle quality, as\nit strongly correlates with the oracles' fault-detection ability, measured by\nmutation score.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a\u72b6\u6001\u5b57\u6bb5\u8986\u76d6\u7684\u65b0\u6307\u6807\uff0c\u7528\u4e8e\u8bc4\u4f30\u6d4b\u8bd5\u9884\u8a00\u7684\u8d28\u91cf\uff0c\u8be5\u6307\u6807\u8861\u91cf\u9884\u8a00\u5728\u6d4b\u8bd5\u6267\u884c\u671f\u95f4\u53ef\u80fd\u8bbf\u95ee\u7684\u5bf9\u8c61\u72b6\u6001\u5b57\u6bb5\u7684\u6bd4\u4f8b\u3002", "motivation": "\u73b0\u6709\u6307\u6807\u8981\u4e48\u65e0\u6cd5\u4e3a\u9884\u8a00\u6539\u8fdb\u63d0\u4f9b\u5168\u9762\u57fa\u7840\uff0c\u8981\u4e48\u5c40\u9650\u4e8e\u7279\u5b9a\u7c7b\u578b\u7684\u9884\u8a00\uff0c\u9650\u5236\u4e86\u901a\u7528\u6027\u3002\u8bc4\u4f30\u9884\u8a00\u8d28\u91cf\u5bf9\u4e8e\u63d0\u9ad8\u6d4b\u8bd5\u8fc7\u7a0b\u6574\u4f53\u6709\u6548\u6027\u81f3\u5173\u91cd\u8981\u3002", "method": "\u5b9e\u73b0\u4e86\u4e00\u79cd\u9759\u6001\u8ba1\u7b97\u72b6\u6001\u5b57\u6bb5\u8986\u76d6\u6307\u6807\u7684\u673a\u5236\uff0c\u8be5\u6307\u6807\u9ad8\u6548\u4e14\u80fd\u901a\u8fc7\u8bc6\u522b\u672a\u68c0\u67e5\u7684\u72b6\u6001\u5b57\u6bb5\u76f4\u63a5\u6307\u5bfc\u6d4b\u8bd5\u9884\u8a00\u6539\u8fdb\u3002", "result": "\u901a\u8fc7\u5bf9273\u4e2a\u8868\u793a\u4e0d\u53d8\u5f0f\u548c249,027\u4e2a\u6d4b\u8bd5\u65ad\u8a00\u7684\u5b9e\u9a8c\u8bc4\u4f30\uff0c\u7ed3\u679c\u663e\u793a\u72b6\u6001\u5b57\u6bb5\u8986\u76d6\u4e0e\u9884\u8a00\u6545\u969c\u68c0\u6d4b\u80fd\u529b\uff08\u901a\u8fc7\u53d8\u5f02\u5f97\u5206\u8861\u91cf\uff09\u5f3a\u76f8\u5173\u3002", "conclusion": "\u72b6\u6001\u5b57\u6bb5\u8986\u76d6\u662f\u8bc4\u4f30\u9884\u8a00\u8d28\u91cf\u7684\u5408\u9002\u6307\u6807\uff0c\u56e0\u4e3a\u5b83\u4e0e\u9884\u8a00\u68c0\u6d4b\u8f6f\u4ef6\u6545\u969c\u7684\u80fd\u529b\u5bc6\u5207\u76f8\u5173\u3002"}}
{"id": "2510.03178", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.03178", "abs": "https://arxiv.org/abs/2510.03178", "authors": ["Cuong Chi Le", "Minh V. T. Pham", "Cuong Duc Van", "Hoang N. Phan", "Huy N. Phan", "Tien N. Nguyen"], "title": "When Names Disappear: Revealing What LLMs Actually Understand About Code", "comment": null, "summary": "Large Language Models (LLMs) achieve strong results on code tasks, but how\nthey derive program meaning remains unclear. We argue that code communicates\nthrough two channels: structural semantics, which define formal behavior, and\nhuman-interpretable naming, which conveys intent. Removing the naming channel\nseverely degrades intent-level tasks such as summarization, where models\nregress to line-by-line descriptions. Surprisingly, we also observe consistent\nreductions on execution tasks that should depend only on structure, revealing\nthat current benchmarks reward memorization of naming patterns rather than\ngenuine semantic reasoning. To disentangle these effects, we introduce a suite\nof semantics-preserving obfuscations and show that they expose identifier\nleakage across both summarization and execution. Building on these insights, we\nrelease ClassEval-Obf, an obfuscation-enhanced benchmark that systematically\nsuppresses naming cues while preserving behavior. Our results demonstrate that\nClassEval-Obf reduces inflated performance gaps, weakens memorization\nshortcuts, and provides a more reliable basis for assessing LLMs' code\nunderstanding and generalization.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86LLMs\u5982\u4f55\u7406\u89e3\u4ee3\u7801\uff0c\u53d1\u73b0\u4ee3\u7801\u901a\u8fc7\u7ed3\u6784\u8bed\u4e49\u548c\u547d\u540d\u4e24\u4e2a\u6e20\u9053\u4f20\u9012\u4fe1\u606f\u3002\u53bb\u9664\u547d\u540d\u4f1a\u4e25\u91cd\u5f71\u54cd\u610f\u56fe\u7ea7\u4efb\u52a1\uff0c\u5e76\u5728\u6267\u884c\u4efb\u52a1\u4e2d\u66b4\u9732\u547d\u540d\u6a21\u5f0f\u8bb0\u5fc6\u95ee\u9898\u3002\u4f5c\u8005\u5f15\u5165\u8bed\u4e49\u4fdd\u7559\u6df7\u6dc6\u65b9\u6cd5\uff0c\u5e76\u53d1\u5e03ClassEval-Obf\u57fa\u51c6\u6765\u66f4\u53ef\u9760\u5730\u8bc4\u4f30LLMs\u7684\u4ee3\u7801\u7406\u89e3\u80fd\u529b\u3002", "motivation": "\u63a2\u7a76LLMs\u5982\u4f55\u4ece\u4ee3\u7801\u4e2d\u83b7\u53d6\u7a0b\u5e8f\u542b\u4e49\uff0c\u533a\u5206\u7ed3\u6784\u8bed\u4e49\u548c\u4eba\u7c7b\u53ef\u89e3\u91ca\u547d\u540d\u4e24\u4e2a\u6e20\u9053\u7684\u4f5c\u7528\uff0c\u63ed\u793a\u5f53\u524d\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u5b58\u5728\u7684\u547d\u540d\u6a21\u5f0f\u8bb0\u5fc6\u95ee\u9898\u3002", "method": "\u5f15\u5165\u8bed\u4e49\u4fdd\u7559\u6df7\u6dc6\u65b9\u6cd5\uff0c\u901a\u8fc7\u53bb\u9664\u547d\u540d\u4fe1\u606f\u6765\u5206\u79bb\u7ed3\u6784\u8bed\u4e49\u548c\u547d\u540d\u7684\u5f71\u54cd\uff0c\u5e76\u521b\u5efaClassEval-Obf\u6df7\u6dc6\u589e\u5f3a\u57fa\u51c6\u3002", "result": "\u53bb\u9664\u547d\u540d\u4f1a\u4e25\u91cd\u964d\u4f4e\u610f\u56fe\u7ea7\u4efb\u52a1\u6027\u80fd\uff0c\u5728\u6267\u884c\u4efb\u52a1\u4e2d\u4e5f\u89c2\u5bdf\u5230\u4e00\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u8868\u660e\u5f53\u524d\u57fa\u51c6\u5956\u52b1\u547d\u540d\u6a21\u5f0f\u8bb0\u5fc6\u800c\u975e\u771f\u6b63\u7684\u8bed\u4e49\u63a8\u7406\u3002\u6df7\u6dc6\u65b9\u6cd5\u66b4\u9732\u4e86\u6807\u8bc6\u7b26\u6cc4\u6f0f\u95ee\u9898\u3002", "conclusion": "ClassEval-Obf\u57fa\u51c6\u901a\u8fc7\u6291\u5236\u547d\u540d\u7ebf\u7d22\u540c\u65f6\u4fdd\u7559\u884c\u4e3a\uff0c\u51cf\u5c11\u4e86\u81a8\u80c0\u7684\u6027\u80fd\u5dee\u8ddd\uff0c\u524a\u5f31\u4e86\u8bb0\u5fc6\u6377\u5f84\uff0c\u4e3a\u8bc4\u4f30LLMs\u7684\u4ee3\u7801\u7406\u89e3\u548c\u6cdb\u5316\u80fd\u529b\u63d0\u4f9b\u4e86\u66f4\u53ef\u9760\u7684\u57fa\u7840\u3002"}}
{"id": "2510.03217", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.03217", "abs": "https://arxiv.org/abs/2510.03217", "authors": ["Jos\u00e9 Cambronero", "Michele Tufano", "Sherry Shi", "Renyao Wei", "Grant Uy", "Runxiang Cheng", "Chin-Jung Liu", "Shiying Pan", "Satish Chandra", "Pat Rondon"], "title": "Abstain and Validate: A Dual-LLM Policy for Reducing Noise in Agentic Program Repair", "comment": null, "summary": "Agentic Automated Program Repair (APR) is increasingly tackling complex,\nrepository-level bugs in industry, but ultimately agent-generated patches still\nneed to be reviewed by a human before committing them to ensure they address\nthe bug. Showing unlikely patches to developers can lead to substantial noise,\nwasting valuable developer time and eroding trust in automated code changes. We\nintroduce two complementary LLM-based policies to reduce such noise: bug\nabstention and patch validation policies. Bug abstention excludes bugs that the\nagentic APR system is unlikely to fix. Patch validation rejects patches that\nare unlikely to be a good fix for the given bug. We evaluate both policies on\nthree sets of bugs from Google's codebase, and their candidate patches\ngenerated by an internal agentic APR system. On a set of 174 human-reported\nbugs, removing bugs and patch trajectories rejected by our policies can raise\nsuccess rates by up to 13 percentage points and 15 percentage points,\nrespectively, and by up to 39 percentage points in combination. On null pointer\nexceptions and sanitizer-reported bugs with machine-generated bug reports,\npatch validation also improves average single-sample success rates. This\ntwo-policy approach provides a practical path to the reliable, industrial-scale\ndeployment of agentic APR systems.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e24\u79cdLLM\u7b56\u7565\u6765\u51cf\u5c11\u81ea\u52a8\u5316\u7a0b\u5e8f\u4fee\u590d\u4e2d\u7684\u566a\u97f3\uff1a\u9519\u8bef\u5f03\u6743\u548c\u8865\u4e01\u9a8c\u8bc1\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u4fee\u590d\u6210\u529f\u7387", "motivation": "\u81ea\u52a8\u5316\u7a0b\u5e8f\u4fee\u590d\u7cfb\u7edf\u751f\u6210\u7684\u8865\u4e01\u9700\u8981\u4eba\u5de5\u5ba1\u67e5\uff0c\u4f46\u5c55\u793a\u4e0d\u592a\u53ef\u80fd\u6210\u529f\u7684\u8865\u4e01\u4f1a\u6d6a\u8d39\u5f00\u53d1\u8005\u65f6\u95f4\u5e76\u635f\u5bb3\u5bf9\u81ea\u52a8\u5316\u4ee3\u7801\u53d8\u66f4\u7684\u4fe1\u4efb", "method": "\u5f15\u5165\u4e24\u79cd\u4e92\u8865\u7684LLM\u7b56\u7565\uff1a\u9519\u8bef\u5f03\u6743\u7b56\u7565\u6392\u9664\u7cfb\u7edf\u4e0d\u592a\u53ef\u80fd\u4fee\u590d\u7684\u9519\u8bef\uff0c\u8865\u4e01\u9a8c\u8bc1\u7b56\u7565\u62d2\u7edd\u4e0d\u592a\u53ef\u80fd\u662f\u826f\u597d\u4fee\u590d\u7684\u8865\u4e01", "result": "\u5728174\u4e2a\u4eba\u5de5\u62a5\u544a\u7684\u9519\u8bef\u4e0a\uff0c\u5e94\u7528\u7b56\u7565\u53ef\u5c06\u6210\u529f\u7387\u5206\u522b\u63d0\u9ad813\u548c15\u4e2a\u767e\u5206\u70b9\uff0c\u7ec4\u5408\u4f7f\u7528\u65f6\u63d0\u9ad839\u4e2a\u767e\u5206\u70b9", "conclusion": "\u8fd9\u79cd\u53cc\u7b56\u7565\u65b9\u6cd5\u4e3a\u81ea\u52a8\u5316\u7a0b\u5e8f\u4fee\u590d\u7cfb\u7edf\u7684\u53ef\u9760\u5de5\u4e1a\u89c4\u6a21\u90e8\u7f72\u63d0\u4f9b\u4e86\u5b9e\u7528\u8def\u5f84"}}

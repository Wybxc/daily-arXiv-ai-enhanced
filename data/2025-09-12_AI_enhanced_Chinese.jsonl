{"id": "2509.08843", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.08843", "abs": "https://arxiv.org/abs/2509.08843", "authors": ["Sidney Shapiro"], "title": "Pattern-Based File and Data Access with Python Glob: A Comprehensive Guide for Computational Research", "comment": null, "summary": "Pattern-based file access is a fundamental but often under-documented aspect\nof computational research. The Python glob module provides a simple yet\npowerful way to search, filter, and ingest files using wildcard patterns,\nenabling scalable workflows across disciplines. This paper introduces glob as a\nversatile tool for data science, business analytics, and artificial\nintelligence applications. We demonstrate use cases including large-scale data\ningestion, organizational data analysis, AI dataset construction, and\nreproducible research practices. Through concrete Python examples with widely\nused libraries such as pandas,scikit-learn, and matplotlib, we show how glob\nfacilitates efficient file traversal and integration with analytical pipelines.\nBy situating glob within the broader context of reproducible research and data\nengineering, we highlight its role as a methodological building block. Our goal\nis to provide researchers and practitioners with a concise reference that\nbridges foundational concepts and applied practice, making glob a default\ncitation for file pattern matching in Python-based research workflows.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u4ecb\u7ecd\u4e86Python glob\u6a21\u5757\u5728\u79d1\u7814\u5de5\u4f5c\u6d41\u4e2d\u7684\u91cd\u8981\u4f5c\u7528\uff0c\u901a\u8fc7\u6587\u4ef6\u6a21\u5f0f\u5339\u914d\u5b9e\u73b0\u5927\u89c4\u6a21\u6570\u636e\u6458\u53d6\u3001\u6570\u636e\u5206\u6790\u548cAI\u6570\u636e\u96c6\u6784\u5efa\uff0c\u63d0\u9ad8\u53ef\u590d\u73b0\u7814\u7a76\u6548\u7387\u3002", "motivation": "\u6587\u4ef6\u6a21\u5f0f\u8bbf\u95ee\u662f\u8ba1\u7b97\u79d1\u5b66\u7814\u7a76\u7684\u57fa\u7840\u4f46\u7f3a\u4e4f\u6587\u6863\u8bb0\u8f7d\uff0c\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u5de5\u5177\u6765\u652f\u6301\u53ef\u6269\u5c55\u7684\u5de5\u4f5c\u6d41\u3002", "method": "\u901a\u8fc7\u5177\u4f53\u7684Python\u793a\u4f8b\uff0c\u7ed3\u5408pandas\u3001scikit-learn\u3001matplotlib\u7b49\u5e93\uff0c\u5c55\u793aglob\u5728\u6570\u636e\u79d1\u5b66\u3001\u5546\u4e1a\u5206\u6790\u548c\u4eba\u5de5\u667a\u80fd\u5e94\u7528\u4e2d\u7684\u5b9e\u8df5\u65b9\u6cd5\u3002", "result": "\u8bc1\u660e\u4e86glob\u80fd\u591f\u6709\u6548\u5730\u8fdb\u884c\u6587\u4ef6\u904d\u5386\u548c\u4e0e\u5206\u6790\u7ba1\u9053\u96c6\u6210\uff0c\u6210\u4e3a\u53ef\u590d\u73b0\u7814\u7a76\u548c\u6570\u636e\u5de5\u7a0b\u7684\u65b9\u6cd5\u8bba\u57fa\u7840\u3002", "conclusion": "\u8be5\u8bba\u6587\u4e3a\u7814\u7a76\u4eba\u5458\u548c\u5b9e\u8df5\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u6d01\u7684\u53c2\u8003\u6307\u5357\uff0c\u4f7fglob\u6210\u4e3aPython\u57fa\u7840\u7814\u7a76\u5de5\u4f5c\u6d41\u4e2d\u6587\u4ef6\u6a21\u5f0f\u5339\u914d\u7684\u6807\u51c6\u5f15\u7528\u3002"}}
{"id": "2509.08857", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2509.08857", "abs": "https://arxiv.org/abs/2509.08857", "authors": ["Marcelino Garcia", "Renato Garcia", "Arthur Parizotto", "Andre Mendes", "Pedro Valle", "Ricardo Vilela", "Renato Balancieri", "Williamson Silva"], "title": "A Systematic Mapping Study on Chatbots in Programming Education", "comment": "18 pages, 1 figure, 3 tables", "summary": "Educational chatbots have gained prominence as support tools for teaching\nprogramming, particularly in introductory learning contexts. This paper\npresents a Systematic Mapping Study (SMS) that investigated how such agents\nhave been developed and applied in programming education. From an initial set\nof 3,216 publications, 54 studies were selected and analyzed based on five\nresearch subquestions, addressing chatbot types, programming languages used,\neducational content covered, interaction models, and application contexts. The\nresults reveal a predominance of chatbots designed for Python instruction,\nfocusing on fundamental programming concepts, and employing a wide variety of\npedagogical approaches and technological architectures. In addition to\nidentifying trends and gaps in the literature, this study provides insights to\ninform the development of new educational tools for programming instruction.", "AI": {"tldr": "\u8fd9\u662f\u4e00\u4efd\u5173\u4e8e\u6559\u80b2\u804a\u5929\u673a\u5668\u5728\u7f16\u7a0b\u6559\u80b2\u4e2d\u5e94\u7528\u7684\u7cfb\u7edf\u6d4f\u89c8\u7814\u7a76\uff0c\u5206\u6790\u4e8654\u9879\u7814\u7a76\u7684\u53d1\u5c55\u8d8b\u52bf\u3001\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3001\u6559\u80b2\u5185\u5bb9\u548c\u4ea4\u4e92\u6a21\u578b\u7b49\u3002", "motivation": "\u6559\u80b2\u804a\u5929\u673a\u5668\u5728\u7f16\u7a0b\u6559\u80b2\u4e2d\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u5730\u7814\u7a76\u5b83\u4eec\u7684\u53d1\u5c55\u72b6\u51b5\u548c\u5e94\u7528\u65b9\u5f0f\uff0c\u4ee5\u6307\u5bfc\u672a\u6765\u6559\u80b2\u5de5\u5177\u7684\u5f00\u53d1\u3002", "method": "\u91c7\u7528\u7cfb\u7edf\u6d4f\u89c8\u7814\u7a76\u65b9\u6cd5\uff0c\u4ece3,216\u7bc7\u516c\u5f00\u51fa\u7248\u7269\u4e2d\u7b5b\u900954\u9879\u7814\u7a76\u8fdb\u884c\u5206\u6790\uff0c\u91cd\u70b9\u5173\u6ce8\u804a\u5929\u673a\u5668\u7c7b\u578b\u3001\u7f16\u7a0b\u8bed\u8a00\u3001\u6559\u80b2\u5185\u5bb9\u3001\u4ea4\u4e92\u6a21\u578b\u548c\u5e94\u7528\u573a\u666f\u4e94\u4e2a\u65b9\u9762\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u4e3b\u8981\u8d8b\u52bf\u662f\u4f7f\u7528Python\u8bed\u8a00\u7684\u804a\u5929\u673a\u5668\uff0c\u91cd\u70b9\u6559\u6388\u57fa\u7840\u7f16\u7a0b\u6982\u5ff5\uff0c\u91c7\u7528\u591a\u79cd\u6559\u5b66\u65b9\u6cd5\u548c\u6280\u672f\u67b6\u6784\u3002\u8bc6\u522b\u4e86\u9886\u57df\u5185\u7684\u7814\u7a76\u8d8b\u52bf\u548c\u7a7a\u767d\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u7f16\u7a0b\u6559\u80b2\u5de5\u5177\u7684\u5f00\u53d1\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u89c1\u89e3\uff0c\u5e2e\u52a9\u6307\u5bfc\u672a\u6765\u6559\u80b2\u804a\u5929\u673a\u5668\u7684\u8bbe\u8ba1\u548c\u5e94\u7528\u3002"}}
{"id": "2509.08863", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.08863", "abs": "https://arxiv.org/abs/2509.08863", "authors": ["Qianqian Luo", "Liuchang Xu", "Qingming Lin", "Sensen Wu", "Ruichen Mao", "Chao Wang", "Hailin Feng", "Bo Huang", "Zhenhong Du"], "title": "GeoJSON Agents:A Multi-Agent LLM Architecture for Geospatial Analysis-Function Calling vs Code Generation", "comment": null, "summary": "LLMs have made substantial progress in task automation and natural language\nunderstanding.However,without expertise in GIS,they continue to encounter\nlimitations.To address these issues, we propose GeoJSON Agents-a multi-agent\nLLM architecture.This framework transforms natural language tasks into\nstructured GeoJSON operation commands and processes spatial data using two\nwidely adopted LLM enhancement techniques:Function Calling and Code\nGeneration.The architecture consists of three components-task parsing,agent\ncollaboration,and result integration-aimed at enhancing both the performance\nand scalability of GIS automation.The Planner agent interprets natural language\ntasks into structured GeoJSON commands.Then,specialized Worker agents\ncollaborate according to assigned roles to perform spatial data processing and\nanalysis,either by invoking predefined function APIs or by dynamically\ngenerating and executing Python-based spatial analysis code.Finally,the system\nintegrates the outputs from multiple execution rounds into\nreusable,standards-compliant GeoJSON files.To systematically evaluate the\nperformance of the two approaches,we constructed a benchmark dataset of 70\ntasks with varying complexity and conducted experiments using OpenAI's GPT-4o\nas the core model.Results indicate that the Function Calling-based GeoJSON\nAgent achieved an accuracy of 85.71%,while the Code Generation-based agent\nreached 97.14%,both significantly outperforming the best-performing\ngeneral-purpose model (48.57%).Further analysis reveals that the Code\nGeneration provides greater flexibility,whereas the Function Calling approach\noffers more stable execution.This study is the first to introduce an LLM\nmulti-agent framework for GeoJSON data and to compare the strengths and\nlimitations of two mainstream LLM enhancement methods,offering new perspectives\nfor improving GeoAI system performance.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86GeoJSON Agents\u591a\u6bb5\u5f0fLLM\u67b6\u6784\uff0c\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u548c\u4ee3\u7801\u751f\u6210\u4e24\u79cd\u65b9\u6cd5\u6765\u5904\u7406\u7a7a\u95f4\u6570\u636e\uff0c\u663e\u8457\u63d0\u5347\u4e86GIS\u81ea\u52a8\u5316\u7684\u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\u3002", "motivation": "\u867d\u7136LLMs\u5728\u4efb\u52a1\u81ea\u52a8\u5316\u548c\u81ea\u7136\u8bed\u8a00\u7406\u89e3\u65b9\u9762\u53d6\u5f97\u4e86\u663e\u8457\u8fdb\u6b65\uff0c\u4f46\u7f3a\u4e4fGIS\u4e13\u4e1a\u77e5\u8bc6\u4ecd\u7136\u9650\u5236\u4e86\u5176\u80fd\u529b\uff0c\u9700\u8981\u89e3\u51b3LLMs\u5728\u7a7a\u95f4\u6570\u636e\u5904\u7406\u65b9\u9762\u7684\u9650\u5236\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u79cd\u591a\u6bb5\u5f0fLLM\u67b6\u6784\uff0c\u5305\u542b\u4efb\u52a1\u89e3\u6790\u3001\u6bb5\u5f0f\u534f\u4f5c\u548c\u7ed3\u679c\u96c6\u6210\u4e09\u4e2a\u7ec4\u4ef6\u3002Planner\u6bb5\u5f0f\u5c06\u81ea\u7136\u8bed\u8a00\u4efb\u52a1\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u7684GeoJSON\u547d\u4ee4\uff0cWorker\u6bb5\u5f0f\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u6216\u4ee3\u7801\u751f\u6210\u6765\u5904\u7406\u7a7a\u95f4\u6570\u636e\u3002", "result": "\u572870\u4e2a\u4efb\u52a1\u7684\u6d4b\u8bd5\u4e2d\uff0c\u57fa\u4e8e\u51fd\u6570\u8c03\u7528\u7684\u65b9\u6cd5\u8fbe\u523085.71%\u7684\u51c6\u786e\u7387\uff0c\u57fa\u4e8e\u4ee3\u7801\u751f\u6210\u7684\u65b9\u6cd5\u8fbe\u523097.14%\u7684\u51c6\u786e\u7387\uff0c\u90fd\u663e\u8457\u8d85\u8fc7\u4e86\u901a\u7528\u6a21\u578b\u7684\u6700\u4f73\u8868\u73b0\uff0848.57%\uff09\u3002", "conclusion": "\u8fd9\u662f\u9996\u6b21\u63d0\u51fa\u7528\u4e8eGeoJSON\u6570\u636e\u7684LLM\u591a\u6bb5\u5f0f\u67b6\u6784\uff0c\u5e76\u5bf9\u4e24\u79cd\u4e3b\u6d41\u7684LLM\u589e\u5f3a\u65b9\u6cd5\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u4ee3\u7801\u751f\u6210\u65b9\u6cd5\u66f4\u7075\u6d3b\uff0c\u51fd\u6570\u8c03\u7528\u65b9\u6cd5\u6267\u884c\u66f4\u7a33\u5b9a\uff0c\u4e3a\u63d0\u5347GeoAI\u7cfb\u7edf\u6027\u80fd\u63d0\u4f9b\u4e86\u65b0\u7684\u89c6\u89d2\u3002"}}
{"id": "2509.08865", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.08865", "abs": "https://arxiv.org/abs/2509.08865", "authors": ["Guangyu Zhang", "Xixuan Wang", "Shiyu Sun", "Peiyan Xiao", "Kun Sun", "Yanhai Xiong"], "title": "TraceRAG: A LLM-Based Framework for Explainable Android Malware Detection and Behavior Analysis", "comment": null, "summary": "Sophisticated evasion tactics in malicious Android applications, combined\nwith their intricate behavioral semantics, enable attackers to conceal\nmalicious logic within legitimate functions, underscoring the critical need for\nrobust and in-depth analysis frameworks. However, traditional analysis\ntechniques often fail to recover deeply hidden behaviors or provide\nhuman-readable justifications for their decisions. Inspired by advances in\nlarge language models (LLMs), we introduce TraceRAG, a retrieval-augmented\ngeneration (RAG) framework that bridges natural language queries and Java code\nto deliver explainable malware detection and analysis. First, TraceRAG\ngenerates summaries of method-level code snippets, which are indexed in a\nvector database. At query time, behavior-focused questions retrieve the most\nsemantically relevant snippets for deeper inspection. Finally, based on the\nmulti-turn analysis results, TraceRAG produces human-readable reports that\npresent the identified malicious behaviors and their corresponding code\nimplementations. Experimental results demonstrate that our method achieves 96\\%\nmalware detection accuracy and 83.81\\% behavior identification accuracy based\non updated VirusTotal (VT) scans and manual verification. Furthermore, expert\nevaluation confirms the practical utility of the reports generated by TraceRAG.", "AI": {"tldr": "TraceRAG\u662f\u4e00\u4e2a\u57fa\u4e8e\u68c0\u7d22\u589e\u5f3a\u751f\u6210(RAG)\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u548cJava\u4ee3\u7801\u5206\u6790\u6765\u63d0\u4f9b\u53ef\u89e3\u91ca\u7684Android\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u548c\u5206\u6790\uff0c\u5b9e\u73b0\u4e8696%\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u51c6\u786e\u7387\u548c83.81%\u7684\u884c\u4e3a\u8bc6\u522b\u51c6\u786e\u7387\u3002", "motivation": "Android\u6076\u610f\u5e94\u7528\u91c7\u7528\u590d\u6742\u7684\u89c4\u907f\u7b56\u7565\uff0c\u5c06\u6076\u610f\u903b\u8f91\u9690\u85cf\u5728\u5408\u6cd5\u529f\u80fd\u4e2d\uff0c\u4f20\u7edf\u5206\u6790\u65b9\u6cd5\u96be\u4ee5\u6062\u590d\u6df1\u5ea6\u9690\u85cf\u884c\u4e3a\u6216\u63d0\u4f9b\u4eba\u7c7b\u53ef\u8bfb\u7684\u51b3\u7b56\u89e3\u91ca\u3002", "method": "TraceRAG\u9996\u5148\u751f\u6210\u65b9\u6cd5\u7ea7\u4ee3\u7801\u7247\u6bb5\u7684\u6458\u8981\u5e76\u7d22\u5f15\u5230\u5411\u91cf\u6570\u636e\u5e93\u4e2d\uff1b\u67e5\u8be2\u65f6\u901a\u8fc7\u884c\u4e3a\u805a\u7126\u95ee\u9898\u68c0\u7d22\u8bed\u4e49\u6700\u76f8\u5173\u7684\u4ee3\u7801\u7247\u6bb5\u8fdb\u884c\u6df1\u5ea6\u68c0\u67e5\uff1b\u57fa\u4e8e\u591a\u8f6e\u5206\u6790\u7ed3\u679c\u751f\u6210\u5305\u542b\u6076\u610f\u884c\u4e3a\u53ca\u5176\u5bf9\u5e94\u4ee3\u7801\u5b9e\u73b0\u7684\u4eba\u7c7b\u53ef\u8bfb\u62a5\u544a\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\uff0c\u57fa\u4e8e\u66f4\u65b0\u7684VirusTotal\u626b\u63cf\u548c\u4eba\u5de5\u9a8c\u8bc1\uff0c\u8be5\u65b9\u6cd5\u8fbe\u523096%\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u51c6\u786e\u7387\u548c83.81%\u7684\u884c\u4e3a\u8bc6\u522b\u51c6\u786e\u7387\u3002\u4e13\u5bb6\u8bc4\u4f30\u786e\u8ba4\u4e86TraceRAG\u751f\u6210\u62a5\u544a\u7684\u5b9e\u9645\u6548\u7528\u3002", "conclusion": "TraceRAG\u6846\u67b6\u6210\u529f\u5730\u5c06\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u4e0e\u4ee3\u7801\u5206\u6790\u76f8\u7ed3\u5408\uff0c\u63d0\u4f9b\u4e86\u53ef\u89e3\u91ca\u7684\u6076\u610f\u8f6f\u4ef6\u68c0\u6d4b\u548c\u5206\u6790\u89e3\u51b3\u65b9\u6848\uff0c\u5728\u51c6\u786e\u6027\u548c\u5b9e\u7528\u6027\u65b9\u9762\u90fd\u8868\u73b0\u51fa\u8272\u3002"}}
{"id": "2509.09019", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.09019", "abs": "https://arxiv.org/abs/2509.09019", "authors": ["Mohit Tekriwal", "John Sarracino"], "title": "Towards Verified Compilation of Floating-point Optimization in Scientific Computing Programs", "comment": null, "summary": "Scientific computing programs often undergo aggressive compiler optimization\nto achieve high performance and efficient resource utilization. While\nperformance is critical, we also need to ensure that these optimizations are\ncorrect. In this paper, we focus on a specific class of optimizations,\nfloating-point optimizations, notably due to fast math, at the LLVM IR level.\nWe present a preliminary work, which leverages the Verified LLVM framework in\nthe Rocq theorem prover, to prove the correctness of Fused-Multiply-Add (FMA)\noptimization for a basic block implementing the arithmetic expression $a * b +\nc$ . We then propose ways to extend this preliminary results by adding more\nprogram features and fast math floating-point optimizations.", "AI": {"tldr": "\u5229\u7528Rocq\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u7684Verified LLVM\u6846\u67b6\uff0c\u8bc1\u660eLLVM IR\u5c42\u6b21\u6d6e\u70b9\u6570\u4f18\u5316\uff08\u7279\u522b\u662fFMA\u4f18\u5316\uff09\u7684\u6b63\u786e\u6027\uff0c\u5e76\u63d0\u51fa\u6269\u5c55\u65b9\u6848", "motivation": "\u79d1\u5b66\u8ba1\u7b97\u7a0b\u5e8f\u9700\u8981\u7cbe\u5f3a\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u6765\u83b7\u5f97\u9ad8\u6027\u80fd\uff0c\u4f46\u540c\u65f6\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e9b\u4f18\u5316\u7684\u6b63\u786e\u6027\uff0c\u7279\u522b\u662f\u6d6e\u70b9\u6570\u4f18\u5316", "method": "\u57fa\u4e8eRocq\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u7684Verified LLVM\u6846\u67b6\uff0c\u5bf9\u57fa\u672c\u5757\u5b9e\u73b0\u7b97\u672f\u8868\u8fbe\u5f0f$a * b + c$\u8fdb\u884cFMA\u878d\u5408\u4e58\u52a0\u4f18\u5316\u7684\u6b63\u786e\u6027\u8bc1\u660e", "result": "\u5b8c\u6210\u4e86FMA\u4f18\u5316\u5728\u57fa\u672c\u5757\u4e0a\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u4e3a\u66f4\u590d\u6742\u7684\u6d6e\u70b9\u6570\u4f18\u5316\u9a8c\u8bc1\u5960\u5b9a\u57fa\u7840", "conclusion": "\u8fd9\u9879\u9884\u7814\u5de5\u4f5c\u4e3a\u9a8c\u8bc1LLVM\u6d6e\u70b9\u6570\u4f18\u5316\u6b63\u786e\u6027\u63d0\u4f9b\u4e86\u57fa\u7840\uff0c\u5e76\u63d0\u51fa\u4e86\u6269\u5c55\u66f4\u591a\u7a0b\u5e8f\u7279\u5f81\u548cfast math\u4f18\u5316\u7684\u65b9\u5411"}}
{"id": "2509.09218", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.09218", "abs": "https://arxiv.org/abs/2509.09218", "authors": ["Bartosz Bednarczyk", "Emanuel Kiero\u0144ski"], "title": "Guarded Fragments Meet Dynamic Logic: The Story of Regular Guards (Extended Version)", "comment": "This is an extended version of our paper that will appear at KR 2025.\n  The current appendix has not yet been revised; an updated version will be\n  released in the near future", "summary": "We study the Guarded Fragment with Regular Guards (RGF), which combines the\nexpressive power of the Guarded Fragment (GF) with Propositional Dynamic Logic\nwith Intersection and Converse (ICPDL). Our logic generalizes, in a uniform\nway, many previously-studied extensions of GF, including (conjunctions of)\ntransitive or equivalence guards, transitive or equivalence closure and more.\nWe prove 2EXPTIME-completeness of the satisfiability problem for RGF, showing\nthat RGF is not harder than ICPDL or GF. Shifting to the query entailment\nproblem, we provide undecidability results that significantly strengthen and\nsolidify earlier results along those lines. We conclude by identifying, in a\nnatural sense, the maximal EXPSPACE-complete fragment of RGF.", "AI": {"tldr": "\u7814\u7a76\u4e86\u5e26\u6b63\u5219\u5b88\u536b\u7684\u5b88\u536b\u7247\u6bb5(RGF)\uff0c\u7ed3\u5408\u4e86\u5b88\u536b\u7247\u6bb5(GF)\u548c\u5e26\u4ea4\u96c6\u4e0e\u9006\u7684\u547d\u9898\u52a8\u6001\u903b\u8f91(ICPDL)\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u8bc1\u660e\u4e86RGF\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u662f2EXPTIME\u5b8c\u5168\u7684\uff0c\u67e5\u8be2\u8574\u542b\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff0c\u5e76\u8bc6\u522b\u4e86\u6700\u5927\u7684EXPSPACE\u5b8c\u5168\u7247\u6bb5", "motivation": "\u7edf\u4e00\u5730\u63a8\u5e7f\u4e4b\u524d\u7814\u7a76\u7684GF\u6269\u5c55\uff0c\u5305\u62ec\u4f20\u9012\u6216\u7b49\u4ef7\u5b88\u536b\u3001\u4f20\u9012\u6216\u7b49\u4ef7\u95ed\u5305\u7b49\uff0c\u63a2\u7d22RGF\u7684\u8868\u8fbe\u80fd\u529b\u548c\u8ba1\u7b97\u590d\u6742\u6027", "method": "\u7ed3\u5408GF\u548cICPDL\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u903b\u8f91\u63a8\u7406\u548c\u590d\u6742\u6027\u5206\u6790\u6280\u672f\uff0c\u8bc1\u660e\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u76842EXPTIME\u5b8c\u5168\u6027\u548c\u67e5\u8be2\u8574\u542b\u95ee\u9898\u7684\u4e0d\u53ef\u5224\u5b9a\u6027", "result": "RGF\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u662f2EXPTIME\u5b8c\u5168\u7684\uff0c\u4e0eICPDL\u6216GF\u7684\u96be\u5ea6\u76f8\u540c\uff1b\u67e5\u8be2\u8574\u542b\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff1b\u8bc6\u522b\u51fa\u4e86RGF\u4e2d\u6700\u5927\u7684EXPSPACE\u5b8c\u5168\u7247\u6bb5", "conclusion": "RGF\u5728\u4fdd\u6301\u4e0eGF\u76f8\u540c\u8ba1\u7b97\u590d\u6742\u6027\u7684\u540c\u65f6\u663e\u8457\u589e\u5f3a\u4e86\u8868\u8fbe\u80fd\u529b\uff0c\u4f46\u67e5\u8be2\u8574\u542b\u95ee\u9898\u7684\u4e0d\u53ef\u5224\u5b9a\u6027\u9650\u5236\u4e86\u5176\u5b9e\u9645\u5e94\u7528\uff0c\u6700\u5927EXPSPACE\u5b8c\u5168\u7247\u6bb5\u7684\u8bc6\u522b\u4e3a\u5b9e\u9645\u5e94\u7528\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848"}}
{"id": "2509.08867", "categories": ["cs.SE", "cs.AI", "68T01", "I.2.7"], "pdf": "https://arxiv.org/pdf/2509.08867", "abs": "https://arxiv.org/abs/2509.08867", "authors": ["K. Pronk", "Q. Zhao"], "title": "Benchmarking Energy Efficiency of Large Language Models Using vLLM", "comment": "6 pages, 6 figures", "summary": "The prevalence of Large Language Models (LLMs) is having an growing impact on\nthe climate due to the substantial energy required for their deployment and\nuse. To create awareness for developers who are implementing LLMs in their\nproducts, there is a strong need to collect more information about the energy\nefficiency of LLMs. While existing research has evaluated the energy efficiency\nof various models, these benchmarks often fall short of representing realistic\nproduction scenarios. In this paper, we introduce the LLM Efficiency Benchmark,\ndesigned to simulate real-world usage conditions. Our benchmark utilizes vLLM,\na high-throughput, production-ready LLM serving backend that optimizes model\nperformance and efficiency. We examine how factors such as model size,\narchitecture, and concurrent request volume affect inference energy efficiency.\nOur findings demonstrate that it is possible to create energy efficiency\nbenchmarks that better reflect practical deployment conditions, providing\nvaluable insights for developers aiming to build more sustainable AI systems.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86LLM\u6548\u80fd\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4f7f\u7528vLLM\u6a21\u62df\u771f\u5b9e\u4f7f\u7528\u573a\u666f\uff0c\u5206\u6790\u6a21\u578b\u5927\u5c0f\u3001\u67b6\u6784\u548c\u5e76\u53d1\u8bf7\u6c42\u5bf9\u80fd\u6d88\u7684\u5f71\u54cd\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u53ef\u6301\u7eedAI\u7cfb\u7edf\u7684\u89c1\u89e3\u3002", "motivation": "\u5927\u8bed\u8a00\u6a21\u578b(LLMs)\u7684\u666e\u53ca\u5bf9\u6c14\u5019\u4ea7\u751f\u4e86\u8d8a\u6765\u8d8a\u5927\u7684\u5f71\u54cd\uff0c\u9700\u8981\u6536\u96c6\u66f4\u591a\u5173\u4e8eLLM\u80fd\u6d88\u7684\u4fe1\u606f\u3002\u73b0\u6709\u7684\u57fa\u51c6\u6d4b\u8bd5\u5f80\u5f80\u65e0\u6cd5\u53cd\u6620\u771f\u5b9e\u751f\u4ea7\u73af\u5883\u3002", "method": "\u4f7f\u7528vLLM\uff08\u4e00\u4e2a\u9ad8\u541e\u5410\u91cf\u3001\u751f\u4ea7\u51c6\u5907\u5c31\u7eea\u7684LLM\u670d\u52a1\u540e\u7aef\uff09\u6765\u6a21\u62df\u771f\u5b9e\u4f7f\u7528\u6761\u4ef6\uff0c\u5206\u6790\u6a21\u578b\u5927\u5c0f\u3001\u67b6\u6784\u548c\u5e76\u53d1\u8bf7\u6c42\u91cf\u5bf9\u63a8\u7406\u80fd\u6548\u7684\u5f71\u54cd\u3002", "result": "\u8bc1\u660e\u4e86\u53ef\u4ee5\u521b\u5efa\u66f4\u597d\u53cd\u6620\u5b9e\u9645\u90e8\u7f72\u6761\u4ef6\u7684\u80fd\u6548\u57fa\u51c6\u6d4b\u8bd5\u3002", "conclusion": "\u8be5\u57fa\u51c6\u6d4b\u8bd5\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u89c1\u89e3\uff0c\u5e2e\u52a9\u5efa\u8bbe\u66f4\u53ef\u6301\u7eed\u7684AI\u7cfb\u7edf\u3002"}}
{"id": "2509.09059", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.09059", "abs": "https://arxiv.org/abs/2509.09059", "authors": ["Paulette Koronkevich", "William J. Bowman"], "title": "Dependent-Type-Preserving Memory Allocation", "comment": "Submitted and received second place at the Student Research\n  Competition at Principles of Programming Languages 2022", "summary": "Dependently typed programming languages such as Coq, Agda, Idris, and F*,\nallow programmers to write detailed specifications of their programs and prove\ntheir programs meet these specifications. However, these specifications can be\nviolated during compilation since they are erased after type checking. External\nprograms linked with the compiled program can violate the specifications of the\noriginal program and change the behavior of the compiled program -- even when\ncompiled with a verified compiler. For example, since Coq does not allow\nexplicitly allocating memory, a programmer might link their Coq program with a\nC program that can allocate memory. Even if the Coq program is compiled with a\nverified compiler, the external C program can still violate the memory-safe\nspecification of the Coq program by providing an uninitialized pointer to\nmemory. This error could be ruled out by type checking in a language expressive\nenough to indicate whether memory is initialized versus uninitialized. Linking\nwith a program with an uninitialized pointer could be considered ill-typed, and\nour linking process could prevent linking with ill-typed programs. To\nfacilitate type checking during linking, we can use type-preserving\ncompilation, which preserves the types through the compilation process. In this\nongoing work, we develop a typed intermediate language that supports dependent\nmemory allocation, as well as a dependent-type-preserving compiler pass for\nmemory allocation.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4f9d\u8d56\u7c7b\u578b\u8bed\u8a00\u5728\u7f16\u8bd1\u540e\u7c7b\u578b\u4fe1\u606f\u88ab\u64e6\u9664\u5bfc\u81f4\u7684\u5916\u90e8\u7a0b\u5e8f\u94fe\u63a5\u5b89\u5168\u95ee\u9898\uff0c\u63d0\u51fa\u901a\u8fc7\u7c7b\u578b\u4fdd\u6301\u7f16\u8bd1\u6765\u786e\u4fdd\u94fe\u63a5\u65f6\u7684\u7c7b\u578b\u68c0\u67e5\u3002", "motivation": "\u4f9d\u8d56\u7c7b\u578b\u8bed\u8a00\u5982Coq\u3001Agda\u7b49\u5141\u8bb8\u7f16\u5199\u8be6\u7ec6\u7a0b\u5e8f\u89c4\u8303\uff0c\u4f46\u8fd9\u4e9b\u89c4\u8303\u5728\u7f16\u8bd1\u540e\u88ab\u64e6\u9664\uff0c\u5916\u90e8\u94fe\u63a5\u7a0b\u5e8f\u53ef\u80fd\u8fdd\u53cd\u539f\u59cb\u7a0b\u5e8f\u89c4\u8303\uff0c\u5373\u4f7f\u4f7f\u7528\u9a8c\u8bc1\u7f16\u8bd1\u5668\u4e5f\u65e0\u6cd5\u907f\u514d\u3002", "method": "\u5f00\u53d1\u652f\u6301\u4f9d\u8d56\u5185\u5b58\u5206\u914d\u7684\u4e2d\u95f4\u8bed\u8a00\uff0c\u4ee5\u53ca\u4fdd\u6301\u4f9d\u8d56\u7c7b\u578b\u7684\u5185\u5b58\u5206\u914d\u7f16\u8bd1\u5668\u4f20\u9012\uff0c\u5b9e\u73b0\u7c7b\u578b\u4fdd\u6301\u7f16\u8bd1\u4ee5\u4fbf\u5728\u94fe\u63a5\u65f6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002", "result": "\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\uff0c\u63d0\u51fa\u4e86\u89e3\u51b3\u4f9d\u8d56\u7c7b\u578b\u8bed\u8a00\u7f16\u8bd1\u540e\u7c7b\u578b\u5b89\u5168\u95ee\u9898\u7684\u6280\u672f\u8def\u7ebf\u3002", "conclusion": "\u901a\u8fc7\u7c7b\u578b\u4fdd\u6301\u7f16\u8bd1\u53ef\u4ee5\u9632\u6b62\u4e0e\u7c7b\u578b\u4e0d\u6b63\u786e\u7684\u7a0b\u5e8f\u94fe\u63a5\uff0c\u4ece\u800c\u786e\u4fdd\u4f9d\u8d56\u7c7b\u578b\u7a0b\u5e8f\u5728\u7f16\u8bd1\u540e\u7684\u89c4\u8303\u5b8c\u6574\u6027\u3002"}}
{"id": "2509.09072", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.09072", "abs": "https://arxiv.org/abs/2509.09072", "authors": ["Ahmed Adnan", "Mushfiqur Rahman", "Saad Sakib Noor", "Kazi Sakib"], "title": "CLARA: A Developer's Companion for Code Comprehension and Analysis", "comment": "In proceedings at the 40th IEEE/ACM International Conference on\n  Automated Software Engineering, ASE 2025", "summary": "Code comprehension and analysis of open-source project codebases is a task\nfrequently performed by developers and researchers. However, existing tools\nthat practitioners use for assistance with such tasks often require prior\nproject setup, lack context-awareness, and involve significant manual effort.\nTo address this, we present CLARA, a browser extension that utilizes a\nstate-of-the-art inference model to assist developers and researchers in: (i)\ncomprehending code files and code fragments, (ii) code refactoring, and (iii)\ncode quality attribute detection. We qualitatively evaluated CLARA's inference\nmodel using existing datasets and methodology, and performed a comprehensive\nuser study with 10 developers and academic researchers to assess its usability\nand usefulness. The results show that CLARA is useful, accurate, and practical\nin code comprehension and analysis tasks. CLARA is an open-source tool\navailable at https://github.com/SaadNoor555/CLARA_tool_demo. A video showing\nthe full capabilities of CLARA can be found at\nhttps://youtu.be/VDKVXvIH41Q?si=qBFsmS_Y4m_9x3YH.", "AI": {"tldr": "CLARA\u662f\u4e00\u4e2a\u57fa\u4e8e\u5148\u8fdb\u63a8\u7406\u6a21\u578b\u7684\u6d4f\u89c8\u5668\u6269\u5c55\u5de5\u5177\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u548c\u7814\u7a76\u4eba\u5458\u8fdb\u884c\u4ee3\u7801\u7406\u89e3\u3001\u91cd\u6784\u548c\u8d28\u91cf\u68c0\u6d4b\uff0c\u901a\u8fc7\u7528\u6237\u7814\u7a76\u8bc1\u660e\u5176\u5b9e\u7528\u6027\u548c\u51c6\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u4ee3\u7801\u5206\u6790\u5de5\u5177\u9700\u8981\u9879\u76ee\u8bbe\u7f6e\u3001\u7f3a\u4e4f\u4e0a\u4e0b\u6587\u611f\u77e5\u4e14\u9700\u8981\u5927\u91cf\u624b\u52a8\u64cd\u4f5c\uff0cCLARA\u65e8\u5728\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002", "method": "\u5f00\u53d1\u6d4f\u89c8\u5668\u6269\u5c55\u5de5\u5177\uff0c\u4f7f\u7528\u6700\u5148\u8fdb\u7684\u63a8\u7406\u6a21\u578b\uff0c\u901a\u8fc7\u5b9a\u6027\u8bc4\u4f30\u548c10\u540d\u5f00\u53d1\u8005\u7684\u7528\u6237\u7814\u7a76\u6765\u9a8c\u8bc1\u5de5\u5177\u6548\u679c\u3002", "result": "\u7814\u7a76\u7ed3\u679c\u8868\u660eCLARA\u5728\u4ee3\u7801\u7406\u89e3\u548c\u5206\u6790\u4efb\u52a1\u4e2d\u5b9e\u7528\u3001\u51c6\u786e\u4e14\u5b9e\u7528\u3002", "conclusion": "CLARA\u662f\u4e00\u4e2a\u5f00\u6e90\u5de5\u5177\uff0c\u4e3a\u4ee3\u7801\u7406\u89e3\u548c\u5206\u6790\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.09192", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.09192", "abs": "https://arxiv.org/abs/2509.09192", "authors": ["Doha Nam", "Taehyoun Kim", "Duksan Ryu", "Jongmoon Baik"], "title": "Probing Pre-trained Language Models on Code Changes: Insights from ReDef, a High-Confidence Just-in-Time Defect Prediction Dataset", "comment": "An anonymous link containing the dataset, construction scripts, and\n  experimental code is publicly available for reproducibility:\n  https://figshare.com/s/4f202bc0921e26b41dc2", "summary": "Just-in-Time software defect prediction (JIT-SDP) plays a critical role in\nprioritizing risky code changes during code review and continuous integration.\nHowever, existing datasets often suffer from noisy labels and low precision in\nidentifying bug-inducing commits. To address this, we present ReDef\n(Revert-based Defect dataset), a high-confidence benchmark of function-level\nmodifications curated from 22 large-scale C/C++ projects. Defective cases are\nanchored by revert commits, while clean cases are validated through post-hoc\nhistory checks. Ambiguous instances are conservatively filtered out via a\nGPT-assisted triage process involving multiple votes and audits. This pipeline\nyields 3,164 defective and 10,268 clean modifications, offering substantially\nmore reliable labels than prior existing resources. Beyond dataset\nconstruction, we provide the first systematic evaluation of how pre-trained\nlanguage models (PLMs) reason about code modifications -- specifically, which\ninput encodings most effectively expose change information, and whether models\ngenuinely capture edit semantics. We fine-tune CodeBERT, CodeT5+, and UniXcoder\nunder five encoding strategies, and further probe their sensitivity through\ncounterfactual perturbations that swap added/deleted blocks, invert diff\npolarity, or inject spurious markers. Our results show that compact diff-style\nencodings consistently outperform whole-function formats across all PLMs, with\nstatistical tests confirming large, model-independent effects. However, under\ncounterfactual tests, performance degrades little or not at all -- revealing\nthat what appears to be robustness in fact reflects reliance on superficial\ncues rather than true semantic understanding. These findings indicate that,\nunlike in snapshot-based tasks, current PLMs remain limited in their ability to\ngenuinely comprehend code modifications.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86ReDef\u6570\u636e\u96c6\uff0c\u901a\u8fc7revert commit\u548cGPT\u8f85\u52a9\u8fc7\u6ee4\u6784\u5efa\u4e86\u9ad8\u4fe1\u5ea6\u7684\u8f6f\u4ef6\u7f3a\u9677\u9884\u6d4b\u6570\u636e\u96c6\uff0c\u5e76\u7cfb\u7edf\u8bc4\u4f30\u4e86\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u4fee\u6539\u7406\u89e3\u65b9\u9762\u7684\u80fd\u529b\u548c\u5c40\u9650\u6027\u3002", "motivation": "\u89e3\u51b3\u73b0\u6709JIT-SDP\u6570\u636e\u96c6\u6807\u7b7e\u566a\u58f0\u5927\u3001\u7cbe\u786e\u5ea6\u4f4e\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u8bc4\u4f30\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u662f\u5426\u771f\u6b63\u7406\u89e3\u4ee3\u7801\u4fee\u6539\u8bed\u4e49\u3002", "method": "\u901a\u8fc7revert commit\u6807\u8bb0\u7f3a\u9677\u4fee\u6539\u3001\u5386\u53f2\u68c0\u67e5\u9a8c\u8bc1\u6e05\u6d01\u4fee\u6539\u3001GPT\u8f85\u52a9\u591a\u6b21\u6295\u7968\u5ba1\u6838\u8fc7\u6ee4\u6a21\u7cca\u5b9e\u4f8b\uff0c\u6784\u5efa\u9ad8\u4fe1\u5ea6ReDef\u6570\u636e\u96c6\u3002\u4f7f\u75285\u79cd\u7f16\u7801\u7b56\u7565\u5fae\u8c03CodeBERT\u3001CodeT5+\u3001UniXcoder\u6a21\u578b\uff0c\u5e76\u901a\u8fc7\u53cd\u4e8b\u5b9e\u6270\u52a8\u63a2\u9488\u6a21\u578b\u654f\u611f\u6027\u3002", "result": "\u6784\u5efa\u4e863,164\u4e2a\u7f3a\u9677\u4fee\u6539\u548c10,268\u4e2a\u6e05\u6d01\u4fee\u6539\u7684\u9ad8\u4fe1\u5ea6\u6570\u636e\u96c6\u3002diff\u683c\u5f0f\u7f16\u7801\u5728\u6240\u6709PLM\u4e2d\u90fd\u660e\u663e\u4f18\u4e8e\u6574\u4f53\u51fd\u6570\u683c\u5f0f\u3002\u53cd\u4e8b\u5b9e\u6d4b\u8bd5\u663e\u793a\u6a21\u578b\u6027\u80fd\u51cf\u9000\u5f88\u5c11\uff0c\u8bf4\u660e\u6a21\u578b\u4f9d\u8d56\u8868\u9762\u7ebf\u7d22\u800c\u975e\u771f\u6b63\u8bed\u4e49\u7406\u89e3\u3002", "conclusion": "\u4e0d\u540c\u4e8e\u77ed\u8ddd\u96f6\u4efb\u52a1\uff0c\u5f53\u524d\u7684\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u5728\u7406\u89e3\u4ee3\u7801\u4fee\u6539\u65b9\u9762\u4ecd\u6709\u9650\uff0c\u4f9d\u8d56\u8868\u9762\u7279\u5f81\u800c\u975e\u6df1\u5c42\u8bed\u4e49\u7406\u89e3\u3002"}}
{"id": "2509.09194", "categories": ["cs.SE", "cs.AI", "68N19"], "pdf": "https://arxiv.org/pdf/2509.09194", "abs": "https://arxiv.org/abs/2509.09194", "authors": ["Ayelet Berzack", "Guy Katz"], "title": "On Integrating Large Language Models and Scenario-Based Programming for Improving Software Reliability", "comment": null, "summary": "Large Language Models (LLMs) are fast becoming indispensable tools for\nsoftware developers, assisting or even partnering with them in crafting complex\nprograms. The advantages are evident -- LLMs can significantly reduce\ndevelopment time, generate well-organized and comprehensible code, and\noccasionally suggest innovative ideas that developers might not conceive on\ntheir own. However, despite their strengths, LLMs will often introduce\nsignificant errors and present incorrect code with persuasive confidence,\npotentially misleading developers into accepting flawed solutions.\n  In order to bring LLMs into the software development cycle in a more reliable\nmanner, we propose a methodology for combining them with ``traditional''\nsoftware engineering techniques in a structured way, with the goal of\nstreamlining the development process, reducing errors, and enabling users to\nverify crucial program properties with increased confidence. Specifically, we\nfocus on the Scenario-Based Programming (SBP) paradigm -- an event-driven,\nscenario-based approach for software engineering -- to allow human developers\nto pour their expert knowledge into the LLM, as well as to inspect and verify\nits outputs.\n  To evaluate our methodology, we conducted a significant case study, and used\nit to design and implement the Connect4 game. By combining LLMs and SBP we were\nable to create a highly-capable agent, which could defeat various strong\nexisting agents. Further, in some cases, we were able to formally verify the\ncorrectness of our agent. Finally, our experience reveals interesting insights\nregarding the ease-of-use of our proposed approach. The full code of our\ncase-study will be made publicly available with the final version of this\npaper.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u5c06\u5927\u8bed\u8a00\u6a21\u578b\u4e0e\u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u6280\u672f\u7ed3\u5408\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u57fa\u4e8e\u573a\u666f\u7684\u7f16\u7a0b\u8303\u5f0f\u6765\u63d0\u9ad8LLM\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u53ef\u9760\u6027\u548c\u53ef\u9a8c\u8bc1\u6027\u3002", "motivation": "\u5c3d\u7ba1LLM\u80fd\u663e\u8457\u51cf\u5c11\u5f00\u53d1\u65f6\u95f4\u5e76\u751f\u6210\u7ec4\u7ec7\u826f\u597d\u7684\u4ee3\u7801\uff0c\u4f46\u5b83\u4eec\u7ecf\u5e38\u5f15\u5165\u4e25\u91cd\u9519\u8bef\u5e76\u4ee5\u8bf4\u670d\u6027\u81ea\u4fe1\u5448\u73b0\u9519\u8bef\u4ee3\u7801\uff0c\u9700\u8981\u66f4\u53ef\u9760\u7684\u65b9\u6cd5\u5c06LLM\u6574\u5408\u5230\u8f6f\u4ef6\u5f00\u53d1\u5468\u671f\u4e2d\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u573a\u666f\u7f16\u7a0b\uff08SBP\uff09\u8303\u5f0f\uff0c\u5c06\u4eba\u7c7b\u4e13\u5bb6\u7684\u77e5\u8bc6\u6ce8\u5165LLM\uff0c\u5e76\u68c0\u67e5\u548c\u9a8c\u8bc1\u5176\u8f93\u51fa\uff0c\u7ed3\u5408\u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u6280\u672f\u8fdb\u884c\u7ed3\u6784\u5316\u6574\u5408\u3002", "result": "\u901a\u8fc7Connect4\u6e38\u620f\u7684\u6848\u4f8b\u7814\u7a76\uff0c\u7ed3\u5408LLM\u548cSBP\u521b\u5efa\u4e86\u9ad8\u6027\u80fd\u7684\u667a\u80fd\u4f53\uff0c\u80fd\u591f\u51fb\u8d25\u73b0\u6709\u5f3a\u667a\u80fd\u4f53\uff0c\u5e76\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u80fd\u591f\u5f62\u5f0f\u5316\u9a8c\u8bc1\u667a\u80fd\u4f53\u7684\u6b63\u786e\u6027\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u5c55\u793a\u4e86\u5c06LLM\u4e0e\u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u7ed3\u5408\u7684\u53ef\u884c\u6027\uff0c\u63d0\u9ad8\u4e86\u5f00\u53d1\u8fc7\u7a0b\u7684\u53ef\u9760\u6027\u548c\u53ef\u9a8c\u8bc1\u6027\uff0c\u540c\u65f6\u63ed\u793a\u4e86\u8be5\u65b9\u6cd5\u5728\u6613\u7528\u6027\u65b9\u9762\u7684\u6709\u8da3\u89c1\u89e3\u3002"}}
{"id": "2509.09294", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.09294", "abs": "https://arxiv.org/abs/2509.09294", "authors": ["Solal Rapaport", "Laurent Pautet", "Samuel Tardieu", "Stefano Zacchiroli"], "title": "Altered Histories in Version Control System Repositories: Evidence from the Trenches", "comment": null, "summary": "Version Control Systems (VCS) like Git allow developers to locally rewrite\nrecorded history, e.g., to reorder and suppress commits or specific data in\nthem. These alterations have legitimate use cases, but become problematic when\nperformed on public branches that have downstream users: they break push/pull\nworkflows, challenge the integrity and reproducibility of repositories, and\ncreate opportunities for supply chain attackers to sneak into them nefarious\nchanges. We conduct the first large-scale investigation of Git history\nalterations in public code repositories. We analyze 111 M (millions)\nrepositories archived by Software Heritage, which preserves VCS histories even\nacross alterations. We find history alterations in 1.22 M repositories, for a\ntotal of 8.7 M rewritten histories. We categorize changes by where they happen\n(which repositories, which branches) and what is changed in them (files or\ncommit metadata). Conducting two targeted case studies we show that altered\nhistories recurrently change licenses retroactively, or are used to remove\n''secrets'' (e.g., private keys) committed by mistake. As these behaviors\ncorrespond to bad practices-in terms of project governance or security\nmanagement, respectively-that software recipients might want to avoid, we\nintroduce GitHistorian, an automated tool, that developers can use to spot and\ndescribe history alterations in public Git repositories.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u5bf9Git\u516c\u5171\u4ee3\u7801\u4ed3\u5e93\u4e2d\u7684\u5386\u53f2\u4fee\u6539\u8fdb\u884c\u4e86\u9996\u6b21\u5927\u89c4\u6a21\u8c03\u67e5\uff0c\u53d1\u73b0\u4e86122\u4e07\u4e2a\u4ed3\u5e93\u5b58\u57288.7\u4e07\u6b21\u5386\u53f2\u91cd\u5199\uff0c\u5e76\u5f00\u53d1\u4e86\u81ea\u52a8\u5316\u5de5\u5177GitHistorian\u6765\u68c0\u6d4b\u8fd9\u4e9b\u4fee\u6539\u3002", "motivation": "\u8c03\u67e5Git\u516c\u5171\u5206\u652f\u4e2d\u7684\u5386\u53f2\u4fee\u6539\u884c\u4e3a\uff0c\u8fd9\u4e9b\u4fee\u6539\u5bf9\u4e0b\u6e38\u7528\u6237\u9020\u6210\u63a8\u9001/\u62c9\u53d6\u6d41\u7a0b\u5931\u6548\u3001\u5a31\u5b50\u5e93\u5b8c\u6574\u6027\u548c\u53ef\u590d\u73b0\u6027\u95ee\u9898\uff0c\u4e3a\u4f9b\u5e94\u94fe\u653b\u51fb\u63d0\u4f9b\u53ef\u4e4b\u673a\u3002", "method": "\u5206\u6790\u4e86\u8f6f\u4ef6\u9057\u4ea7\u5b58\u6863\u6848\u6848\u7684111\u4e07\u4e2a\u4ed3\u5e93\uff0c\u5bf9\u5386\u53f2\u4fee\u6539\u8fdb\u884c\u5206\u7c7b\u548c\u7edf\u8ba1\uff0c\u5305\u62ec\u4fee\u6539\u53d1\u751f\u7684\u4ed3\u5e93\u3001\u5206\u652f\u4ee5\u53ca\u4fee\u6539\u7684\u5185\u5bb9\uff08\u6587\u4ef6\u6216\u63d0\u4ea4\u5143\u6570\u636e\uff09\u3002", "result": "\u57281.22\u4e07\u4e2a\u4ed3\u5e93\u4e2d\u53d1\u73b08.7\u4e07\u6b21\u5386\u53f2\u91cd\u5199\u3002\u901a\u8fc7\u4e24\u4e2a\u76ee\u6807\u6848\u4f8b\u7814\u7a76\u53d1\u73b0\uff0c\u5386\u53f2\u4fee\u6539\u5e38\u7528\u4e8e\u8ffd\u6eaf\u6027\u66f4\u6539\u8bb8\u53ef\u8bc1\u6216\u79fb\u9664\u6f0f\u6d43\u7684\u79d8\u5bc6\u4fe1\u606f\uff0c\u8fd9\u4e9b\u90fd\u662f\u4e0d\u826f\u7684\u9879\u76ee\u7ba1\u7406\u6216\u5b89\u5168\u5b9e\u8df5\u3002", "conclusion": "\u7814\u7a76\u5f3a\u8c03\u4e86\u516c\u5171Git\u4ed3\u5e93\u4e2d\u5386\u53f2\u4fee\u6539\u7684\u5e38\u89c1\u6027\u548c\u6f5c\u5728\u98ce\u9669\uff0c\u5e76\u63d0\u4f9b\u4e86GitHistorian\u5de5\u5177\u6765\u5e2e\u52a9\u5f00\u53d1\u8005\u8bc6\u522b\u548c\u63cf\u8ff0\u8fd9\u4e9b\u4fee\u6539\uff0c\u4ee5\u907f\u514d\u4e0d\u826f\u5b9e\u8df5\u5bf9\u8f6f\u4ef6\u63a5\u6536\u8005\u9020\u6210\u7684\u98ce\u9669\u3002"}}
{"id": "2509.09313", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.09313", "abs": "https://arxiv.org/abs/2509.09313", "authors": ["Moritz Mock", "Thomas Forrer", "Barbara Russo"], "title": "Cross-Domain Evaluation of Transformer-Based Vulnerability Detection on Open & Industry Data", "comment": "Accepted to the 26th International Conference on Product-Focused\n  Software Process Improvement (PROFES 2025)", "summary": "Deep learning solutions for vulnerability detection proposed in academic\nresearch are not always accessible to developers, and their applicability in\nindustrial settings is rarely addressed. Transferring such technologies from\nacademia to industry presents challenges related to trustworthiness, legacy\nsystems, limited digital literacy, and the gap between academic and industrial\nexpertise. For deep learning in particular, performance and integration into\nexisting workflows are additional concerns. In this work, we first evaluate the\nperformance of CodeBERT for detecting vulnerable functions in industrial and\nopen-source software. We analyse its cross-domain generalisation when\nfine-tuned on open-source data and tested on industrial data, and vice versa,\nalso exploring strategies for handling class imbalance. Based on these results,\nwe develop AI-DO(Automating vulnerability detection Integration for Developers'\nOperations), a Continuous Integration-Continuous Deployment (CI/CD)-integrated\nrecommender system that uses fine-tuned CodeBERT to detect and localise\nvulnerabilities during code review without disrupting workflows. Finally, we\nassess the tool's perceived usefulness through a survey with the company's IT\nprofessionals. Our results show that models trained on industrial data detect\nvulnerabilities accurately within the same domain but lose performance on\nopen-source code, while a deep learner fine-tuned on open data, with\nappropriate undersampling techniques, improves the detection of\nvulnerabilities.", "AI": {"tldr": "\u7814\u7a76\u8bc4\u4f30\u4e86CodeBERT\u5728\u4ea7\u4e1a\u548c\u5f00\u6e90\u8f6f\u4ef6\u4e2d\u68c0\u6d4b\u6f0f\u6d1e\u7684\u6027\u80fd\uff0c\u5f00\u53d1\u4e86\u96c6\u6210\u5230CI/CD\u6d41\u7a0b\u7684AI-DO\u5de5\u5177\uff0c\u5e76\u901a\u8fc7\u8c03\u67e5\u9a8c\u8bc1\u5176\u5b9e\u7528\u6027\u3002", "motivation": "\u6df1\u5ea6\u5b66\u4e60\u6f0f\u6d1e\u68c0\u6d4b\u6280\u672f\u5728\u4ea7\u4e1a\u73af\u5883\u4e2d\u9047\u5230\u4fe1\u4efb\u6027\u3001\u7ee7\u627f\u7cfb\u7edf\u3001\u6280\u80fd\u5dee\u8ddd\u548c\u5de5\u4f5c\u6d41\u96c6\u6210\u7b49\u6311\u6218\uff0c\u9700\u8981\u5f00\u53d1\u66f4\u5b9e\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u4f7f\u7528CodeBERT\u6a21\u578b\uff0c\u5728\u5f00\u6e90\u548c\u4ea7\u4e1a\u6570\u636e\u4e0a\u8fdb\u884c\u4ea4\u53c9\u57df\u6d4b\u8bd5\uff0c\u5e94\u7528\u7c7b\u4e0d\u5e73\u8861\u5904\u7406\u6280\u672f\uff0c\u5f00\u53d1CI/CD\u96c6\u6210\u7684\u63a8\u8350\u7cfb\u7edfAI-DO\u3002", "result": "\u57f9\u8bad\u4e8e\u4ea7\u4e1a\u6570\u636e\u7684\u6a21\u578b\u5728\u540c\u57df\u68c0\u6d4b\u51c6\u786e\uff0c\u4f46\u5728\u5f00\u6e90\u4ee3\u7801\u4e0a\u6027\u80fd\u4e0b\u964d\uff1b\u4f7f\u7528\u9002\u5f53\u7684\u4e0b\u91c7\u6837\u6280\u672f\u5728\u5f00\u6e90\u6570\u636e\u4e0a\u5fae\u8c03\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u80fd\u63d0\u9ad8\u6f0f\u6d1e\u68c0\u6d4b\u80fd\u529b\u3002", "conclusion": "AI-DO\u7cfb\u7edf\u80fd\u591f\u5728\u4e0d\u6253\u65ad\u5de5\u4f5c\u6d41\u7684\u60c5\u51b5\u4e0b\u68c0\u6d4b\u548c\u5b9a\u4f4d\u6f0f\u6d1e\uff0c\u901a\u8fc7IT\u4e13\u4e1a\u4eba\u5458\u8c03\u67e5\u9a8c\u8bc1\u4e86\u5176\u5b9e\u7528\u6027\u3002"}}
{"id": "2509.09322", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.09322", "abs": "https://arxiv.org/abs/2509.09322", "authors": ["Jacopo Bufalino", "Agathe Blaise", "Stefano Secci"], "title": "ORCA: Unveiling Obscure Containers In The Wild", "comment": null, "summary": "Modern software development increasingly depends on open-source libraries and\nthird-party components, which are often encapsulated into containerized\nenvironments. While improving the development and deployment of applications,\nthis approach introduces security risks, particularly when outdated or\nvulnerable components are inadvertently included in production environments.\nSoftware Composition Analysis (SCA) is a critical process that helps identify\nand manage packages and dependencies inside a container. However, unintentional\nmodifications to the container filesystem can lead to incomplete container\nimages, which compromise the reliability of SCA tools. In this paper, we\nexamine the limitations of both cloud-based and open-source SCA tools when\nfaced with such obscure images. An analysis of 600 popular containers revealed\nthat obscure containers exist in well-known registries and trusted images and\nthat many tools fail to analyze such containers. To mitigate these issues, we\npropose an obscuration-resilient methodology for container analysis and\nintroduce ORCA (Obscuration-Resilient Container Analyzer), its open-source\nimplementation. We reported our findings to all vendors using their appropriate\nchannels. Our results demonstrate that ORCA effectively detects the content of\nobscure containers and achieves a median 40% improvement in file coverage\ncompared to Docker Scout and Syft.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u7814\u7a76\u4e86\u5bb9\u5668\u56fe\u50cf\u4e2d\u7684\u6a21\u7cca\u73b0\u8c61\u5bf9\u8f6f\u4ef6\u7ec4\u6210\u5206\u6790(SCA)\u5de5\u5177\u7684\u5f71\u54cd\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u79cd\u53ef\u4ee5\u62b5\u5fa1\u6a21\u7cca\u6548\u679c\u7684\u5206\u6790\u65b9\u6cd5ORCA\uff0c\u5728\u6587\u4ef6\u8986\u76d6\u7387\u4e0a\u6bd4\u73b0\u6709\u5de5\u5177\u63d0\u9ad840%\u3002", "motivation": "\u5bb9\u5668\u5316\u73af\u5883\u4e2d\u4f7f\u7528\u8fc7\u65f6\u6216\u5b58\u5728\u6f0f\u6d1e\u7684\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0cSCA\u5de5\u5177\u80fd\u591f\u8bc6\u522b\u8fd9\u4e9b\u98ce\u9669\uff0c\u4f46\u5bb9\u5668\u6587\u4ef6\u7cfb\u7edf\u7684\u65e0\u610f\u4fee\u6539\u4f1a\u5bfc\u81f4\u56fe\u50cf\u4e0d\u5b8c\u6574\uff0c\u5f71\u54cdSCA\u5de5\u5177\u7684\u53ef\u9760\u6027\u3002", "method": "\u5206\u6790\u4e86600\u4e2a\u6d41\u884c\u5bb9\u5668\u7684\u6a21\u7cca\u73b0\u8c61\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u79cd\u53ef\u4ee5\u62b5\u5fa1\u6a21\u7cca\u6548\u679c\u7684\u5bb9\u5668\u5206\u6790\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e3a\u5f00\u6e90\u5de5\u5177ORCA\u3002", "result": "\u53d1\u73b0\u6d41\u884c\u6ce8\u518c\u8868\u548c\u53ef\u4fe1\u56fe\u50cf\u4e2d\u5b58\u5728\u6a21\u7cca\u5bb9\u5668\uff0c\u8bb8\u591aSCA\u5de5\u5177\u65e0\u6cd5\u6709\u6548\u5206\u6790\u8fd9\u7c7b\u5bb9\u5668\u3002ORCA\u80fd\u591f\u6709\u6548\u68c0\u6d4b\u6a21\u7cca\u5bb9\u5668\u5185\u5bb9\uff0c\u6587\u4ef6\u8986\u76d6\u7387\u6bd4Docker Scout\u548cSyft\u63d0\u9ad8\u4e8640%\u3002", "conclusion": "\u5f53\u524d\u7684SCA\u5de5\u5177\u5728\u5904\u7406\u6a21\u7cca\u5bb9\u5668\u65f6\u5b58\u5728\u663e\u8457\u5c40\u9650\u6027\uff0cORCA\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u52a0\u53ef\u9760\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u5728\u5bb9\u5668\u73af\u5883\u4e2d\u66f4\u6709\u6548\u5730\u8bc6\u522b\u548c\u7ba1\u7406\u5b89\u5168\u98ce\u9669\u3002"}}
{"id": "2509.09614", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.09614", "abs": "https://arxiv.org/abs/2509.09614", "authors": ["Jielin Qiu", "Zuxin Liu", "Zhiwei Liu", "Rithesh Murthy", "Jianguo Zhang", "Haolin Chen", "Shiyu Wang", "Ming Zhu", "Liangwei Yang", "Juntao Tan", "Zhepeng Cen", "Cheng Qian", "Shelby Heinecke", "Weiran Yao", "Silvio Savarese", "Caiming Xiong", "Huan Wang"], "title": "LoCoBench: A Benchmark for Long-Context Large Language Models in Complex Software Engineering", "comment": "53 pages", "summary": "The emergence of long-context language models with context windows extending\nto millions of tokens has created new opportunities for sophisticated code\nunderstanding and software development evaluation. We propose LoCoBench, a\ncomprehensive benchmark specifically designed to evaluate long-context LLMs in\nrealistic, complex software development scenarios. Unlike existing code\nevaluation benchmarks that focus on single-function completion or short-context\ntasks, LoCoBench addresses the critical evaluation gap for long-context\ncapabilities that require understanding entire codebases, reasoning across\nmultiple files, and maintaining architectural consistency across large-scale\nsoftware systems. Our benchmark provides 8,000 evaluation scenarios\nsystematically generated across 10 programming languages, with context lengths\nspanning 10K to 1M tokens, a 100x variation that enables precise assessment of\nlong-context performance degradation in realistic software development\nsettings. LoCoBench introduces 8 task categories that capture essential\nlong-context capabilities: architectural understanding, cross-file refactoring,\nmulti-session development, bug investigation, feature implementation, code\ncomprehension, integration testing, and security analysis. Through a 5-phase\npipeline, we create diverse, high-quality scenarios that challenge LLMs to\nreason about complex codebases at unprecedented scale. We introduce a\ncomprehensive evaluation framework with 17 metrics across 4 dimensions,\nincluding 8 new evaluation metrics, combined in a LoCoBench Score (LCBS). Our\nevaluation of state-of-the-art long-context models reveals substantial\nperformance gaps, demonstrating that long-context understanding in complex\nsoftware development represents a significant unsolved challenge that demands\nmore attention. LoCoBench is released at:\nhttps://github.com/SalesforceAIResearch/LoCoBench.", "AI": {"tldr": "LoCoBench\u662f\u4e00\u4e2a\u4e13\u95e8\u8bc4\u4f30\u957f\u4e0a\u4e0b\u6587LLM\u5728\u590d\u6742\u8f6f\u4ef6\u5f00\u53d1\u573a\u666f\u4e2d\u8868\u73b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b8000\u4e2a\u8bc4\u4f30\u573a\u666f\uff0c\u8986\u76d610\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0a\u4e0b\u6587\u957f\u5ea6\u4ece10K\u52301M tokens\uff0c\u5305\u542b8\u4e2a\u4efb\u52a1\u7c7b\u522b\u548c17\u4e2a\u8bc4\u4f30\u6307\u6807\u3002", "motivation": "\u968f\u7740\u652f\u6301\u767e\u4e07token\u4e0a\u4e0b\u6587\u7a97\u53e3\u7684\u8bed\u8a00\u6a21\u578b\u51fa\u73b0\uff0c\u9700\u8981\u4e13\u95e8\u7684\u57fa\u51c6\u6d4b\u8bd5\u6765\u8bc4\u4f30\u8fd9\u4e9b\u6a21\u578b\u5728\u771f\u5b9e\u590d\u6742\u8f6f\u4ef6\u5f00\u53d1\u573a\u666f\u4e2d\u7684\u957f\u4e0a\u4e0b\u6587\u7406\u89e3\u80fd\u529b\uff0c\u586b\u8865\u73b0\u6709\u4ee3\u7801\u8bc4\u4f30\u57fa\u51c6\u5728\u957f\u4e0a\u4e0b\u6587\u80fd\u529b\u8bc4\u4f30\u65b9\u9762\u7684\u7a7a\u767d\u3002", "method": "\u901a\u8fc75\u9636\u6bb5\u6d41\u6c34\u7ebf\u7cfb\u7edf\u751f\u6210\u591a\u6837\u5316\u7684\u9ad8\u8d28\u91cf\u8bc4\u4f30\u573a\u666f\uff0c\u5305\u542b8\u4e2a\u4efb\u52a1\u7c7b\u522b\uff1a\u67b6\u6784\u7406\u89e3\u3001\u8de8\u6587\u4ef6\u91cd\u6784\u3001\u591a\u4f1a\u8bdd\u5f00\u53d1\u3001bug\u8c03\u67e5\u3001\u529f\u80fd\u5b9e\u73b0\u3001\u4ee3\u7801\u7406\u89e3\u3001\u96c6\u6210\u6d4b\u8bd5\u548c\u5b89\u5168\u5206\u6790\u3002\u4f7f\u752817\u4e2a\u6307\u6807\uff08\u5305\u62ec8\u4e2a\u65b0\u6307\u6807\uff09\u57284\u4e2a\u7ef4\u5ea6\u4e0a\u8fdb\u884c\u7efc\u5408\u8bc4\u4f30\uff0c\u5f62\u6210LoCoBench Score (LCBS)\u3002", "result": "\u5bf9\u6700\u5148\u8fdb\u7684\u957f\u4e0a\u4e0b\u6587\u6a21\u578b\u8bc4\u4f30\u663e\u793a\u5b58\u5728\u663e\u8457\u7684\u6027\u80fd\u5dee\u8ddd\uff0c\u8868\u660e\u590d\u6742\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u957f\u4e0a\u4e0b\u6587\u7406\u89e3\u4ecd\u7136\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u672a\u89e3\u51b3\u6311\u6218\u3002", "conclusion": "\u957f\u4e0a\u4e0b\u6587\u7406\u89e3\u5728\u590d\u6742\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u662f\u4e00\u4e2a\u9700\u8981\u66f4\u591a\u5173\u6ce8\u7684\u91cd\u8981\u6311\u6218\uff0cLoCoBench\u4e3a\u8bc4\u4f30\u548c\u63a8\u52a8\u8fd9\u4e00\u9886\u57df\u7684\u53d1\u5c55\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\u6846\u67b6\u3002"}}
{"id": "2509.09630", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.09630", "abs": "https://arxiv.org/abs/2509.09630", "authors": ["Zhenguang Liu", "Lixun Ma", "Zhongzheng Mu", "Chengkun Wei", "Xiaojun Xu", "Yingying Jiao", "Kui Ren"], "title": "I Know Who Clones Your Code: Interpretable Smart Contract Similarity Detection", "comment": null, "summary": "Widespread reuse of open-source code in smart contract development boosts\nprogramming efficiency but significantly amplifies bug propagation across\ncontracts, while dedicated methods for detecting similar smart contract\nfunctions remain very limited. Conventional abstract-syntax-tree (AST) based\nmethods for smart contract similarity detection face challenges in handling\nintricate tree structures, which impedes detailed semantic comparison of code.\nRecent deep-learning based approaches tend to overlook code syntax and\ndetection interpretability, resulting in suboptimal performance.\n  To fill this research gap, we introduce SmartDetector, a novel approach for\ncomputing similarity between smart contract functions, explainable at the\nfine-grained statement level. Technically, SmartDetector decomposes the AST of\na smart contract function into a series of smaller statement trees, each\nreflecting a structural element of the source code. Then, SmartDetector uses a\nclassifier to compute the similarity score of two functions by comparing each\npair of their statement trees. To address the infinite hyperparameter space of\nthe classifier, we mathematically derive a cosine-wise diffusion process to\nefficiently search optimal hyperparameters. Extensive experiments conducted on\nthree large real-world datasets demonstrate that SmartDetector outperforms\ncurrent state-of-the-art methods by an average improvement of 14.01% in\nF1-score, achieving an overall average F1-score of 95.88%.", "AI": {"tldr": "SmartDetector\u662f\u4e00\u79cd\u65b0\u9896\u7684\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u76f8\u4f3c\u6027\u68c0\u6d4b\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06AST\u5206\u89e3\u4e3a\u8bed\u53e5\u6811\u5e76\u8fdb\u884c\u7ec6\u7c92\u5ea6\u6bd4\u8f83\uff0c\u5728\u4e09\u4e2a\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u5e73\u5747F1\u5206\u6570\u8fbe\u523095.88%\uff0c\u6bd4\u73b0\u6709\u65b9\u6cd5\u63d0\u534714.01%\u3002", "motivation": "\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4e2d\u5e7f\u6cdb\u91cd\u7528\u5f00\u6e90\u4ee3\u7801\u663e\u8457\u63d0\u9ad8\u4e86\u7f16\u7a0b\u6548\u7387\uff0c\u4f46\u4e5f\u653e\u5927\u4e86\u6f0f\u6d1e\u4f20\u64ad\u98ce\u9669\u3002\u73b0\u6709\u7684\u57fa\u4e8eAST\u7684\u65b9\u6cd5\u96be\u4ee5\u5904\u7406\u590d\u6742\u6811\u7ed3\u6784\uff0c\u800c\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u5f80\u5f80\u5ffd\u7565\u4ee3\u7801\u8bed\u6cd5\u548c\u53ef\u89e3\u91ca\u6027\uff0c\u5bfc\u81f4\u6027\u80fd\u4e0d\u4f73\u3002", "method": "SmartDetector\u5c06\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u7684AST\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u8f83\u5c0f\u7684\u8bed\u53e5\u6811\uff0c\u6bcf\u4e2a\u8bed\u53e5\u6811\u53cd\u6620\u6e90\u4ee3\u7801\u7684\u7ed3\u6784\u5143\u7d20\u3002\u7136\u540e\u4f7f\u7528\u5206\u7c7b\u5668\u901a\u8fc7\u6bd4\u8f83\u6bcf\u5bf9\u8bed\u53e5\u6811\u6765\u8ba1\u7b97\u4e24\u4e2a\u51fd\u6570\u7684\u76f8\u4f3c\u6027\u5f97\u5206\u3002\u91c7\u7528\u4f59\u5f26\u6269\u6563\u8fc7\u7a0b\u9ad8\u6548\u641c\u7d22\u6700\u4f18\u8d85\u53c2\u6570\u3002", "result": "\u5728\u4e09\u4e2a\u5927\u578b\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u7684\u5e7f\u6cdb\u5b9e\u9a8c\u8868\u660e\uff0cSmartDetector\u5728F1\u5206\u6570\u4e0a\u5e73\u5747\u6bd4\u5f53\u524d\u6700\u5148\u8fdb\u65b9\u6cd5\u63d0\u534714.01%\uff0c\u603b\u4f53\u5e73\u5747F1\u5206\u6570\u8fbe\u523095.88%\u3002", "conclusion": "SmartDetector\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u7ec6\u7c92\u5ea6\u8bed\u53e5\u7ea7\u522b\u53ef\u89e3\u91ca\u7684\u667a\u80fd\u5408\u7ea6\u51fd\u6570\u76f8\u4f3c\u6027\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u5728\u5904\u7406\u590d\u6742\u6811\u7ed3\u6784\u548c\u4fdd\u6301\u53ef\u89e3\u91ca\u6027\u65b9\u9762\u7684\u5c40\u9650\u6027\uff0c\u663e\u8457\u63d0\u5347\u4e86\u68c0\u6d4b\u6027\u80fd\u3002"}}

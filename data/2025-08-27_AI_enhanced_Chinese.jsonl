{"id": "2508.18587", "categories": ["cs.PL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.18587", "abs": "https://arxiv.org/abs/2508.18587", "authors": ["Bar\u0131\u015f Bayaz\u0131t", "Yao Li", "Xujie Si"], "title": "A Case Study on the Effectiveness of LLMs in Verification with Proof Assistants", "comment": "Accepted by LMPL 2025", "summary": "Large language models (LLMs) can potentially help with verification using\nproof assistants by automating proofs. However, it is unclear how effective\nLLMs are in this task. In this paper, we perform a case study based on two\nmature Rocq projects: the hs-to-coq tool and Verdi. We evaluate the\neffectiveness of LLMs in generating proofs by both quantitative and qualitative\nanalysis. Our study finds that: (1) external dependencies and context in the\nsame source file can significantly help proof generation; (2) LLMs perform\ngreat on small proofs but can also generate large proofs; (3) LLMs perform\ndifferently on different verification projects; and (4) LLMs can generate\nconcise and smart proofs, apply classical techniques to new definitions, but\ncan also make odd mistakes.", "AI": {"tldr": "LLMs\u5728\u8bc1\u660e\u52a9\u624b\u9a8c\u8bc1\u4efb\u52a1\u4e2d\u7684\u6709\u6548\u6027\u7814\u7a76\uff1a\u901a\u8fc7hs-to-coq\u548cVerdi\u9879\u76ee\u6848\u4f8b\u53d1\u73b0\uff0c\u5916\u90e8\u4f9d\u8d56\u548c\u4e0a\u4e0b\u6587\u5bf9\u8bc1\u660e\u751f\u6210\u6709\u663e\u8457\u5e2e\u52a9\uff0cLLMs\u5728\u5c0f\u8bc1\u660e\u4e0a\u8868\u73b0\u4f18\u5f02\u4f46\u4e5f\u80fd\u751f\u6210\u5927\u8bc1\u660e\uff0c\u5728\u4e0d\u540c\u9a8c\u8bc1\u9879\u76ee\u4e2d\u8868\u73b0\u5404\u5f02\uff0c\u80fd\u751f\u6210\u7b80\u6d01\u667a\u80fd\u8bc1\u660e\u4f46\u4e5f\u4f1a\u72af\u5947\u602a\u9519\u8bef", "motivation": "\u8bc4\u4f30\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728\u8bc1\u660e\u52a9\u624b\u9a8c\u8bc1\u4efb\u52a1\u4e2d\u7684\u5b9e\u9645\u6548\u679c\uff0c\u4e86\u89e3LLMs\u5728\u81ea\u52a8\u5316\u8bc1\u660e\u751f\u6210\u65b9\u9762\u7684\u80fd\u529b\u548c\u5c40\u9650\u6027", "method": "\u57fa\u4e8e\u4e24\u4e2a\u6210\u719f\u7684Rocq\u9879\u76ee\uff08hs-to-coq\u5de5\u5177\u548cVerdi\uff09\u8fdb\u884c\u6848\u4f8b\u7814\u7a76\uff0c\u901a\u8fc7\u5b9a\u91cf\u548c\u5b9a\u6027\u5206\u6790\u8bc4\u4f30LLMs\u751f\u6210\u8bc1\u660e\u7684\u6709\u6548\u6027", "result": "\u7814\u7a76\u53d1\u73b0\uff1a(1)\u5916\u90e8\u4f9d\u8d56\u548c\u540c\u6e90\u6587\u4ef6\u4e0a\u4e0b\u6587\u663e\u8457\u5e2e\u52a9\u8bc1\u660e\u751f\u6210\uff1b(2)LLMs\u5728\u5c0f\u8bc1\u660e\u4e0a\u8868\u73b0\u4f18\u5f02\u4f46\u4e5f\u80fd\u751f\u6210\u5927\u8bc1\u660e\uff1b(3)\u5728\u4e0d\u540c\u9a8c\u8bc1\u9879\u76ee\u4e2d\u8868\u73b0\u4e0d\u540c\uff1b(4)\u80fd\u751f\u6210\u7b80\u6d01\u667a\u80fd\u8bc1\u660e\uff0c\u80fd\u5c06\u7ecf\u5178\u6280\u672f\u5e94\u7528\u4e8e\u65b0\u5b9a\u4e49\uff0c\u4f46\u4e5f\u4f1a\u72af\u5947\u602a\u9519\u8bef", "conclusion": "LLMs\u5728\u8bc1\u660e\u52a9\u624b\u9a8c\u8bc1\u65b9\u9762\u5177\u6709\u6f5c\u529b\uff0c\u4f46\u6548\u679c\u53d7\u9879\u76ee\u7c7b\u578b\u3001\u4e0a\u4e0b\u6587\u4f9d\u8d56\u7b49\u56e0\u7d20\u5f71\u54cd\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u5176\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u548c\u53ef\u9760\u6027"}}
{"id": "2508.18370", "categories": ["cs.SE", "cs.CL", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.18370", "abs": "https://arxiv.org/abs/2508.18370", "authors": ["Terry Yue Zhuo", "Dingmin Wang", "Hantian Ding", "Varun Kumar", "Zijian Wang"], "title": "Training Language Model Agents to Find Vulnerabilities with CTF-Dojo", "comment": null, "summary": "Large language models (LLMs) have demonstrated exceptional capabilities when\ntrained within executable runtime environments, notably excelling at software\nengineering tasks through verified feedback loops. Yet, scalable and\ngeneralizable execution-grounded environments remain scarce, limiting progress\nin training more capable ML agents. We introduce CTF-Dojo, the first\nlarge-scale executable runtime tailored for training LLMs with verifiable\nfeedback, featuring 658 fully functional Capture-The-Flag (CTF)-style\nchallenges containerized in Docker with guaranteed reproducibility. To enable\nrapid scaling without manual intervention, we develop CTF-Forge, an automated\npipeline that transforms publicly available artifacts into ready-to-use\nexecution environments in minutes, eliminating weeks of expert configuration\ntraditionally required. We trained LLM-based agents on just 486 high-quality,\nexecution-verified trajectories from CTF-Dojo, achieving up to 11.6% absolute\ngains over strong baselines across three competitive benchmarks: InterCode-CTF,\nNYU CTF Bench, and Cybench. Our best-performing 32B model reaches 31.9% Pass@1,\nestablishing a new open-weight state-of-the-art that rivals frontier models\nlike DeepSeek-V3-0324 and Gemini-2.5-Flash. By framing CTF-style tasks as a\nbenchmark for executable-agent learning, CTF-Dojo demonstrates that\nexecution-grounded training signals are not only effective but pivotal in\nadvancing high-performance ML agents without dependence on costly proprietary\nsystems.", "AI": {"tldr": "\u63d0\u51fa\u4e86CTF-Dojo\uff0c\u9996\u4e2a\u5927\u89c4\u6a21\u53ef\u6267\u884c\u8fd0\u884c\u65f6\u73af\u5883\uff0c\u7528\u4e8e\u8bad\u7ec3LLM\u5e76\u83b7\u53d6\u53ef\u9a8c\u8bc1\u53cd\u9988\uff0c\u5305\u542b658\u4e2aCTF\u6311\u6218\u3002\u901a\u8fc7\u81ea\u52a8\u5316\u6d41\u6c34\u7ebfCTF-Forge\u5feb\u901f\u751f\u6210\u73af\u5883\uff0c\u4ec5\u7528486\u6761\u9ad8\u8d28\u91cf\u8f68\u8ff9\u8bad\u7ec3\u5c31\u5b9e\u73b0\u4e8611.6%\u7684\u6027\u80fd\u63d0\u5347\uff0c32B\u6a21\u578b\u8fbe\u523031.9% Pass@1\u7684\u65b0SOTA\u3002", "motivation": "\u73b0\u6709\u53ef\u6267\u884c\u8fd0\u884c\u65f6\u73af\u5883\u7a00\u7f3a\uff0c\u9650\u5236\u4e86ML\u4ee3\u7406\u7684\u8bad\u7ec3\u8fdb\u5c55\u3002\u9700\u8981\u53ef\u6269\u5c55\u3001\u901a\u7528\u5316\u7684\u6267\u884c\u73af\u5883\u6765\u8bad\u7ec3\u66f4\u5f3a\u5927\u7684ML\u4ee3\u7406\u3002", "method": "\u5f00\u53d1CTF-Dojo\u5927\u89c4\u6a21\u53ef\u6267\u884c\u8fd0\u884c\u65f6\u73af\u5883\uff0c\u5305\u542b658\u4e2aDocker\u5bb9\u5668\u5316\u7684CTF\u6311\u6218\uff1b\u521b\u5efaCTF-Forge\u81ea\u52a8\u5316\u6d41\u6c34\u7ebf\uff0c\u5c06\u516c\u5f00\u8d44\u6e90\u5feb\u901f\u8f6c\u6362\u4e3a\u53ef\u7528\u6267\u884c\u73af\u5883\uff1b\u4f7f\u7528\u6267\u884c\u9a8c\u8bc1\u7684\u9ad8\u8d28\u91cf\u8f68\u8ff9\u8bad\u7ec3LLM\u4ee3\u7406\u3002", "result": "\u4ec5\u7528486\u6761\u9ad8\u8d28\u91cf\u8f68\u8ff9\u8bad\u7ec3\u5c31\u5b9e\u73b0\u4e86\u6700\u9ad811.6%\u7684\u7edd\u5bf9\u6027\u80fd\u63d0\u5347\uff1b32B\u6a21\u578b\u8fbe\u523031.9% Pass@1\uff0c\u521b\u9020\u4e86\u65b0\u7684\u5f00\u6e90\u6743\u91cdSOTA\uff0c\u5ab2\u7f8eDeepSeek-V3-0324\u548cGemini-2.5-Flash\u7b49\u524d\u6cbf\u6a21\u578b\u3002", "conclusion": "CTF\u98ce\u683c\u4efb\u52a1\u53ef\u4f5c\u4e3a\u53ef\u6267\u884c\u4ee3\u7406\u5b66\u4e60\u7684\u57fa\u51c6\uff0c\u6267\u884c\u57fa\u7840\u8bad\u7ec3\u4fe1\u53f7\u4e0d\u4ec5\u6709\u6548\u800c\u4e14\u5bf9\u63a8\u8fdb\u9ad8\u6027\u80fdML\u4ee3\u7406\u81f3\u5173\u91cd\u8981\uff0c\u65e0\u9700\u4f9d\u8d56\u6602\u8d35\u7684\u4e13\u6709\u7cfb\u7edf\u3002"}}
{"id": "2508.19206", "categories": ["cs.LO", "math.LO", "math.NT", "11U05, 03B10, 03B25, 11J54"], "pdf": "https://arxiv.org/pdf/2508.19206", "abs": "https://arxiv.org/abs/2508.19206", "authors": ["Hera Brown", "Jakub Konieczny"], "title": "Decidability of Extensions of Presburger Arithmetic by Hardy Field Functions", "comment": "17 pages", "summary": "We study the extension of Presburger arithmetic by the class of\nsub-polynomial Hardy field functions, and show the majority of these extensions\nto be undecidable. More precisely, we show that the theory\n$\\mathrm{Th}(\\mathbb{Z}; <, +, \\lfloor f \\rceil)$, where $f$ is a Hardy field\nfunction and $\\lfloor \\cdot \\rceil$ the nearest integer operator, is\nundecidable when $f$ grows polynomially faster than $x$. Further, we show that\nwhen $f$ grows sub-linearly quickly, but still as fast as some polynomial, the\ntheory $\\mathrm{Th}(\\mathbb{Z}; <, +, \\lfloor f \\rceil)$ is undecidable.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86Presburger\u7b97\u672f\u901a\u8fc7\u4e9a\u591a\u9879\u5f0fHardy\u573a\u51fd\u6570\u7684\u6269\u5c55\uff0c\u8bc1\u660e\u4e86\u5927\u591a\u6570\u6b64\u7c7b\u6269\u5c55\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\u3002", "motivation": "\u7814\u7a76Presburger\u7b97\u672f\u5728\u6dfb\u52a0Hardy\u573a\u51fd\u6570\u548c\u6700\u8fd1\u6574\u6570\u7b97\u5b50\u540e\u7684\u53ef\u5224\u5b9a\u6027\uff0c\u63a2\u7d22\u6570\u5b66\u903b\u8f91\u4e2d\u7406\u8bba\u53ef\u5224\u5b9a\u6027\u7684\u8fb9\u754c\u3002", "method": "\u901a\u8fc7\u5206\u6790\u4e0d\u540c\u589e\u957f\u7387\u7684Hardy\u573a\u51fd\u6570\uff08\u591a\u9879\u5f0f\u589e\u957f\u548c\u4e9a\u7ebf\u6027\u4f46\u591a\u9879\u5f0f\u901f\u5ea6\u589e\u957f\uff09\uff0c\u7ed3\u5408\u6700\u8fd1\u6574\u6570\u7b97\u5b50\uff0c\u7814\u7a76\u76f8\u5e94\u7406\u8bba\u7684\u53ef\u5224\u5b9a\u6027\u3002", "result": "\u5f53f\u4ee5\u591a\u9879\u5f0f\u901f\u5ea6\u589e\u957f\u65f6\uff0c\u7406\u8bbaTh(\u2124; <, +, \u230af\u2309)\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff1b\u5f53f\u4e9a\u7ebf\u6027\u4f46\u4ee5\u591a\u9879\u5f0f\u901f\u5ea6\u589e\u957f\u65f6\uff0c\u8be5\u7406\u8bba\u4e5f\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\u3002", "conclusion": "\u5927\u591a\u6570\u5305\u542bHardy\u573a\u51fd\u6570\u548c\u6700\u8fd1\u6574\u6570\u7b97\u5b50\u7684Presburger\u7b97\u672f\u6269\u5c55\u90fd\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff0c\u8fd9\u4e3a\u7406\u89e3\u6b64\u7c7b\u6570\u5b66\u7406\u8bba\u7684\u53ef\u5224\u5b9a\u6027\u754c\u9650\u63d0\u4f9b\u4e86\u91cd\u8981\u7ed3\u679c\u3002"}}
{"id": "2508.18431", "categories": ["cs.SE", "cs.ET", "cs.HC", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2508.18431", "abs": "https://arxiv.org/abs/2508.18431", "authors": ["K\u00e9rian Fiter", "Louis Malassign\u00e9-Onfroy", "Bentley Oakes"], "title": "DTInsight: A Tool for Explicit, Interactive, and Continuous Digital Twin Reporting", "comment": null, "summary": "With Digital Twin (DT) construction and evolution occurring over time,\nstakeholders require tools to understand the current characteristics and\nconceptual architecture of the system at any time. We introduce DTInsight, a\nsystematic and automated tool and methodology for producing continuous\nreporting for DTs. DTInsight offers three key features: (a) an interactive\nconceptual architecture visualization of DTs; (b) generation of summaries of DT\ncharacteristics based on ontological data; and (c) integration of these outputs\ninto a reporting page within a continuous integration and continuous deployment\n(CI/CD) pipeline. Given a modeled description of the DT aligning to our DT\nDescription Framework (DTDF), DTInsight enables up-to-date and detailed reports\nfor enhanced stakeholder understanding.", "AI": {"tldr": "DTInsight\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u7528\u4e8e\u751f\u6210\u6570\u5b57\u5b6a\u751f(DT)\u7684\u6301\u7eed\u62a5\u544a\uff0c\u63d0\u4f9b\u67b6\u6784\u53ef\u89c6\u5316\u3001\u7279\u6027\u6458\u8981\u548cCI/CD\u96c6\u6210\u529f\u80fd", "motivation": "\u968f\u7740\u6570\u5b57\u5b6a\u751f\u7cfb\u7edf\u7684\u6784\u5efa\u548c\u6f14\u8fdb\uff0c\u5229\u76ca\u76f8\u5173\u8005\u9700\u8981\u5de5\u5177\u6765\u968f\u65f6\u4e86\u89e3\u7cfb\u7edf\u7684\u5f53\u524d\u7279\u6027\u548c\u6982\u5ff5\u67b6\u6784", "method": "\u57fa\u4e8eDT\u63cf\u8ff0\u6846\u67b6(DTDF)\u7684\u5efa\u6a21\u63cf\u8ff0\uff0c\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u67b6\u6784\u53ef\u89c6\u5316\u3001\u57fa\u4e8e\u672c\u4f53\u6570\u636e\u7684\u7279\u6027\u6458\u8981\u751f\u6210\uff0c\u4ee5\u53caCI/CD\u6d41\u6c34\u7ebf\u96c6\u6210", "result": "\u80fd\u591f\u751f\u6210\u6700\u65b0\u4e14\u8be6\u7ec6\u7684\u62a5\u544a\uff0c\u589e\u5f3a\u5229\u76ca\u76f8\u5173\u8005\u5bf9\u6570\u5b57\u5b6a\u751f\u7cfb\u7edf\u7684\u7406\u89e3", "conclusion": "DTInsight\u4e3a\u6570\u5b57\u5b6a\u751f\u7cfb\u7edf\u63d0\u4f9b\u4e86\u7cfb\u7edf\u5316\u548c\u81ea\u52a8\u5316\u7684\u6301\u7eed\u62a5\u544a\u89e3\u51b3\u65b9\u6848"}}
{"id": "2508.18452", "categories": ["cs.SE", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2508.18452", "abs": "https://arxiv.org/abs/2508.18452", "authors": ["Pierre-Emmanuel Goffi", "Rapha\u00ebl Tremblay", "Bentley Oakes"], "title": "Engineering a Digital Twin for the Monitoring and Control of Beer Fermentation Sampling", "comment": "Accepted for EDTconf 2025", "summary": "Successfully engineering interactive industrial DTs is a complex task,\nespecially when implementing services beyond passive monitoring. We present\nhere an experience report on engineering a safety-critical digital twin (DT)\nfor beer fermentation monitoring, which provides continual sampling and reduces\nmanual sampling time by 91%. We document our systematic methodology and\npractical solutions for implementing bidirectional DTs in industrial\nenvironments. This includes our three-phase engineering approach that\ntransforms a passive monitoring system into an interactive Type 2 DT with\nreal-time control capabilities for pressurized systems operating at seven bar.\nWe contribute details of multi-layered safety protocols, hardware-software\nintegration strategies across Arduino controllers and Unity visualization, and\nreal-time synchronization solutions. We document specific engineering\nchallenges and solutions spanning interdisciplinary integration, demonstrating\nhow our use of the constellation reporting framework facilitates cross-domain\ncollaboration. Key findings include the critical importance of safety-first\ndesign, simulation-driven development, and progressive implementation\nstrategies. Our work thus provides actionable guidance for practitioners\ndeveloping DTs requiring bidirectional control in safety-critical applications.", "AI": {"tldr": "\u672c\u6587\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u5173\u952e\u6027\u9152\u7c89\u9175\u8fc7\u7a0b\u6570\u5b57\u53cc\u80de\u4f53\u5f00\u53d1\u7684\u5b9e\u8df5\u7ecf\u9a8c\uff0c\u901a\u8fc7\u4e09\u9636\u6bb5\u5de5\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u4e86\u4ece\u88ab\u52a8\u76d1\u63a7\u5230\u53cc\u5411\u63a7\u5230\u7684\u8f6c\u53d8\uff0c\u51cf\u5c11\u4e8691%\u7684\u624b\u52a8\u91c7\u6837\u65f6\u95f4\u3002", "motivation": "\u5de5\u4e1a\u6570\u5b57\u53cc\u80de\u4f53\u5f00\u53d1\u590d\u6742\uff0c\u7279\u522b\u662f\u9700\u8981\u5b9e\u73b0\u8d85\u8d8a\u88ab\u52a8\u76d1\u63a7\u7684\u670d\u52a1\u529f\u80fd\u65f6\u3002\u672c\u6587\u9488\u5bf9\u5b89\u5168\u5173\u952e\u6027\u5e94\u7528\u573a\u666f\uff0c\u63d0\u4f9b\u53ef\u6267\u884c\u7684\u53cc\u5411\u63a7\u5230\u6570\u5b57\u53cc\u80de\u4f53\u5f00\u53d1\u6307\u5357\u3002", "method": "\u91c7\u7528\u4e09\u9636\u6bb5\u5de5\u7a0b\u65b9\u6cd5\uff0c\u5c06\u88ab\u52a8\u76d1\u63a7\u7cfb\u7edf\u8f6c\u6362\u4e3a\u5177\u6709\u5b9e\u65f6\u63a7\u5230\u80fd\u529b\u7684Type 2\u6570\u5b57\u53cc\u80de\u4f53\u3002\u5305\u542b\u591a\u5c42\u5b89\u5168\u534f\u8bae\u3001Arduino\u63a7\u5230\u5668\u4e0eUnity\u53ef\u89c6\u5316\u7684\u786c\u4ef6-\u8f6f\u4ef6\u96c6\u6210\u7b56\u7565\u3001\u5b9e\u65f6\u540c\u6b65\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u53ca\u4f7f\u7528\u661f\u5ea7\u62a5\u544a\u6846\u67b6\u4fc3\u8fdb\u8de8\u9886\u57df\u534f\u4f5c\u3002", "result": "\u5b9e\u73b0\u4e86\u57287\u5c04\u538b\u538b\u529b\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\u5b9e\u65f6\u63a7\u5230\u80fd\u529b\uff0c\u5c06\u624b\u52a8\u91c7\u6837\u65f6\u95f4\u51cf\u5c1191%\uff0c\u5e76\u63d0\u4f9b\u4e86\u6301\u7eed\u7684\u91c7\u6837\u76d1\u6d4b\u670d\u52a1\u3002", "conclusion": "\u5b89\u5168\u4f18\u5148\u8bbe\u8ba1\u3001\u6a21\u62df\u9a71\u52a8\u5f00\u53d1\u548c\u6e10\u8fdb\u5f0f\u5b9e\u65bd\u7b56\u7565\u662f\u5173\u952e\u6210\u529f\u56e0\u7d20\u3002\u672c\u7814\u7a76\u4e3a\u5b9e\u8df5\u8005\u5f00\u53d1\u5b89\u5168\u5173\u952e\u6027\u5e94\u7528\u4e2d\u7684\u53cc\u5411\u63a7\u5230\u6570\u5b57\u53cc\u80de\u4f53\u63d0\u4f9b\u4e86\u53ef\u64cd\u4f5c\u7684\u6307\u5357\u3002"}}
{"id": "2508.18547", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18547", "abs": "https://arxiv.org/abs/2508.18547", "authors": ["Youssef Abdelsalam", "Norman Peitek", "Anna-Maria Maurer", "Mariya Toneva", "Sven Apel"], "title": "How do Humans and LLMs Process Confusing Code?", "comment": null, "summary": "Already today, humans and programming assistants based on large language\nmodels (LLMs) collaborate in everyday programming tasks. Clearly, a\nmisalignment between how LLMs and programmers comprehend code can lead to\nmisunderstandings, inefficiencies, low code quality, and bugs.\n  A key question in this space is whether humans and LLMs are confused by the\nsame kind of code. This would not only guide our choices of integrating LLMs in\nsoftware engineering workflows, but also inform about possible improvements of\nLLMs.\n  To this end, we conducted an empirical study comparing an LLM to human\nprogrammers comprehending clean and confusing code. We operationalized\ncomprehension for the LLM by using LLM perplexity, and for human programmers\nusing neurophysiological responses (in particular, EEG-based fixation-related\npotentials).\n  We found that LLM perplexity spikes correlate both in terms of location and\namplitude with human neurophysiological responses that indicate confusion. This\nresult suggests that LLMs and humans are similarly confused about the code.\nBased on these findings, we devised a data-driven, LLM-based approach to\nidentify regions of confusion in code that elicit confusion in human\nprogrammers.", "AI": {"tldr": "\u7814\u7a76\u53d1\u73b0LLM\u56f0\u60d1\u5ea6\u5cf0\u503c\u4e0e\u4eba\u7c7b\u8111\u7535\u751f\u7406\u53cd\u5e94\u5728\u4f4d\u7f6e\u548c\u5e45\u5ea6\u4e0a\u76f8\u5173\uff0c\u8868\u660eLLM\u548c\u4eba\u7c7b\u5bf9\u4ee3\u7801\u7684\u56f0\u60d1\u6a21\u5f0f\u76f8\u4f3c\uff0c\u57fa\u4e8e\u6b64\u5f00\u53d1\u4e86\u8bc6\u522b\u4ee3\u7801\u56f0\u60d1\u533a\u57df\u7684\u65b9\u6cd5", "motivation": "\u7814\u7a76LLM\u4e0e\u4eba\u7c7b\u7a0b\u5e8f\u5458\u5728\u4ee3\u7801\u7406\u89e3\u4e0a\u7684\u5bf9\u9f50\u7a0b\u5ea6\uff0c\u907f\u514d\u56e0\u7406\u89e3\u5dee\u5f02\u5bfc\u81f4\u7684\u8bef\u89e3\u3001\u4f4e\u6548\u548c\u4ee3\u7801\u8d28\u91cf\u95ee\u9898", "method": "\u901a\u8fc7\u6bd4\u8f83LLM\u56f0\u60d1\u5ea6\u548c\u4eba\u7c7b\u8111\u7535\u751f\u7406\u53cd\u5e94\uff08EEG-based fixation-related potentials\uff09\uff0c\u5206\u6790\u6e05\u6d01\u4ee3\u7801\u548c\u56f0\u60d1\u4ee3\u7801\u7684\u7406\u89e3\u5dee\u5f02", "result": "\u53d1\u73b0LLM\u56f0\u60d1\u5ea6\u5cf0\u503c\u4e0e\u4eba\u7c7b\u795e\u7ecf\u751f\u7406\u53cd\u5e94\u5728\u4f4d\u7f6e\u548c\u5e45\u5ea6\u4e0a\u5b58\u5728\u76f8\u5173\u6027\uff0c\u8868\u660e\u4e24\u8005\u5bf9\u4ee3\u7801\u7684\u56f0\u60d1\u6a21\u5f0f\u76f8\u4f3c", "conclusion": "LLM\u548c\u4eba\u7c7b\u5bf9\u4ee3\u7801\u7684\u56f0\u60d1\u5177\u6709\u76f8\u4f3c\u6027\uff0c\u57fa\u4e8e\u6b64\u53ef\u4ee5\u5f00\u53d1\u6570\u636e\u9a71\u52a8\u7684LLM\u65b9\u6cd5\u6765\u8bc6\u522b\u5bfc\u81f4\u4eba\u7c7b\u7a0b\u5e8f\u5458\u56f0\u60d1\u7684\u4ee3\u7801\u533a\u57df"}}
{"id": "2508.18798", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2508.18798", "abs": "https://arxiv.org/abs/2508.18798", "authors": ["Niclas Hertzberg", "Merlijn Sevenhuijsen", "Liv K\u00e5reborn", "Anna Lokrantz"], "title": "CASP: An evaluation dataset for formal verification of C code", "comment": null, "summary": "Recent developments in Large Language Models (LLMs) have shown promise in\nautomating code generation, yet the generated programs lack rigorous\ncorrectness guarantees. Formal verification can address this shortcoming, but\nrequires expertise and is time-consuming to apply. Currently, there is no\ndataset of verified C code paired with formal specifications that enables\nsystematic benchmarking in this space. To fill this gap, we present a curated\nevaluation dataset of C code paired with formal specifications written in\nANSI/ISO C Specification Language (ACSL). We develop a multi-stage filtering\nprocess to carefully extract 506 pairs of C code and formal specifications from\nThe Stack 1 and The Stack 2. We first identify C files annotated with formal\nlanguages. Then, we ensure that the annotated C files formally verify, and\nemploy LLMs to improve non-verifying files. Furthermore, we post-process the\nremaining files into pairs of C code and ACSL specifications, where each\nspecification-implementation pair is formally verified using Frama-C. To ensure\nthe quality of the pairs, a manual inspection is conducted to confirm the\ncorrectness of every pair. The resulting dataset of C-ACSL specification pairs\n(CASP) provides a foundation for benchmarking and further research on\nintegrating automated code generation with verified correctness.", "AI": {"tldr": "\u521b\u5efa\u4e86\u4e00\u4e2a\u7ecf\u8fc7\u4e25\u683c\u9a8c\u8bc1\u7684C\u4ee3\u7801-ACSL\u5f62\u5f0f\u89c4\u8303\u5bf9\u6570\u636e\u96c6\uff0c\u7528\u4e8e\u57fa\u4e8eLLM\u7684\u4ee3\u7801\u751f\u6210\u9a8c\u8bc1\u7814\u7a76\u7684\u57fa\u51c6\u6d4b\u8bd5", "motivation": "\u867d\u7136\u5927\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u751f\u6210\u65b9\u9762\u663e\u793a\u51fa\u6f5c\u529b\uff0c\u4f46\u751f\u6210\u7684\u7a0b\u5e8f\u7f3a\u4e4f\u4e25\u683c\u7684\u6b63\u786e\u6027\u4fdd\u8bc1\uff0c\u800c\u5f62\u5f0f\u9a8c\u8bc1\u53c8\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\u4e14\u8017\u65f6\u8017\u529b", "method": "\u901a\u8fc7\u591a\u9636\u6bb5\u7b5b\u9009\u8fc7\u7a0b\u4eceThe Stack 1\u548cThe Stack 2\u4e2d\u63d0\u53d6506\u5bf9C\u4ee3\u7801\u548cACSL\u5f62\u5f0f\u89c4\u8303\u5bf9\uff0c\u5305\u62ec\u8bc6\u522b\u5e26\u5f62\u5f0f\u8bed\u8a00\u6ce8\u91ca\u7684C\u6587\u4ef6\u3001\u786e\u4fdd\u9a8c\u8bc1\u901a\u8fc7\u3001\u4f7f\u7528LLM\u6539\u8fdb\u672a\u901a\u8fc7\u9a8c\u8bc1\u7684\u6587\u4ef6\u3001\u4f7f\u7528Frama-C\u8fdb\u884c\u5f62\u5f0f\u9a8c\u8bc1\uff0c\u4ee5\u53ca\u624b\u52a8\u5ba1\u67e5\u786e\u8ba4\u6bcf\u4e2a\u5bf9\u7684\u6b63\u786e\u6027", "result": "\u521b\u5efa\u4e86\u5305\u542b506\u5bf9C\u4ee3\u7801-ACSL\u89c4\u8303\u5bf9\u7684CASP\u6570\u636e\u96c6\uff0c\u6bcf\u4e2a\u89c4\u8303-\u5b9e\u73b0\u5bf9\u90fd\u7ecf\u8fc7\u4e86\u5f62\u5f0f\u9a8c\u8bc1\u548c\u624b\u52a8\u5ba1\u67e5", "conclusion": "\u8be5\u6570\u636e\u96c6\u4e3a\u57fa\u4e8eLLM\u7684\u81ea\u52a8\u5316\u4ee3\u7801\u751f\u6210\u4e0e\u9a8c\u8bc1\u6b63\u786e\u6027\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u7cfb\u7edf\u6027\u7684\u57fa\u51c6\u6d4b\u8bd5\u57fa\u7840"}}
{"id": "2508.18636", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.18636", "abs": "https://arxiv.org/abs/2508.18636", "authors": ["Yan Wang", "Xinyi Hou", "Yanjie Zhao", "Weiguo Lin", "Haoyu Wang", "Junjun Si"], "title": "LaQual: A Novel Framework for Automated Evaluation of LLM App Quality", "comment": null, "summary": "LLM app stores are quickly emerging as platforms that gather a wide range of\nintelligent applications based on LLMs, giving users many choices for content\ncreation, coding support, education, and more. However, the current methods for\nranking and recommending apps in these stores mostly rely on static metrics\nlike user activity and favorites, which makes it hard for users to efficiently\nfind high-quality apps. To address these challenges, we propose LaQual, an\nautomated framework for evaluating the quality of LLM apps. LaQual consists of\nthree main stages: first, it labels and classifies LLM apps in a hierarchical\nway to accurately match them to different scenarios; second, it uses static\nindicators, such as time-weighted user engagement and functional capability\nmetrics, to filter out low-quality apps; and third, it conducts a dynamic,\nscenario-adaptive evaluation, where the LLM itself generates scenario-specific\nevaluation metrics, scoring rules, and tasks for a thorough quality assessment.\nExperiments on a popular LLM app store show that LaQual is effective. Its\nautomated scores are highly consistent with human judgments (with Spearman's\nrho of 0.62 and p=0.006 in legal consulting, and rho of 0.60 and p=0.009 in\ntravel planning). By effectively screening, LaQual can reduce the pool of\ncandidate LLM apps by 66.7% to 81.3%. User studies further confirm that LaQual\nsignificantly outperforms baseline systems in decision confidence, comparison\nefficiency (with average scores of 5.45 compared to 3.30), and the perceived\nvalue of its evaluation reports (4.75 versus 2.25). Overall, these results\ndemonstrate that LaQual offers a scalable, objective, and user-centered\nsolution for finding and recommending high-quality LLM apps in real-world use\ncases.", "AI": {"tldr": "LaQual\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u8bc4\u4f30LLM\u5e94\u7528\u8d28\u91cf\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u5206\u5c42\u5206\u7c7b\u3001\u9759\u6001\u6307\u6807\u7b5b\u9009\u548c\u52a8\u6001\u573a\u666f\u81ea\u9002\u5e94\u8bc4\u4f30\u4e09\u9636\u6bb5\u65b9\u6cd5\uff0c\u80fd\u6709\u6548\u8bc6\u522b\u9ad8\u8d28\u91cf\u5e94\u7528\uff0c\u5b9e\u9a8c\u663e\u793a\u4e0e\u4eba\u5de5\u8bc4\u4f30\u9ad8\u5ea6\u4e00\u81f4\u4e14\u663e\u8457\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u3002", "motivation": "\u5f53\u524dLLM\u5e94\u7528\u5546\u5e97\u4e3b\u8981\u4f9d\u8d56\u7528\u6237\u6d3b\u8dc3\u5ea6\u548c\u6536\u85cf\u7b49\u9759\u6001\u6307\u6807\u8fdb\u884c\u6392\u540d\u63a8\u8350\uff0c\u96be\u4ee5\u5e2e\u52a9\u7528\u6237\u9ad8\u6548\u627e\u5230\u9ad8\u8d28\u91cf\u5e94\u7528\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u8d28\u91cf\u8bc4\u4f30\u65b9\u6cd5\u3002", "method": "\u4e09\u9636\u6bb5\u6846\u67b6\uff1a1)\u5206\u5c42\u5206\u7c7bLLM\u5e94\u7528\u4ee5\u5339\u914d\u4e0d\u540c\u573a\u666f\uff1b2)\u4f7f\u7528\u65f6\u5e8f\u52a0\u6743\u7528\u6237\u53c2\u4e0e\u5ea6\u548c\u529f\u80fd\u80fd\u529b\u6307\u6807\u7b49\u9759\u6001\u6307\u6807\u7b5b\u9009\u4f4e\u8d28\u91cf\u5e94\u7528\uff1b3)\u8fdb\u884c\u52a8\u6001\u573a\u666f\u81ea\u9002\u5e94\u8bc4\u4f30\uff0c\u7531LLM\u751f\u6210\u573a\u666f\u7279\u5b9a\u7684\u8bc4\u4f30\u6307\u6807\u3001\u8bc4\u5206\u89c4\u5219\u548c\u4efb\u52a1\u3002", "result": "\u5728\u6d41\u884cLLM\u5e94\u7528\u5546\u5e97\u4e0a\u7684\u5b9e\u9a8c\u663e\u793a\uff1a\u81ea\u52a8\u5316\u8bc4\u5206\u4e0e\u4eba\u5de5\u5224\u65ad\u9ad8\u5ea6\u4e00\u81f4\uff08\u6cd5\u5f8b\u54a8\u8be2Spearman's rho=0.62\uff0c\u65c5\u884c\u89c4\u5212rho=0.60\uff09\uff1b\u80fd\u51cf\u5c1166.7%-81.3%\u7684\u5019\u9009\u5e94\u7528\uff1b\u7528\u6237\u7814\u7a76\u8868\u660e\u5728\u51b3\u7b56\u4fe1\u5fc3\u3001\u6bd4\u8f83\u6548\u7387\uff085.45 vs 3.30\uff09\u548c\u8bc4\u4f30\u62a5\u544a\u4ef7\u503c\u611f\u77e5\uff084.75 vs 2.25\uff09\u65b9\u9762\u663e\u8457\u4f18\u4e8e\u57fa\u7ebf\u7cfb\u7edf\u3002", "conclusion": "LaQual\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u3001\u5ba2\u89c2\u4e14\u4ee5\u7528\u6237\u4e3a\u4e2d\u5fc3\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u6709\u6548\u53d1\u73b0\u548c\u63a8\u8350\u73b0\u5b9e\u4f7f\u7528\u573a\u666f\u4e2d\u7684\u9ad8\u8d28\u91cfLLM\u5e94\u7528\u3002"}}
{"id": "2508.18675", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18675", "abs": "https://arxiv.org/abs/2508.18675", "authors": ["Xu Lu", "Weisong Sun", "Yiran Zhang", "Ming Hu", "Cong Tian", "Zhi Jin", "Yang Liu"], "title": "Requirements Development and Formalization for Reliable Code Generation: A Multi-Agent Vision", "comment": null, "summary": "Automated code generation has long been considered the holy grail of software\nengineering. The emergence of Large Language Models (LLMs) has catalyzed a\nrevolutionary breakthrough in this area. However, existing methods that only\nrely on LLMs remain inadequate in the quality of generated code, offering no\nguarantees of satisfying practical requirements. They lack a systematic\nstrategy for requirements development and modeling. Recently, LLM-based agents\ntypically possess powerful abilities and play an essential role in facilitating\nthe alignment of LLM outputs with user requirements. In this paper, we envision\nthe first multi-agent framework for reliable code generation based on\n\\textsc{re}quirements \\textsc{de}velopment and \\textsc{fo}rmalization, named\n\\textsc{ReDeFo}. This framework incorporates three agents, highlighting their\naugmentation with knowledge and techniques of formal methods, into the\nrequirements-to-code generation pipeline to strengthen quality assurance. The\ncore of \\textsc{ReDeFo} is the use of formal specifications to bridge the gap\nbetween potentially ambiguous natural language requirements and precise\nexecutable code. \\textsc{ReDeFo} enables rigorous reasoning about correctness,\nuncovering hidden bugs, and enforcing critical properties throughout the\ndevelopment process. In general, our framework aims to take a promising step\ntoward realizing the long-standing vision of reliable, auto-generated software.", "AI": {"tldr": "\u63d0\u51fa\u4e86ReDeFo\u591a\u667a\u80fd\u4f53\u6846\u67b6\uff0c\u901a\u8fc7\u9700\u6c42\u5f00\u53d1\u548c\u5f62\u5f0f\u5316\u65b9\u6cd5\u5b9e\u73b0\u53ef\u9760\u7684\u4ee3\u7801\u751f\u6210\uff0c\u4f7f\u7528\u5f62\u5f0f\u5316\u89c4\u8303\u8fde\u63a5\u81ea\u7136\u8bed\u8a00\u9700\u6c42\u548c\u7cbe\u786e\u4ee3\u7801", "motivation": "\u73b0\u6709\u4ec5\u4f9d\u8d56\u5927\u8bed\u8a00\u6a21\u578b\u7684\u4ee3\u7801\u751f\u6210\u65b9\u6cd5\u5728\u4ee3\u7801\u8d28\u91cf\u4e0a\u4e0d\u8db3\uff0c\u7f3a\u4e4f\u7cfb\u7edf\u6027\u7684\u9700\u6c42\u5f00\u53d1\u548c\u5efa\u6a21\u7b56\u7565\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6ee1\u8db3\u5b9e\u9645\u9700\u6c42", "method": "\u57fa\u4e8e\u9700\u6c42\u5f00\u53d1\u548c\u5f62\u5f0f\u5316\u7684\u591a\u667a\u80fd\u4f53\u6846\u67b6\uff0c\u5305\u542b\u4e09\u4e2a\u589e\u5f3a\u4e86\u5f62\u5f0f\u5316\u65b9\u6cd5\u77e5\u8bc6\u548c\u6280\u672f\u7684\u667a\u80fd\u4f53\uff0c\u4f7f\u7528\u5f62\u5f0f\u5316\u89c4\u8303\u4f5c\u4e3a\u81ea\u7136\u8bed\u8a00\u9700\u6c42\u4e0e\u53ef\u6267\u884c\u4ee3\u7801\u4e4b\u95f4\u7684\u6865\u6881", "result": "\u6846\u67b6\u80fd\u591f\u8fdb\u884c\u4e25\u683c\u7684\u6b63\u786e\u6027\u63a8\u7406\uff0c\u53d1\u73b0\u9690\u85cf\u9519\u8bef\uff0c\u5e76\u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5f3a\u5236\u6267\u884c\u5173\u952e\u5c5e\u6027", "conclusion": "ReDeFo\u6846\u67b6\u671d\u7740\u5b9e\u73b0\u53ef\u9760\u3001\u81ea\u52a8\u751f\u6210\u8f6f\u4ef6\u7684\u957f\u671f\u613f\u666f\u8fc8\u51fa\u4e86\u6709\u5e0c\u671b\u7684\u4e00\u6b65"}}
{"id": "2508.18721", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18721", "abs": "https://arxiv.org/abs/2508.18721", "authors": ["Yunrui Pei", "Hongshu Wang", "Wenjie Zhang", "Yun Lin", "Weiyu Kong", "Jin song Dong"], "title": "LLM as an Execution Estimator: Recovering Missing Dependency for Practical Time-travelling Debugging", "comment": null, "summary": "Dynamic data dependency, answering \"why a variable has this value?\", is\ncritical for debugging. Given a program step `s` reading a variable `v`,\nfinding the dynamic definition of `v` is challenging. Traditional methods\nrequire either (1) exhaustive instrumentation of all possible definitions of\n`v` in one run or (2) replicating the run to re-examine reads/writes - both\ncostly. If `v` is defined in a library, instrumentation becomes expensive; for\nnon-deterministic programs, replication is infeasible.\n  We propose RecovSlicing, which computes dynamic data dependency in a single\nrun with partial instrumentation. We leverage LLMs to infer program behavior\nfrom a partially recorded trace and code context. Given a trace and a slicing\ncriterion (step `s` and variable `v`), RecovSlicing estimates the runtime\ndefinition of `v` by recovering the missing execution.It also supports implicit\nvariables, such as those in `list.get(i)`. Technically, RecovSlicing tackles:\n(1) recovering runtime values and structures, and (2) aligning recovered\nvariables with recorded memory to analyze definitions.\n  We evaluate RecovSlicing on 8,300 data dependencies across three slicing\nbenchmarks, comparing it with Slicer4J, ND-Slicer, LLM Slicer, and re-execution\nSlicer. RecovSlicing achieves accuracy of 80.3%, 91.1%, and 98.3%,\noutperforming the best baseline (39.0%, 82.0%, 59.9%), and also leads in recall\n(91.1%, 91.1%, 98.3% vs. 53.4%, 79.1%, 87.1%). Integrated into a regression bug\nlocalizer, it enables finding 16% more regressions.", "AI": {"tldr": "RecovSlicing\u662f\u4e00\u79cd\u4f7f\u7528\u90e8\u5206\u63d2\u6869\u548cLLM\u63a8\u7406\u6765\u5728\u5355\u6b21\u8fd0\u884c\u4e2d\u8ba1\u7b97\u52a8\u6001\u6570\u636e\u4f9d\u8d56\u7684\u65b0\u65b9\u6cd5\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u65b9\u6cd5\u7684\u9ad8\u6210\u672c\u548c\u4e0d\u53ef\u884c\u6027\u95ee\u9898", "motivation": "\u4f20\u7edf\u52a8\u6001\u6570\u636e\u4f9d\u8d56\u5206\u6790\u65b9\u6cd5\u9700\u8981\u5b8c\u5168\u63d2\u6869\u6216\u7a0b\u5e8f\u91cd\u8fd0\u884c\uff0c\u6210\u672c\u9ad8\u6602\u4e14\u5bf9\u975e\u786e\u5b9a\u6027\u7a0b\u5e8f\u4e0d\u53ef\u884c\uff0c\u7279\u522b\u662f\u5728\u5e93\u51fd\u6570\u8c03\u7528\u548c\u975e\u786e\u5b9a\u6027\u573a\u666f\u4e0b", "method": "\u5229\u7528LLM\u4ece\u90e8\u5206\u8bb0\u5f55\u7684\u6267\u884c\u8f68\u8ff9\u548c\u4ee3\u7801\u4e0a\u4e0b\u6587\u4e2d\u63a8\u65ad\u7a0b\u5e8f\u884c\u4e3a\uff0c\u6062\u590d\u7f3a\u5931\u7684\u6267\u884c\u4fe1\u606f\u6765\u4f30\u8ba1\u8fd0\u884c\u65f6\u53d8\u91cf\u5b9a\u4e49\uff0c\u652f\u6301\u663e\u5f0f\u548c\u9690\u5f0f\u53d8\u91cf", "result": "\u5728\u4e09\u4e2a\u5207\u7247\u57fa\u51c6\u6d4b\u8bd5\u76848300\u4e2a\u6570\u636e\u4f9d\u8d56\u4e0a\uff0c\u51c6\u786e\u7387\u8fbe\u523080.3%\u300191.1%\u548c98.3%\uff0c\u663e\u8457\u4f18\u4e8e\u6700\u4f73\u57fa\u7ebf\u65b9\u6cd5\uff0839.0%\u300182.0%\u300159.9%\uff09", "conclusion": "RecovSlicing\u5728\u5355\u6b21\u8fd0\u884c\u4e2d\u6709\u6548\u89e3\u51b3\u4e86\u52a8\u6001\u6570\u636e\u4f9d\u8d56\u5206\u6790\u95ee\u9898\uff0c\u6027\u80fd\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\uff0c\u5728\u56de\u5f52\u9519\u8bef\u5b9a\u4f4d\u4e2d\u53ef\u591a\u53d1\u73b016%\u7684\u56de\u5f52\u95ee\u9898"}}
{"id": "2508.18771", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18771", "abs": "https://arxiv.org/abs/2508.18771", "authors": ["Kexin Sun", "Hongyu Kuang", "Sebastian Baltes", "Xin Zhou", "He Zhang", "Xiaoxing Ma", "Guoping Rong", "Dong Shao", "Christoph Treude"], "title": "Does AI Code Review Lead to Code Changes? A Case Study of GitHub Actions", "comment": null, "summary": "AI-based code review tools automatically review and comment on pull requests\nto improve code quality. Despite their growing presence, little is known about\ntheir actual impact. We present a large-scale empirical study of 16 popular\nAI-based code review actions for GitHub workflows, analyzing more than 22,000\nreview comments in 178 repositories. We investigate (1) how these tools are\nadopted and configured, (2) whether their comments lead to code changes, and\n(3) which factors influence their effectiveness. We develop a two-stage\nLLM-assisted framework to determine whether review comments are addressed, and\nuse interpretable machine learning to identify influencing factors. Our\nfindings show that, while adoption is growing, effectiveness varies widely.\nComments that are concise, contain code snippets, and are manually triggered,\nparticularly those from hunk-level review tools, are more likely to result in\ncode changes. These results highlight the importance of careful tool design and\nsuggest directions for improving AI-based code review systems.", "AI": {"tldr": "\u7814\u7a76\u5206\u679016\u6b3eAI\u4ee3\u7801\u5ba1\u67e5\u5de5\u5177\u5728GitHub\u4e2d\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u7b80\u6d01\u3001\u5305\u542b\u4ee3\u7801\u7247\u6bb5\u3001\u624b\u52a8\u89e6\u53d1\u7684\u5ba1\u67e5\u8bc4\u8bba\u66f4\u5bb9\u6613\u88ab\u91c7\u7eb3", "motivation": "\u867d\u7136AI\u57fa\u7840\u7684\u4ee3\u7801\u5ba1\u67e5\u5de5\u5177\u9010\u6e10\u666e\u53ca\uff0c\u4f46\u5b83\u4eec\u7684\u5b9e\u9645\u6548\u679c\u548c\u5f71\u54cd\u56e0\u7d20\u4ecd\u4e0d\u660e\u786e", "method": "\u5bf9178\u4e2a\u4ed3\u5e93\u4e2d22,000\u591a\u6761\u5ba1\u67e5\u8bc4\u8bba\u8fdb\u884c\u5927\u89c4\u6a21\u5b9e\u8bc1\u7814\u7a76\uff0c\u4f7f\u7528\u4e24\u9636\u6bb5LLM\u8f85\u52a9\u6846\u67b6\u5206\u6790\u8bc4\u8bba\u662f\u5426\u88ab\u5904\u7406\uff0c\u91c7\u7528\u53ef\u89e3\u91ca\u7684\u673a\u5668\u5b66\u4e60\u8bc6\u522b\u5f71\u54cd\u56e0\u7d20", "result": "\u91c7\u7528\u7387\u5728\u589e\u957f\u4f46\u6548\u679c\u5dee\u5f02\u8f83\u5927\uff0c\u7b80\u6d01\u3001\u5305\u542b\u4ee3\u7801\u7247\u6bb5\u3001\u624b\u52a8\u89e6\u53d1\u7684\u5ba1\u67e5\u8bc4\u8bba\u66f4\u5bb9\u6613\u5bfc\u81f4\u4ee3\u7801\u53d8\u66f4\uff0c\u5c24\u5176\u662fhunk-level\u5ba1\u67e5\u5de5\u5177", "conclusion": "\u7ec6\u5fc3\u7684\u5de5\u5177\u8bbe\u8ba1\u5bf9\u4e8eAI\u4ee3\u7801\u5ba1\u67e5\u7cfb\u7edf\u7684\u6548\u679c\u81f3\u5173\u91cd\u8981\uff0c\u7814\u7a76\u7ed3\u679c\u4e3a\u6539\u8fdbAI\u57fa\u7840\u4ee3\u7801\u5ba1\u67e5\u7cfb\u7edf\u63d0\u4f9b\u4e86\u65b9\u5411"}}
{"id": "2508.18816", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18816", "abs": "https://arxiv.org/abs/2508.18816", "authors": ["Sabato Nocera", "Davide Fucci", "Giuseppe Scanniello"], "title": "Dealing with SonarQube Cloud: Initial Results from a Mining Software Repository Study", "comment": "Accepted for ESEM25 NIER track", "summary": "Background: Static Code Analysis (SCA) tools are widely adopted to enforce\ncode quality standards. However, little is known about how open-source projects\nuse and customize these tools. Aims: This paper investigates how GitHub\nprojects use and customize a popular SCA tool, namely SonarQube Cloud. Method:\nWe conducted a mining study of GitHub projects that are linked through GitHub\nActions to SonarQube Cloud projects. Results: Among 321 GitHub projects using\nSonarQube Cloud, 81% of them are correctly connected to SonarQube Cloud\nprojects, while others exhibit misconfigurations or restricted access. Among\n265 accessible SonarQube Cloud projects, 75% use the organization's default\nquality gate, i.e., a set of conditions that deployed source code must meet to\npass automated checks. While 55% of the projects use the built-in quality gate\nprovided by SonarQube Cloud, 45% of them customize their quality gate with\ndifferent conditions. Overall, the most common quality conditions align with\nSonarQube Cloud's \"Clean as You Code\" principle and enforce security,\nmaintainability, reliability, coverage, and a few duplicates on newly added or\nmodified source code. Conclusions: Many projects rely on predefined\nconfigurations, yet a significant portion customize their configurations to\nmeet specific quality goals. Building on our initial results, we envision a\nfuture research agenda linking quality gate configurations to actual software\noutcomes (e.g., improvement of software security). This would enable\nevidence-based recommendations for configuring SCA tools like SonarQube Cloud\nin various contexts.", "AI": {"tldr": "\u7814\u7a76\u901a\u8fc7\u6316\u6398GitHub\u9879\u76ee\u4e86\u89e3SonarQube Cloud\u9759\u6001\u4ee3\u7801\u5206\u6790\u5de5\u5177\u7684\u4f7f\u7528\u548c\u81ea\u5b9a\u4e49\u60c5\u51b5\uff0c\u53d1\u73b0\u8bb8\u9879\u76ee\u4f9d\u8d56\u9884\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f46\u4e5f\u6709\u8bb8\u591a\u9879\u76ee\u6839\u636e\u7279\u5b9a\u8d28\u91cf\u76ee\u6807\u8fdb\u884c\u81ea\u5b9a\u4e49", "motivation": "\u9759\u6001\u4ee3\u7801\u5206\u6790\u5de5\u5177\u5e7f\u6cdb\u4f7f\u7528\u4f46\u5f88\u5c11\u77e5\u9053\u5f00\u6e90\u9879\u76ee\u5982\u4f55\u4f7f\u7528\u548c\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u5de5\u5177\uff0c\u7279\u522b\u662fSonarQube Cloud\u8fd9\u79cd\u6d41\u884c\u5de5\u5177", "method": "\u901a\u8fc7\u6316\u6398GitHub\u9879\u76ee\u8fdb\u884c\u7814\u7a76\uff0c\u5206\u6790321\u4e2a\u4f7f\u7528SonarQube Cloud\u7684GitHub\u9879\u76ee\uff0c\u5206\u6790\u5b83\u4eec\u5982\u4f55\u8fde\u63a5\u548c\u81ea\u5b9a\u4e49\u8d28\u91cf\u95e8\u914d\u7f6e", "result": "81%\u9879\u76ee\u6b63\u786e\u8fde\u63a5SonarQube Cloud\uff0c75%\u4f7f\u7528\u7ec4\u7ec7\u9ed8\u8ba4\u8d28\u91cf\u95e8\uff0c55%\u4f7f\u7528\u5185\u7f6e\u8d28\u91cf\u95e8\uff0c45%\u81ea\u5b9a\u4e49\u8d28\u91cf\u95e8\u6761\u4ef6\u3002\u6700\u5e38\u89c1\u7684\u8d28\u91cf\u6761\u4ef6\u5305\u62ec\u5b89\u5168\u3001\u53ef\u7ef4\u62a4\u6027\u3001\u53ef\u9760\u6027\u3001\u8986\u76d6\u7387\u548c\u4ee3\u7801\u91cd\u590d", "conclusion": "\u8bb8\u9879\u76ee\u4f9d\u8d56\u9884\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f46\u4e5f\u6709\u8bb8\u591a\u9879\u76ee\u6839\u636e\u7279\u5b9a\u8d28\u91cf\u76ee\u6807\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002\u672a\u6765\u7814\u7a76\u53ef\u4ee5\u5c06\u8d28\u91cf\u95e8\u914d\u7f6e\u4e0e\u5b9e\u9645\u8f6f\u4ef6\u6548\u679c\u76f8\u5173\u8054\uff0c\u4e3a\u5404\u79cd\u573a\u666f\u4e0b\u914d\u7f6eSCA\u5de5\u5177\u63d0\u4f9b\u57fa\u4e8e\u8bc1\u636e\u7684\u5efa\u8bae"}}
{"id": "2508.18955", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.18955", "abs": "https://arxiv.org/abs/2508.18955", "authors": ["Yunbo Ni", "Shaohua Li"], "title": "Interleaving Large Language Models for Compiler Testing", "comment": null, "summary": "Testing compilers with AI models, especially large language models (LLMs),\nhas shown great promise. However, current approaches struggle with two key\nproblems: The generated programs for testing compilers are often too simple,\nand extensive testing with the LLMs is computationally expensive. In this\npaper, we propose a novel compiler testing framework that decouples the testing\nprocess into two distinct phases: an offline phase and an online phase. In the\noffline phase, we use LLMs to generate a collection of small but feature-rich\ncode pieces. In the online phase, we reuse these code pieces by strategically\ncombining them to build high-quality and valid test programs, which are then\nused to test compilers.\n  We implement this idea in a tool, LegoFuzz, for testing C compilers. The\nresults are striking: we found 66 bugs in GCC and LLVM, the most widely used C\ncompilers. Almost half of the bugs are miscompilation bugs, which are serious\nand hard-to-find bugs that none of the existing LLM-based tools could find. We\nbelieve this efficient design opens up new possibilities for using AI models in\nsoftware testing beyond just C compilers.", "AI": {"tldr": "\u63d0\u51faLegoFuzz\u6846\u67b6\uff0c\u901a\u8fc7\u79bb\u7ebf\u751f\u6210\u4ee3\u7801\u7247\u6bb5\u548c\u5728\u7ebf\u7ec4\u5408\u7684\u65b9\u5f0f\uff0c\u9ad8\u6548\u6d4b\u8bd5C\u7f16\u8bd1\u5668\uff0c\u53d1\u73b0GCC\u548cLLVM\u4e2d66\u4e2abug", "motivation": "\u5f53\u524d\u57fa\u4e8eAI\u7684\u7f16\u8bd1\u5668\u6d4b\u8bd5\u65b9\u6cd5\u5b58\u5728\u4e24\u4e2a\u95ee\u9898\uff1a\u751f\u6210\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e14LLM\u6d4b\u8bd5\u8ba1\u7b97\u6210\u672c\u9ad8\u6602", "method": "\u5c06\u6d4b\u8bd5\u8fc7\u7a0b\u89e3\u8026\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a\u79bb\u7ebf\u9636\u6bb5\u4f7f\u7528LLM\u751f\u6210\u5c0f\u578b\u4f46\u529f\u80fd\u4e30\u5bcc\u7684\u4ee3\u7801\u7247\u6bb5\uff1b\u5728\u7ebf\u9636\u6bb5\u7b56\u7565\u6027\u5730\u7ec4\u5408\u8fd9\u4e9b\u7247\u6bb5\u6784\u5efa\u9ad8\u8d28\u91cf\u6d4b\u8bd5\u7a0b\u5e8f", "result": "\u5728GCC\u548cLLVM\u4e2d\u53d1\u73b066\u4e2abug\uff0c\u5176\u4e2d\u8fd1\u4e00\u534a\u662f\u73b0\u6709LLM\u5de5\u5177\u65e0\u6cd5\u53d1\u73b0\u7684\u4e25\u91cd\u9519\u8bef\u7f16\u8bd1bug", "conclusion": "\u8fd9\u79cd\u9ad8\u6548\u8bbe\u8ba1\u4e3a\u5728\u8f6f\u4ef6\u6d4b\u8bd5\u4e2d\u8d85\u8d8aC\u7f16\u8bd1\u5668\u4f7f\u7528AI\u6a21\u578b\u5f00\u8f9f\u4e86\u65b0\u53ef\u80fd\u6027"}}
{"id": "2508.18993", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.18993", "abs": "https://arxiv.org/abs/2508.18993", "authors": ["Ziyi Ni", "Huacan Wang", "Shuo Zhang", "Shuo Lu", "Ziyang He", "Wang You", "Zhenheng Tang", "Yuntao Du", "Bill Sun", "Hongzhang Liu", "Sen Hu", "Ronghao Chen", "Bo Li", "Xin Li", "Chen Hu", "Binxing Jiao", "Daxin Jiang", "Pin Lyu"], "title": "GitTaskBench: A Benchmark for Code Agents Solving Real-World Tasks Through Code Repository Leveraging", "comment": "Highly practical, Well-motivated, Actionable", "summary": "Beyond scratch coding, exploiting large-scale code repositories (e.g.,\nGitHub) for practical tasks is vital in real-world software development, yet\ncurrent benchmarks rarely evaluate code agents in such authentic,\nworkflow-driven scenarios. To bridge this gap, we introduce GitTaskBench, a\nbenchmark designed to systematically assess this capability via 54 realistic\ntasks across 7 modalities and 7 domains. Each task pairs a relevant repository\nwith an automated, human-curated evaluation harness specifying practical\nsuccess criteria. Beyond measuring execution and task success, we also propose\nthe alpha-value metric to quantify the economic benefit of agent performance,\nwhich integrates task success rates, token cost, and average developer\nsalaries. Experiments across three state-of-the-art agent frameworks with\nmultiple advanced LLMs show that leveraging code repositories for complex task\nsolving remains challenging: even the best-performing system, OpenHands+Claude\n3.7, solves only 48.15% of tasks. Error analysis attributes over half of\nfailures to seemingly mundane yet critical steps like environment setup and\ndependency resolution, highlighting the need for more robust workflow\nmanagement and increased timeout preparedness. By releasing GitTaskBench, we\naim to drive progress and attention toward repository-aware code reasoning,\nexecution, and deployment -- moving agents closer to solving complex,\nend-to-end real-world tasks. The benchmark and code are open-sourced at\nhttps://github.com/QuantaAlpha/GitTaskBench.", "AI": {"tldr": "GitTaskBench\u662f\u4e00\u4e2a\u65b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u7528\u4e8e\u8bc4\u4f30\u4ee3\u7801\u4ee3\u7406\u5728\u771f\u5b9eGitHub\u4ed3\u5e93\u5de5\u4f5c\u6d41\u4e2d\u7684\u4efb\u52a1\u89e3\u51b3\u80fd\u529b\uff0c\u5305\u542b54\u4e2a\u8de87\u4e2a\u9886\u57df\u548c\u6a21\u5f0f\u7684\u4efb\u52a1\uff0c\u5e76\u63d0\u51fa\u4e86\u7ecf\u6d4e\u4ef7\u503c\u6307\u6807\u6765\u8861\u91cf\u4ee3\u7406\u6027\u80fd\u3002", "motivation": "\u5f53\u524d\u57fa\u51c6\u6d4b\u8bd5\u5f88\u5c11\u8bc4\u4f30\u4ee3\u7801\u4ee3\u7406\u5728\u771f\u5b9e\u5de5\u4f5c\u6d41\u9a71\u52a8\u7684GitHub\u4ed3\u5e93\u573a\u666f\u4e2d\u7684\u80fd\u529b\uff0c\u9700\u8981\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u8bbe\u8ba1\u4e8654\u4e2a\u73b0\u5b9e\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u914d\u5bf9\u76f8\u5173\u4ed3\u5e93\u548c\u81ea\u52a8\u5316\u8bc4\u4f30\u5de5\u5177\uff0c\u63d0\u51faalpha-value\u7ecf\u6d4e\u4ef7\u503c\u6307\u6807\uff0c\u6574\u5408\u4efb\u52a1\u6210\u529f\u7387\u3001\u4ee3\u5e01\u6210\u672c\u548c\u5f00\u53d1\u8005\u85aa\u8d44\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\u5373\u4f7f\u5728\u6700\u5148\u8fdb\u7684\u4ee3\u7406\u6846\u67b6\u548cLLM\u4e0b\uff0c\u4efb\u52a1\u89e3\u51b3\u7387\u4ec5\u4e3a48.15%\uff0c\u8d85\u8fc7\u4e00\u534a\u7684\u5931\u8d25\u6e90\u4e8e\u73af\u5883\u8bbe\u7f6e\u548c\u4f9d\u8d56\u89e3\u6790\u7b49\u57fa\u7840\u6b65\u9aa4\u3002", "conclusion": "\u9700\u8981\u66f4\u5f3a\u5927\u7684\u5de5\u4f5c\u6d41\u7ba1\u7406\u548c\u8d85\u65f6\u51c6\u5907\uff0cGitTaskBench\u7684\u53d1\u5e03\u65e8\u5728\u63a8\u52a8\u4ed3\u5e93\u611f\u77e5\u7684\u4ee3\u7801\u63a8\u7406\u3001\u6267\u884c\u548c\u90e8\u7f72\u80fd\u529b\u7684\u53d1\u5c55\u3002"}}
{"id": "2508.19056", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.19056", "abs": "https://arxiv.org/abs/2508.19056", "authors": ["S. Panda", "D. Munjal", "D. P. Mohapatra"], "title": "A Slice-Based Change Impact Analysis for Regression Test Case Prioritization of Object-Oriented Programs", "comment": null, "summary": "Test case prioritization focuses on finding a suitable order of execution of\nthe test cases in a test suite to meet some performance goals like detecting\nfaults early. It is likely that some test cases execute the program parts that\nare more prone to errors and will detect more errors if executed early during\nthe testing process. Finding an optimal order of execution for the selected\nregression test cases saves time and cost of retesting. This paper presents a\nstatic approach to prioritizing the test cases by computing the affected\ncomponent coupling (ACC) of the affected parts of object-oriented programs. We\nconstruct a graph named affected slice graph (ASG) to represent these affected\nprogram parts.We determine the fault-proneness of the nodes of ASG by computing\ntheir respective ACC values. We assign higher priority to those test cases that\ncover the nodes with higher ACC values. Our analysis with mutation faults shows\nthat the test cases executing the fault-prone program parts have a higher\nchance to reveal faults earlier than other test cases in the test suite. The\nresult obtained from seven case studies justifies that our approach is feasible\nand gives acceptable performance in comparison to some existing techniques.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u53d7\u5f71\u54cd\u7ec4\u4ef6\u8026\u5408\u5ea6(ACC)\u7684\u9759\u6001\u6d4b\u8bd5\u7528\u4f8b\u4f18\u5148\u7ea7\u6392\u5e8f\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u5efa\u53d7\u5f71\u54cd\u5207\u7247\u56fe(ASG)\u6765\u8bc6\u522b\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u4e2d\u6613\u51fa\u9519\u7684\u90e8\u5206\uff0c\u5e76\u4e3a\u8986\u76d6\u9ad8ACC\u503c\u8282\u70b9\u7684\u6d4b\u8bd5\u7528\u4f8b\u5206\u914d\u66f4\u9ad8\u4f18\u5148\u7ea7\u3002", "motivation": "\u6d4b\u8bd5\u7528\u4f8b\u4f18\u5148\u7ea7\u6392\u5e8f\u65e8\u5728\u901a\u8fc7\u4f18\u5316\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u987a\u5e8f\u6765\u5c3d\u65e9\u53d1\u73b0\u6545\u969c\uff0c\u4ece\u800c\u8282\u7701\u56de\u5f52\u6d4b\u8bd5\u7684\u65f6\u95f4\u548c\u6210\u672c\u3002\u4f20\u7edf\u65b9\u6cd5\u53ef\u80fd\u65e0\u6cd5\u51c6\u786e\u8bc6\u522b\u7a0b\u5e8f\u4e2d\u771f\u6b63\u6613\u51fa\u9519\u7684\u90e8\u5206\u3002", "method": "\u6784\u5efa\u53d7\u5f71\u54cd\u5207\u7247\u56fe(ASG)\u6765\u8868\u793a\u53d7\u5f71\u54cd\u7684\u7a0b\u5e8f\u90e8\u5206\uff0c\u8ba1\u7b97\u5404\u8282\u70b9\u7684\u53d7\u5f71\u54cd\u7ec4\u4ef6\u8026\u5408\u5ea6(ACC)\u503c\u6765\u786e\u5b9a\u6545\u969c\u503e\u5411\u6027\uff0c\u4e3a\u8986\u76d6\u9ad8ACC\u503c\u8282\u70b9\u7684\u6d4b\u8bd5\u7528\u4f8b\u5206\u914d\u66f4\u9ad8\u6267\u884c\u4f18\u5148\u7ea7\u3002", "result": "\u901a\u8fc77\u4e2a\u6848\u4f8b\u7814\u7a76\u548c\u53d8\u5f02\u6545\u969c\u5206\u6790\u8868\u660e\uff0c\u6267\u884c\u6613\u51fa\u9519\u7a0b\u5e8f\u90e8\u5206\u7684\u6d4b\u8bd5\u7528\u4f8b\u6709\u66f4\u9ad8\u6982\u7387\u65e9\u671f\u53d1\u73b0\u6545\u969c\uff0c\u76f8\u6bd4\u73b0\u6709\u6280\u672f\u5177\u6709\u53ef\u63a5\u53d7\u7684\u6027\u80fd\u8868\u73b0\u3002", "conclusion": "\u57fa\u4e8eACC\u7684\u9759\u6001\u4f18\u5148\u7ea7\u6392\u5e8f\u65b9\u6cd5\u662f\u53ef\u884c\u7684\uff0c\u80fd\u591f\u6709\u6548\u8bc6\u522b\u6613\u51fa\u9519\u7a0b\u5e8f\u90e8\u5206\u5e76\u4f18\u5316\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u987a\u5e8f\uff0c\u63d0\u9ad8\u6545\u969c\u68c0\u6d4b\u6548\u7387\u3002"}}

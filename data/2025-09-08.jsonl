{"id": "2509.04936", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04936", "abs": "https://arxiv.org/abs/2509.04936", "authors": ["Andrea Gilot", "Tobias Wrigstad", "Eva Darulova"], "title": "A Large-Scale Study of Floating-Point Usage in Statically Typed Languages", "comment": null, "summary": "Reasoning about floating-point arithmetic is notoriously hard. While static\nand dynamic analysis techniques or program repair have made significant\nprogress, more work is still needed to make them relevant to real-world code.\nOn the critical path to that goal is understanding what real-world\nfloating-point code looks like. To close that knowledge gap, this paper\npresents the first large-scale empirical study of floating-point arithmetic\nusage in statically typed languages across public GitHub repositories. We\nfollow state-of the art mining practices including random sampling and\nfiltering based on only intrinsic properties to avoid bias, and identify\nfloating-point usage by searching for keywords in the source code, and\nprogramming language constructs (e.g., loops) by parsing the code. Our\nevaluation supports the claim often made in papers that floating-point\narithmetic is widely used. Comparing statistics such as size and usage of\ncertain constructs and functions, we find that benchmarks used in literature to\nevaluate automated reasoning techniques for floating-point arithmetic are in\ncertain aspects representative of 'real-world' code, but not in all. We aim for\nour study and dataset to help future techniques for floating-point arithmetic\nto be designed and evaluated to match actual users' expectations."}
{"id": "2509.05160", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.05160", "abs": "https://arxiv.org/abs/2509.05160", "authors": ["Steven Smyth", "Daniel Busch", "Moez Ben Haj Hmida", "Edward A. Lee", "Bernhard Steffen"], "title": "AI-Assisted Modeling: DSL-Driven AI Interactions", "comment": "7 pages, 4 figures", "summary": "AI-assisted programming greatly increases software development performance.\nWe enhance this potential by integrating transparency through domain-specific\nmodeling techniques and providing instantaneous, graphical visualizations that\naccurately represent the semantics of AI-generated code. This approach\nfacilitates visual inspection and formal verification, such as model checking.\n  Formal models can be developed using programming, natural language prompts,\nvoice commands, and stage-wise refinement, with immediate feedback after each\ntransformation step. This support can be tailored to specific domains or\nintended purposes, improving both code generation and subsequent validation\nprocesses.\n  To demonstrate the effectiveness of this approach, we have developed a\nprototype as a Visual Studio Code extension for the Lingua Franca language.\nThis prototype showcases the potential for novel domain-specific modeling\npractices, offering an advancement in how models are created, visualized, and\nverified."}
{"id": "2509.05293", "categories": ["cs.PL", "cs.CL", "cs.SE", "D.3; F.3"], "pdf": "https://arxiv.org/pdf/2509.05293", "abs": "https://arxiv.org/abs/2509.05293", "authors": ["Julien Vanegue", "Jules Villard", "Peter O'Hearn", "Azalea Raad"], "title": "Non-Termination Proving: 100 Million LoC and Beyond", "comment": "14 pages, 4 figures", "summary": "We report on our tool, Pulse Infinite, that uses proof techniques to show\nnon-termination (divergence) in large programs. Pulse Infinite works\ncompositionally and under-approximately: the former supports scale, and the\nlatter ensures soundness for proving divergence. Prior work focused on small\nbenchmarks in the tens or hundreds of lines of code (LoC), and scale limits\ntheir practicality: a single company may have tens of millions, or even\nhundreds of millions of LoC or more. We report on applying Pulse Infinite to\nover a hundred million lines of open-source and proprietary software written in\nC, C++, and Hack, identifying over 30 previously unknown issues, establishing a\nnew state of the art for detecting divergence in real-world codebases."}
{"id": "2509.04777", "categories": ["cs.LO", "cs.PL", "F.3.1; F.3.2"], "pdf": "https://arxiv.org/pdf/2509.04777", "abs": "https://arxiv.org/abs/2509.04777", "authors": ["Ramana Nagasamudram", "Anindya Banerjee", "David A. Naumann"], "title": "Forall-Exists Relational Verification by Filtering to Forall-Forall", "comment": null, "summary": "Relational verification encompasses research directions such as reasoning\nabout data abstraction, reasoning about security and privacy, secure\ncompilation, and functional specificaton of tensor programs, among others.\nSeveral relational Hoare logics exist, with accompanying tool support for\ncompositional reasoning of $\\forall\\forall$ (2-safety) properties and,\ngenerally, k-safety properties of product programs. In contrast, few logics and\ntools exist for reasoning about $\\forall\\exists$ properties which are critical\nin the context of nondeterminism.\n  This paper's primary contribution is a methodology for verifying a\n$\\forall\\exists$ judgment by way of a novel filter-adequacy transformation.\nThis transformation adds assertions to a product program in such a way that the\ndesired $\\forall\\exists$ property (of a pair of underlying unary programs) is\nimplied by a $\\forall\\forall$ property of the transformed product. The paper\ndevelops a program logic for the basic $\\forall\\exists$ judgement extended with\nassertion failures; develops bicoms, a form of product programs that represents\npairs of executions and that caters for direct translation of $\\forall\\forall$\nproperties to unary correctness; proves (using the logic) a soundness theorem\nthat says successful $\\forall\\forall$ verification of a transformed bicom\nimplies the $\\forall\\exists$ spec for its underlying unary commands; and\nimplements a proof of principle prototype for auto-active relational\nverification which has been used to verify all examples in the paper. The\nmethodology thereby enables a user to work with ordinary assertions and\nassumptions, and a standard assertion language, so that existing tools\nincluding auto-active verifiers can be used."}
{"id": "2509.04777", "categories": ["cs.LO", "cs.PL", "F.3.1; F.3.2"], "pdf": "https://arxiv.org/pdf/2509.04777", "abs": "https://arxiv.org/abs/2509.04777", "authors": ["Ramana Nagasamudram", "Anindya Banerjee", "David A. Naumann"], "title": "Forall-Exists Relational Verification by Filtering to Forall-Forall", "comment": null, "summary": "Relational verification encompasses research directions such as reasoning\nabout data abstraction, reasoning about security and privacy, secure\ncompilation, and functional specificaton of tensor programs, among others.\nSeveral relational Hoare logics exist, with accompanying tool support for\ncompositional reasoning of $\\forall\\forall$ (2-safety) properties and,\ngenerally, k-safety properties of product programs. In contrast, few logics and\ntools exist for reasoning about $\\forall\\exists$ properties which are critical\nin the context of nondeterminism.\n  This paper's primary contribution is a methodology for verifying a\n$\\forall\\exists$ judgment by way of a novel filter-adequacy transformation.\nThis transformation adds assertions to a product program in such a way that the\ndesired $\\forall\\exists$ property (of a pair of underlying unary programs) is\nimplied by a $\\forall\\forall$ property of the transformed product. The paper\ndevelops a program logic for the basic $\\forall\\exists$ judgement extended with\nassertion failures; develops bicoms, a form of product programs that represents\npairs of executions and that caters for direct translation of $\\forall\\forall$\nproperties to unary correctness; proves (using the logic) a soundness theorem\nthat says successful $\\forall\\forall$ verification of a transformed bicom\nimplies the $\\forall\\exists$ spec for its underlying unary commands; and\nimplements a proof of principle prototype for auto-active relational\nverification which has been used to verify all examples in the paper. The\nmethodology thereby enables a user to work with ordinary assertions and\nassumptions, and a standard assertion language, so that existing tools\nincluding auto-active verifiers can be used."}
{"id": "2509.04644", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04644", "abs": "https://arxiv.org/abs/2509.04644", "authors": ["Subhang Boorlagadda", "Nitya Naga Sai Atluri", "Muhammet Mustafa Olmez", "Edward F. Gehringer"], "title": "Comparative Evaluation of Large Language Models for Test-Skeleton Generation", "comment": "Forthcoming in Frontiers in Education (FIE 2025), Nashville,\n  Tennessee, USA, Nov 2-5, 2025", "summary": "This paper explores the use of Large Language Models (LLMs) to automate the\ngeneration of test skeletons -- structural templates that outline unit test\ncoverage without implementing full test logic. Test skeletons are especially\nimportant in test-driven development (TDD), where they provide an early\nframework for systematic verification. Traditionally authored manually, their\ncreation can be time-consuming and error-prone, particularly in educational or\nlarge-scale development settings. We evaluate four LLMs -- GPT-4,\nDeepSeek-Chat, Llama4-Maverick, and Gemma2-9B -- on their ability to generate\nRSpec skeletons for a real-world Ruby class developed in a university software\nengineering course. Each model's output is assessed using static analysis and a\nblind expert review to measure structural correctness, clarity,\nmaintainability, and conformance to testing best practices. The study reveals\nkey differences in how models interpret code structure and testing conventions,\noffering insights into the practical challenges of using LLMs for automated\ntest scaffolding. Our results show that DeepSeek generated the most\nmaintainable and well-structured skeletons, while GPT-4 produced more complete\nbut conventionally inconsistent output. The study reveals prompt design and\ncontextual input as key quality factors."}
{"id": "2509.04922", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.04922", "abs": "https://arxiv.org/abs/2509.04922", "authors": ["Sébastien Gouëzel"], "title": "Higher order differential calculus in mathlib", "comment": null, "summary": "We report on the higher-order differential calculus library developed inside\nthe Lean mathematical library mathlib. To support a broad range of\napplications, we depart in several ways from standard textbook definitions: we\nallow arbitrary fields of scalars, we work with functions defined on domains\nrather than full spaces, and we integrate analytic functions in the broader\nscale of smooth functions. These generalizations introduce significant\nchallenges, which we address from both the mathematical and the formalization\nperspectives."}
{"id": "2509.04721", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.04721", "abs": "https://arxiv.org/abs/2509.04721", "authors": ["Abhishek Dey", "Saurabh Srivastava", "Gaurav Singh", "Robert G. Pettit"], "title": "Real-Time Performance Benchmarking of TinyML Models in Embedded Systems (PICO: Performance of Inference, CPU, and Operations)", "comment": null, "summary": "This paper presents PICO-TINYML-BENCHMARK, a modular and platform-agnostic\nframework for benchmarking the real-time performance of TinyML models on\nresource-constrained embedded systems. Evaluating key metrics such as inference\nlatency, CPU utilization, memory efficiency, and prediction stability, the\nframework provides insights into computational trade-offs and platform-specific\noptimizations. We benchmark three representative TinyML models -- Gesture\nClassification, Keyword Spotting, and MobileNet V2 -- on two widely adopted\nplatforms, BeagleBone AI64 and Raspberry Pi 4, using real-world datasets.\nResults reveal critical trade-offs: the BeagleBone AI64 demonstrates consistent\ninference latency for AI-specific tasks, while the Raspberry Pi 4 excels in\nresource efficiency and cost-effectiveness. These findings offer actionable\nguidance for optimizing TinyML deployments, bridging the gap between\ntheoretical advancements and practical applications in embedded systems."}
{"id": "2509.04763", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04763", "abs": "https://arxiv.org/abs/2509.04763", "authors": ["Tiancheng Jin", "Shangzhou Xia", "Jianjun Zhao"], "title": "NovaQ: Improving Quantum Program Testing through Diversity-Guided Test Case Generation", "comment": "5 pages", "summary": "Quantum programs are designed to run on quantum computers, leveraging quantum\ncircuits to solve problems that are intractable for classical machines. As\nquantum computing advances, ensuring the reliability of quantum programs has\nbecome increasingly important. This paper introduces NovaQ, a diversity-guided\ntesting framework for quantum programs. NovaQ combines a distribution-based\ntest case generator with a novelty-driven evaluation module. The generator\nproduces diverse quantum state inputs by mutating circuit parameters, while the\nevaluator quantifies behavioral novelty based on internal circuit state\nmetrics, including magnitude, phase, and entanglement. By selecting inputs that\nmap to infrequently covered regions in the metric space, NovaQ effectively\nexplores under-tested program behaviors. We evaluate NovaQ on quantum programs\nof varying sizes and complexities. Experimental results show that NovaQ\nconsistently achieves higher test input diversity and detects more bugs than\nexisting baseline approaches."}
{"id": "2509.04810", "categories": ["cs.SE", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.04810", "abs": "https://arxiv.org/abs/2509.04810", "authors": ["Yogev Cohen", "Dudi Ohayon", "Romy Somkin", "Yehudit Aperstein", "Alexander Apartsin"], "title": "Code Review Without Borders: Evaluating Synthetic vs. Real Data for Review Recommendation", "comment": "4 pages, 1 figure", "summary": "Automating the decision of whether a code change requires manual review is\nvital for maintaining software quality in modern development workflows.\nHowever, the emergence of new programming languages and frameworks creates a\ncritical bottleneck: while large volumes of unlabelled code are readily\navailable, there is an insufficient amount of labelled data to train supervised\nmodels for review classification. We address this challenge by leveraging Large\nLanguage Models (LLMs) to translate code changes from well-resourced languages\ninto equivalent changes in underrepresented or emerging languages, generating\nsynthetic training data where labelled examples are scarce. We assume that\nalthough LLMs have learned the syntax and semantics of new languages from\navailable unlabelled code, they have yet to fully grasp which code changes are\nconsidered significant or review-worthy within these emerging ecosystems. To\novercome this, we use LLMs to generate synthetic change examples and train\nsupervised classifiers on them. We systematically compare the performance of\nthese classifiers against models trained on real labelled data. Our experiments\nacross multiple GitHub repositories and language pairs demonstrate that\nLLM-generated synthetic data can effectively bootstrap review recommendation\nsystems, narrowing the performance gap even in low-resource settings. This\napproach provides a scalable pathway to extend automated code review\ncapabilities to rapidly evolving technology stacks, even in the absence of\nannotated data."}
{"id": "2509.04877", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04877", "abs": "https://arxiv.org/abs/2509.04877", "authors": ["Maryam Khan", "Muhammad Azeem Akbar", "Jussi Kasurinen"], "title": "Integrating Large Language Models in Software Engineering Education: A Pilot Study through GitHub Repositories Mining", "comment": null, "summary": "Context: Large Language Models (LLMs) such as ChatGPT are increasingly\nadopted in software engineering (SE) education, offering both opportunities and\nchallenges. Their adoption requires systematic investigation to ensure\nresponsible integration into curricula. Objective: This doctoral research aims\nto develop a validated framework for integrating LLMs into SE education through\na multi-phase process, including taxonomies development, empirical\ninvestigation, and case studies. This paper presents the first empirical step.\nMethod: We conducted a pilot repository mining study of 400 GitHub projects,\nanalyzing README files and issues discussions to identify the presence of\nmotivator and demotivator previously synthesized in our literature review [ 8]\nstudy. Results: Motivators such as engagement and motivation (227 hits),\nsoftware engineering process understanding (133 hits), and programming\nassistance and debugging support (97 hits) were strongly represented.\nDemotivators, including plagiarism and IP concerns (385 hits), security,\nprivacy and data integrity (87 hits), and over-reliance on AI in learning (39\nhits), also appeared prominently. In contrast, demotivators such as challenges\nin evaluating learning outcomes and difficulty in curriculum redesign recorded\nno hits across the repositories. Conclusion: The study provides early empirical\nvalidation of motivators/demotivators taxonomies with respect to their themes,\nhighlights research practice gaps, and lays the foundation for developing a\ncomprehensive framework to guide the responsible adoption of LLMs in SE\neducation."}
{"id": "2509.04967", "categories": ["cs.SE", "cs.CR", "D.2.5"], "pdf": "https://arxiv.org/pdf/2509.04967", "abs": "https://arxiv.org/abs/2509.04967", "authors": ["Kai Feng", "Jeremy Singer", "Angelos K Marnerides"], "title": "FuzzRDUCC: Fuzzing with Reconstructed Def-Use Chain Coverage", "comment": null, "summary": "Binary-only fuzzing often struggles with achieving thorough code coverage and\nuncovering hidden vulnerabilities due to limited insight into a program's\ninternal dataflows. Traditional grey-box fuzzers guide test case generation\nprimarily using control flow edge coverage, which can overlook bugs not easily\nexposed through control flow analysis alone. We argue that integrating dataflow\nanalysis into the fuzzing process can enhance its effectiveness by revealing\nhow data propagates through the program, thereby enabling the exploration of\nexecution paths that control flow-based methods might miss. In this context, we\nintroduce FuzzRDUCC, a novel fuzzing framework that employs symbolic execution\nto reconstruct definition-use (def-use) chains directly from binary\nexecutables. FuzzRDUCC identifies crucial dataflow paths and exposes security\nvulnerabilities without incurring excessive computational overhead, due to a\nnovel heuristic algorithm that selects relevant def-use chains without\naffecting the thoroughness of the fuzzing process. We evaluate FuzzRDUCC using\nthe binutils benchmark and demonstrate that it can identify unique crashes not\nfound by state-of-the-art fuzzers. Hence, establishing FuzzRDUCC as a feasible\nsolution for next generation vulnerability detection and discovery mechanisms."}
{"id": "2509.05112", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.05112", "abs": "https://arxiv.org/abs/2509.05112", "authors": ["Denesa Zyberaj", "Lukasz Mazur", "Nenad Petrovic", "Pankhuri Verma", "Pascal Hirmer", "Dirk Slama", "Xiangwei Cheng", "Alois Knoll"], "title": "GenAI-based test case generation and execution in SDV platform", "comment": null, "summary": "This paper introduces a GenAI-driven approach for automated test case\ngeneration, leveraging Large Language Models and Vision-Language Models to\ntranslate natural language requirements and system diagrams into structured\nGherkin test cases. The methodology integrates Vehicle Signal Specification\nmodeling to standardize vehicle signal definitions, improve compatibility\nacross automotive subsystems, and streamline integration with third-party\ntesting tools. Generated test cases are executed within the digital.auto\nplayground, an open and vendor-neutral environment designed to facilitate rapid\nvalidation of software-defined vehicle functionalities. We evaluate our\napproach using the Child Presence Detection System use case, demonstrating\nsubstantial reductions in manual test specification effort and rapid execution\nof generated tests. Despite significant automation, the generation of test\ncases and test scripts still requires manual intervention due to current\nlimitations in the GenAI pipeline and constraints of the digital.auto platform."}
{"id": "2509.05197", "categories": ["cs.SE", "cs.AI", "cs.HC"], "pdf": "https://arxiv.org/pdf/2509.05197", "abs": "https://arxiv.org/abs/2509.05197", "authors": ["Naimeng Ye", "Xiao Yu", "Ruize Xu", "Tianyi Peng", "Zhou Yu"], "title": "AI Agents for Web Testing: A Case Study in the Wild", "comment": null, "summary": "Automated web testing plays a critical role in ensuring high-quality user\nexperiences and delivering business value. Traditional approaches primarily\nfocus on code coverage and load testing, but often fall short of capturing\ncomplex user behaviors, leaving many usability issues undetected. The emergence\nof large language models (LLM) and AI agents opens new possibilities for web\ntesting by enabling human-like interaction with websites and a general\nawareness of common usability problems. In this work, we present WebProber, a\nprototype AI agent-based web testing framework. Given a URL, WebProber\nautonomously explores the website, simulating real user interactions,\nidentifying bugs and usability issues, and producing a human-readable report.\nWe evaluate WebProber through a case study of 120 academic personal websites,\nwhere it uncovered 29 usability issues--many of which were missed by\ntraditional tools. Our findings highlight agent-based testing as a promising\ndirection while outlining directions for developing next-generation,\nuser-centered testing frameworks."}
{"id": "2509.04936", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04936", "abs": "https://arxiv.org/abs/2509.04936", "authors": ["Andrea Gilot", "Tobias Wrigstad", "Eva Darulova"], "title": "A Large-Scale Study of Floating-Point Usage in Statically Typed Languages", "comment": null, "summary": "Reasoning about floating-point arithmetic is notoriously hard. While static\nand dynamic analysis techniques or program repair have made significant\nprogress, more work is still needed to make them relevant to real-world code.\nOn the critical path to that goal is understanding what real-world\nfloating-point code looks like. To close that knowledge gap, this paper\npresents the first large-scale empirical study of floating-point arithmetic\nusage in statically typed languages across public GitHub repositories. We\nfollow state-of the art mining practices including random sampling and\nfiltering based on only intrinsic properties to avoid bias, and identify\nfloating-point usage by searching for keywords in the source code, and\nprogramming language constructs (e.g., loops) by parsing the code. Our\nevaluation supports the claim often made in papers that floating-point\narithmetic is widely used. Comparing statistics such as size and usage of\ncertain constructs and functions, we find that benchmarks used in literature to\nevaluate automated reasoning techniques for floating-point arithmetic are in\ncertain aspects representative of 'real-world' code, but not in all. We aim for\nour study and dataset to help future techniques for floating-point arithmetic\nto be designed and evaluated to match actual users' expectations."}
{"id": "2509.05160", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.05160", "abs": "https://arxiv.org/abs/2509.05160", "authors": ["Steven Smyth", "Daniel Busch", "Moez Ben Haj Hmida", "Edward A. Lee", "Bernhard Steffen"], "title": "AI-Assisted Modeling: DSL-Driven AI Interactions", "comment": "7 pages, 4 figures", "summary": "AI-assisted programming greatly increases software development performance.\nWe enhance this potential by integrating transparency through domain-specific\nmodeling techniques and providing instantaneous, graphical visualizations that\naccurately represent the semantics of AI-generated code. This approach\nfacilitates visual inspection and formal verification, such as model checking.\n  Formal models can be developed using programming, natural language prompts,\nvoice commands, and stage-wise refinement, with immediate feedback after each\ntransformation step. This support can be tailored to specific domains or\nintended purposes, improving both code generation and subsequent validation\nprocesses.\n  To demonstrate the effectiveness of this approach, we have developed a\nprototype as a Visual Studio Code extension for the Lingua Franca language.\nThis prototype showcases the potential for novel domain-specific modeling\npractices, offering an advancement in how models are created, visualized, and\nverified."}
{"id": "2509.05293", "categories": ["cs.PL", "cs.CL", "cs.SE", "D.3; F.3"], "pdf": "https://arxiv.org/pdf/2509.05293", "abs": "https://arxiv.org/abs/2509.05293", "authors": ["Julien Vanegue", "Jules Villard", "Peter O'Hearn", "Azalea Raad"], "title": "Non-Termination Proving: 100 Million LoC and Beyond", "comment": "14 pages, 4 figures", "summary": "We report on our tool, Pulse Infinite, that uses proof techniques to show\nnon-termination (divergence) in large programs. Pulse Infinite works\ncompositionally and under-approximately: the former supports scale, and the\nlatter ensures soundness for proving divergence. Prior work focused on small\nbenchmarks in the tens or hundreds of lines of code (LoC), and scale limits\ntheir practicality: a single company may have tens of millions, or even\nhundreds of millions of LoC or more. We report on applying Pulse Infinite to\nover a hundred million lines of open-source and proprietary software written in\nC, C++, and Hack, identifying over 30 previously unknown issues, establishing a\nnew state of the art for detecting divergence in real-world codebases."}

{"id": "2510.23517", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2510.23517", "abs": "https://arxiv.org/abs/2510.23517", "authors": ["Sidney Congard", "Guillaume Munch-Maccagnoni", "R\u00e9mi Douence"], "title": "Linear effects, exceptions, and resource safety: a Curry-Howard correspondence for destructors", "comment": "26 pages + appendix", "summary": "We analyse the problem of combining linearity, effects, and exceptions, in\nabstract models of programming languages, as the issue of providing some kind\nof strength for a monad $T(- \\oplus E)$ in a linear setting. We consider in\nparticular for $T$ the allocation monad, which we introduce to model and study\nresource-safety properties. We apply these results to a series of two linear\neffectful calculi for which we establish their resource-safety properties.\n  The first calculus is a linear call-by-push-value language with two\nallocation effects $\\mathit{new}$ and $\\mathit{delete}$. The resource-safety\nproperties follow from the linear (and even ordered) character of the typing\nrules.\n  We then explain how to integrate exceptions on top of linearity and effects\nby adjoining default destruction actions to types, as inspired by C++/Rust\ndestructors. We see destructors as objects $\\delta : A\\rightarrow TI$ in the\nslice category over $TI$. This construction gives rise to a second calculus, an\naffine ordered call-by-push-value language with exceptions and destructors, in\nwhich the weakening rule performs a side-effect. As in C++/Rust, a ``move''\noperation is necessary to allow random-order release of resources, as opposed\nto last-in-first-out order. Moving resources is modelled as an exchange rule\nthat performs a side-effect.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u5728\u7ebf\u6027\u8bbe\u7f6e\u4e2d\u7ed3\u5408\u7ebf\u6027\u3001\u6548\u679c\u548c\u5f02\u5e38\u7684\u95ee\u9898\uff0c\u901a\u8fc7\u4e3a\u5206\u914dmonad\u63d0\u4f9b\u67d0\u79cd\u5f3a\u5ea6\u6765\u5efa\u6a21\u8d44\u6e90\u5b89\u5168\u5c5e\u6027\uff0c\u5e76\u5f00\u53d1\u4e86\u4e24\u4e2a\u7ebf\u6027\u6548\u679c\u6f14\u7b97\u6765\u9a8c\u8bc1\u8d44\u6e90\u5b89\u5168\u6027\u3002", "motivation": "\u7814\u7a76\u5982\u4f55\u5728\u62bd\u8c61\u7f16\u7a0b\u8bed\u8a00\u6a21\u578b\u4e2d\u7ed3\u5408\u7ebf\u6027\u3001\u6548\u679c\u548c\u5f02\u5e38\uff0c\u7279\u522b\u5173\u6ce8\u8d44\u6e90\u5b89\u5168\u5c5e\u6027\u7684\u5efa\u6a21\u548c\u5206\u6790\uff0c\u53d7C++/Rust\u6790\u6784\u5668\u542f\u53d1\u3002", "method": "\u5f15\u5165\u5206\u914dmonad\u6765\u5efa\u6a21\u8d44\u6e90\u5b89\u5168\uff0c\u5f00\u53d1\u4e86\u4e24\u4e2a\u7ebf\u6027\u6548\u679c\u6f14\u7b97\uff1a\u7b2c\u4e00\u4e2a\u662f\u7ebf\u6027call-by-push-value\u8bed\u8a00\uff0c\u5177\u6709new\u548cdelete\u5206\u914d\u6548\u679c\uff1b\u7b2c\u4e8c\u4e2a\u662f\u4eff\u5c04\u6709\u5e8fcall-by-push-value\u8bed\u8a00\uff0c\u96c6\u6210\u4e86\u5f02\u5e38\u548c\u6790\u6784\u5668\u3002", "result": "\u5efa\u7acb\u4e86\u7b2c\u4e00\u4e2a\u6f14\u7b97\u7684\u8d44\u6e90\u5b89\u5168\u5c5e\u6027\uff08\u6e90\u4e8e\u7ebf\u6027\u7c7b\u578b\u89c4\u5219\uff09\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u6f14\u7b97\u4e2d\u901a\u8fc7\u6790\u6784\u5668\u548c\u79fb\u52a8\u64cd\u4f5c\u5b9e\u73b0\u4e86\u968f\u673a\u987a\u5e8f\u8d44\u6e90\u91ca\u653e\u3002", "conclusion": "\u901a\u8fc7\u4e3a\u5206\u914dmonad\u63d0\u4f9b\u5f3a\u5ea6\uff0c\u6210\u529f\u5728\u7ebf\u6027\u8bbe\u7f6e\u4e2d\u7ed3\u5408\u4e86\u6548\u679c\u548c\u5f02\u5e38\uff0c\u9a8c\u8bc1\u4e86\u8d44\u6e90\u5b89\u5168\u5c5e\u6027\uff0c\u5e76\u4e3a\u7c7b\u4f3cC++/Rust\u7684\u8d44\u6e90\u7ba1\u7406\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2510.22657", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2510.22657", "abs": "https://arxiv.org/abs/2510.22657", "authors": ["Xiaoyan Li", "Christoforos N. Hadjicostis"], "title": "Synthesis of State-Attack Strategies for Anonymity and Opacity Violation in Discrete Event Systems", "comment": null, "summary": "Attacks, including the manipulation of sensor readings and the modification\nof actuator commands, pose a significant challenge to the security and privacy\nof automated systems. This paper considers discrete event systems that can be\nmodeled with nondeterministic finite state automata that are susceptible to\nstate attacks. A state attack allows an intruder to learn whether or not the\ncurrent state of a system falls into certain subsets of states. The intruder\nhas a limited total number of state attacks at its disposal, but can launch\nstate attacks at arbitrary instants of its choosing. We are interested on\nviolations of current-state anonymity (resp. opacity), i.e., situations where\nthe intruder, based on the sequence of observations generated by the system and\nthe outcome of any performed state attacks, can ascertain the exact current\nstate of the system (resp. that the current state of the system definitely\nresides in a subset of secret states). When the system violates current-state\nanonymity (resp. opacity) under a bounded number of state attacks, a subsequent\nquestion is whether the intruder can design an attack strategy such that\nanonymity-violating (resp. opacity-violating) situations will always be\nreached. In this latter case, we also design an attack strategy that guarantees\nthat the system will reach a violating situation regardless of system actions.\nWe provide pertinent complexity analysis of the corresponding verification\nalgorithms and examples to illustrate the proposed methods.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u79bb\u6563\u4e8b\u4ef6\u7cfb\u7edf\u4e2d\u72b6\u6001\u653b\u51fb\u5bf9\u5f53\u524d\u72b6\u6001\u533f\u540d\u6027\u548c\u4e0d\u900f\u660e\u6027\u7684\u5f71\u54cd\uff0c\u5206\u6790\u653b\u51fb\u8005\u5982\u4f55\u5229\u7528\u6709\u9650\u6b21\u6570\u7684\u72b6\u6001\u653b\u51fb\u6765\u7834\u574f\u7cfb\u7edf\u9690\u79c1\uff0c\u5e76\u63d0\u4f9b\u76f8\u5e94\u7684\u9a8c\u8bc1\u7b97\u6cd5\u548c\u653b\u51fb\u7b56\u7565\u3002", "motivation": "\u81ea\u52a8\u5316\u7cfb\u7edf\u4e2d\u7684\u4f20\u611f\u5668\u8bfb\u6570\u64cd\u7eb5\u548c\u6267\u884c\u5668\u547d\u4ee4\u4fee\u6539\u7b49\u653b\u51fb\u5bf9\u7cfb\u7edf\u5b89\u5168\u548c\u9690\u79c1\u6784\u6210\u91cd\u5927\u6311\u6218\uff0c\u7279\u522b\u662f\u72b6\u6001\u653b\u51fb\u80fd\u8ba9\u5165\u4fb5\u8005\u4e86\u89e3\u7cfb\u7edf\u5f53\u524d\u72b6\u6001\u662f\u5426\u5c5e\u4e8e\u7279\u5b9a\u5b50\u96c6\uff0c\u4ece\u800c\u7834\u574f\u7cfb\u7edf\u7684\u533f\u540d\u6027\u548c\u4e0d\u900f\u660e\u6027\u3002", "method": "\u4f7f\u7528\u975e\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u5bf9\u7cfb\u7edf\u5efa\u6a21\uff0c\u8003\u8651\u5165\u4fb5\u8005\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u523b\u53d1\u8d77\u6709\u9650\u6b21\u6570\u7684\u72b6\u6001\u653b\u51fb\uff0c\u57fa\u4e8e\u7cfb\u7edf\u89c2\u6d4b\u5e8f\u5217\u548c\u72b6\u6001\u653b\u51fb\u7ed3\u679c\u6765\u5206\u6790\u5f53\u524d\u72b6\u6001\u533f\u540d\u6027\u548c\u4e0d\u900f\u660e\u6027\u7684\u8fdd\u53cd\u60c5\u51b5\u3002", "result": "\u63d0\u51fa\u4e86\u9a8c\u8bc1\u7cfb\u7edf\u5728\u6709\u9650\u72b6\u6001\u653b\u51fb\u4e0b\u662f\u5426\u8fdd\u53cd\u5f53\u524d\u72b6\u6001\u533f\u540d\u6027\u548c\u4e0d\u900f\u660e\u6027\u7684\u7b97\u6cd5\uff0c\u5e76\u8bbe\u8ba1\u4e86\u4fdd\u8bc1\u7cfb\u7edf\u8fbe\u5230\u8fdd\u53cd\u60c5\u51b5\u7684\u653b\u51fb\u7b56\u7565\uff0c\u540c\u65f6\u8fdb\u884c\u4e86\u76f8\u5e94\u7684\u590d\u6742\u5ea6\u5206\u6790\u3002", "conclusion": "\u72b6\u6001\u653b\u51fb\u5bf9\u79bb\u6563\u4e8b\u4ef6\u7cfb\u7edf\u7684\u9690\u79c1\u4fdd\u62a4\u6784\u6210\u4e25\u91cd\u5a01\u80c1\uff0c\u8bba\u6587\u63d0\u4f9b\u7684\u65b9\u6cd5\u80fd\u591f\u6709\u6548\u5206\u6790\u548c\u5e94\u5bf9\u8fd9\u7c7b\u653b\u51fb\uff0c\u786e\u4fdd\u7cfb\u7edf\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\u3002"}}
{"id": "2510.23075", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.23075", "abs": "https://arxiv.org/abs/2510.23075", "authors": ["Yongming Li"], "title": "Possibilistic Computation Tree Logic: Decidability and Complete Axiomatization", "comment": null, "summary": "Possibilistic computation tree Logic (PoCTL) is one kind of branching\ntemporal logic combined with uncertain information in possibility theory, which\nwas introduced in order to cope with the systematic verification on systems\nwith uncertain information in possibility theory. There are two decision\nproblems related to PoCTL: the model checking problem and the satisfiability\nproblem. The model checking problem of PoCTL has been studied, while the\nsatisfiability problem of PoCTL was not discussed. One of the purpose of this\nwork is to study the satisfiability problem of PoCTL. By introducing some\ntechniques to extract possibility information from PoCTL formulae and\nconstructing their possibilistic Hintikka structures, we show that the\nsatisfiability problem of PoCTL is decidable in exponential time. Furthermore,\nwe give a complete axiomatization of PoCTL, which is another important\ninference problem of PoCTL.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u53ef\u80fd\u6027\u8ba1\u7b97\u6811\u903b\u8f91(PoCTL)\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff0c\u8bc1\u660e\u4e86\u8be5\u95ee\u9898\u5728\u6307\u6570\u65f6\u95f4\u5185\u53ef\u5224\u5b9a\uff0c\u5e76\u7ed9\u51fa\u4e86PoCTL\u7684\u5b8c\u6574\u516c\u7406\u5316\u7cfb\u7edf\u3002", "motivation": "PoCTL\u662f\u7ed3\u5408\u53ef\u80fd\u6027\u7406\u8bba\u4e2d\u4e0d\u786e\u5b9a\u4fe1\u606f\u7684\u65f6\u5e8f\u903b\u8f91\uff0c\u7528\u4e8e\u5904\u7406\u5177\u6709\u4e0d\u786e\u5b9a\u4fe1\u606f\u7684\u7cfb\u7edf\u9a8c\u8bc1\u3002\u867d\u7136PoCTL\u7684\u6a21\u578b\u68c0\u6d4b\u95ee\u9898\u5df2\u6709\u7814\u7a76\uff0c\u4f46\u5176\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u5c1a\u672a\u8ba8\u8bba\u3002", "method": "\u901a\u8fc7\u5f15\u5165\u4ecePoCTL\u516c\u5f0f\u4e2d\u63d0\u53d6\u53ef\u80fd\u6027\u4fe1\u606f\u7684\u6280\u672f\uff0c\u5e76\u6784\u5efa\u5176\u53ef\u80fd\u6027Hintikka\u7ed3\u6784\u3002", "result": "\u8bc1\u660e\u4e86PoCTL\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u5728\u6307\u6570\u65f6\u95f4\u5185\u53ef\u5224\u5b9a\u3002", "conclusion": "\u6210\u529f\u89e3\u51b3\u4e86PoCTL\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff0c\u5e76\u5efa\u7acb\u4e86\u5b8c\u6574\u7684\u516c\u7406\u5316\u7cfb\u7edf\uff0c\u4e3aPoCTL\u7684\u63a8\u7406\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2510.21902", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.21902", "abs": "https://arxiv.org/abs/2510.21902", "authors": ["Timoth\u00e9 Boulet", "Xavier Hinaut", "Cl\u00e9ment Moulin-Frier"], "title": "Software Engineering Agents for Embodied Controller Generation : A Study in Minigrid Environments", "comment": "10 pages, 7 figures", "summary": "Software Engineering Agents (SWE-Agents) have proven effective for\ntraditional software engineering tasks with accessible codebases, but their\nperformance for embodied tasks requiring well-designed information discovery\nremains unexplored. We present the first extended evaluation of SWE-Agents on\ncontroller generation for embodied tasks, adapting Mini-SWE-Agent (MSWEA) to\nsolve 20 diverse embodied tasks from the Minigrid environment. Our experiments\ncompare agent performance across different information access conditions: with\nand without environment source code access, and with varying capabilities for\ninteractive exploration. We quantify how different information access levels\naffect SWE-Agent performance for embodied tasks and analyze the relative\nimportance of static code analysis versus dynamic exploration for task solving.\nThis work establishes controller generation for embodied tasks as a crucial\nevaluation domain for SWE-Agents and provides baseline results for future\nresearch in efficient reasoning systems.", "AI": {"tldr": "\u9996\u6b21\u7cfb\u7edf\u8bc4\u4f30\u8f6f\u4ef6\u5de5\u7a0b\u667a\u80fd\u4f53\u5728\u5177\u8eab\u4efb\u52a1\u63a7\u5236\u5668\u751f\u6210\u4e2d\u7684\u8868\u73b0\uff0c\u901a\u8fc7Mini-SWE-Agent\u5728Minigrid\u73af\u5883\u4e2d\u89e3\u51b320\u4e2a\u4efb\u52a1\uff0c\u5206\u6790\u4e0d\u540c\u4fe1\u606f\u8bbf\u95ee\u6761\u4ef6\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002", "motivation": "\u63a2\u7d22SWE-Agents\u5728\u9700\u8981\u826f\u597d\u4fe1\u606f\u53d1\u73b0\u7684\u5177\u8eab\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u5173\u6ce8\u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\uff0c\u5bf9\u5177\u8eab\u4efb\u52a1\u63a7\u5236\u5668\u751f\u6210\u7684\u6027\u80fd\u5c1a\u672a\u5145\u5206\u7814\u7a76\u3002", "method": "\u5c06Mini-SWE-Agent\u9002\u914d\u5230Minigrid\u73af\u5883\uff0c\u572820\u4e2a\u591a\u6837\u5316\u5177\u8eab\u4efb\u52a1\u4e0a\u8fdb\u884c\u5b9e\u9a8c\uff0c\u6bd4\u8f83\u6709/\u65e0\u73af\u5883\u6e90\u4ee3\u7801\u8bbf\u95ee\u4ee5\u53ca\u4e0d\u540c\u4ea4\u4e92\u63a2\u7d22\u80fd\u529b\u6761\u4ef6\u4e0b\u7684\u6027\u80fd\u8868\u73b0\u3002", "result": "\u91cf\u5316\u4e86\u4e0d\u540c\u4fe1\u606f\u8bbf\u95ee\u7ea7\u522b\u5bf9SWE-Agent\u5728\u5177\u8eab\u4efb\u52a1\u4e2d\u6027\u80fd\u7684\u5f71\u54cd\uff0c\u5206\u6790\u4e86\u9759\u6001\u4ee3\u7801\u5206\u6790\u4e0e\u52a8\u6001\u63a2\u7d22\u5728\u4efb\u52a1\u89e3\u51b3\u4e2d\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u3002", "conclusion": "\u786e\u7acb\u4e86\u5177\u8eab\u4efb\u52a1\u63a7\u5236\u5668\u751f\u6210\u4f5c\u4e3aSWE-Agents\u5173\u952e\u8bc4\u4f30\u9886\u57df\uff0c\u4e3a\u672a\u6765\u9ad8\u6548\u63a8\u7406\u7cfb\u7edf\u7814\u7a76\u63d0\u4f9b\u4e86\u57fa\u51c6\u7ed3\u679c\u3002"}}
{"id": "2510.23211", "categories": ["cs.LO", "cs.FL"], "pdf": "https://arxiv.org/pdf/2510.23211", "abs": "https://arxiv.org/abs/2510.23211", "authors": ["Cinzia Di Giusto", "Giorgio Bacci"], "title": "Proceedings of the Combined 32nd International Workshop on Expressiveness in Concurrency and 22nd Workshop on Structural Operational Semantics", "comment": null, "summary": "This volume contains the proceedings of EXPRESS/SOS 2025: the Combined 32nd\nInternational Workshop on Expressiveness in Concurrency and the 22nd Workshop\non Structural Operational Semantics, which was held in Aarhus, Denmark, as an\naffiliated workshop of CONFEST 2025. The EXPRESS/SOS workshop series aims at\nbringing together researchers interested in the formal semantics of systems and\nprogramming concepts, and in the expressiveness of computational models.", "AI": {"tldr": "EXPRESS/SOS 2025\u4f1a\u8bae\u8bba\u6587\u96c6\uff0c\u5305\u542b\u7b2c32\u5c4a\u5e76\u53d1\u8868\u8fbe\u6027\u56fd\u9645\u7814\u8ba8\u4f1a\u548c\u7b2c22\u5c4a\u7ed3\u6784\u64cd\u4f5c\u8bed\u4e49\u7814\u8ba8\u4f1a\u7684\u8bba\u6587", "motivation": "\u6c47\u96c6\u5bf9\u7cfb\u7edf\u5f62\u5f0f\u8bed\u4e49\u3001\u7f16\u7a0b\u6982\u5ff5\u548c\u8ba1\u7b97\u6a21\u578b\u8868\u8fbe\u6027\u611f\u5174\u8da3\u7684\u7814\u7a76\u4eba\u5458", "method": "\u4f5c\u4e3aCONFEST 2025\u7684\u9644\u5c5e\u7814\u8ba8\u4f1a\uff0c\u5728\u4e39\u9ea6\u5965\u80e1\u65af\u4e3e\u529e", "result": "\u51fa\u7248\u4e86\u5305\u542b\u76f8\u5173\u7814\u7a76\u6210\u679c\u7684\u4f1a\u8bae\u8bba\u6587\u96c6", "conclusion": "\u8be5\u7814\u8ba8\u4f1a\u7cfb\u5217\u6301\u7eed\u4fc3\u8fdb\u5f62\u5f0f\u8bed\u4e49\u548c\u8ba1\u7b97\u6a21\u578b\u8868\u8fbe\u6027\u7814\u7a76\u9886\u57df\u7684\u4ea4\u6d41\u4e0e\u5408\u4f5c"}}
{"id": "2510.21903", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.21903", "abs": "https://arxiv.org/abs/2510.21903", "authors": ["Xuhui Zhou", "Valerie Chen", "Zora Zhiruo Wang", "Graham Neubig", "Maarten Sap", "Xingyao Wang"], "title": "TOM-SWE: User Mental Modeling For Software Engineering Agents", "comment": null, "summary": "Recent advances in coding agents have made them capable of planning, editing,\nrunning, and testing complex code bases. Despite their growing ability in\ncoding tasks, these systems still struggle to infer and track user intent,\nespecially when instructions are underspecified or context-dependent. To bridge\nthis gap, we introduce ToM-SWE, a dual-agent architecture that pairs a primary\nsoftware-engineering (SWE) agent with a lightweight theory-of-mind (ToM)\npartner agent dedicated to modeling the user's mental state. The ToM agent\ninfers user goals, constraints, and preferences from instructions and\ninteraction history, maintains a \\textbf{persistent memory} of the user, and\nprovides user-related suggestions to the SWE agent. In two software engineering\nbenchmarks (ambiguous SWE-bench and stateful SWE-bench), ToM-SWE improves task\nsuccess rates and user satisfaction. Notably, on the stateful SWE benchmark, a\nnewly introduced evaluation that provides agents with a user simulator along\nwith previous interaction histories, ToM-SWE achieves a substantially higher\ntask success rate of 59.7\\% compared to 18.1\\% for OpenHands, a\nstate-of-the-art SWE agent. Furthermore, in a three-week study with\nprofessional developers using ToM-SWE in their daily work, participants found\nit useful 86\\% of the time, underscoring the value of stateful user modeling\nfor practical coding agents.", "AI": {"tldr": "ToM-SWE\u662f\u4e00\u4e2a\u53cc\u4ee3\u7406\u67b6\u6784\uff0c\u5c06\u4e3b\u8981\u8f6f\u4ef6\u5de5\u7a0b\u4ee3\u7406\u4e0e\u8f7b\u91cf\u7ea7\u5fc3\u7406\u7406\u8bba\u4ee3\u7406\u914d\u5bf9\uff0c\u901a\u8fc7\u5efa\u6a21\u7528\u6237\u5fc3\u7406\u72b6\u6001\u6765\u63d0\u5347\u7f16\u7801\u4efb\u52a1\u7684\u6210\u529f\u7387\u548c\u7528\u6237\u6ee1\u610f\u5ea6\u3002", "motivation": "\u5f53\u524d\u7f16\u7801\u4ee3\u7406\u5728\u63a8\u65ad\u548c\u8ddf\u8e2a\u7528\u6237\u610f\u56fe\u65b9\u9762\u5b58\u5728\u56f0\u96be\uff0c\u7279\u522b\u662f\u5728\u6307\u4ee4\u4e0d\u660e\u786e\u6216\u4f9d\u8d56\u4e0a\u4e0b\u6587\u7684\u60c5\u51b5\u4e0b\u3002", "method": "\u91c7\u7528\u53cc\u4ee3\u7406\u67b6\u6784\uff1a\u4e00\u4e2a\u4e3b\u8981\u8f6f\u4ef6\u5de5\u7a0b\u4ee3\u7406\u8d1f\u8d23\u7f16\u7801\u4efb\u52a1\uff0c\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u5fc3\u7406\u7406\u8bba\u4ee3\u7406\u4e13\u95e8\u5efa\u6a21\u7528\u6237\u5fc3\u7406\u72b6\u6001\uff0c\u5305\u62ec\u63a8\u65ad\u7528\u6237\u76ee\u6807\u3001\u7ea6\u675f\u548c\u504f\u597d\uff0c\u5e76\u7ef4\u62a4\u7528\u6237\u7684\u6301\u4e45\u8bb0\u5fc6\u3002", "result": "\u5728\u4e24\u4e2a\u8f6f\u4ef6\u5de5\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cToM-SWE\u663e\u8457\u63d0\u9ad8\u4e86\u4efb\u52a1\u6210\u529f\u7387\u548c\u7528\u6237\u6ee1\u610f\u5ea6\u3002\u5728\u72b6\u6001\u5316SWE\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u4efb\u52a1\u6210\u529f\u7387\u4ece18.1%\u63d0\u5347\u523059.7%\u3002\u5728\u4e09\u5468\u7684\u4e13\u4e1a\u5f00\u53d1\u8005\u7814\u7a76\u4e2d\uff0c86%\u7684\u53c2\u4e0e\u8005\u8ba4\u4e3a\u5b83\u6709\u7528\u3002", "conclusion": "\u72b6\u6001\u5316\u7528\u6237\u5efa\u6a21\u5bf9\u5b9e\u7528\u7f16\u7801\u4ee3\u7406\u5177\u6709\u91cd\u8981\u4ef7\u503c\uff0c\u53cc\u4ee3\u7406\u67b6\u6784\u80fd\u6709\u6548\u63d0\u5347\u7f16\u7801\u4ee3\u7406\u7406\u89e3\u7528\u6237\u610f\u56fe\u7684\u80fd\u529b\u3002"}}
{"id": "2510.23413", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.23413", "abs": "https://arxiv.org/abs/2510.23413", "authors": ["Alessandro Di Giorgio", "Pawel Sobocinski", "Niels Voorneveld"], "title": "Parametric Iteration in Resource Theories", "comment": null, "summary": "Many algorithms are specified with respect to a fixed but unspecified\nparameter. Examples of this are especially common in cryptography, where\nprotocols often feature a security parameter such as the bit length of a secret\nkey.\n  Our aim is to capture this phenomenon in a more abstract setting. We focus on\nresource theories -- general calculi of processes with a string diagrammatic\nsyntax -- introducing a general parametric iteration construction. By\ninstantiating this construction within the Markov category of probabilistic\nBoolean circuits and equipping it with a suitable metric, we are able to\ncapture the notion of negligibility via asymptotic equivalence, in a\ncompositional way. This allows us to use diagrammatic reasoning to prove simple\ncryptographic theorems -- for instance, proving that guessing a randomly\ngenerated key has negligible success.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u53c2\u6570\u5316\u8fed\u4ee3\u6784\u9020\uff0c\u7528\u4e8e\u5728\u8d44\u6e90\u7406\u8bba\u4e2d\u6355\u83b7\u7b97\u6cd5\u4e2d\u7684\u56fa\u5b9a\u4f46\u672a\u6307\u5b9a\u53c2\u6570\uff08\u5982\u5bc6\u7801\u5b66\u4e2d\u7684\u5b89\u5168\u53c2\u6570\uff09\uff0c\u5e76\u901a\u8fc7\u5728\u6982\u7387\u5e03\u5c14\u7535\u8def\u7684\u9a6c\u5c14\u53ef\u592b\u8303\u7574\u4e2d\u5b9e\u4f8b\u5316\u8be5\u6784\u9020\uff0c\u4ee5\u7ec4\u5408\u65b9\u5f0f\u6355\u6349\u53ef\u5ffd\u7565\u6027\u6982\u5ff5\u3002", "motivation": "\u8bb8\u591a\u7b97\u6cd5\u90fd\u4f9d\u8d56\u4e8e\u56fa\u5b9a\u4f46\u672a\u6307\u5b9a\u7684\u53c2\u6570\uff0c\u8fd9\u5728\u5bc6\u7801\u5b66\u4e2d\u5c24\u4e3a\u5e38\u89c1\uff08\u5982\u5bc6\u94a5\u4f4d\u957f\u4f5c\u4e3a\u5b89\u5168\u53c2\u6570\uff09\u3002\u672c\u6587\u65e8\u5728\u5728\u66f4\u62bd\u8c61\u7684\u8bbe\u7f6e\u4e2d\u6355\u83b7\u8fd9\u4e00\u73b0\u8c61\uff0c\u7279\u522b\u662f\u5728\u8d44\u6e90\u7406\u8bba\u4e2d\u3002", "method": "\u5728\u8d44\u6e90\u7406\u8bba\u4e2d\u5f15\u5165\u901a\u7528\u7684\u53c2\u6570\u5316\u8fed\u4ee3\u6784\u9020\uff0c\u5e76\u5728\u6982\u7387\u5e03\u5c14\u7535\u8def\u7684\u9a6c\u5c14\u53ef\u592b\u8303\u7574\u4e2d\u5b9e\u4f8b\u5316\u8be5\u6784\u9020\uff0c\u914d\u5907\u9002\u5f53\u7684\u5ea6\u91cf\u6765\u901a\u8fc7\u6e10\u8fd1\u7b49\u4ef7\u6355\u6349\u53ef\u5ffd\u7565\u6027\u3002", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u4ee5\u7ec4\u5408\u65b9\u5f0f\u6355\u6349\u53ef\u5ffd\u7565\u6027\u6982\u5ff5\uff0c\u4f7f\u5f97\u80fd\u591f\u4f7f\u7528\u56fe\u793a\u63a8\u7406\u6765\u8bc1\u660e\u7b80\u5355\u7684\u5bc6\u7801\u5b66\u5b9a\u7406\uff0c\u4f8b\u5982\u8bc1\u660e\u731c\u6d4b\u968f\u673a\u751f\u6210\u5bc6\u94a5\u7684\u6210\u529f\u7387\u662f\u53ef\u5ffd\u7565\u7684\u3002", "conclusion": "\u63d0\u51fa\u7684\u53c2\u6570\u5316\u8fed\u4ee3\u6784\u9020\u4e3a\u5728\u8d44\u6e90\u7406\u8bba\u4e2d\u5904\u7406\u7b97\u6cd5\u53c2\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u62bd\u8c61\u6846\u67b6\uff0c\u7279\u522b\u662f\u5728\u5bc6\u7801\u5b66\u5e94\u7528\u4e2d\uff0c\u80fd\u591f\u901a\u8fc7\u56fe\u793a\u63a8\u7406\u8fdb\u884c\u5f62\u5f0f\u5316\u8bc1\u660e\u3002"}}
{"id": "2510.21933", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.21933", "abs": "https://arxiv.org/abs/2510.21933", "authors": ["Joao Correia", "Daniel Coutinho", "Marco Castelluccio", "Caio Barbosa", "Rafael de Mello", "Anita Sarma", "Alessandro Garcia", "Marco Gerosa", "Igor Steinmacher"], "title": "A Comparison of Conversational Models and Humans in Answering Technical Questions: the Firefox Case", "comment": "13 pages", "summary": "The use of Large Language Models (LLMs) to support tasks in software\ndevelopment has steadily increased over recent years. From assisting developers\nin coding activities to providing conversational agents that answer newcomers'\nquestions. In collaboration with the Mozilla Foundation, this study evaluates\nthe effectiveness of Retrieval-Augmented Generation (RAG) in assisting\ndevelopers within the Mozilla Firefox project. We conducted an empirical\nanalysis comparing responses from human developers, a standard GPT model, and a\nGPT model enhanced with RAG, using real queries from Mozilla's developer chat\nrooms. To ensure a rigorous evaluation, Mozilla experts assessed the responses\nbased on helpfulness, comprehensiveness, and conciseness. The results show that\nRAG-assisted responses were more comprehensive than human developers (62.50% to\n54.17%) and almost as helpful (75.00% to 79.17%), suggesting RAG's potential to\nenhance developer assistance. However, the RAG responses were not as concise\nand often verbose. The results show the potential to apply RAG-based tools to\nOpen Source Software (OSS) to minimize the load to core maintainers without\nlosing answer quality. Toning down retrieval mechanisms and making responses\neven shorter in the future would enhance developer assistance in massive\nprojects like Mozilla Firefox.", "AI": {"tldr": "\u8bc4\u4f30RAG\u5728Mozilla Firefox\u9879\u76ee\u4e2d\u534f\u52a9\u5f00\u53d1\u8005\u7684\u6548\u679c\uff0c\u53d1\u73b0RAG\u589e\u5f3a\u7684GPT\u6a21\u578b\u6bd4\u4eba\u7c7b\u5f00\u53d1\u8005\u63d0\u4f9b\u66f4\u5168\u9762\u7684\u56de\u7b54\uff0c\u5e2e\u52a9\u6027\u63a5\u8fd1\u4eba\u7c7b\uff0c\u4f46\u56de\u7b54\u4e0d\u591f\u7b80\u6d01\u3002", "motivation": "\u968f\u7740LLM\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4f7f\u7528\u589e\u52a0\uff0c\u9700\u8981\u8bc4\u4f30RAG\u6280\u672f\u5728\u771f\u5b9e\u5f00\u6e90\u9879\u76ee\u73af\u5883\u4e2d\u534f\u52a9\u5f00\u53d1\u8005\u7684\u6709\u6548\u6027\uff0c\u4ee5\u51cf\u8f7b\u6838\u5fc3\u7ef4\u62a4\u8005\u7684\u8d1f\u62c5\u3002", "method": "\u4e0eMozilla\u57fa\u91d1\u4f1a\u5408\u4f5c\uff0c\u5bf9\u6765\u81eaFirefox\u5f00\u53d1\u8005\u804a\u5929\u5ba4\u7684\u771f\u5b9e\u67e5\u8be2\u8fdb\u884c\u5b9e\u8bc1\u5206\u6790\uff0c\u6bd4\u8f83\u4eba\u7c7b\u5f00\u53d1\u8005\u3001\u6807\u51c6GPT\u6a21\u578b\u548cRAG\u589e\u5f3aGPT\u6a21\u578b\u7684\u56de\u7b54\u8d28\u91cf\u3002", "result": "RAG\u8f85\u52a9\u56de\u7b54\u6bd4\u4eba\u7c7b\u5f00\u53d1\u8005\u66f4\u5168\u9762\uff0862.50% vs 54.17%\uff09\uff0c\u5e2e\u52a9\u6027\u63a5\u8fd1\u4eba\u7c7b\uff0875.00% vs 79.17%\uff09\uff0c\u4f46\u4e0d\u591f\u7b80\u6d01\u4e14\u5197\u957f\u3002", "conclusion": "RAG\u5de5\u5177\u6709\u6f5c\u529b\u5e94\u7528\u4e8e\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5728\u4e0d\u635f\u5931\u56de\u7b54\u8d28\u91cf\u7684\u524d\u63d0\u4e0b\u51cf\u8f7b\u6838\u5fc3\u7ef4\u62a4\u8005\u8d1f\u62c5\uff0c\u672a\u6765\u9700\u8981\u4f18\u5316\u68c0\u7d22\u673a\u5236\u548c\u7f29\u77ed\u56de\u7b54\u957f\u5ea6\u3002"}}
{"id": "2510.23490", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.23490", "abs": "https://arxiv.org/abs/2510.23490", "authors": ["Jerzy Marcinkowski", "Piotr Ostropolski-Nalewaja"], "title": "On the entailment problem for DL-Lite$_{core}$ ontologies and conjunctive queries with negation", "comment": "Draft, no introduction and preliminaries", "summary": "We show that the entailment problem, for a given entailment problem for\nDL-Lite$_{core}$ ontology, and given conjunctive query with inequalities, is\nundecidable.\n  We also show that this problem remains undecidable if conjunctive queries\nwith safe negation are considered instead of conjunctive queries with\ninequalities.", "AI": {"tldr": "DL-Lite$_{core}$\u672c\u4f53\u8bba\u4e2d\uff0c\u5305\u542b\u4e0d\u7b49\u5f0f\u6216\u5b89\u5168\u5426\u5b9a\u7684\u5408\u53d6\u67e5\u8be2\u7684\u8574\u542b\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684", "motivation": "\u7814\u7a76DL-Lite$_{core}$\u672c\u4f53\u8bba\u4e2d\u590d\u6742\u67e5\u8be2\uff08\u5305\u542b\u4e0d\u7b49\u5f0f\u6216\u5b89\u5168\u5426\u5b9a\uff09\u7684\u8574\u542b\u95ee\u9898\u7684\u53ef\u5224\u5b9a\u6027", "method": "\u901a\u8fc7\u7406\u8bba\u8bc1\u660e\u548c\u903b\u8f91\u63a8\u7406\uff0c\u5206\u6790DL-Lite$_{core}$\u672c\u4f53\u8bba\u4e2d\u5408\u53d6\u67e5\u8be2\u8574\u542b\u95ee\u9898\u7684\u8ba1\u7b97\u590d\u6742\u6027", "result": "\u8bc1\u660e\u4e86\u5bf9\u4e8eDL-Lite$_{core}$\u672c\u4f53\u8bba\uff0c\u5305\u542b\u4e0d\u7b49\u5f0f\u7684\u5408\u53d6\u67e5\u8be2\u8574\u542b\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff1b\u540c\u6837\uff0c\u5305\u542b\u5b89\u5168\u5426\u5b9a\u7684\u5408\u53d6\u67e5\u8be2\u8574\u542b\u95ee\u9898\u4e5f\u662f\u4e0d\u53ef\u5224\u5b9a\u7684", "conclusion": "\u5728DL-Lite$_{core}$\u672c\u4f53\u8bba\u6846\u67b6\u4e0b\uff0c\u5904\u7406\u5305\u542b\u4e0d\u7b49\u5f0f\u6216\u5b89\u5168\u5426\u5b9a\u7684\u5408\u53d6\u67e5\u8be2\u7684\u8574\u542b\u95ee\u9898\u662f\u4e0d\u53ef\u5224\u5b9a\u7684"}}
{"id": "2510.21966", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.21966", "abs": "https://arxiv.org/abs/2510.21966", "authors": ["Musengamana Jean de Dieu", "Ruiyin Li", "Peng Liang", "Mojtaba Shahin", "Muhammad Waseem", "Arif Ali Khan", "Bangchao Wang", "Mst Shamima Aktar"], "title": "ArchISMiner: A Framework for Automatic Mining of Architectural Issue-Solution Pairs from Online Developer Communities", "comment": "42 pages, 14 images, 6 tables, Manuscript submitted to a Journal\n  (2025)", "summary": "Stack Overflow (SO), a leading online community forum, is a rich source of\nsoftware development knowledge. However, locating architectural knowledge, such\nas architectural solutions remains challenging due to the overwhelming volume\nof unstructured content and fragmented discussions. Developers must manually\nsift through posts to find relevant architectural insights, which is\ntime-consuming and error-prone. This study introduces ArchISMiner, a framework\nfor mining architectural knowledge from SO. The framework comprises two\ncomplementary components: ArchPI and ArchISPE. ArchPI trains and evaluates\nmultiple models, including conventional ML/DL models, Pre-trained Language\nModels (PLMs), and Large Language Models (LLMs), and selects the\nbest-performing model to automatically identify Architecture-Related Posts\n(ARPs) among programming-related discussions. ArchISPE employs an indirect\nsupervised approach that leverages diverse features, including BERT embeddings\nand local TextCNN features, to extract architectural issue-solution pairs. Our\nevaluation shows that the best model in ArchPI achieves an F1-score of 0.960 in\nARP detection, and ArchISPE outperforms baselines in both SE and NLP fields,\nachieving F1-scores of 0.883 for architectural issues and 0.894 for solutions.\nA user study further validated the quality (e.g., relevance and usefulness) of\nthe identified ARPs and the extracted issue-solution pairs. Moreover, we\napplied ArchISMiner to three additional forums, releasing a dataset of over 18K\narchitectural issue-solution pairs. Overall, ArchISMiner can help architects\nand developers identify ARPs and extract succinct, relevant, and useful\narchitectural knowledge from developer communities more accurately and\nefficiently. The replication package of this study has been provided at\nhttps://github.com/JeanMusenga/ArchISPE", "AI": {"tldr": "ArchISMiner\u6846\u67b6\u7528\u4e8e\u4eceStack Overflow\u7b49\u5f00\u53d1\u8005\u793e\u533a\u6316\u6398\u67b6\u6784\u77e5\u8bc6\uff0c\u5305\u542bArchPI\u7ec4\u4ef6\u8bc6\u522b\u67b6\u6784\u76f8\u5173\u5e16\u5b50\uff0cArchISPE\u7ec4\u4ef6\u63d0\u53d6\u67b6\u6784\u95ee\u9898-\u89e3\u51b3\u65b9\u6848\u5bf9\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u67b6\u6784\u77e5\u8bc6\u6316\u6398\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002", "motivation": "Stack Overflow\u7b49\u8bba\u575b\u5305\u542b\u4e30\u5bcc\u7684\u8f6f\u4ef6\u5f00\u53d1\u77e5\u8bc6\uff0c\u4f46\u67b6\u6784\u77e5\u8bc6\u56e0\u5185\u5bb9\u91cf\u5927\u4e14\u5206\u6563\u800c\u96be\u4ee5\u5b9a\u4f4d\uff0c\u5f00\u53d1\u8005\u9700\u8981\u624b\u52a8\u7b5b\u9009\u5e16\u5b50\uff0c\u8fc7\u7a0b\u8017\u65f6\u4e14\u5bb9\u6613\u51fa\u9519\u3002", "method": "ArchISMiner\u6846\u67b6\u5305\u542b\u4e24\u4e2a\u7ec4\u4ef6\uff1aArchPI\u4f7f\u7528ML/DL\u6a21\u578b\u3001\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u548cLLM\u8bc6\u522b\u67b6\u6784\u76f8\u5173\u5e16\u5b50\uff1bArchISPE\u91c7\u7528\u95f4\u63a5\u76d1\u7763\u65b9\u6cd5\uff0c\u7ed3\u5408BERT\u5d4c\u5165\u548cTextCNN\u7279\u5f81\u63d0\u53d6\u67b6\u6784\u95ee\u9898-\u89e3\u51b3\u65b9\u6848\u5bf9\u3002", "result": "ArchPI\u5728\u67b6\u6784\u76f8\u5173\u5e16\u5b50\u68c0\u6d4b\u4e2dF1-score\u8fbe\u52300.960\uff0cArchISPE\u5728\u67b6\u6784\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\u63d0\u53d6\u4e2dF1-score\u5206\u522b\u8fbe\u52300.883\u548c0.894\uff0c\u4f18\u4e8eSE\u548cNLP\u9886\u57df\u7684\u57fa\u7ebf\u65b9\u6cd5\u3002\u7528\u6237\u7814\u7a76\u9a8c\u8bc1\u4e86\u63d0\u53d6\u5185\u5bb9\u7684\u8d28\u91cf\u3002", "conclusion": "ArchISMiner\u80fd\u5e2e\u52a9\u67b6\u6784\u5e08\u548c\u5f00\u53d1\u8005\u66f4\u51c6\u786e\u9ad8\u6548\u5730\u4ece\u5f00\u53d1\u8005\u793e\u533a\u8bc6\u522b\u67b6\u6784\u76f8\u5173\u5e16\u5b50\u548c\u63d0\u53d6\u76f8\u5173\u6709\u7528\u7684\u67b6\u6784\u77e5\u8bc6\uff0c\u5e76\u5df2\u5728\u4e09\u4e2a\u989d\u5916\u8bba\u575b\u4e0a\u5e94\u7528\uff0c\u53d1\u5e03\u4e86\u5305\u542b18K+\u67b6\u6784\u95ee\u9898-\u89e3\u51b3\u65b9\u6848\u5bf9\u7684\u6570\u636e\u96c6\u3002"}}
{"id": "2510.23552", "categories": ["cs.LO", "math.PR", "03B45, 03B52, 68Q85", "F.4.1"], "pdf": "https://arxiv.org/pdf/2510.23552", "abs": "https://arxiv.org/abs/2510.23552", "authors": ["Paul Wild", "Lutz Schr\u00f6der", "Karla Messing", "Barbara K\u00f6nig", "Jonas Forster"], "title": "Generalized Kantorovich-Rubinstein Duality beyond Hausdorff and Kantorovich", "comment": null, "summary": "The classical Kantorovich-Rubinstein duality guarantees coincidence between\nmetrics on the space of probability distributions defined on the one hand via\ntransport plans (couplings) and on the other hand via price functions. Both\nconstructions have been lifted to the level of generality of set functors, with\nthe coupling-based construction referred to as the Wasserstein lifting, and the\nprice-function-based construction as the Kantorovich lifting, both based on a\nchoice of quantitative modalities for the given functor. It is known that every\nWasserstein lifting can be expressed as a Kantorovich lifting; however, the\nlatter in general needs to use additional modalities. We give an example\nshowing that this cannot be avoided in general. We refer to cases in which the\nsame modalities can be used as satisfying the generalized\nKantorovich-Rubinstein duality. We establish the generalized\nKantorovich-Rubinstein duality in this sense for two important cases: The\nL\\'evy-Prokhorov distance on distributions, which finds wide-spread\napplications in machine learning due to its favourable stability properties,\nand the standard metric on convex sets of distributions that arises by\ncombining the Hausdorff and Wasserstein distances.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86Kantorovich-Rubinstein\u5bf9\u5076\u5728\u96c6\u5408\u51fd\u5b50\u5c42\u9762\u4e0a\u7684\u63a8\u5e7f\uff0c\u8bc1\u660e\u4e86\u5bf9\u4e8e\u67d0\u4e9b\u91cd\u8981\u60c5\u51b5\uff08\u5982L\u00e9vy-Prokhorov\u8ddd\u79bb\u548c\u51f8\u5206\u5e03\u96c6\u7684\u6807\u51c6\u5ea6\u91cf\uff09\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u6a21\u6001\u6ee1\u8db3\u5e7f\u4e49\u5bf9\u5076\u6027\u3002", "motivation": "\u7ecf\u5178\u7684Kantorovich-Rubinstein\u5bf9\u5076\u5728\u6982\u7387\u5206\u5e03\u7a7a\u95f4\u4e0a\u5efa\u7acb\u4e86\u57fa\u4e8e\u4f20\u8f93\u8ba1\u5212\u548c\u4ef7\u683c\u51fd\u6570\u7684\u5ea6\u91cf\u7b49\u4ef7\u6027\uff0c\u4f46\u5c06\u5176\u63a8\u5e7f\u5230\u96c6\u5408\u51fd\u5b50\u5c42\u9762\u65f6\uff0c\u901a\u5e38\u9700\u8981\u4f7f\u7528\u989d\u5916\u6a21\u6001\u3002\u672c\u6587\u65e8\u5728\u786e\u5b9a\u54ea\u4e9b\u91cd\u8981\u6848\u4f8b\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u6a21\u6001\u6ee1\u8db3\u5e7f\u4e49\u5bf9\u5076\u6027\u3002", "method": "\u901a\u8fc7\u7406\u8bba\u5206\u6790\uff0c\u7814\u7a76\u4e86Wasserstein\u63d0\u5347\u548cKantorovich\u63d0\u5347\u5728\u96c6\u5408\u51fd\u5b50\u5c42\u9762\u4e0a\u7684\u5173\u7cfb\uff0c\u5e76\u7ed9\u51fa\u4e86\u5177\u4f53\u4f8b\u5b50\u8bf4\u660e\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u6a21\u6001\u9700\u6c42\u5dee\u5f02\u3002", "result": "\u8bc1\u660e\u4e86L\u00e9vy-Prokhorov\u8ddd\u79bb\u548c\u51f8\u5206\u5e03\u96c6\u7684\u6807\u51c6\u5ea6\u91cf\uff08\u7ed3\u5408Hausdorff\u548cWasserstein\u8ddd\u79bb\uff09\u6ee1\u8db3\u5e7f\u4e49Kantorovich-Rubinstein\u5bf9\u5076\u6027\uff0c\u5373\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u6a21\u6001\u3002", "conclusion": "\u867d\u7136\u4e00\u822c\u60c5\u51b5\u4e0bWasserstein\u63d0\u5347\u9700\u8981\u989d\u5916\u6a21\u6001\u624d\u80fd\u8868\u793a\u4e3aKantorovich\u63d0\u5347\uff0c\u4f46\u5bf9\u4e8e\u67d0\u4e9b\u91cd\u8981\u5e94\u7528\u573a\u666f\uff08\u5982L\u00e9vy-Prokhorov\u8ddd\u79bb\u548c\u51f8\u5206\u5e03\u96c6\u5ea6\u91cf\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u6a21\u6001\u5b9e\u73b0\u5e7f\u4e49\u5bf9\u5076\u6027\u3002"}}
{"id": "2510.21993", "categories": ["cs.SE", "physics.comp-ph"], "pdf": "https://arxiv.org/pdf/2510.21993", "abs": "https://arxiv.org/abs/2510.21993", "authors": ["Yupeng Qi", "Ran Xu", "Xu Chu"], "title": "FeaGPT: an End-to-End agentic-AI for Finite Element Analysis", "comment": null, "summary": "Large language models (LLMs) are establishing new paradigms for engineering\napplications by enabling natural language control of complex computational\nworkflows. This paper introduces FeaGPT, the first framework to achieve\ncomplete geometry-mesh-simulation workflows through conversational interfaces.\nUnlike existing tools that automate individual FEA components, FeaGPT\nimplements a fully integrated Geometry-Mesh-Simulation-Analysis (GMSA) pipeline\nthat transforms engineering specifications into validated computational results\nwithout manual intervention. The system interprets engineering intent,\nautomatically generates physics-aware adaptive meshes, configures complete FEA\nsimulations with proper boundary condition inference, and performs\nmulti-objective analysis through closed-loop iteration.\n  Experimental validation confirms complete end-to-end automation capability.\nIndustrial turbocharger cases (7-blade compressor and 12-blade turbine at\n\\SI{110000}{rpm}) demonstrate the system successfully transforms natural\nlanguage specifications into validated CalculiX simulations, producing\nphysically realistic results for rotating machinery analysis. Additional\nvalidation through 432 NACA airfoil configurations confirms scalability for\nparametric design exploration. These results demonstrate that natural language\ninterfaces can effectively democratize access to advanced computational\nengineering tools while preserving analytical rigor.", "AI": {"tldr": "FeaGPT\u662f\u9996\u4e2a\u901a\u8fc7\u5bf9\u8bdd\u754c\u9762\u5b9e\u73b0\u5b8c\u6574\u51e0\u4f55-\u7f51\u683c-\u4eff\u771f\u5de5\u4f5c\u6d41\u7a0b\u7684\u6846\u67b6\uff0c\u80fd\u591f\u5c06\u5de5\u7a0b\u89c4\u8303\u8f6c\u5316\u4e3a\u9a8c\u8bc1\u7684\u8ba1\u7b97\u7ed3\u679c\u800c\u65e0\u9700\u4eba\u5de5\u5e72\u9884\u3002", "motivation": "\u73b0\u6709\u5de5\u5177\u4ec5\u81ea\u52a8\u5316\u5355\u4e2aFEA\u7ec4\u4ef6\uff0c\u9700\u8981\u5b9e\u73b0\u5b8c\u5168\u96c6\u6210\u7684GMSA\uff08\u51e0\u4f55-\u7f51\u683c-\u4eff\u771f-\u5206\u6790\uff09\u6d41\u7a0b\uff0c\u901a\u8fc7\u81ea\u7136\u8bed\u8a00\u63a5\u53e3\u4f7f\u9ad8\u7ea7\u8ba1\u7b97\u5de5\u7a0b\u5de5\u5177\u6c11\u4e3b\u5316\u3002", "method": "\u7cfb\u7edf\u89e3\u91ca\u5de5\u7a0b\u610f\u56fe\uff0c\u81ea\u52a8\u751f\u6210\u7269\u7406\u611f\u77e5\u7684\u81ea\u9002\u5e94\u7f51\u683c\uff0c\u914d\u7f6e\u5b8c\u6574\u7684FEA\u4eff\u771f\u5e76\u8fdb\u884c\u8fb9\u754c\u6761\u4ef6\u63a8\u65ad\uff0c\u901a\u8fc7\u95ed\u73af\u8fed\u4ee3\u6267\u884c\u591a\u76ee\u6807\u5206\u6790\u3002", "result": "\u5b9e\u9a8c\u9a8c\u8bc1\u663e\u793a\u5177\u5907\u5b8c\u6574\u7684\u7aef\u5230\u7aef\u81ea\u52a8\u5316\u80fd\u529b\uff0c\u5de5\u4e1a\u6da1\u8f6e\u589e\u538b\u5668\u6848\u4f8b\u6210\u529f\u5c06\u81ea\u7136\u8bed\u8a00\u89c4\u8303\u8f6c\u5316\u4e3a\u9a8c\u8bc1\u7684CalculiX\u4eff\u771f\uff0c432\u4e2aNACA\u7ffc\u578b\u914d\u7f6e\u9a8c\u8bc1\u4e86\u53c2\u6570\u5316\u8bbe\u8ba1\u63a2\u7d22\u7684\u53ef\u6269\u5c55\u6027\u3002", "conclusion": "\u81ea\u7136\u8bed\u8a00\u63a5\u53e3\u80fd\u591f\u6709\u6548\u6c11\u4e3b\u5316\u9ad8\u7ea7\u8ba1\u7b97\u5de5\u7a0b\u5de5\u5177\u7684\u8bbf\u95ee\uff0c\u540c\u65f6\u4fdd\u6301\u5206\u6790\u4e25\u8c28\u6027\u3002"}}
{"id": "2510.22224", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.LO", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.22224", "abs": "https://arxiv.org/abs/2510.22224", "authors": ["Guan-Yan Yang", "Farn Wang"], "title": "Taming Silent Failures: A Framework for Verifiable AI Reliability", "comment": "This preprint has been accepted by IEEE Reliability Magazine. 10\n  pages, 3 figures", "summary": "The integration of Artificial Intelligence (AI) into safety-critical systems\nintroduces a new reliability paradigm: silent failures, where AI produces\nconfident but incorrect outputs that can be dangerous. This paper introduces\nthe Formal Assurance and Monitoring Environment (FAME), a novel framework that\nconfronts this challenge. FAME synergizes the mathematical rigor of offline\nformal synthesis with the vigilance of online runtime monitoring to create a\nverifiable safety net around opaque AI components. We demonstrate its efficacy\nin an autonomous vehicle perception system, where FAME successfully detected\n93.5% of critical safety violations that were otherwise silent. By\ncontextualizing our framework within the ISO 26262 and ISO/PAS 8800 standards,\nwe provide reliability engineers with a practical, certifiable pathway for\ndeploying trustworthy AI. FAME represents a crucial shift from accepting\nprobabilistic performance to enforcing provable safety in next-generation\nsystems.", "AI": {"tldr": "FAME\u6846\u67b6\u7ed3\u5408\u79bb\u7ebf\u5f62\u5f0f\u5316\u5408\u6210\u548c\u5728\u7ebf\u8fd0\u884c\u65f6\u76d1\u63a7\uff0c\u4e3a\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u4e2d\u7684AI\u7ec4\u4ef6\u63d0\u4f9b\u53ef\u9a8c\u8bc1\u7684\u5b89\u5168\u4fdd\u969c\uff0c\u5728\u81ea\u52a8\u9a7e\u9a76\u611f\u77e5\u7cfb\u7edf\u4e2d\u6210\u529f\u68c0\u6d4b\u523093.5%\u7684\u5173\u952e\u5b89\u5168\u8fdd\u89c4\u3002", "motivation": "AI\u5728\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u4e2d\u5b58\u5728\u9759\u9ed8\u6545\u969c\u98ce\u9669\uff0c\u5373AI\u4ea7\u751f\u81ea\u4fe1\u4f46\u9519\u8bef\u7684\u8f93\u51fa\uff0c\u8fd9\u53ef\u80fd\u5e26\u6765\u5371\u9669\u3002\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u786e\u4fddAI\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u5b89\u5168\u6027\u3002", "method": "FAME\u6846\u67b6\u5c06\u79bb\u7ebf\u5f62\u5f0f\u5316\u5408\u6210\u7684\u6570\u5b66\u4e25\u8c28\u6027\u4e0e\u5728\u7ebf\u8fd0\u884c\u65f6\u76d1\u63a7\u7684\u8b66\u60d5\u6027\u76f8\u7ed3\u5408\uff0c\u4e3a\u4e0d\u900f\u660e\u7684AI\u7ec4\u4ef6\u521b\u5efa\u53ef\u9a8c\u8bc1\u7684\u5b89\u5168\u7f51\u3002", "result": "\u5728\u81ea\u52a8\u9a7e\u9a76\u611f\u77e5\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528\u663e\u793a\uff0cFAME\u6210\u529f\u68c0\u6d4b\u523093.5%\u7684\u5173\u952e\u5b89\u5168\u8fdd\u89c4\uff0c\u8fd9\u4e9b\u8fdd\u89c4\u539f\u672c\u662f\u9759\u9ed8\u7684\u3002", "conclusion": "FAME\u4ee3\u8868\u4e86\u4ece\u63a5\u53d7\u6982\u7387\u6027\u80fd\u5230\u5f3a\u5236\u6267\u884c\u53ef\u8bc1\u660e\u5b89\u5168\u7684\u5173\u952e\u8f6c\u53d8\uff0c\u4e3a\u90e8\u7f72\u53ef\u4fe1AI\u63d0\u4f9b\u4e86\u5b9e\u7528\u4e14\u53ef\u8ba4\u8bc1\u7684\u9014\u5f84\uff0c\u7b26\u5408ISO 26262\u548cISO/PAS 8800\u6807\u51c6\u3002"}}
{"id": "2510.22003", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.22003", "abs": "https://arxiv.org/abs/2510.22003", "authors": ["Stefan Julian Kooy", "Jean Paul Sebastian Piest", "Rob Henk Bemthuis"], "title": "Impact and Implications of Generative AI for Enterprise Architects in Agile Environments: A Systematic Literature Review", "comment": "17 pages, 1 figure, 5 tables; to appear in Enterprise Design,\n  Operations, and Computing. EDOC 2025 Workshops, Lecture Notes in Business\n  Information Processing (LNBIP), Springer, 2025. Part of 29th International\n  Conference on Enterprise Design, Operations, and Computing (EDOC)", "summary": "Generative AI (GenAI) is reshaping enterprise architecture work in agile\nsoftware organizations, yet evidence on its effects remains scattered. We\nreport a systematic literature review (SLR), following established SLR\nprotocols of Kitchenham and PRISMA, of 1,697 records, yielding 33 studies\nacross enterprise, solution, domain, business, and IT architect roles. GenAI\nmost consistently supports (i) design ideation and trade-off exploration; (ii)\nrapid creation and refinement of artifacts (e.g., code, models, documentation);\nand (iii) architectural decision support and knowledge retrieval. Reported\nrisks include opacity and bias, contextually incorrect outputs leading to\nrework, privacy and compliance concerns, and social loafing. We also identify\nemerging skills and competencies, including prompt engineering, model\nevaluation, and professional oversight, and organizational enablers around\nreadiness and adaptive governance. The review contributes with (1) a mapping of\nGenAI use cases and risks in agile architecting, (2) implications for\ncapability building and governance, and (3) an initial research agenda on\nhuman-AI collaboration in architecture. Overall, the findings inform\nresponsible adoption of GenAI that accelerates digital transformation while\nsafeguarding architectural integrity.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u7cfb\u7edf\u6587\u732e\u7efc\u8ff0\u5206\u6790\u4e86\u751f\u6210\u5f0fAI\u5728\u654f\u6377\u8f6f\u4ef6\u7ec4\u7ec7\u4f01\u4e1a\u67b6\u6784\u5de5\u4f5c\u4e2d\u7684\u5f71\u54cd\uff0c\u8bc6\u522b\u4e86\u4e3b\u8981\u5e94\u7528\u573a\u666f\u3001\u98ce\u9669\u3001\u6280\u80fd\u9700\u6c42\u548c\u6cbb\u7406\u8981\u6c42\u3002", "motivation": "\u751f\u6210\u5f0fAI\u6b63\u5728\u91cd\u5851\u4f01\u4e1a\u67b6\u6784\u5de5\u4f5c\uff0c\u4f46\u76f8\u5173\u8bc1\u636e\u5206\u6563\uff0c\u9700\u8981\u7cfb\u7edf\u68b3\u7406\u5176\u5f71\u54cd\u3001\u98ce\u9669\u548c\u673a\u9047\u3002", "method": "\u91c7\u7528Kitchenham\u548cPRISMA\u534f\u8bae\u8fdb\u884c\u7cfb\u7edf\u6587\u732e\u7efc\u8ff0\uff0c\u5206\u6790\u4e861,697\u6761\u8bb0\u5f55\u4e2d\u768433\u9879\u7814\u7a76\u3002", "result": "\u53d1\u73b0GenAI\u4e3b\u8981\u652f\u6301\u8bbe\u8ba1\u6784\u601d\u3001\u5de5\u4ef6\u521b\u5efa\u548c\u51b3\u7b56\u652f\u6301\uff0c\u540c\u65f6\u5b58\u5728\u900f\u660e\u5ea6\u3001\u504f\u89c1\u3001\u9690\u79c1\u7b49\u98ce\u9669\uff0c\u9700\u8981\u65b0\u7684\u6280\u80fd\u548c\u7ec4\u7ec7\u80fd\u529b\u3002", "conclusion": "\u7814\u7a76\u4e3a\u8d1f\u8d23\u4efb\u5730\u91c7\u7528GenAI\u63d0\u4f9b\u4e86\u6307\u5bfc\uff0c\u65e2\u80fd\u52a0\u901f\u6570\u5b57\u5316\u8f6c\u578b\uff0c\u53c8\u80fd\u4fdd\u969c\u67b6\u6784\u5b8c\u6574\u6027\u3002"}}
{"id": "2510.22210", "categories": ["cs.SE", "cs.AI", "D.2.5"], "pdf": "https://arxiv.org/pdf/2510.22210", "abs": "https://arxiv.org/abs/2510.22210", "authors": ["Gwihwan Go", "Quan Zhang", "Chijin Zhou", "Zhao Wei", "Yu Jiang"], "title": "LSPRAG: LSP-Guided RAG for Language-Agnostic Real-Time Unit Test Generation", "comment": "13pages, 6 figures", "summary": "Automated unit test generation is essential for robust software development,\nyet existing approaches struggle to generalize across multiple programming\nlanguages and operate within real-time development. While Large Language Models\n(LLMs) offer a promising solution, their ability to generate high coverage test\ncode depends on prompting a concise context of the focal method. Current\nsolutions, such as Retrieval-Augmented Generation, either rely on imprecise\nsimilarity-based searches or demand the creation of costly, language-specific\nstatic analysis pipelines. To address this gap, we present LSPRAG, a framework\nfor concise-context retrieval tailored for real-time, language-agnostic unit\ntest generation. LSPRAG leverages off-the-shelf Language Server Protocol (LSP)\nback-ends to supply LLMs with precise symbol definitions and references in real\ntime. By reusing mature LSP servers, LSPRAG provides an LLM with language-aware\ncontext retrieval, requiring minimal per-language engineering effort. We\nevaluated LSPRAG on open-source projects spanning Java, Go, and Python.\nCompared to the best performance of baselines, LSPRAG increased line coverage\nby up to 174.55% for Golang, 213.31% for Java, and 31.57% for Python.", "AI": {"tldr": "LSPRAG\u662f\u4e00\u4e2a\u5229\u7528\u8bed\u8a00\u670d\u52a1\u5668\u534f\u8bae(LSP)\u4e3aLLM\u63d0\u4f9b\u7cbe\u786e\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u5b9e\u65f6\u3001\u8bed\u8a00\u65e0\u5173\u7684\u5355\u5143\u6d4b\u8bd5\u751f\u6210\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6d4b\u8bd5\u8986\u76d6\u7387\u3002", "motivation": "\u73b0\u6709\u7684\u5355\u5143\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\u96be\u4ee5\u8de8\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u6cdb\u5316\uff0c\u4e14\u5728\u5b9e\u65f6\u5f00\u53d1\u73af\u5883\u4e2d\u8868\u73b0\u4e0d\u4f73\u3002\u867d\u7136LLM\u6709\u6f5c\u529b\uff0c\u4f46\u751f\u6210\u9ad8\u8986\u76d6\u7387\u6d4b\u8bd5\u4ee3\u7801\u9700\u8981\u7cbe\u786e\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002", "method": "LSPRAG\u6846\u67b6\u5229\u7528\u73b0\u6210\u7684LSP\u540e\u7aef\uff0c\u4e3aLLM\u5b9e\u65f6\u63d0\u4f9b\u7cbe\u786e\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528\uff0c\u5b9e\u73b0\u8bed\u8a00\u611f\u77e5\u7684\u4e0a\u4e0b\u6587\u68c0\u7d22\uff0c\u65e0\u9700\u4e3a\u6bcf\u79cd\u8bed\u8a00\u6784\u5efa\u6602\u8d35\u7684\u9759\u6001\u5206\u6790\u6d41\u6c34\u7ebf\u3002", "result": "\u5728Java\u3001Go\u548cPython\u7684\u5f00\u6e90\u9879\u76ee\u8bc4\u4f30\u4e2d\uff0cLSPRAG\u76f8\u6bd4\u57fa\u7ebf\u6700\u4f73\u6027\u80fd\uff0c\u5c06\u884c\u8986\u76d6\u7387\u63d0\u9ad8\u4e86\uff1aGo\u8fbe174.55%\uff0cJava\u8fbe213.31%\uff0cPython\u8fbe31.57%\u3002", "conclusion": "LSPRAG\u901a\u8fc7\u91cd\u7528\u6210\u719f\u7684LSP\u670d\u52a1\u5668\uff0c\u4e3aLLM\u63d0\u4f9b\u8bed\u8a00\u611f\u77e5\u7684\u4e0a\u4e0b\u6587\u68c0\u7d22\uff0c\u663e\u8457\u63d0\u5347\u4e86\u8de8\u8bed\u8a00\u5355\u5143\u6d4b\u8bd5\u751f\u6210\u7684\u8986\u76d6\u7387\u548c\u6548\u7387\uff0c\u540c\u65f6\u6700\u5c0f\u5316\u4e86\u6bcf\u79cd\u8bed\u8a00\u7684\u5de5\u7a0b\u6295\u5165\u3002"}}
{"id": "2510.22249", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22249", "abs": "https://arxiv.org/abs/2510.22249", "authors": ["Ibuki Nakamura", "Yutaro Kashiwa", "Bin Lin", "Hajimu Iida"], "title": "Understanding Self-Admitted Technical Debt in Test Code: An Empirical Study", "comment": null, "summary": "Developers often opt for easier but non-optimal implementation to meet\ndeadlines or create rapid prototypes, leading to additional effort known as\ntechnical debt to improve the code later. Oftentimes, developers explicitly\ndocument the technical debt in code comments, referred to as Self-Admitted\nTechnical Debt (SATD). Numerous researchers have investigated the impact of\nSATD on different aspects of software quality and development processes.\nHowever, most of these studies focus on SATD in production code, often\noverlooking SATD in the test code or assuming that it shares similar\ncharacteristics with SATD in production code. In fact, a significant amount of\nSATD is also present in the test code, with many instances not fitting into\nexisting categories for the production code. This study aims to fill this gap\nand disclose the nature of SATD in the test code by examining its distribution\nand types. Moreover, the relation between its presence and test quality is also\nanalyzed. Our empirical study, involving 17,766 SATD comments (14,987 from\nproduction code, 2,779 from test code) collected from 50 repositories,\ndemonstrates that while SATD widely exists in test code, it is not directly\nassociated with test smells. Our study also presents comprehensive categories\nof SATD types in the test code, and machine learning models are developed to\nautomatically classify SATD comments based on their types for easier\nmanagement. Our results show that the CodeBERT-based model outperforms other\nmachine learning models in terms of recall and F1-score. However, the\nperformance varies on different types of SATD.", "AI": {"tldr": "\u672c\u7814\u7a76\u5206\u6790\u4e86\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u81ea\u627f\u8ba4\u6280\u672f\u503a\u52a1(SATD)\uff0c\u53d1\u73b0\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684SATD\u4e0e\u751f\u4ea7\u4ee3\u7801\u4e2d\u7684\u7279\u5f81\u4e0d\u540c\uff0c\u4e14\u4e0e\u6d4b\u8bd5\u5f02\u5473\u65e0\u76f4\u63a5\u5173\u8054\u3002\u7814\u7a76\u63d0\u51fa\u4e86\u6d4b\u8bd5\u4ee3\u7801SATD\u7684\u5206\u7c7b\u4f53\u7cfb\uff0c\u5e76\u5f00\u53d1\u4e86\u57fa\u4e8eCodeBERT\u7684\u81ea\u52a8\u5206\u7c7b\u6a21\u578b\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u5173\u6ce8\u751f\u4ea7\u4ee3\u7801\u4e2d\u7684\u6280\u672f\u503a\u52a1\uff0c\u800c\u5ffd\u89c6\u4e86\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684SATD\u3002\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u5b58\u5728\u5927\u91cf\u4e0d\u7b26\u5408\u751f\u4ea7\u4ee3\u7801\u5206\u7c7b\u7684SATD\u5b9e\u4f8b\uff0c\u9700\u8981\u4e13\u95e8\u7814\u7a76\u5176\u7279\u6027\u548c\u5f71\u54cd\u3002", "method": "\u5bf950\u4e2a\u4ee3\u7801\u5e93\u4e2d\u768417,766\u4e2aSATD\u6ce8\u91ca(14,987\u4e2a\u6765\u81ea\u751f\u4ea7\u4ee3\u7801\uff0c2,779\u4e2a\u6765\u81ea\u6d4b\u8bd5\u4ee3\u7801)\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u5206\u6790SATD\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u5206\u5e03\u3001\u7c7b\u578b\u53ca\u5176\u4e0e\u6d4b\u8bd5\u8d28\u91cf\u7684\u5173\u7cfb\uff0c\u5e76\u5f00\u53d1\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8fdb\u884c\u81ea\u52a8\u5206\u7c7b\u3002", "result": "\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u5e7f\u6cdb\u5b58\u5728SATD\uff0c\u4f46\u4e0e\u6d4b\u8bd5\u5f02\u5473\u65e0\u76f4\u63a5\u5173\u8054\u3002\u57fa\u4e8eCodeBERT\u7684\u6a21\u578b\u5728\u53ec\u56de\u7387\u548cF1\u5206\u6570\u4e0a\u8868\u73b0\u6700\u4f73\uff0c\u4f46\u5728\u4e0d\u540c\u7c7b\u578b\u7684SATD\u4e0a\u6027\u80fd\u5b58\u5728\u5dee\u5f02\u3002", "conclusion": "\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684SATD\u5177\u6709\u72ec\u7279\u7279\u5f81\uff0c\u9700\u8981\u4e13\u95e8\u7684\u5206\u7c7b\u548c\u7ba1\u7406\u65b9\u6cd5\u3002\u57fa\u4e8eCodeBERT\u7684\u81ea\u52a8\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u6709\u6548\u8bc6\u522b\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684SATD\u7c7b\u578b\uff0c\u4e3a\u6280\u672f\u503a\u52a1\u7ba1\u7406\u63d0\u4f9b\u652f\u6301\u3002"}}
{"id": "2510.22254", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22254", "abs": "https://arxiv.org/abs/2510.22254", "authors": ["Eric W. Bridgeford", "Iain Campbell", "Zijao Chen", "Zhicheng Lin", "Harrison Ritz", "Joachim Vandekerckhove", "Russell A. Poldrack"], "title": "Ten Simple Rules for AI-Assisted Coding in Science", "comment": "9 pages of content; 1 table; 1 page appendix", "summary": "While AI coding tools have demonstrated potential to accelerate software\ndevelopment, their use in scientific computing raises critical questions about\ncode quality and scientific validity. In this paper, we provide ten practical\nrules for AI-assisted coding that balance leveraging capabilities of AI with\nmaintaining scientific and methodological rigor. We address how AI can be\nleveraged strategically throughout the development cycle with four key themes:\nproblem preparation and understanding, managing context and interaction,\ntesting and validation, and code quality assurance and iterative improvement.\nThese principles serve to emphasize maintaining human agency in coding\ndecisions, establishing robust validation procedures, and preserving the domain\nexpertise essential for methodologically sound research. These rules are\nintended to help researchers harness AI's transformative potential for faster\nsoftware development while ensuring that their code meets the standards of\nreliability, reproducibility, and scientific validity that research integrity\ndemands.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e8610\u6761AI\u8f85\u52a9\u7f16\u7801\u7684\u5b9e\u7528\u89c4\u5219\uff0c\u65e8\u5728\u5e73\u8861AI\u80fd\u529b\u5229\u7528\u4e0e\u79d1\u5b66\u65b9\u6cd5\u4e25\u8c28\u6027\uff0c\u786e\u4fdd\u79d1\u5b66\u8ba1\u7b97\u4ee3\u7801\u7684\u53ef\u9760\u6027\u548c\u6709\u6548\u6027\u3002", "motivation": "AI\u7f16\u7801\u5de5\u5177\u5728\u52a0\u901f\u8f6f\u4ef6\u5f00\u53d1\u65b9\u9762\u5c55\u73b0\u51fa\u6f5c\u529b\uff0c\u4f46\u5728\u79d1\u5b66\u8ba1\u7b97\u4e2d\u5f15\u53d1\u4e86\u5173\u4e8e\u4ee3\u7801\u8d28\u91cf\u548c\u79d1\u5b66\u6709\u6548\u6027\u7684\u5173\u952e\u95ee\u9898\uff0c\u9700\u8981\u5efa\u7acb\u6307\u5bfc\u539f\u5219\u6765\u786e\u4fdd\u7814\u7a76\u5b8c\u6574\u6027\u3002", "method": "\u56f4\u7ed5\u56db\u4e2a\u5173\u952e\u4e3b\u9898\u5236\u5b9a\u5b9e\u7528\u89c4\u5219\uff1a\u95ee\u9898\u51c6\u5907\u4e0e\u7406\u89e3\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u4e0e\u4ea4\u4e92\u3001\u6d4b\u8bd5\u4e0e\u9a8c\u8bc1\u3001\u4ee3\u7801\u8d28\u91cf\u4fdd\u8bc1\u4e0e\u8fed\u4ee3\u6539\u8fdb\uff0c\u5f3a\u8c03\u4fdd\u6301\u4eba\u7c7b\u5728\u7f16\u7801\u51b3\u7b56\u4e2d\u7684\u4e3b\u5bfc\u6743\u3002", "result": "\u5efa\u7acb\u4e86\u4e00\u5957\u7cfb\u7edf\u7684AI\u8f85\u52a9\u7f16\u7801\u6307\u5bfc\u539f\u5219\uff0c\u5e2e\u52a9\u7814\u7a76\u4eba\u5458\u5728\u5229\u7528AI\u52a0\u901f\u8f6f\u4ef6\u5f00\u53d1\u7684\u540c\u65f6\uff0c\u786e\u4fdd\u4ee3\u7801\u6ee1\u8db3\u53ef\u9760\u6027\u3001\u53ef\u91cd\u590d\u6027\u548c\u79d1\u5b66\u6709\u6548\u6027\u7684\u6807\u51c6\u3002", "conclusion": "\u8fd9\u4e9b\u89c4\u5219\u65e8\u5728\u5e2e\u52a9\u7814\u7a76\u4eba\u5458\u5145\u5206\u5229\u7528AI\u7684\u53d8\u9769\u6f5c\u529b\uff0c\u540c\u65f6\u786e\u4fdd\u5176\u4ee3\u7801\u7b26\u5408\u7814\u7a76\u5b8c\u6574\u6027\u6240\u9700\u7684\u53ef\u9760\u6027\u3001\u53ef\u91cd\u590d\u6027\u548c\u79d1\u5b66\u6709\u6548\u6027\u6807\u51c6\u3002"}}
{"id": "2510.22318", "categories": ["cs.SE", "cs.AI", "K.3.2, D.2.5"], "pdf": "https://arxiv.org/pdf/2510.22318", "abs": "https://arxiv.org/abs/2510.22318", "authors": ["Tuan-Phong Ngo", "Bao-Ngoc Duong", "Tuan-Anh Hoang", "Joshua Dwight", "Ushik Shrestha Khwakhali"], "title": "Harnessing the Power of Large Language Models for Software Testing Education: A Focus on ISTQB Syllabus", "comment": "7 pages, 3 figures, 3 tables", "summary": "Software testing is a critical component in the software engineering field\nand is important for software engineering education. Thus, it is vital for\nacademia to continuously improve and update educational methods to reflect the\ncurrent state of the field. The International Software Testing Qualifications\nBoard (ISTQB) certification framework is globally recognized and widely adopted\nin industry and academia. However, ISTQB-based learning has been rarely applied\nwith recent generative artificial intelligence advances. Despite the growing\ncapabilities of large language models (LLMs), ISTQB-based learning and\ninstruction with LLMs have not been thoroughly explored. This paper explores\nand evaluates how LLMs can complement the ISTQB framework for higher education.\nThe findings present four key contributions: (i) the creation of a\ncomprehensive ISTQB-aligned dataset spanning over a decade, consisting of 28\nsample exams and 1,145 questions; (ii) the development of a domain-optimized\nprompt that enhances LLM precision and explanation quality on ISTQB tasks;\n(iii) a systematic evaluation of state-of-the-art LLMs on this dataset; and\n(iv) actionable insights and recommendations for integrating LLMs into software\ntesting education. These findings highlight the promise of LLMs in supporting\nISTQB certification preparation and offer a foundation for their broader use in\nsoftware engineering at higher education.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u5982\u4f55\u5c06\u5927\u578b\u8bed\u8a00\u6a21\u578b\u4e0eISTQB\u8ba4\u8bc1\u6846\u67b6\u7ed3\u5408\u7528\u4e8e\u9ad8\u7b49\u6559\u80b2\uff0c\u521b\u5efa\u4e86ISTQB\u5bf9\u9f50\u6570\u636e\u96c6\u5e76\u5f00\u53d1\u4e86\u4f18\u5316\u7684\u63d0\u793a\u65b9\u6cd5\uff0c\u8bc4\u4f30\u4e86LLMs\u5728\u8f6f\u4ef6\u6d4b\u8bd5\u6559\u80b2\u4e2d\u7684\u5e94\u7528\u6f5c\u529b\u3002", "motivation": "\u8f6f\u4ef6\u6d4b\u8bd5\u5728\u8f6f\u4ef6\u5de5\u7a0b\u6559\u80b2\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u4f46ISTQB\u8ba4\u8bc1\u6846\u67b6\u4e0e\u6700\u65b0\u751f\u6210\u5f0f\u4eba\u5de5\u667a\u80fd\u7684\u7ed3\u5408\u5e94\u7528\u5c1a\u672a\u5145\u5206\u63a2\u7d22\uff0c\u9700\u8981\u7814\u7a76LLMs\u5982\u4f55\u8865\u5145ISTQB\u6846\u67b6\u4ee5\u6539\u8fdb\u9ad8\u7b49\u6559\u80b2\u65b9\u6cd5\u3002", "method": "\u521b\u5efa\u4e86\u6db5\u76d610\u591a\u5e74\u3001\u5305\u542b28\u4e2a\u6837\u672c\u8003\u8bd5\u548c1145\u4e2a\u95ee\u9898\u7684ISTQB\u5bf9\u9f50\u6570\u636e\u96c6\uff0c\u5f00\u53d1\u4e86\u9886\u57df\u4f18\u5316\u7684\u63d0\u793a\u65b9\u6cd5\uff0c\u5e76\u7cfb\u7edf\u8bc4\u4f30\u4e86\u6700\u5148\u8fdb\u7684LLMs\u5728\u8be5\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u3002", "result": "\u7814\u7a76\u5c55\u793a\u4e86LLMs\u5728\u652f\u6301ISTQB\u8ba4\u8bc1\u51c6\u5907\u65b9\u9762\u7684\u6f5c\u529b\uff0c\u63d0\u4f9b\u4e86\u589e\u5f3aLLM\u7cbe\u5ea6\u548c\u89e3\u91ca\u8d28\u91cf\u7684\u4f18\u5316\u63d0\u793a\u65b9\u6cd5\uff0c\u4ee5\u53ca\u5c06LLMs\u6574\u5408\u5230\u8f6f\u4ef6\u6d4b\u8bd5\u6559\u80b2\u4e2d\u7684\u53ef\u884c\u5efa\u8bae\u3002", "conclusion": "LLMs\u5728\u652f\u6301ISTQB\u8ba4\u8bc1\u51c6\u5907\u65b9\u9762\u5177\u6709\u826f\u597d\u524d\u666f\uff0c\u4e3a\u5728\u9ad8\u7b49\u6559\u80b2\u4e2d\u66f4\u5e7f\u6cdb\u5730\u5e94\u7528LLMs\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2510.22338", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22338", "abs": "https://arxiv.org/abs/2510.22338", "authors": ["Aritra Mitra", "Srijoni Majumdar", "Anamitra Mukhopadhyay", "Partha Pratim Das", "Paul D Clough", "Partha Pratim Chakrabarti"], "title": "Operationalizing Large Language Models with Design-Aware Contexts for Code Comment Generation", "comment": null, "summary": "Comments are very useful to the flow of code development. With the increasing\ncommonality of code, novice coders have been creating a significant amount of\ncodebases. Due to lack of commenting standards, their comments are often\nuseless, and increase the time taken to further maintain codes. This study\nintends to find the usefulness of large language models (LLMs) in these cases\nto generate potentially better comments. This study focuses on the feasibility\nof design documents as a context for the LLMs to generate more useful comments,\nas design documents are often used by maintainers to understand code when\ncomments do not suffice.", "AI": {"tldr": "\u7814\u7a76\u63a2\u7d22\u4f7f\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b(LLMs)\u4e3a\u65b0\u624b\u7a0b\u5e8f\u5458\u7f16\u5199\u7684\u4ee3\u7801\u751f\u6210\u66f4\u6709\u7528\u7684\u6ce8\u91ca\uff0c\u7279\u522b\u5173\u6ce8\u8bbe\u8ba1\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u662f\u5426\u80fd\u63d0\u5347\u6ce8\u91ca\u8d28\u91cf\u3002", "motivation": "\u65b0\u624b\u7a0b\u5e8f\u5458\u7f16\u5199\u7684\u4ee3\u7801\u5e93\u6570\u91cf\u589e\u52a0\uff0c\u4f46\u7531\u4e8e\u7f3a\u4e4f\u6ce8\u91ca\u6807\u51c6\uff0c\u4ed6\u4eec\u7684\u6ce8\u91ca\u5f80\u5f80\u65e0\u7528\uff0c\u589e\u52a0\u4e86\u540e\u7eed\u7ef4\u62a4\u65f6\u95f4\u3002", "method": "\u4f7f\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\u751f\u6210\u6ce8\u91ca\uff0c\u91cd\u70b9\u5173\u6ce8\u8bbe\u8ba1\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u662f\u5426\u80fd\u5e2e\u52a9\u751f\u6210\u66f4\u6709\u7528\u7684\u6ce8\u91ca\u3002", "result": "\u8bba\u6587\u63a2\u8ba8\u4e86\u8bbe\u8ba1\u6587\u6863\u4f5c\u4e3aLLM\u4e0a\u4e0b\u6587\u6765\u751f\u6210\u66f4\u597d\u6ce8\u91ca\u7684\u53ef\u884c\u6027\u3002", "conclusion": "\u8bbe\u8ba1\u6587\u6863\u53ef\u80fd\u4e3aLLMs\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u4e0a\u4e0b\u6587\uff0c\u4ee5\u751f\u6210\u5bf9\u4ee3\u7801\u7ef4\u62a4\u66f4\u6709\u7528\u7684\u6ce8\u91ca\u3002"}}
{"id": "2510.22409", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22409", "abs": "https://arxiv.org/abs/2510.22409", "authors": ["Shahidul Islam", "Md Nahidul Islam Opu", "Shaowei Wang", "Shaiful Chowdhury"], "title": "A First Look at the Self-Admitted Technical Debt in Test Code: Taxonomy and Detection", "comment": null, "summary": "Self-admitted technical debt (SATD) refers to comments in which developers\nexplicitly acknowledge code issues, workarounds, or suboptimal solutions. SATD\nis known to significantly increase software maintenance effort. While extensive\nresearch has examined SATD in source code, its presence and impact in test code\nhave received no focused attention, leaving a significant gap in our\nunderstanding of how SATD manifests in testing contexts.\n  This study, the first of its kind, investigates SATD in test code by manually\nanalyzing 50,000 comments randomly sampled from 1.6 million comments across\n1,000 open-source Java projects. From this sample, after manual analysis and\nfiltering, we identified 615 SATD comments and classified them into 15 distinct\ncategories, building a taxonomy of test code SATD. To investigate whether test\ncode SATD can be detected automatically, we evaluated existing SATD detection\ntools, as well as both open-source and proprietary LLMs. Among the existing\ntools, MAT performed the best, albeit with moderate recall. To our surprise,\nboth open-source and proprietary LLMs exhibited poor detection accuracy,\nprimarily due to low precision. These results indicate that neither existing\napproaches nor current LLMs can reliably detect SATD in test code.\n  Overall, this work provides the first large-scale analysis of SATD in test\ncode, a nuanced understanding of its types, and the limitations of current SATD\ndetection methods. Our findings lay the groundwork for future research on test\ncode-specific SATD.", "AI": {"tldr": "\u9996\u6b21\u5bf9\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u81ea\u627f\u8ba4\u6280\u672f\u503a\u52a1(SATD)\u8fdb\u884c\u5927\u89c4\u6a21\u7814\u7a76\uff0c\u5206\u6790\u4e8650,000\u4e2a\u6ce8\u91ca\uff0c\u8bc6\u522b\u51fa615\u4e2aSATD\u6ce8\u91ca\u5e76\u6784\u5efa\u4e8615\u4e2a\u5206\u7c7b\uff0c\u53d1\u73b0\u73b0\u6709\u5de5\u5177\u548cLLMs\u5728\u68c0\u6d4b\u6d4b\u8bd5\u4ee3\u7801SATD\u65b9\u9762\u6548\u679c\u4e0d\u4f73\u3002", "motivation": "\u867d\u7136\u5df2\u6709\u5927\u91cf\u7814\u7a76\u5173\u6ce8\u6e90\u4ee3\u7801\u4e2d\u7684SATD\uff0c\u4f46\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684SATD\u53ca\u5176\u5f71\u54cd\u5c1a\u672a\u5f97\u5230\u4e13\u95e8\u7814\u7a76\uff0c\u5b58\u5728\u663e\u8457\u7684\u77e5\u8bc6\u7a7a\u767d\u3002", "method": "\u4ece1,000\u4e2a\u5f00\u6e90Java\u9879\u76ee\u7684160\u4e07\u6761\u6ce8\u91ca\u4e2d\u968f\u673a\u62bd\u53d650,000\u6761\u8fdb\u884c\u624b\u52a8\u5206\u6790\uff0c\u8bc6\u522b\u548c\u5206\u7c7bSATD\uff0c\u5e76\u8bc4\u4f30\u73b0\u6709SATD\u68c0\u6d4b\u5de5\u5177\u548cLLMs\u7684\u6027\u80fd\u3002", "result": "\u8bc6\u522b\u51fa615\u4e2aSATD\u6ce8\u91ca\u5e76\u6784\u5efa\u4e8615\u4e2a\u5206\u7c7b\u7684\u6d4b\u8bd5\u4ee3\u7801SATD\u5206\u7c7b\u6cd5\uff1b\u73b0\u6709\u5de5\u5177\u4e2dMAT\u8868\u73b0\u6700\u4f73\u4f46\u53ec\u56de\u7387\u4e00\u822c\uff1b\u5f00\u6e90\u548c\u4e13\u6709LLMs\u68c0\u6d4b\u51c6\u786e\u7387\u90fd\u5f88\u4f4e\uff0c\u4e3b\u8981\u95ee\u9898\u662f\u7cbe\u5ea6\u4e0d\u8db3\u3002", "conclusion": "\u8fd9\u662f\u9996\u4e2a\u9488\u5bf9\u6d4b\u8bd5\u4ee3\u7801SATD\u7684\u5927\u89c4\u6a21\u5206\u6790\uff0c\u63d0\u4f9b\u4e86\u5bf9\u5176\u7c7b\u578b\u7684\u7ec6\u81f4\u7406\u89e3\uff0c\u5e76\u63ed\u793a\u4e86\u5f53\u524dSATD\u68c0\u6d4b\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u4e3a\u672a\u6765\u6d4b\u8bd5\u4ee3\u7801\u7279\u5b9aSATD\u7814\u7a76\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2510.22457", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22457", "abs": "https://arxiv.org/abs/2510.22457", "authors": ["Shalini Chakraborty", "Sebastian Baltes"], "title": "A Multifaceted View on Discrimination in Software Development Careers", "comment": "11 pages, 1 figure, 5 tables", "summary": "Conversations around diversity and inclusion in software engineering often\nfocus on gender and racial disparities. However, the State of the Developer\nNation 2025 survey with 8,717 participants revealed that other forms of\ndiscrimination are similarly prevalent but receive considerably less attention.\nThis includes discrimination based on age, political perspective, disabilities,\nor cognitive differences such as neurodivergence. We conducted a secondary\nanalysis of 800 open-ended survey responses to examine patterns of perceived\ndiscrimination, as well as related challenges and negative impacts. Our study\ncovers multiple identity facets, including age, gender, race, and disability.\nWe found that age- and gender-related discrimination was the most frequently\nreported workplace issue, but discrimination based on political and religious\nviews emerged as further notable concerns. Most of the participants who\nidentified as female cited gender as the primary source of discrimination,\noften accompanied by intersectional factors such as race, political views, age,\nor sexual orientation. Discrimination related to caregiving responsibilities\nwas reported by all gender identities. Regarding the negative impacts of\nworkplace issues, many participants described modifying their appearance or\nbehavior in response to gender biases. Gender also appeared to influence\nbroader career challenges, as women and non-binary respondents reported\nexperiencing almost all workplace issues at higher rates, particularly\ndiscrimination (35%) and mental health challenges (62%). Our goal is to raise\nawareness in the research community that discrimination in software development\nis multifaceted, and to encourage researchers to select and assess relevant\nfacets beyond age and gender when designing software engineering studies.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u591a\u6837\u6027\u6b67\u89c6\u95ee\u9898\uff0c\u53d1\u73b0\u9664\u4e86\u5e38\u89c1\u7684\u6027\u522b\u548c\u79cd\u65cf\u6b67\u89c6\u5916\uff0c\u5e74\u9f84\u3001\u653f\u6cbb\u89c2\u70b9\u3001\u6b8b\u75be\u548c\u795e\u7ecf\u591a\u6837\u6027\u7b49\u6b67\u89c6\u540c\u6837\u666e\u904d\u4f46\u5173\u6ce8\u8f83\u5c11\u3002", "motivation": "\u7814\u7a76\u52a8\u673a\u662f\u63ed\u793a\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u9664\u6027\u522b\u548c\u79cd\u65cf\u5916\u5176\u4ed6\u5f62\u5f0f\u7684\u6b67\u89c6\u95ee\u9898\uff0c\u8fd9\u4e9b\u6b67\u89c6\u867d\u7136\u666e\u904d\u4f46\u8f83\u5c11\u53d7\u5230\u5173\u6ce8\uff0c\u65e8\u5728\u63d0\u9ad8\u7814\u7a76\u793e\u533a\u5bf9\u591a\u5143\u5316\u6b67\u89c6\u95ee\u9898\u7684\u8ba4\u8bc6\u3002", "method": "\u91c7\u7528\u4e8c\u6b21\u5206\u6790\u65b9\u6cd5\uff0c\u5bf9800\u4efd\u5f00\u653e\u5f0f\u8c03\u67e5\u56de\u590d\u8fdb\u884c\u5206\u6790\uff0c\u8003\u5bdf\u611f\u77e5\u6b67\u89c6\u6a21\u5f0f\u53ca\u76f8\u5173\u6311\u6218\u548c\u8d1f\u9762\u5f71\u54cd\uff0c\u6db5\u76d6\u5e74\u9f84\u3001\u6027\u522b\u3001\u79cd\u65cf\u3001\u6b8b\u75be\u7b49\u591a\u4e2a\u8eab\u4efd\u7ef4\u5ea6\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5e74\u9f84\u548c\u6027\u522b\u76f8\u5173\u6b67\u89c6\u662f\u6700\u5e38\u89c1\u7684\u5de5\u4f5c\u573a\u6240\u95ee\u9898\uff0c\u653f\u6cbb\u548c\u5b97\u6559\u89c2\u70b9\u6b67\u89c6\u4e5f\u662f\u91cd\u8981\u5173\u5207\u3002\u5973\u6027\u53c2\u4e0e\u8005\u4e3b\u8981\u62a5\u544a\u6027\u522b\u6b67\u89c6\uff0c\u5e38\u4e0e\u79cd\u65cf\u3001\u653f\u6cbb\u89c2\u70b9\u3001\u5e74\u9f84\u6216\u6027\u53d6\u5411\u7b49\u4ea4\u53c9\u56e0\u7d20\u76f8\u5173\u3002\u6240\u6709\u6027\u522b\u8eab\u4efd\u90fd\u62a5\u544a\u4e86\u4e0e\u7167\u987e\u8d23\u4efb\u76f8\u5173\u7684\u6b67\u89c6\u3002", "conclusion": "\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u6b67\u89c6\u5177\u6709\u591a\u9762\u6027\uff0c\u7814\u7a76\u4eba\u5458\u5728\u8bbe\u8ba1\u7814\u7a76\u65f6\u5e94\u9009\u62e9\u8bc4\u4f30\u9664\u5e74\u9f84\u548c\u6027\u522b\u5916\u7684\u5176\u4ed6\u76f8\u5173\u7ef4\u5ea6\uff0c\u4ee5\u66f4\u5168\u9762\u5730\u7406\u89e3\u591a\u6837\u6027\u95ee\u9898\u3002"}}
{"id": "2510.22530", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22530", "abs": "https://arxiv.org/abs/2510.22530", "authors": ["Sungmin Kang", "Sumi Yun", "Jingun Hong", "Shin Yoo", "Gabin An"], "title": "Finding the Needle in the Crash Stack: Industrial-Scale Crash Root Cause Localization with AutoCrashFL", "comment": "11 pages, 8 figures, under review", "summary": "Fault Localization (FL) aims to identify root causes of program failures. FL\ntypically targets failures observed from test executions, and as such, often\ninvolves dynamic analyses to improve accuracy, such as coverage profiling or\nmutation testing. However, for large industrial software, measuring coverage\nfor every execution is prohibitively expensive, making the use of such\ntechniques difficult. To address these issues and apply FL in an industrial\nsetting, this paper proposes AutoCrashFL, an LLM agent for the localization of\ncrashes that only requires the crashdump from the Program Under Test (PUT) and\naccess to the repository of the corresponding source code. We evaluate\nAutoCrashFL against real-world crashes of SAP HANA, an industrial software\nproject consisting of more than 35 million lines of code. Experiments reveal\nthat AutoCrashFL is more effective in localization, as it identified 30%\ncrashes at the top, compared to 17% achieved by the baseline. Through thorough\nanalysis, we find that AutoCrashFL has attractive practical properties: it is\nrelatively more effective for complex bugs, and it can indicate confidence in\nits results. Overall, these results show the practicality of LLM agent\ndeployment on an industrial scale.", "AI": {"tldr": "AutoCrashFL\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u4ee3\u7406\u7684\u6545\u969c\u5b9a\u4f4d\u65b9\u6cd5\uff0c\u4ec5\u9700\u5d29\u6e83\u8f6c\u50a8\u548c\u6e90\u4ee3\u7801\u4ed3\u5e93\u5c31\u80fd\u5728\u5de5\u4e1a\u7ea7\u8f6f\u4ef6\u4e2d\u5b9a\u4f4d\u7a0b\u5e8f\u5d29\u6e83\u539f\u56e0\uff0c\u5728SAP HANA\u7684\u5b9e\u9a8c\u4e2d\u8868\u73b0\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\u3002", "motivation": "\u4f20\u7edf\u6545\u969c\u5b9a\u4f4d\u65b9\u6cd5\u9700\u8981\u52a8\u6001\u5206\u6790\uff08\u5982\u8986\u76d6\u7387\u5206\u6790\uff09\uff0c\u5728\u5927\u578b\u5de5\u4e1a\u8f6f\u4ef6\u4e2d\u6210\u672c\u8fc7\u9ad8\uff0c\u96be\u4ee5\u5e94\u7528\u3002\u9700\u8981\u4e00\u79cd\u4ec5\u4f9d\u8d56\u5d29\u6e83\u8f6c\u50a8\u548c\u6e90\u4ee3\u7801\u7684\u8f7b\u91cf\u7ea7\u6545\u969c\u5b9a\u4f4d\u65b9\u6848\u3002", "method": "\u63d0\u51faAutoCrashFL LLM\u4ee3\u7406\uff0c\u4ec5\u4f7f\u7528\u7a0b\u5e8f\u5d29\u6e83\u8f6c\u50a8\u548c\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u4ed3\u5e93\u8fdb\u884c\u6545\u969c\u5b9a\u4f4d\uff0c\u65e0\u9700\u6602\u8d35\u7684\u52a8\u6001\u5206\u6790\u3002", "result": "\u5728SAP HANA\uff08\u8d85\u8fc73500\u4e07\u884c\u4ee3\u7801\uff09\u7684\u771f\u5b9e\u5d29\u6e83\u6d4b\u8bd5\u4e2d\uff0cAutoCrashFL\u5728top\u4f4d\u7f6e\u8bc6\u522b\u4e8630%\u7684\u5d29\u6e83\uff0c\u800c\u57fa\u7ebf\u65b9\u6cd5\u4ec5\u4e3a17%\u3002\u5bf9\u590d\u6742bug\u66f4\u6709\u6548\uff0c\u5e76\u80fd\u63d0\u4f9b\u7ed3\u679c\u7f6e\u4fe1\u5ea6\u3002", "conclusion": "LLM\u4ee3\u7406\u5728\u5de5\u4e1a\u89c4\u6a21\u90e8\u7f72\u5177\u6709\u5b9e\u7528\u6027\uff0cAutoCrashFL\u5c55\u793a\u4e86\u4ec5\u4f9d\u8d56\u5d29\u6e83\u8f6c\u50a8\u548c\u6e90\u4ee3\u7801\u7684\u8f7b\u91cf\u7ea7\u6545\u969c\u5b9a\u4f4d\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002"}}
{"id": "2510.22613", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22613", "abs": "https://arxiv.org/abs/2510.22613", "authors": ["Songhan Zhang", "Aoyang Fang", "Yifan Yang", "Ruiyi Cheng", "Xiaoying Tang", "Pinjia He"], "title": "DynaCausal: Dynamic Causality-Aware Root Cause Analysis for Distributed Microservices", "comment": null, "summary": "Cloud-native microservices enable rapid iteration and scalable deployment but\nalso create complex, fast-evolving dependencies that challenge reliable\ndiagnosis. Existing root cause analysis (RCA) approaches, even with multi-modal\nfusion of logs, traces, and metrics, remain limited in capturing dynamic\nbehaviors and shifting service relationships. Three critical challenges\npersist: (i) inadequate modeling of cascading fault propagation, (ii)\nvulnerability to noise interference and concept drift in normal service\nbehavior, and (iii) over-reliance on service deviation intensity that obscures\ntrue root causes. To address these challenges, we propose DynaCausal, a dynamic\ncausality-aware framework for RCA in distributed microservice systems.\nDynaCausal unifies multi-modal dynamic signals to capture time-varying\nspatio-temporal dependencies through interaction-aware representation learning.\nIt further introduces a dynamic contrastive mechanism to disentangle true fault\nindicators from contextual noise and adopts a causal-prioritized pairwise\nranking objective to explicitly optimize causal attribution. Comprehensive\nevaluations on public benchmarks demonstrate that DynaCausal consistently\nsurpasses state-of-the-art methods, attaining an average AC@1 of 0.63 with\nabsolute gains from 0.25 to 0.46, and delivering both accurate and\ninterpretable diagnoses in highly dynamic microservice environments.", "AI": {"tldr": "DynaCausal\u662f\u4e00\u4e2a\u7528\u4e8e\u5206\u5e03\u5f0f\u5fae\u670d\u52a1\u7cfb\u7edf\u6839\u56e0\u5206\u6790\u7684\u52a8\u6001\u56e0\u679c\u611f\u77e5\u6846\u67b6\uff0c\u901a\u8fc7\u591a\u6a21\u6001\u52a8\u6001\u4fe1\u53f7\u7edf\u4e00\u3001\u52a8\u6001\u5bf9\u6bd4\u673a\u5236\u548c\u56e0\u679c\u4f18\u5148\u6392\u5e8f\u76ee\u6807\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u5728\u6545\u969c\u4f20\u64ad\u5efa\u6a21\u3001\u566a\u58f0\u5e72\u6270\u548c\u6982\u5ff5\u6f02\u79fb\u65b9\u9762\u7684\u5c40\u9650\u6027\u3002", "motivation": "\u4e91\u539f\u751f\u5fae\u670d\u52a1\u867d\u7136\u652f\u6301\u5feb\u901f\u8fed\u4ee3\u548c\u53ef\u6269\u5c55\u90e8\u7f72\uff0c\u4f46\u4ea7\u751f\u4e86\u590d\u6742\u4e14\u5feb\u901f\u6f14\u5316\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u7ed9\u53ef\u9760\u8bca\u65ad\u5e26\u6765\u6311\u6218\u3002\u73b0\u6709\u6839\u56e0\u5206\u6790\u65b9\u6cd5\u5728\u591a\u6a21\u6001\u878d\u5408\u65b9\u9762\u4ecd\u6709\u5c40\u9650\uff0c\u65e0\u6cd5\u5145\u5206\u6355\u6349\u52a8\u6001\u884c\u4e3a\u548c\u53d8\u5316\u7684\u670d\u52a1\u5173\u7cfb\u3002", "method": "DynaCausal\u901a\u8fc7\u4ea4\u4e92\u611f\u77e5\u8868\u793a\u5b66\u4e60\u7edf\u4e00\u591a\u6a21\u6001\u52a8\u6001\u4fe1\u53f7\u6765\u6355\u6349\u65f6\u53d8\u65f6\u7a7a\u4f9d\u8d56\uff0c\u5f15\u5165\u52a8\u6001\u5bf9\u6bd4\u673a\u5236\u4ece\u4e0a\u4e0b\u6587\u566a\u58f0\u4e2d\u5206\u79bb\u771f\u5b9e\u6545\u969c\u6307\u6807\uff0c\u5e76\u91c7\u7528\u56e0\u679c\u4f18\u5148\u6210\u5bf9\u6392\u5e8f\u76ee\u6807\u6765\u663e\u5f0f\u4f18\u5316\u56e0\u679c\u5f52\u56e0\u3002", "result": "\u5728\u516c\u5171\u57fa\u51c6\u6d4b\u8bd5\u4e0a\u7684\u7efc\u5408\u8bc4\u4f30\u8868\u660e\uff0cDynaCausal\u6301\u7eed\u8d85\u8d8a\u6700\u5148\u8fdb\u65b9\u6cd5\uff0c\u5e73\u5747AC@1\u8fbe\u52300.63\uff0c\u7edd\u5bf9\u589e\u76ca\u4ece0.25\u52300.46\uff0c\u5728\u9ad8\u5ea6\u52a8\u6001\u7684\u5fae\u670d\u52a1\u73af\u5883\u4e2d\u63d0\u4f9b\u51c6\u786e\u4e14\u53ef\u89e3\u91ca\u7684\u8bca\u65ad\u3002", "conclusion": "DynaCausal\u6846\u67b6\u6709\u6548\u89e3\u51b3\u4e86\u5fae\u670d\u52a1\u7cfb\u7edf\u4e2d\u6839\u56e0\u5206\u6790\u7684\u4e09\u4e2a\u5173\u952e\u6311\u6218\uff0c\u5728\u52a8\u6001\u73af\u5883\u4e0b\u5b9e\u73b0\u4e86\u66f4\u51c6\u786e\u548c\u53ef\u89e3\u91ca\u7684\u6545\u969c\u8bca\u65ad\uff0c\u4e3a\u4e91\u539f\u751f\u7cfb\u7edf\u7684\u53ef\u9760\u8fd0\u7ef4\u63d0\u4f9b\u4e86\u6709\u529b\u652f\u6301\u3002"}}
{"id": "2510.22614", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.22614", "abs": "https://arxiv.org/abs/2510.22614", "authors": ["Roham Koohestani", "Agnia Sergeyuk", "David Gros", "Claudio Spiess", "Sergey Titov", "Prem Devanbu", "Maliheh Izadi"], "title": "Does In-IDE Calibration of Large Language Models work at Scale?", "comment": "Under Review", "summary": "The introduction of large language models into integrated development\nenvironments (IDEs) is revolutionizing software engineering, yet it poses\nchallenges to the usefulness and reliability of Artificial\nIntelligence-generated code. Post-hoc calibration of internal model confidences\naims to align probabilities with an acceptability measure. Prior work suggests\ncalibration can improve alignment, but at-scale evidence is limited. In this\nwork, we investigate the feasibility of applying calibration of code models to\nan in-IDE context. We study two aspects of the problem: (1) the technical\nmethod for implementing confidence calibration and improving the reliability of\ncode generation models, and (2) the human-centered design principles for\neffectively communicating reliability signal to developers. First, we develop a\nscalable and flexible calibration framework which can be used to obtain\ncalibration weights for open-source models using any dataset, and evaluate\nwhether calibrators improve the alignment between model confidence and\ndeveloper acceptance behavior. Through a large-scale analysis of over 24\nmillion real-world developer interactions across multiple programming\nlanguages, we find that a general, post-hoc calibration model based on\nPlatt-scaling does not, on average, improve the reliability of model confidence\nsignals. We also find that while dynamically personalizing calibration to\nindividual users can be effective, its effectiveness is highly dependent on the\nvolume of user interaction data. Second, we conduct a multi-phase design study\nwith 3 expert designers and 153 professional developers, combining\nscenario-based design, semi-structured interviews, and survey validation,\nrevealing a clear preference for presenting reliability signals via\nnon-numerical, color-coded indicators within the in-editor code generation\nworkflow.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u5728IDE\u73af\u5883\u4e2d\u5bf9\u4ee3\u7801\u751f\u6210\u6a21\u578b\u8fdb\u884c\u7f6e\u4fe1\u5ea6\u6821\u51c6\u7684\u53ef\u884c\u6027\uff0c\u53d1\u73b0\u901a\u7528\u540e\u6821\u51c6\u65b9\u6cd5\u6548\u679c\u6709\u9650\uff0c\u4e2a\u6027\u5316\u6821\u51c6\u9700\u8981\u5927\u91cf\u7528\u6237\u6570\u636e\uff0c\u4e14\u5f00\u53d1\u8005\u504f\u597d\u4f7f\u7528\u989c\u8272\u7f16\u7801\u800c\u975e\u6570\u503c\u6765\u663e\u793a\u53ef\u9760\u6027\u4fe1\u53f7\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728IDE\u4e2d\u7684\u96c6\u6210\u6b63\u5728\u6539\u53d8\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u4f46AI\u751f\u6210\u4ee3\u7801\u7684\u53ef\u9760\u6027\u548c\u5b9e\u7528\u6027\u9762\u4e34\u6311\u6218\u3002\u7f6e\u4fe1\u5ea6\u6821\u51c6\u65e8\u5728\u4f7f\u6a21\u578b\u6982\u7387\u4e0e\u53ef\u63a5\u53d7\u6027\u5ea6\u91cf\u5bf9\u9f50\uff0c\u4f46\u5927\u89c4\u6a21\u8bc1\u636e\u6709\u9650\u3002", "method": "\u5f00\u53d1\u53ef\u6269\u5c55\u7684\u6821\u51c6\u6846\u67b6\uff0c\u4f7f\u7528Platt\u7f29\u653e\u8fdb\u884c\u540e\u6821\u51c6\uff1b\u5206\u67902400\u4e07\u6b21\u771f\u5b9e\u5f00\u53d1\u8005\u4ea4\u4e92\uff1b\u8fdb\u884c\u591a\u9636\u6bb5\u8bbe\u8ba1\u7814\u7a76\uff0c\u5305\u62ec\u573a\u666f\u8bbe\u8ba1\u3001\u534a\u7ed3\u6784\u5316\u8bbf\u8c08\u548c\u8c03\u67e5\u9a8c\u8bc1\u3002", "result": "\u901a\u7528\u540e\u6821\u51c6\u6a21\u578b\u5e73\u5747\u4e0a\u672a\u80fd\u6539\u5584\u7f6e\u4fe1\u5ea6\u4fe1\u53f7\u7684\u53ef\u9760\u6027\uff1b\u4e2a\u6027\u5316\u6821\u51c6\u6709\u6548\u4f46\u4f9d\u8d56\u5927\u91cf\u7528\u6237\u4ea4\u4e92\u6570\u636e\uff1b\u5f00\u53d1\u8005\u504f\u597d\u4f7f\u7528\u989c\u8272\u7f16\u7801\u7684\u975e\u6570\u503c\u53ef\u9760\u6027\u6307\u793a\u5668\u3002", "conclusion": "\u5728IDE\u73af\u5883\u4e2d\u5e94\u7528\u7f6e\u4fe1\u5ea6\u6821\u51c6\u5177\u6709\u6311\u6218\u6027\uff0c\u9700\u8981\u4e2a\u6027\u5316\u65b9\u6cd5\uff0c\u4e14\u53ef\u9760\u6027\u4fe1\u53f7\u7684\u5448\u73b0\u65b9\u5f0f\u5e94\u4f18\u5148\u8003\u8651\u975e\u6570\u503c\u3001\u989c\u8272\u7f16\u7801\u7684\u89c6\u89c9\u6307\u793a\u5668\u3002"}}
{"id": "2510.22787", "categories": ["cs.SE", "cs.AI", "68T07", "I.2.11; I.2.7; I.2.8"], "pdf": "https://arxiv.org/pdf/2510.22787", "abs": "https://arxiv.org/abs/2510.22787", "authors": ["Kamil Szczepanik", "Jaros\u0142aw A. Chudziak"], "title": "Collaborative LLM Agents for C4 Software Architecture Design Automation", "comment": "This paper has been accepted for the upcoming 59th Hawaii\n  International Conference on System Sciences (HICSS-59), 2026, Hawaii, USA.\n  The final published version will appear in the official conference\n  proceedings", "summary": "Software architecture design is a fundamental part of creating every software\nsystem. Despite its importance, producing a C4 software architecture model, the\npreferred notation for such architecture, remains manual and time-consuming. We\nintroduce an LLM-based multi-agent system that automates this task by\nsimulating a dialogue between role-specific experts who analyze requirements\nand generate the Context, Container, and Component views of the C4 model.\nQuality is assessed with a hybrid evaluation framework: deterministic checks\nfor structural and syntactic integrity and C4 rule consistency, plus semantic\nand qualitative scoring via an LLM-as-a-Judge approach. Tested on five\ncanonical system briefs, the workflow demonstrates fast C4 model creation,\nsustains high compilation success, and delivers semantic fidelity. A comparison\nof four state-of-the-art LLMs shows different strengths relevant to\narchitectural design. This study contributes to automated software architecture\ndesign and its evaluation methods.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8eLLM\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\uff0c\u901a\u8fc7\u89d2\u8272\u4e13\u5bb6\u5bf9\u8bdd\u81ea\u52a8\u751f\u6210C4\u8f6f\u4ef6\u67b6\u6784\u6a21\u578b\uff0c\u4f7f\u7528\u6df7\u5408\u8bc4\u4f30\u6846\u67b6\u9a8c\u8bc1\u8d28\u91cf\u3002", "motivation": "\u8f6f\u4ef6\u67b6\u6784\u8bbe\u8ba1\u662f\u7cfb\u7edf\u5f00\u53d1\u7684\u57fa\u7840\uff0c\u4f46\u521b\u5efaC4\u6a21\u578b\u76ee\u524d\u4ecd\u4f9d\u8d56\u624b\u52a8\u4e14\u8017\u65f6\uff0c\u9700\u8981\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u4f7f\u7528LLM\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u6a21\u62df\u89d2\u8272\u4e13\u5bb6\u5bf9\u8bdd\uff0c\u5206\u6790\u9700\u6c42\u5e76\u751f\u6210C4\u6a21\u578b\u7684Context\u3001Container\u548cComponent\u89c6\u56fe\uff0c\u91c7\u7528\u6df7\u5408\u8bc4\u4f30\u6846\u67b6\uff08\u786e\u5b9a\u6027\u68c0\u67e5+LLM\u4f5c\u4e3a\u8bc4\u5224\u8005\uff09\u8fdb\u884c\u8d28\u91cf\u8bc4\u4f30\u3002", "result": "\u5728\u4e94\u4e2a\u5178\u578b\u7cfb\u7edf\u7b80\u4ecb\u4e0a\u6d4b\u8bd5\uff0c\u5de5\u4f5c\u6d41\u80fd\u5feb\u901f\u521b\u5efaC4\u6a21\u578b\uff0c\u4fdd\u6301\u9ad8\u7f16\u8bd1\u6210\u529f\u7387\u5e76\u63d0\u4f9b\u8bed\u4e49\u4fdd\u771f\u5ea6\uff1b\u6bd4\u8f83\u56db\u79cd\u5148\u8fdbLLM\u663e\u793a\u5728\u67b6\u6784\u8bbe\u8ba1\u65b9\u9762\u7684\u4e0d\u540c\u4f18\u52bf\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u81ea\u52a8\u5316\u8f6f\u4ef6\u67b6\u6784\u8bbe\u8ba1\u53ca\u5176\u8bc4\u4f30\u65b9\u6cd5\u505a\u51fa\u4e86\u8d21\u732e\u3002"}}
{"id": "2510.22815", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.22815", "abs": "https://arxiv.org/abs/2510.22815", "authors": ["Vasudev Vikram", "Yuvraj Agarwal", "Rohan Padhye"], "title": "On the Freshness of Pinned Dependencies in Maven", "comment": null, "summary": "Library dependencies in software ecosystems play a crucial role in the\ndevelopment of software. As newer releases of these libraries are published,\ndevelopers may opt to pin their dependencies to a particular version. While\npinning may have benefits in ensuring reproducible builds and avoiding breaking\nchanges, it bears larger risks in using outdated dependencies that may contain\nbugs and security vulnerabilities. To understand the frequency and consequences\nof dependency pinning, we first define the concepts of stale and fresh pins,\nwhich are distinguished based on how outdated the dependency is relative to the\nrelease date of the project. We conduct an empirical study to show that over\n60% of consumers of popular Maven libraries contain stale pins to their\ndependencies, with some outdated versions over a year old. These pinned\nversions often miss out on security fixes; we find that 10% of all dependency\nupgrades in our dataset to the latest minor or patch version would reduce\nsecurity vulnerabilities.\n  We prototype an approach called Pin-Freshener that can encourage developers\nto freshen their pins by leveraging the insight that crowdsourced tests of peer\nprojects can provide additional signal for the safety of an upgrade. Running\nPin-Freshener on dependency upgrades shows that just 1-5 additional test suites\ncan provide 35-100% more coverage of a dependency, compared to that of a single\nconsumer test suite. Our evaluation on real-world pins to the top 500 popular\nlibraries in Maven shows that Pin-Freshener can provide an additional signal of\nat least 5 passing crowdsourced test suites to over 3,000 consumers to safely\nperform an upgrade that reduces security vulnerabilities. Pin-Freshener can\nprovide practical confidence to developers by offering additional signal beyond\ntheir own test suites, representing an improvement over current practices.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86Maven\u5e93\u4f9d\u8d56\u7248\u672c\u56fa\u5b9a\u7684\u95ee\u9898\uff0c\u53d1\u73b0\u8d85\u8fc760%\u7684\u9879\u76ee\u4f7f\u7528\u8fc7\u65f6\u7684\u4f9d\u8d56\u7248\u672c\uff0c\u5b58\u5728\u5b89\u5168\u98ce\u9669\u3002\u4f5c\u8005\u63d0\u51fa\u4e86Pin-Freshener\u65b9\u6cd5\uff0c\u5229\u7528\u540c\u884c\u9879\u76ee\u7684\u4f17\u5305\u6d4b\u8bd5\u6765\u63d0\u4f9b\u5347\u7ea7\u5b89\u5168\u6027\u4fe1\u53f7\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5b89\u5168\u66f4\u65b0\u4f9d\u8d56\u3002", "motivation": "\u8f6f\u4ef6\u4f9d\u8d56\u7248\u672c\u56fa\u5b9a\u867d\u7136\u80fd\u786e\u4fdd\u6784\u5efa\u53ef\u91cd\u73b0\u6027\uff0c\u4f46\u4f1a\u5bfc\u81f4\u4f7f\u7528\u5305\u542b\u6f0f\u6d1e\u7684\u8fc7\u65f6\u4f9d\u8d56\u3002\u9700\u8981\u7406\u89e3\u4f9d\u8d56\u56fa\u5b9a\u7684\u9891\u7387\u548c\u540e\u679c\uff0c\u5e76\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u6765\u9f13\u52b1\u5f00\u53d1\u8005\u66f4\u65b0\u4f9d\u8d56\u3002", "method": "\u5b9a\u4e49\u4e86\u9648\u65e7\u548c\u65b0\u9c9c\u56fa\u5b9a\u7684\u6982\u5ff5\uff0c\u57fa\u4e8e\u4f9d\u8d56\u76f8\u5bf9\u4e8e\u9879\u76ee\u53d1\u5e03\u65e5\u671f\u7684\u8fc7\u65f6\u7a0b\u5ea6\u3002\u5f00\u53d1\u4e86Pin-Freshener\u539f\u578b\uff0c\u5229\u7528\u540c\u884c\u9879\u76ee\u7684\u4f17\u5305\u6d4b\u8bd5\u4e3a\u4f9d\u8d56\u5347\u7ea7\u63d0\u4f9b\u989d\u5916\u5b89\u5168\u4fe1\u53f7\u3002", "result": "60%\u4ee5\u4e0a\u7684\u6d41\u884cMaven\u5e93\u4f7f\u7528\u8005\u5305\u542b\u9648\u65e7\u7684\u4f9d\u8d56\u56fa\u5b9a\uff0c\u6709\u4e9b\u7248\u672c\u8d85\u8fc7\u4e00\u5e74\u300210%\u7684\u4f9d\u8d56\u5347\u7ea7\u5230\u6700\u65b0\u6b21\u8981\u6216\u8865\u4e01\u7248\u672c\u53ef\u51cf\u5c11\u5b89\u5168\u6f0f\u6d1e\u3002Pin-Freshener\u4ec5\u97001-5\u4e2a\u989d\u5916\u6d4b\u8bd5\u5957\u4ef6\u5c31\u80fd\u63d0\u4f9b35-100%\u7684\u989d\u5916\u8986\u76d6\u7387\u3002", "conclusion": "Pin-Freshener\u901a\u8fc7\u63d0\u4f9b\u8d85\u8d8a\u5355\u4e2a\u9879\u76ee\u6d4b\u8bd5\u5957\u4ef6\u7684\u989d\u5916\u4fe1\u53f7\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u5b9e\u9645\u4fe1\u5fc3\u6765\u5b89\u5168\u6267\u884c\u4f9d\u8d56\u5347\u7ea7\uff0c\u51cf\u5c11\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u5bf9\u5f53\u524d\u5b9e\u8df5\u7684\u6539\u8fdb\u3002"}}
{"id": "2510.22986", "categories": ["cs.SE", "cs.DC", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.22986", "abs": "https://arxiv.org/abs/2510.22986", "authors": ["Junjie Huang", "Minghua He", "Jinyang Liu", "Yintong Huo", "Domenico Bianculli", "Michael R. Lyu"], "title": "CodeAD: Synthesize Code of Rules for Log-based Anomaly Detection with LLMs", "comment": null, "summary": "Log-based anomaly detection (LogAD) is critical for maintaining the\nreliability and availability of large-scale online service systems. While\nmachine learning, deep learning, and large language models (LLMs)-based methods\nhave advanced the LogAD, they often suffer from limited interpretability, high\ninference costs, and extensive preprocessing requirements, limiting their\npracticality for real-time, high-volume log analysis. In contrast, rule-based\nsystems offer efficiency and transparency, but require significant manual\neffort and are difficult to scale across diverse and evolving environments. In\nthis paper, We present CodeAD, a novel framework that automatically synthesizes\nlightweight Python rule functions for LogAD using LLMs. CodeAD introduces a\nhierarchical clustering and anchor-grounded sampling strategy to construct\nrepresentative contrastive log windows, enabling LLMs to discern discriminative\nanomaly patterns. To ensure robustness and generalizability, CodeAD employs an\nagentic workflow that iteratively generates, tests, repairs, and refines the\nrules until it meets correctness and abstraction requirements. The synthesized\nrules are interpretable, lightweight, and directly executable on raw logs,\nsupporting efficient and transparent online anomaly detection. Our\ncomprehensive experiments on three public datasets (BGL, Hadoop, Thunderbird)\ndemonstrate that CodeAD achieves an average absolute improvement of 3.6% F1\nscore over the state-of-the-art baselines, while processing large datasets up\nto 4x faster and at a fraction of the cost (total LLM invocation cost under 4\nUSD per dataset). These results highlight CodeAD as a practical and scalable\nsolution for online monitoring systems, enabling interpretable, efficient, and\nautomated LogAD in real-world environment.", "AI": {"tldr": "CodeAD\u662f\u4e00\u4e2a\u4f7f\u7528LLMs\u81ea\u52a8\u5408\u6210\u8f7b\u91cf\u7ea7Python\u89c4\u5219\u51fd\u6570\u8fdb\u884c\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u7684\u65b0\u6846\u67b6\uff0c\u901a\u8fc7\u5206\u5c42\u805a\u7c7b\u548c\u951a\u70b9\u91c7\u6837\u7b56\u7565\u6784\u5efa\u5bf9\u6bd4\u65e5\u5fd7\u7a97\u53e3\uff0c\u91c7\u7528\u8fed\u4ee3\u751f\u6210-\u6d4b\u8bd5-\u4fee\u590d\u6d41\u7a0b\u786e\u4fdd\u89c4\u5219\u8d28\u91cf\uff0c\u5728\u4e09\u4e2a\u516c\u5f00\u6570\u636e\u96c6\u4e0a\u76f8\u6bd4SOTA\u65b9\u6cd5F1\u5206\u6570\u63d0\u53473.6%\uff0c\u5904\u7406\u901f\u5ea6\u5feb4\u500d\u4e14\u6210\u672c\u6781\u4f4e\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60\u548cLLMs\u7684\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u65b9\u6cd5\u5b58\u5728\u53ef\u89e3\u91ca\u6027\u5dee\u3001\u63a8\u7406\u6210\u672c\u9ad8\u3001\u9884\u5904\u7406\u590d\u6742\u7b49\u95ee\u9898\uff0c\u800c\u57fa\u4e8e\u89c4\u5219\u7684\u7cfb\u7edf\u867d\u7136\u9ad8\u6548\u900f\u660e\u4f46\u9700\u8981\u5927\u91cf\u4eba\u5de5\u5de5\u4f5c\u4e14\u96be\u4ee5\u6269\u5c55\u3002", "method": "CodeAD\u91c7\u7528\u5206\u5c42\u805a\u7c7b\u548c\u951a\u70b9\u91c7\u6837\u7b56\u7565\u6784\u5efa\u4ee3\u8868\u6027\u5bf9\u6bd4\u65e5\u5fd7\u7a97\u53e3\uff0c\u4f7f\u7528LLMs\u8bc6\u522b\u5224\u522b\u6027\u5f02\u5e38\u6a21\u5f0f\uff0c\u901a\u8fc7\u4ee3\u7406\u5de5\u4f5c\u6d41\u8fed\u4ee3\u751f\u6210\u3001\u6d4b\u8bd5\u3001\u4fee\u590d\u548c\u7cbe\u70bc\u89c4\u5219\uff0c\u76f4\u5230\u6ee1\u8db3\u6b63\u786e\u6027\u548c\u62bd\u8c61\u6027\u8981\u6c42\u3002", "result": "\u5728\u4e09\u4e2a\u516c\u5f00\u6570\u636e\u96c6(BGL\u3001Hadoop\u3001Thunderbird)\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0cCodeAD\u76f8\u6bd4\u6700\u5148\u8fdb\u57fa\u7ebf\u65b9\u6cd5\u5e73\u5747F1\u5206\u6570\u7edd\u5bf9\u63d0\u53473.6%\uff0c\u5904\u7406\u5927\u578b\u6570\u636e\u96c6\u901f\u5ea6\u5feb4\u500d\uff0c\u6bcf\u4e2a\u6570\u636e\u96c6\u7684LLM\u8c03\u7528\u603b\u6210\u672c\u4f4e\u4e8e4\u7f8e\u5143\u3002", "conclusion": "CodeAD\u4e3a\u5728\u7ebf\u76d1\u63a7\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u7528\u4e14\u53ef\u6269\u5c55\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u5728\u771f\u5b9e\u73af\u5883\u4e2d\u5b9e\u73b0\u53ef\u89e3\u91ca\u3001\u9ad8\u6548\u548c\u81ea\u52a8\u5316\u7684\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u3002"}}
{"id": "2510.23010", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.23010", "abs": "https://arxiv.org/abs/2510.23010", "authors": ["Ming-Tung Shen", "Yuh-Jzer Joung"], "title": "TALM: Dynamic Tree-Structured Multi-Agent Framework with Long-Term Memory for Scalable Code Generation", "comment": null, "summary": "Agentic code generation requires large language models (LLMs) capable of\ncomplex context management and multi-step reasoning. Prior multi-agent\nframeworks attempt to address these challenges through collaboration, yet they\noften suffer from rigid workflows and high reasoning recovery costs. To\novercome these limitations, we propose TALM (Tree-Structured Multi-Agent\nFramework with Long-Term Memory), a dynamic framework that integrates\nstructured task decomposition, localized re-reasoning, and long-term memory\nmechanisms. TALM employs an extensible tree-based collaboration structure. The\nparent-child relationships, when combined with a divide-and-conquer strategy,\nenhance reasoning flexibility and enable efficient error correction across\ndiverse task scopes. Furthermore, a long-term memory module enables semantic\nquerying and integration of prior knowledge, supporting implicit\nself-improvement through experience reuse. Experimental results on HumanEval,\nBigCodeBench, and ClassEval benchmarks demonstrate that TALM consistently\ndelivers strong reasoning performance and high token efficiency, highlighting\nits robustness and practical utility in complex code generation tasks.", "AI": {"tldr": "\u63d0\u51fa\u4e86TALM\u6846\u67b6\uff0c\u901a\u8fc7\u6811\u5f62\u591a\u667a\u80fd\u4f53\u7ed3\u6784\u3001\u957f\u671f\u8bb0\u5fc6\u673a\u5236\u548c\u5c40\u90e8\u91cd\u63a8\u7406\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u591a\u667a\u80fd\u4f53\u6846\u67b6\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u5de5\u4f5c\u6d41\u7a0b\u50f5\u5316\u548c\u63a8\u7406\u6062\u590d\u6210\u672c\u9ad8\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u534f\u4f5c\u7684\u591a\u667a\u80fd\u4f53\u6846\u67b6\u5728\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e2d\u5b58\u5728\u5de5\u4f5c\u6d41\u7a0b\u50f5\u5316\u548c\u63a8\u7406\u6062\u590d\u6210\u672c\u9ad8\u7684\u95ee\u9898\uff0c\u9700\u8981\u66f4\u7075\u6d3b\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528\u6811\u5f62\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u7ed3\u6784\uff0c\u7ed3\u5408\u5206\u6cbb\u7b56\u7565\u5b9e\u73b0\u52a8\u6001\u4efb\u52a1\u5206\u89e3\uff0c\u96c6\u6210\u957f\u671f\u8bb0\u5fc6\u6a21\u5757\u652f\u6301\u8bed\u4e49\u67e5\u8be2\u548c\u7ecf\u9a8c\u590d\u7528\uff0c\u901a\u8fc7\u5c40\u90e8\u91cd\u63a8\u7406\u673a\u5236\u63d0\u9ad8\u9519\u8bef\u4fee\u6b63\u6548\u7387\u3002", "result": "\u5728HumanEval\u3001BigCodeBench\u548cClassEval\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cTALM\u5c55\u73b0\u51fa\u5f3a\u5927\u7684\u63a8\u7406\u6027\u80fd\u548c\u9ad8\u6548\u7684token\u5229\u7528\u7387\u3002", "conclusion": "TALM\u6846\u67b6\u5728\u590d\u6742\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e2d\u5177\u6709\u9c81\u68d2\u6027\u548c\u5b9e\u7528\u4ef7\u503c\uff0c\u80fd\u591f\u6709\u6548\u63d0\u5347\u667a\u80fd\u4f53\u4ee3\u7801\u751f\u6210\u7684\u7075\u6d3b\u6027\u548c\u6548\u7387\u3002"}}
{"id": "2510.23055", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.23055", "abs": "https://arxiv.org/abs/2510.23055", "authors": ["Manjeshwar Aniruddh Mallya", "Alessio Ferrari", "Mohammad Amin Zadenoori", "Jacek D\u0105browski"], "title": "From Online User Feedback to Requirements: Evaluating Large Language Models for Classification and Specification Tasks", "comment": null, "summary": "[Context and Motivation] Online user feedback provides valuable information\nto support requirements engineering (RE). However, analyzing online user\nfeedback is challenging due to its large volume and noise. Large language\nmodels (LLMs) show strong potential to automate this process and outperform\nprevious techniques. They can also enable new tasks, such as generating\nrequirements specifications.\n  [Question-Problem] Despite their potential, the use of LLMs to analyze user\nfeedback for RE remains underexplored. Existing studies offer limited empirical\nevidence, lack thorough evaluation, and rarely provide replication packages,\nundermining validity and reproducibility.\n  [Principal Idea-Results] We evaluate five lightweight open-source LLMs on\nthree RE tasks: user request classification, NFR classification, and\nrequirements specification generation. Classification performance was measured\non two feedback datasets, and specification quality via human evaluation. LLMs\nachieved moderate-to-high classification accuracy (F1 ~ 0.47-0.68) and\nmoderately high specification quality (mean ~ 3/5).\n  [Contributions] We newly explore lightweight LLMs for feedback-driven\nrequirements development. Our contributions are: (i) an empirical evaluation of\nlightweight LLMs on three RE tasks, (ii) a replication package, and (iii)\ninsights into their capabilities and limitations for RE.", "AI": {"tldr": "\u8bc4\u4f305\u4e2a\u8f7b\u91cf\u7ea7\u5f00\u6e90LLM\u5728\u4e09\u4e2a\u9700\u6c42\u5de5\u7a0b\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\uff1a\u7528\u6237\u8bf7\u6c42\u5206\u7c7b\u3001\u975e\u529f\u80fd\u6027\u9700\u6c42\u5206\u7c7b\u548c\u9700\u6c42\u89c4\u8303\u751f\u6210\uff0c\u53d1\u73b0LLM\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u8fbe\u5230\u4e2d\u7b49\u81f3\u9ad8\u51c6\u786e\u7387\uff0c\u5728\u89c4\u8303\u751f\u6210\u4e0a\u83b7\u5f97\u4e2d\u7b49\u8d28\u91cf\u8bc4\u5206\u3002", "motivation": "\u5728\u7ebf\u7528\u6237\u53cd\u9988\u4e3a\u9700\u6c42\u5de5\u7a0b\u63d0\u4f9b\u6709\u4ef7\u503c\u4fe1\u606f\uff0c\u4f46\u5206\u6790\u9762\u4e34\u6570\u636e\u91cf\u5927\u548c\u566a\u58f0\u591a\u7684\u6311\u6218\u3002LLM\u6709\u6f5c\u529b\u81ea\u52a8\u5316\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4f46\u76ee\u524dLLM\u5728\u9700\u6c42\u5de5\u7a0b\u4e2d\u7684\u5e94\u7528\u7814\u7a76\u4e0d\u8db3\uff0c\u7f3a\u4e4f\u5145\u5206\u7684\u5b9e\u8bc1\u8bc4\u4f30\u3002", "method": "\u5728\u4e24\u4e2a\u53cd\u9988\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\u4e94\u4e2a\u8f7b\u91cf\u7ea7\u5f00\u6e90LLM\uff0c\u5bf9\u5206\u7c7b\u4efb\u52a1\u4f7f\u7528\u6027\u80fd\u6307\u6807\u8bc4\u4f30\uff0c\u5bf9\u89c4\u8303\u751f\u6210\u4efb\u52a1\u8fdb\u884c\u4eba\u5de5\u8d28\u91cf\u8bc4\u4f30\u3002", "result": "LLM\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u8fbe\u5230\u4e2d\u7b49\u81f3\u9ad8\u51c6\u786e\u7387\uff08F1\u5206\u65700.47-0.68\uff09\uff0c\u5728\u9700\u6c42\u89c4\u8303\u751f\u6210\u4e0a\u83b7\u5f97\u4e2d\u7b49\u8d28\u91cf\u8bc4\u5206\uff08\u5e73\u57473/5\u5206\uff09\u3002", "conclusion": "\u8f7b\u91cf\u7ea7LLM\u5728\u9700\u6c42\u5de5\u7a0b\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u6f5c\u529b\uff0c\u80fd\u591f\u4ee5\u4e2d\u7b49\u81f3\u9ad8\u51c6\u786e\u7387\u6267\u884c\u5206\u7c7b\u4efb\u52a1\uff0c\u5e76\u751f\u6210\u4e2d\u7b49\u8d28\u91cf\u7684\u9700\u6c42\u89c4\u8303\uff0c\u4e3a\u53cd\u9988\u9a71\u52a8\u7684\u9700\u6c42\u5f00\u53d1\u63d0\u4f9b\u4e86\u65b0\u53ef\u80fd\u6027\u3002"}}
{"id": "2510.23068", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.23068", "abs": "https://arxiv.org/abs/2510.23068", "authors": ["Ella Dodor", "Cristina V. Lopes"], "title": "Checkstyle+: Reducing Technical Debt Through The Use of Linters with LLMs", "comment": "11 pages, 9 figures, tool link:\n  https://github.com/ellacodee/CheckstylePlus", "summary": "Good code style improves program readability, maintainability, and\ncollaboration, and is an integral component of software quality. Developers,\nhowever, often cut corners when following style rules, leading to the wide\nadoption of tools such as linters in professional software development\nprojects. Traditional linters like Checkstyle operate using rigid, rule-based\nmechanisms that effectively detect many surface-level violations. However, in\nmost programming languages, there is a subset of style rules that require a\nmore nuanced understanding of code, and fall outside the scope of such static\nanalysis. In this paper, we propose Checkstyle+, a hybrid approach that\naugments Checkstyle with large language model (LLM) capabilities, to identify\nstyle violations that elude the conventional rule-based analysis. Checkstyle+\nis evaluated on a sample of 380 Java code files, drawn from a broader dataset\nof 30,800 real-world Java programs sourced from accepted Codeforces\nsubmissions. The results show that Checkstyle+ achieves superior performance\nover standard Checkstyle in detecting violations of the semantically nuanced\nrules.", "AI": {"tldr": "Checkstyle+ \u901a\u8fc7\u7ed3\u5408\u4f20\u7edf\u89c4\u5219\u68c0\u67e5\u548cLLM\u80fd\u529b\uff0c\u6539\u8fdb\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\uff0c\u7279\u522b\u9488\u5bf9\u9700\u8981\u8bed\u4e49\u7406\u89e3\u7684\u590d\u6742\u98ce\u683c\u89c4\u5219\u3002", "motivation": "\u4f20\u7edflinter\u5de5\u5177\u57fa\u4e8e\u89c4\u5219\u673a\u5236\uff0c\u65e0\u6cd5\u6709\u6548\u68c0\u6d4b\u9700\u8981\u8bed\u4e49\u7406\u89e3\u7684\u590d\u6742\u4ee3\u7801\u98ce\u683c\u95ee\u9898\uff0c\u5f00\u53d1\u8005\u5728\u5b9e\u8df5\u4e2d\u7ecf\u5e38\u5ffd\u7565\u8fd9\u4e9b\u89c4\u5219\u3002", "method": "\u63d0\u51fa\u6df7\u5408\u65b9\u6cd5Checkstyle+\uff0c\u5728Checkstyle\u57fa\u7840\u4e0a\u96c6\u6210\u5927\u8bed\u8a00\u6a21\u578b\u80fd\u529b\uff0c\u8bc6\u522b\u4f20\u7edf\u89c4\u5219\u5206\u6790\u65e0\u6cd5\u68c0\u6d4b\u7684\u98ce\u683c\u8fdd\u89c4\u3002", "result": "\u5728380\u4e2aJava\u4ee3\u7801\u6587\u4ef6\u4e0a\u7684\u8bc4\u4f30\u663e\u793a\uff0cCheckstyle+\u5728\u68c0\u6d4b\u8bed\u4e49\u590d\u6742\u89c4\u5219\u8fdd\u89c4\u65b9\u9762\u4f18\u4e8e\u6807\u51c6Checkstyle\u3002", "conclusion": "LLM\u589e\u5f3a\u7684\u6df7\u5408\u65b9\u6cd5\u80fd\u6709\u6548\u63d0\u5347\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u80fd\u529b\uff0c\u7279\u522b\u662f\u5728\u9700\u8981\u8bed\u4e49\u7406\u89e3\u7684\u590d\u6742\u89c4\u5219\u65b9\u9762\u3002"}}
{"id": "2510.23350", "categories": ["cs.SE", "D.2.1; D.2.4; D.2.5"], "pdf": "https://arxiv.org/pdf/2510.23350", "abs": "https://arxiv.org/abs/2510.23350", "authors": ["Alcino Cunha", "Nuno Macedo"], "title": "Validating Formal Specifications with LLM-generated Test Cases", "comment": null, "summary": "Validation is a central activity when developing formal specifications.\nSimilarly to coding, a possible validation technique is to define upfront test\ncases or scenarios that a future specification should satisfy or not.\nUnfortunately, specifying such test cases is burdensome and error prone, which\ncould cause users to skip this validation task. This paper reports the results\nof an empirical evaluation of using pre-trained large language models (LLMs) to\nautomate the generation of test cases from natural language requirements. In\nparticular, we focus on test cases for structural requirements of simple domain\nmodels formalized in the Alloy specification language. Our evaluation focuses\non the state-of-art GPT-5 model, but results from other closed- and open-source\nLLMs are also reported. The results show that, in this context, GPT-5 is\nalready quite effective at generating positive (and negative) test cases that\nare syntactically correct and that satisfy (or not) the given requirement, and\nthat can detect many wrong specifications written by humans.", "AI": {"tldr": "\u8bc4\u4f30\u4f7f\u7528\u9884\u8bad\u7ec3\u5927\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u4ece\u81ea\u7136\u8bed\u8a00\u9700\u6c42\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\u7684\u6548\u679c\uff0c\u7279\u522b\u5173\u6ce8\u4e3aAlloy\u89c4\u8303\u8bed\u8a00\u4e2d\u7684\u7ed3\u6784\u9700\u6c42\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\u3002", "motivation": "\u9a8c\u8bc1\u662f\u5f00\u53d1\u5f62\u5f0f\u89c4\u8303\u7684\u6838\u5fc3\u6d3b\u52a8\uff0c\u4f46\u624b\u52a8\u6307\u5b9a\u6d4b\u8bd5\u7528\u4f8b\u7e41\u7410\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u5bfc\u81f4\u7528\u6237\u53ef\u80fd\u8df3\u8fc7\u6b64\u9a8c\u8bc1\u4efb\u52a1\u3002", "method": "\u4f7f\u7528GPT-5\u7b49\u5927\u8bed\u8a00\u6a21\u578b\u4ece\u81ea\u7136\u8bed\u8a00\u9700\u6c42\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\uff0c\u91cd\u70b9\u5173\u6ce8Alloy\u89c4\u8303\u8bed\u8a00\u4e2d\u7684\u7ed3\u6784\u9700\u6c42\uff0c\u8bc4\u4f30\u591a\u79cd\u95ed\u6e90\u548c\u5f00\u6e90LLMs\u3002", "result": "GPT-5\u5728\u751f\u6210\u8bed\u6cd5\u6b63\u786e\u4e14\u6ee1\u8db3\uff08\u6216\u4e0d\u6ee1\u8db3\uff09\u7ed9\u5b9a\u9700\u6c42\u7684\u6b63\u9762\u548c\u8d1f\u9762\u6d4b\u8bd5\u7528\u4f8b\u65b9\u9762\u76f8\u5f53\u6709\u6548\uff0c\u80fd\u591f\u68c0\u6d4b\u51fa\u8bb8\u591a\u4eba\u5de5\u7f16\u5199\u7684\u9519\u8bef\u89c4\u8303\u3002", "conclusion": "\u5728\u6b64\u80cc\u666f\u4e0b\uff0cGPT-5\u5df2\u7ecf\u80fd\u591f\u6709\u6548\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6709\u52a9\u4e8e\u6539\u8fdb\u5f62\u5f0f\u89c4\u8303\u7684\u9a8c\u8bc1\u8fc7\u7a0b\u3002"}}
{"id": "2510.23389", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.23389", "abs": "https://arxiv.org/abs/2510.23389", "authors": ["Edoardo Manino", "Bruno Farias", "Rafael S\u00e1 Menezes", "Fedor Shmarov", "Lucas C. Cordeiro"], "title": "Floating-Point Neural Network Verification at the Software Level", "comment": "Pre-print before submission to peer review", "summary": "The behaviour of neural network components must be proven correct before\ndeployment in safety-critical systems. Unfortunately, existing neural network\nverification techniques cannot certify the absence of faults at the software\nlevel. In this paper, we show how to specify and verify that neural networks\nare safe, by explicitly reasoning about their floating-point implementation. In\ndoing so, we construct NeuroCodeBench 2.0, a benchmark comprising 912 neural\nnetwork verification examples that cover activation functions, common layers,\nand full neural networks of up to 170K parameters. Our verification suite is\nwritten in plain C and is compatible with the format of the International\nCompetition on Software Verification (SV-COMP). Thanks to it, we can conduct\nthe first rigorous evaluation of eight state-of-the-art software verifiers on\nneural network code. The results show that existing automated verification\ntools can correctly solve an average of 11% of our benchmark, while producing\naround 3% incorrect verdicts. At the same time, a historical analysis reveals\nthat the release of our benchmark has already had a significantly positive\nimpact on the latter.", "AI": {"tldr": "\u8be5\u8bba\u6587\u6784\u5efa\u4e86NeuroCodeBench 2.0\u57fa\u51c6\u6d4b\u8bd5\u96c6\uff0c\u5305\u542b912\u4e2a\u795e\u7ecf\u7f51\u7edc\u9a8c\u8bc1\u6848\u4f8b\uff0c\u7528\u4e8e\u8bc4\u4f30\u8f6f\u4ef6\u9a8c\u8bc1\u5de5\u5177\u5728\u795e\u7ecf\u7f51\u7edc\u4ee3\u7801\u4e0a\u7684\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u795e\u7ecf\u7f51\u7edc\u9a8c\u8bc1\u6280\u672f\u65e0\u6cd5\u5728\u8f6f\u4ef6\u5c42\u9762\u8bc1\u660e\u795e\u7ecf\u7f51\u7edc\u7ec4\u4ef6\u7684\u6b63\u786e\u6027\uff0c\u7279\u522b\u662f\u5728\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u4e2d\u90e8\u7f72\u65f6\u9700\u8981\u786e\u4fdd\u5176\u5b89\u5168\u6027\u3002", "method": "\u901a\u8fc7\u663e\u5f0f\u63a8\u7406\u795e\u7ecf\u7f51\u7edc\u7684\u6d6e\u70b9\u5b9e\u73b0\u6765\u6307\u5b9a\u548c\u9a8c\u8bc1\u5176\u5b89\u5168\u6027\uff0c\u6784\u5efa\u4e86\u517c\u5bb9SV-COMP\u683c\u5f0f\u7684C\u8bed\u8a00\u9a8c\u8bc1\u5957\u4ef6\u3002", "result": "\u8bc4\u4f308\u4e2a\u6700\u5148\u8fdb\u7684\u8f6f\u4ef6\u9a8c\u8bc1\u5de5\u5177\uff0c\u53d1\u73b0\u5b83\u4eec\u5e73\u5747\u53ea\u80fd\u6b63\u786e\u89e3\u51b3\u57fa\u51c6\u6d4b\u8bd5\u4e2d11%\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4ea7\u751f\u7ea63%\u7684\u9519\u8bef\u5224\u65ad\u3002\u4f46\u57fa\u51c6\u6d4b\u8bd5\u7684\u53d1\u5e03\u5df2\u5bf9\u5de5\u5177\u6539\u8fdb\u4ea7\u751f\u79ef\u6781\u5f71\u54cd\u3002", "conclusion": "\u73b0\u6709\u81ea\u52a8\u5316\u9a8c\u8bc1\u5de5\u5177\u5728\u795e\u7ecf\u7f51\u7edc\u4ee3\u7801\u9a8c\u8bc1\u65b9\u9762\u80fd\u529b\u6709\u9650\uff0c\u4f46\u901a\u8fc7\u6807\u51c6\u5316\u7684\u57fa\u51c6\u6d4b\u8bd5\u53ef\u4ee5\u63a8\u52a8\u8be5\u9886\u57df\u7684\u53d1\u5c55\u3002"}}
{"id": "2510.23528", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.23528", "abs": "https://arxiv.org/abs/2510.23528", "authors": ["Joran Leest", "Ilias Gerostathopoulos", "Patricia Lago", "Claudia Raibulet"], "title": "Tracing Distribution Shifts with Causal System Maps", "comment": null, "summary": "Monitoring machine learning (ML) systems is hard, with standard practice\nfocusing on detecting distribution shifts rather than their causes. Root-cause\nanalysis often relies on manual tracing to determine whether a shift is caused\nby software faults, data-quality issues, or natural change. We propose ML\nSystem Maps -- causal maps that, through layered views, make explicit the\npropagation paths between the environment and the ML system's internals,\nenabling systematic attribution of distribution shifts. We outline the approach\nand a research agenda for its development and evaluation.", "AI": {"tldr": "\u63d0\u51faML\u7cfb\u7edf\u5730\u56fe\u2014\u2014\u901a\u8fc7\u5206\u5c42\u89c6\u56fe\u663e\u793a\u73af\u5883\u4e0eML\u7cfb\u7edf\u5185\u90e8\u4e4b\u95f4\u4f20\u64ad\u8def\u5f84\u7684\u56e0\u679c\u5730\u56fe\uff0c\u7528\u4e8e\u7cfb\u7edf\u6027\u5730\u5f52\u56e0\u5206\u5e03\u504f\u79fb", "motivation": "\u76d1\u63a7\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u5f88\u56f0\u96be\uff0c\u6807\u51c6\u5b9e\u8df5\u4e3b\u8981\u5173\u6ce8\u68c0\u6d4b\u5206\u5e03\u504f\u79fb\u800c\u975e\u5176\u539f\u56e0\uff0c\u6839\u672c\u539f\u56e0\u5206\u6790\u901a\u5e38\u4f9d\u8d56\u624b\u52a8\u8ffd\u8e2a\u6765\u786e\u5b9a\u504f\u79fb\u662f\u7531\u8f6f\u4ef6\u6545\u969c\u3001\u6570\u636e\u8d28\u91cf\u95ee\u9898\u8fd8\u662f\u81ea\u7136\u53d8\u5316\u5f15\u8d77\u7684", "method": "ML\u7cfb\u7edf\u5730\u56fe\u65b9\u6cd5\uff0c\u901a\u8fc7\u56e0\u679c\u5730\u56fe\u548c\u5206\u5c42\u89c6\u56fe\uff0c\u660e\u786e\u73af\u5883\u4e0eML\u7cfb\u7edf\u5185\u90e8\u4e4b\u95f4\u7684\u4f20\u64ad\u8def\u5f84", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u7cfb\u7edf\u6027\u5730\u5f52\u56e0\u5206\u5e03\u504f\u79fb\uff0c\u4f7f\u504f\u79fb\u539f\u56e0\u5206\u6790\u66f4\u52a0\u7cfb\u7edf\u5316", "conclusion": "\u63d0\u51fa\u4e86ML\u7cfb\u7edf\u5730\u56fe\u65b9\u6cd5\u5e76\u5236\u5b9a\u4e86\u5176\u5f00\u53d1\u548c\u8bc4\u4f30\u7684\u7814\u7a76\u8bae\u7a0b"}}

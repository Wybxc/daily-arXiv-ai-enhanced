{"id": "2509.19607", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.19607", "abs": "https://arxiv.org/abs/2509.19607", "authors": ["William J. Bowman"], "title": "Macro-embedding Compiler Intermediate Languages in Racket", "comment": null, "summary": "We present the design and implementation of a macro-embedding of a family of\ncompiler intermediate languages, from a Scheme-like language to x86-64, into\nRacket. This embedding is used as part of a testing framework for a compilers\ncourse to derive interpreters for all the intermediate languages. The embedding\nimplements features including safe, functional abstractions as well as unsafe\nassembly features, and the interactions between the two at various intermediate\nstages.\n  This paper aims to demonstrate language-oriented techniques and abstractions\nfor implementing (1) a large family of languages and (2) interoperability\nbetween low- and high-level languages. The primary strength of this approach is\nthe high degree of code reuse and interoperability compared to implementing\neach interpreter separately. The design emphasizes modularity and\ncompositionality of an open set of language features by local macro expansion\ninto a single host language, rather than implementing a language pre-defined by\na closed set of features. This enables reuse from both the host language\n(Racket) and between intermediate languages, and enables interoperability\nbetween high- and low-level features, simplifying development of the\nintermediate language semantics. It also facilitates extending or redefining\nindividual language features in intermediate languages, and exposing multiple\ninterfaces to the embedded languages.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u5728Racket\u4e2d\u5d4c\u5165\u7f16\u8bd1\u5668\u4e2d\u95f4\u8bed\u8a00\u5bb6\u65cf\u7684\u5b8f\u5d4c\u5165\u8bbe\u8ba1\uff0c\u7528\u4e8e\u7f16\u8bd1\u5668\u8bfe\u7a0b\u6d4b\u8bd5\u6846\u67b6\uff0c\u5b9e\u73b0\u4eceScheme\u7c7b\u8bed\u8a00\u5230x86-64\u7684\u5b8c\u6574\u7f16\u8bd1\u94fe\u3002", "motivation": "\u5c55\u793a\u9762\u5411\u8bed\u8a00\u7684\u6280\u672f\u548c\u62bd\u8c61\u65b9\u6cd5\uff0c\u5b9e\u73b0\u5927\u91cf\u8bed\u8a00\u5bb6\u65cf\u4ee5\u53ca\u9ad8\u4f4e\u7ea7\u8bed\u8a00\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u5f3a\u8c03\u4ee3\u7801\u590d\u7528\u548c\u6a21\u5757\u5316\u8bbe\u8ba1\u3002", "method": "\u901a\u8fc7\u5c40\u90e8\u5b8f\u5c55\u5f00\u5230\u5355\u4e00\u5bbf\u4e3b\u8bed\u8a00\uff08Racket\uff09\uff0c\u5b9e\u73b0\u5f00\u653e\u8bed\u8a00\u7279\u5f81\u7684\u6a21\u5757\u5316\u548c\u7ec4\u5408\u6027\uff0c\u800c\u975e\u9884\u5b9a\u4e49\u5c01\u95ed\u7279\u5f81\u96c6\u7684\u8bed\u8a00\u3002", "result": "\u5b9e\u73b0\u4e86\u9ad8\u5ea6\u4ee3\u7801\u590d\u7528\u548c\u4e92\u64cd\u4f5c\u6027\uff0c\u7b80\u5316\u4e86\u4e2d\u95f4\u8bed\u8a00\u8bed\u4e49\u5f00\u53d1\uff0c\u652f\u6301\u6269\u5c55\u548c\u91cd\u5b9a\u4e49\u4e2a\u522b\u8bed\u8a00\u7279\u5f81\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u901a\u8fc7\u5b8f\u5d4c\u5165\u6280\u672f\u6210\u529f\u5b9e\u73b0\u4e86\u7f16\u8bd1\u5668\u4e2d\u95f4\u8bed\u8a00\u5bb6\u65cf\u7684\u9ad8\u6548\u5b9e\u73b0\uff0c\u5c55\u793a\u4e86\u8bed\u8a00\u5bfc\u5411\u7f16\u7a0b\u5728\u7f16\u8bd1\u5668\u6559\u80b2\u4e2d\u7684\u5b9e\u7528\u4ef7\u503c\u3002"}}
{"id": "2509.19613", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.19613", "abs": "https://arxiv.org/abs/2509.19613", "authors": ["William J. Bowman"], "title": "Compilation as Multi-Language Semantics", "comment": null, "summary": "Modeling interoperability between programs in different languages is a key\nproblem when modeling verified and secure compilation, which has been\nsuccessfully addressed using multi-language semantics. Unfortunately, existing\nmodels of compilation using multi-language semantics define two variants of\neach compiler pass: a syntactic translation on open terms to model compilation,\nand a run-time translation of closed terms at multi-language boundaries to\nmodel interoperability.\n  In this talk, I discuss work-in-progress approach to uniformly model a\ncompiler entirely as a reduction system on open term in a multi-language\nsemantics, rather than as a syntactic translation. This simultaneously defines\nthe compiler and the interoperability semantics, reducing duplication. It also\nprovides interesting semantic insights. Normalization of the cross-language\nredexes performs ahead-of-time (AOT) compilation. Evaluation in the\nmulti-language models just-in-time (JIT) compilation. Confluence of\nmulti-language reduction implies compiler correctness, and part of the secure\ncompilation proof (full abstraction), enabling focus on the difficult part of\nthe proof. Subject reduction of the multi-language reduction implies\ntype-preservation of the compiler.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u7edf\u4e00\u5efa\u6a21\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\uff0c\u5c06\u7f16\u8bd1\u5668\u5b8c\u5168\u5efa\u6a21\u4e3a\u591a\u8bed\u8a00\u8bed\u4e49\u4e2d\u5f00\u653e\u9879\u7684\u5f52\u7ea6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u8bed\u6cd5\u7ffb\u8bd1\uff0c\u4ece\u800c\u540c\u65f6\u5b9a\u4e49\u7f16\u8bd1\u5668\u548c\u4e92\u64cd\u4f5c\u6027\u8bed\u4e49\u3002", "motivation": "\u73b0\u6709\u4f7f\u7528\u591a\u8bed\u8a00\u8bed\u4e49\u7684\u7f16\u8bd1\u6a21\u578b\u9700\u8981\u4e3a\u6bcf\u4e2a\u7f16\u8bd1\u901a\u9053\u5b9a\u4e49\u4e24\u4e2a\u53d8\u4f53\uff1a\u8bed\u6cd5\u7ffb\u8bd1\u548c\u8fd0\u884c\u65f6\u7ffb\u8bd1\uff0c\u5b58\u5728\u91cd\u590d\u5de5\u4f5c\u3002", "method": "\u5c06\u7f16\u8bd1\u5668\u5efa\u6a21\u4e3a\u591a\u8bed\u8a00\u8bed\u4e49\u4e2d\u5f00\u653e\u9879\u7684\u5f52\u7ea6\u7cfb\u7edf\uff0c\u901a\u8fc7\u8de8\u8bed\u8a00redex\u7684\u5f52\u4e00\u5316\u5b9e\u73b0AOT\u7f16\u8bd1\uff0c\u901a\u8fc7\u591a\u8bed\u8a00\u8bc4\u4f30\u5b9e\u73b0JIT\u7f16\u8bd1\u3002", "result": "\u8be5\u65b9\u6cd5\u51cf\u5c11\u4e86\u91cd\u590d\u5b9a\u4e49\uff0c\u63d0\u4f9b\u4e86\u8bed\u4e49\u6d1e\u5bdf\uff0c\u5e76\u901a\u8fc7\u591a\u8bed\u8a00\u5f52\u7ea6\u7684\u5408\u6d41\u6027\u8bc1\u660e\u7f16\u8bd1\u5668\u6b63\u786e\u6027\u548c\u5b89\u5168\u7f16\u8bd1\u7684\u90e8\u5206\u8bc1\u660e\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u7edf\u4e00\u4e86\u7f16\u8bd1\u5668\u548c\u4e92\u64cd\u4f5c\u6027\u8bed\u4e49\u7684\u5efa\u6a21\uff0c\u7b80\u5316\u4e86\u8bc1\u660e\u8fc7\u7a0b\uff0c\u5e76\u4f7f\u7c7b\u578b\u4fdd\u6301\u6027\u8bc1\u660e\u66f4\u52a0\u76f4\u63a5\u3002"}}
{"id": "2509.20020", "categories": ["cs.PL", "cs.LG", "cs.MS", "cs.SC", "F.2.2; I.1.2; I.1.3"], "pdf": "https://arxiv.org/pdf/2509.20020", "abs": "https://arxiv.org/abs/2509.20020", "authors": ["Maurice Wenig", "Paul G. Rump", "Mark Blacher", "Joachim Giesen"], "title": "The Syntax and Semantics of einsum", "comment": "21 pages, 1 figure. Includes formal definitions, proofs of algebraic\n  properties, and nesting/denesting rules for the einsum notation", "summary": "In 2011, einsum was introduced to NumPy as a practical and convenient\nnotation for tensor expressions in machine learning, quantum circuit\nsimulation, and other fields. It has since been implemented in additional\nPython frameworks such as PyTorch and TensorFlow, as well as in other\nprogramming languages such as Julia. Despite its practical success, the einsum\nnotation still lacks a solid theoretical basis, and is not unified across the\ndifferent frameworks, limiting opportunities for formal reasoning and\nsystematic optimization. In this work, we discuss the terminology of tensor\nexpressions and provide a formal definition of the einsum language. Based on\nthis definition, we formalize and prove important equivalence rules for tensor\nexpressions and highlight their relevance in practical applications.", "AI": {"tldr": "\u672c\u6587\u4e3aeinsum\u7b26\u53f7\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\uff0c\u5b9a\u4e49\u4e86einsum\u8bed\u8a00\u7684\u5f62\u5f0f\u5316\u8bed\u4e49\uff0c\u5e76\u8bc1\u660e\u4e86\u5f20\u91cf\u8868\u8fbe\u5f0f\u7684\u91cd\u8981\u7b49\u4ef7\u89c4\u5219\u3002", "motivation": "\u5c3d\u7ba1einsum\u7b26\u53f7\u5728\u673a\u5668\u5b66\u4e60\u3001\u91cf\u5b50\u7535\u8def\u6a21\u62df\u7b49\u9886\u57df\u53d6\u5f97\u4e86\u5b9e\u9645\u6210\u529f\uff0c\u4f46\u7f3a\u4e4f\u575a\u5b9e\u7684\u7406\u8bba\u57fa\u7840\uff0c\u4e14\u5728\u4e0d\u540c\u6846\u67b6\u4e2d\u4e0d\u7edf\u4e00\uff0c\u9650\u5236\u4e86\u5f62\u5f0f\u5316\u63a8\u7406\u548c\u7cfb\u7edf\u4f18\u5316\u7684\u673a\u4f1a\u3002", "method": "\u8ba8\u8bba\u4e86\u5f20\u91cf\u8868\u8fbe\u5f0f\u7684\u672f\u8bed\uff0c\u63d0\u4f9b\u4e86einsum\u8bed\u8a00\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\uff0c\u57fa\u4e8e\u6b64\u5b9a\u4e49\u5f62\u5f0f\u5316\u5e76\u8bc1\u660e\u4e86\u5f20\u91cf\u8868\u8fbe\u5f0f\u7684\u91cd\u8981\u7b49\u4ef7\u89c4\u5219\u3002", "result": "\u5efa\u7acb\u4e86einsum\u7b26\u53f7\u7684\u7406\u8bba\u57fa\u7840\uff0c\u8bc1\u660e\u4e86\u7b49\u4ef7\u89c4\u5219\uff0c\u5e76\u5c55\u793a\u4e86\u8fd9\u4e9b\u89c4\u5219\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u76f8\u5173\u6027\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u4e3aeinsum\u7b26\u53f7\u63d0\u4f9b\u4e86\u5f62\u5f0f\u5316\u7406\u8bba\u57fa\u7840\uff0c\u6709\u52a9\u4e8e\u4fc3\u8fdb\u5f62\u5f0f\u5316\u63a8\u7406\u548c\u7cfb\u7edf\u4f18\u5316\u3002"}}
{"id": "2509.19459", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.19459", "abs": "https://arxiv.org/abs/2509.19459", "authors": ["Yutong Guo", "Weiyu Luo", "Brian Demsky"], "title": "Automated Insertion of Flushes and Fences for Persistency", "comment": null, "summary": "CXL shared memory and persistent memory allow the contents of memory to\npersist beyond crashes. Stores to persistent or CXL memory are typically not\nimmediately made persistent; developers must manually flush the corresponding\ncache lines to force the data to be written to the underlying storage.\nCorrectly using flush and fence operations is known to be challenging. While\nstate-of-the-art tools can find missing flush instructions, they often require\nbug-revealing test cases. No existing tools can ensure the absence of missing\nflush bugs.\n  In this paper, we present PMRobust, a compiler that automatically inserts\nflush and fence operations to ensure that code using persistent memory is free\nfrom missing flush and fence bugs. PMRobust employs a novel static analysis\nwith optimizations that target newly allocated objects. We have evaluated\nPMRobust on persistent memory libraries and several persistent memory data\nstructures and measured a geometric mean overhead of 0.26% relative to the\noriginal benchmarks with hand-placed flush and fence operations.", "AI": {"tldr": "PMRobust\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\uff0c\u80fd\u81ea\u52a8\u63d2\u5165flush\u548cfence\u64cd\u4f5c\uff0c\u786e\u4fdd\u6301\u4e45\u5185\u5b58\u4ee3\u7801\u4e0d\u4f1a\u51fa\u73b0\u7f3a\u5931flush\u548cfence\u7684bug\uff0c\u76f8\u6bd4\u624b\u52a8\u653e\u7f6e\u64cd\u4f5c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4ec5\u67090.26%\u7684\u5e73\u5747\u5f00\u9500\u3002", "motivation": "\u6301\u4e45\u5185\u5b58\u548cCXL\u5171\u4eab\u5185\u5b58\u9700\u8981\u5728\u5d29\u6e83\u540e\u4fdd\u6301\u6570\u636e\uff0c\u4f46\u6b63\u786e\u4f7f\u7528flush\u548cfence\u64cd\u4f5c\u5f88\u56f0\u96be\u3002\u73b0\u6709\u5de5\u5177\u9700\u8981bug\u66b4\u9732\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e14\u65e0\u6cd5\u786e\u4fdd\u6ca1\u6709\u7f3a\u5931flush\u7684bug\u3002", "method": "PMRobust\u91c7\u7528\u65b0\u9896\u7684\u9759\u6001\u5206\u6790\u65b9\u6cd5\u548c\u9488\u5bf9\u65b0\u5206\u914d\u5bf9\u8c61\u7684\u4f18\u5316\uff0c\u81ea\u52a8\u63d2\u5165\u5fc5\u8981\u7684flush\u548cfence\u64cd\u4f5c\u3002", "result": "\u5728\u6301\u4e45\u5185\u5b58\u5e93\u548c\u591a\u4e2a\u6301\u4e45\u5185\u5b58\u6570\u636e\u7ed3\u6784\u4e0a\u8bc4\u4f30\uff0c\u76f8\u5bf9\u4e8e\u624b\u52a8\u653e\u7f6eflush\u548cfence\u64cd\u4f5c\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u51e0\u4f55\u5e73\u5747\u5f00\u9500\u4ec5\u4e3a0.26%\u3002", "conclusion": "PMRobust\u80fd\u6709\u6548\u81ea\u52a8\u786e\u4fdd\u6301\u4e45\u5185\u5b58\u4ee3\u7801\u7684\u6b63\u786e\u6027\uff0c\u4e14\u6027\u80fd\u5f00\u9500\u6781\u5c0f\u3002"}}
{"id": "2509.19854", "categories": ["cs.LO", "math.AC", "68V20, 06A12"], "pdf": "https://arxiv.org/pdf/2509.19854", "abs": "https://arxiv.org/abs/2509.19854", "authors": ["Alessandro Linzi"], "title": "L-Mosaics and Bounded Join-Semilattices in Isabelle/HOL", "comment": null, "summary": "We present a complete formalization in Isabelle/HOL of the object part of an\nequivalence between L-mosaics and bounded join-semilattices, employing an\nAI-assisted methodology that integrates large language models as reasoning\nassistants throughout the proof development process. The equivalence was\noriginally established by Cangiotti, Linzi, and Talotti in their study of\nhypercompositional structures related to orthomodular lattices and quantum\nlogic. Our formalization rigorously verifies the main theoretical result and\ndemonstrates the mutual inverse property of the transformations establishing\nthis equivalence. The development showcases both the mathematical depth of\nmultivalued algebraic operations and the potential for AI-enhanced interactive\ntheorem proving in tackling complex formalization projects.", "AI": {"tldr": "\u5728Isabelle/HOL\u4e2d\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4e86L-mosaic\u4e0e\u6709\u754c\u5e76\u534a\u683c\u4e4b\u95f4\u7684\u7b49\u4ef7\u5173\u7cfb\uff0c\u91c7\u7528AI\u8f85\u52a9\u65b9\u6cd5\u5c06\u5927\u578b\u8bed\u8a00\u6a21\u578b\u6574\u5408\u5230\u8bc1\u660e\u5f00\u53d1\u8fc7\u7a0b\u4e2d", "motivation": "\u9a8c\u8bc1Cangiotti\u7b49\u4eba\u5173\u4e8e\u8d85\u7ec4\u5408\u7ed3\u6784\u4e0e\u6b63\u4ea4\u6a21\u683c\u548c\u91cf\u5b50\u903b\u8f91\u76f8\u5173\u7684\u7814\u7a76\u7ed3\u679c\uff0c\u5c55\u793aAI\u589e\u5f3a\u7684\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u5728\u5904\u7406\u590d\u6742\u5f62\u5f0f\u5316\u9879\u76ee\u4e2d\u7684\u6f5c\u529b", "method": "\u4f7f\u7528Isabelle/HOL\u8fdb\u884c\u5b8c\u6574\u5f62\u5f0f\u5316\uff0c\u91c7\u7528AI\u8f85\u52a9\u65b9\u6cd5\u5c06\u5927\u578b\u8bed\u8a00\u6a21\u578b\u4f5c\u4e3a\u63a8\u7406\u52a9\u624b\u6574\u5408\u5230\u8bc1\u660e\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u9a8c\u8bc1\u7b49\u4ef7\u5173\u7cfb\u53ca\u5176\u4e92\u9006\u6027\u8d28", "result": "\u6210\u529f\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4e86L-mosaic\u4e0e\u6709\u754c\u5e76\u534a\u683c\u4e4b\u95f4\u7684\u7b49\u4ef7\u5173\u7cfb\uff0c\u8bc1\u660e\u4e86\u53d8\u6362\u7684\u4e92\u9006\u6027\u8d28", "conclusion": "\u8be5\u5de5\u4f5c\u65e2\u5c55\u793a\u4e86\u591a\u503c\u4ee3\u6570\u8fd0\u7b97\u7684\u6570\u5b66\u6df1\u5ea6\uff0c\u4e5f\u8bc1\u660e\u4e86AI\u589e\u5f3a\u7684\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u5728\u5904\u7406\u590d\u6742\u5f62\u5f0f\u5316\u9879\u76ee\u4e2d\u7684\u6f5c\u529b"}}
{"id": "2509.19533", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.19533", "abs": "https://arxiv.org/abs/2509.19533", "authors": ["Mengdi Lu", "Steven Ding", "Furkan Alaca", "Philippe Charland"], "title": "Semantic-Aware Fuzzing: An Empirical Framework for LLM-Guided, Reasoning-Driven Input Mutation", "comment": null, "summary": "Security vulnerabilities in Internet-of-Things devices, mobile platforms, and\nautonomous systems remain critical. Traditional mutation-based fuzzers -- while\neffectively explore code paths -- primarily perform byte- or bit-level edits\nwithout semantic reasoning. Coverage-guided tools such as AFL++ use\ndictionaries, grammars, and splicing heuristics to impose shallow structural\nconstraints, leaving deeper protocol logic, inter-field dependencies, and\ndomain-specific semantics unaddressed. Conversely, reasoning-capable large\nlanguage models (LLMs) can leverage pretraining knowledge to understand input\nformats, respect complex constraints, and propose targeted mutations, much like\nan experienced reverse engineer or testing expert. However, lacking ground\ntruth for \"correct\" mutation reasoning makes supervised fine-tuning\nimpractical, motivating explorations of off-the-shelf LLMs via prompt-based\nfew-shot learning. To bridge this gap, we present an open-source microservices\nframework that integrates reasoning LLMs with AFL++ on Google's FuzzBench,\ntackling asynchronous execution and divergent hardware demands (GPU- vs.\nCPU-intensive) of LLMs and fuzzers. We evaluate four research questions: (R1)\nHow can reasoning LLMs be integrated into the fuzzing mutation loop? (R2) Do\nfew-shot prompts yield higher-quality mutations than zero-shot? (R3) Can prompt\nengineering with off-the-shelf models improve fuzzing directly? and (R4) Which\nopen-source reasoning LLMs perform best under prompt-only conditions?\nExperiments with Llama3.3, Deepseek-r1-Distill-Llama-70B, QwQ-32B, and Gemma3\nhighlight Deepseek as the most promising. Mutation effectiveness depends more\non prompt complexity and model choice than shot count. Response latency and\nthroughput bottlenecks remain key obstacles, offering directions for future\nwork.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u5c06\u63a8\u7406\u578b\u5927\u8bed\u8a00\u6a21\u578b\u4e0eAFL++\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u96c6\u6210\u7684\u5f00\u6e90\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u65e8\u5728\u89e3\u51b3\u4f20\u7edf\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u7f3a\u4e4f\u8bed\u4e49\u63a8\u7406\u80fd\u529b\u7684\u95ee\u9898\uff0c\u5e76\u901a\u8fc7\u5b9e\u9a8c\u8bc4\u4f30\u4e86\u4e0d\u540cLLM\u5728\u6a21\u7cca\u6d4b\u8bd5\u4e2d\u7684\u8868\u73b0\u3002", "motivation": "\u4f20\u7edf\u57fa\u4e8e\u7a81\u53d8\u7684\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u867d\u7136\u80fd\u6709\u6548\u63a2\u7d22\u4ee3\u7801\u8def\u5f84\uff0c\u4f46\u7f3a\u4e4f\u8bed\u4e49\u63a8\u7406\u80fd\u529b\uff0c\u65e0\u6cd5\u5904\u7406\u590d\u6742\u7684\u534f\u8bae\u903b\u8f91\u548c\u5b57\u6bb5\u95f4\u4f9d\u8d56\u5173\u7cfb\u3002\u800c\u5177\u5907\u63a8\u7406\u80fd\u529b\u7684\u5927\u8bed\u8a00\u6a21\u578b\u53ef\u4ee5\u5229\u7528\u9884\u8bad\u7ec3\u77e5\u8bc6\u7406\u89e3\u8f93\u5165\u683c\u5f0f\u548c\u7ea6\u675f\u6761\u4ef6\uff0c\u4f46\u7f3a\u4e4f\u76d1\u7763\u5fae\u8c03\u7684\u771f\u5b9e\u6570\u636e\uff0c\u56e0\u6b64\u9700\u8981\u63a2\u7d22\u57fa\u4e8e\u63d0\u793a\u7684\u5c11\u6837\u672c\u5b66\u4e60\u65b9\u6cd5\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u5f00\u6e90\u5fae\u670d\u52a1\u6846\u67b6\uff0c\u5c06\u63a8\u7406\u578bLLM\u4e0eAFL++\u96c6\u6210\u5728Google\u7684FuzzBench\u5e73\u53f0\u4e0a\uff0c\u89e3\u51b3\u4e86LLM\u548c\u6a21\u7cca\u6d4b\u8bd5\u5668\u5728\u5f02\u6b65\u6267\u884c\u548c\u786c\u4ef6\u9700\u6c42\uff08GPU vs CPU\uff09\u65b9\u9762\u7684\u5dee\u5f02\u3002\u8bc4\u4f30\u4e86\u56db\u4e2a\u7814\u7a76\u95ee\u9898\uff0c\u5305\u62ecLLM\u96c6\u6210\u65b9\u6cd5\u3001\u5c11\u6837\u672c\u63d0\u793a\u6548\u679c\u3001\u63d0\u793a\u5de5\u7a0b\u6539\u8fdb\u4ee5\u53ca\u4e0d\u540c\u5f00\u6e90LLM\u7684\u6027\u80fd\u6bd4\u8f83\u3002", "result": "\u5b9e\u9a8c\u4f7f\u7528Llama3.3\u3001Deepseek-r1-Distill-Llama-70B\u3001QwQ-32B\u548cGemma3\u7b49\u6a21\u578b\uff0c\u53d1\u73b0Deepseek\u8868\u73b0\u6700\u4f73\u3002\u7a81\u53d8\u6548\u679c\u66f4\u591a\u5730\u53d6\u51b3\u4e8e\u63d0\u793a\u590d\u6742\u5ea6\u548c\u6a21\u578b\u9009\u62e9\uff0c\u800c\u975e\u6837\u672c\u6570\u91cf\u3002\u54cd\u5e94\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u74f6\u9888\u4ecd\u662f\u4e3b\u8981\u6311\u6218\u3002", "conclusion": "\u63a8\u7406\u578bLLM\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u6a21\u7cca\u6d4b\u8bd5\u7684\u8bed\u4e49\u7406\u89e3\u80fd\u529b\uff0c\u4f46\u5b9e\u9645\u5e94\u7528\u4ecd\u9762\u4e34\u6027\u80fd\u74f6\u9888\u3002Deepseek\u6a21\u578b\u5728\u63d0\u793a\u5de5\u7a0b\u6761\u4ef6\u4e0b\u8868\u73b0\u6700\u4f18\uff0c\u4e3a\u672a\u6765\u5de5\u4f5c\u63d0\u4f9b\u4e86\u65b9\u5411\u3002"}}
{"id": "2509.20301", "categories": ["cs.LO", "F.3.1; F.4.1; D.2.4; G.1.7"], "pdf": "https://arxiv.org/pdf/2509.20301", "abs": "https://arxiv.org/abs/2509.20301", "authors": ["Jonathan Hellwig", "Lukas Sch\u00e4fer", "Long Qian", "Andr\u00e9 Platzer", "Matthias Althoff"], "title": "From Zonotopes to Proof Certificates: A Formal Pipeline for Safe Control Envelopes", "comment": null, "summary": "Synthesizing controllers that enforce both safety and actuator constraints is\na central challenge in the design of cyber-physical systems. State-of-the-art\nreachability methods based on zonotopes deliver impressive scalability, yet no\nzonotope reachability tool has been formally verified and the lack of\nend-to-end correctness undermines the confidence in their use for\nsafety-critical systems. Although deductive verification with the hybrid system\nprover KeYmaera X could, in principle, resolve this assurance gap, the\nhigh-dimensional set representations required for realistic control envelopes\noverwhelm its reasoning based on quantifier elimination. To address this gap,\nwe formalize how control-invariant sets serve as sound safety certificates.\nBuilding on that foundation, we develop a verification pipeline for control\nenvelopes that unites scalability and formal rigor. First, we compute control\nenvelopes with high-performance reachability algorithms. Second, we certify\nevery intermediate result using provably correct logical principles. To\naccelerate this certification, we offload computationally intensive zonotope\ncontainment tasks to efficient numerical backends, which return compact\nwitnesses that KeYmaera X validates rapidly. We show the practical utility of\nour approach through representative case studies.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408\u9ad8\u6027\u80fd\u53ef\u8fbe\u6027\u5206\u6790\u548c\u5f62\u5f0f\u5316\u9a8c\u8bc1\u7684\u63a7\u5236\u5305\u7edc\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u89e3\u51b3\u4f20\u7edf\u65b9\u6cd5\u5728\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u4e2d\u7f3a\u4e4f\u7aef\u5230\u7aef\u6b63\u786e\u6027\u4fdd\u8bc1\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8ezonotope\u7684\u53ef\u8fbe\u6027\u65b9\u6cd5\u867d\u7136\u5177\u6709\u5f88\u597d\u7684\u53ef\u6269\u5c55\u6027\uff0c\u4f46\u7f3a\u4e4f\u5f62\u5f0f\u5316\u9a8c\u8bc1\uff0c\u65e0\u6cd5\u4e3a\u5b89\u5168\u5173\u952e\u7cfb\u7edf\u63d0\u4f9b\u8db3\u591f\u7684\u53ef\u4fe1\u5ea6\u4fdd\u8bc1\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u9a8c\u8bc1\u6d41\u7a0b\uff1a\u9996\u5148\u4f7f\u7528\u9ad8\u6027\u80fd\u53ef\u8fbe\u6027\u7b97\u6cd5\u8ba1\u7b97\u63a7\u5236\u5305\u7edc\uff0c\u7136\u540e\u901a\u8fc7\u53ef\u8bc1\u660e\u6b63\u786e\u7684\u903b\u8f91\u539f\u5219\u5bf9\u6bcf\u4e2a\u4e2d\u95f4\u7ed3\u679c\u8fdb\u884c\u8ba4\u8bc1\uff0c\u5c06\u8ba1\u7b97\u5bc6\u96c6\u7684zonotope\u5305\u542b\u4efb\u52a1\u5378\u8f7d\u7ed9\u9ad8\u6548\u6570\u503c\u540e\u7aef\u3002", "result": "\u901a\u8fc7\u4ee3\u8868\u6027\u6848\u4f8b\u7814\u7a76\u5c55\u793a\u4e86\u8be5\u65b9\u6cd5\u7684\u5b9e\u9645\u6548\u7528\uff0c\u80fd\u591f\u6709\u6548\u7ed3\u5408\u53ef\u6269\u5c55\u6027\u548c\u5f62\u5f0f\u5316\u4e25\u8c28\u6027\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u63a7\u5236\u5305\u7edc\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u4e00\u79cd\u65e2\u5177\u6709\u53ef\u6269\u5c55\u6027\u53c8\u5177\u5907\u5f62\u5f0f\u5316\u4e25\u8c28\u6027\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u586b\u8865\u4e86\u73b0\u6709\u65b9\u6cd5\u7684\u4fdd\u8bc1\u7a7a\u767d\u3002"}}
{"id": "2509.19587", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.19587", "abs": "https://arxiv.org/abs/2509.19587", "authors": ["Mohamed Ouf", "Haoyu Li", "Michael Zhang", "Mariam Guizani"], "title": "Reverse Engineering User Stories from Code using Large Language Models", "comment": null, "summary": "User stories are essential in agile development, yet often missing or\noutdated in legacy and poorly documented systems. We investigate whether large\nlanguage models (LLMs) can automatically recover user stories directly from\nsource code and how prompt design impacts output quality. Using 1,750 annotated\nC++ snippets of varying complexity, we evaluate five state-of-the-art LLMs\nacross six prompting strategies. Results show that all models achieve, on\naverage, an F1 score of 0.8 for code up to 200 NLOC. Our findings show that a\nsingle illustrative example enables the smallest model (8B) to match the\nperformance of a much larger 70B model. In contrast, structured reasoning via\nChain-of-Thought offers only marginal gains, primarily for larger models.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u5927\u578b\u8bed\u8a00\u6a21\u578b\u80fd\u5426\u4ece\u6e90\u4ee3\u7801\u81ea\u52a8\u6062\u590d\u7528\u6237\u6545\u4e8b\uff0c\u4ee5\u53ca\u63d0\u793a\u8bbe\u8ba1\u5bf9\u8f93\u51fa\u8d28\u91cf\u7684\u5f71\u54cd\u3002\u4f7f\u75281,750\u4e2a\u5e26\u6ce8\u91ca\u7684C++\u4ee3\u7801\u7247\u6bb5\u8bc4\u4f30\u4e94\u79cd\u6700\u5148\u8fdb\u7684LLM\u548c\u516d\u79cd\u63d0\u793a\u7b56\u7565\u3002", "motivation": "\u7528\u6237\u6545\u4e8b\u5728\u654f\u6377\u5f00\u53d1\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5728\u9057\u7559\u7cfb\u7edf\u548c\u6587\u6863\u4e0d\u5b8c\u5584\u7684\u7cfb\u7edf\u4e2d\u7ecf\u5e38\u7f3a\u5931\u6216\u8fc7\u65f6\u3002", "method": "\u4f7f\u75281,750\u4e2a\u5e26\u6ce8\u91ca\u7684C++\u4ee3\u7801\u7247\u6bb5\uff0c\u8bc4\u4f30\u4e94\u79cdLLM\u5728\u516d\u79cd\u63d0\u793a\u7b56\u7565\u4e0b\u7684\u8868\u73b0\uff0c\u5305\u62ec\u5355\u793a\u4f8b\u63d0\u793a\u548c\u94fe\u5f0f\u63a8\u7406\u7b49\u65b9\u6cd5\u3002", "result": "\u6240\u6709\u6a21\u578b\u5728\u4e0d\u8d85\u8fc7200\u884c\u81ea\u7136\u8bed\u8a00\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5e73\u5747F1\u5206\u6570\u8fbe\u52300.8\u3002\u6700\u5c0f\u6a21\u578b\uff088B\uff09\u901a\u8fc7\u5355\u4e2a\u793a\u4f8b\u63d0\u793a\u5373\u53ef\u8fbe\u523070B\u5927\u6a21\u578b\u7684\u6027\u80fd\uff0c\u800c\u94fe\u5f0f\u63a8\u7406\u4ec5\u5bf9\u8f83\u5927\u6a21\u578b\u6709\u8fb9\u9645\u6539\u5584\u3002", "conclusion": "LLM\u80fd\u591f\u6709\u6548\u4ece\u6e90\u4ee3\u7801\u6062\u590d\u7528\u6237\u6545\u4e8b\uff0c\u7b80\u5355\u7684\u5355\u793a\u4f8b\u63d0\u793a\u7b56\u7565\u8db3\u4ee5\u8ba9\u5c0f\u578b\u6a21\u578b\u8fbe\u5230\u5927\u578b\u6a21\u578b\u7684\u6027\u80fd\uff0c\u63d0\u793a\u8bbe\u8ba1\u5bf9\u7ed3\u679c\u8d28\u91cf\u6709\u91cd\u8981\u5f71\u54cd\u3002"}}
{"id": "2509.19673", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.19673", "abs": "https://arxiv.org/abs/2509.19673", "authors": ["Ahmed Aljohani", "Anamul Haque Mollah", "Hyunsook Do"], "title": "Assertion Messages with Large Language Models (LLMs) for Code", "comment": "Accepted at Proceedings of the 2025 Evaluation and Assessment in\n  Software Engineering (EASE '25)", "summary": "Assertion messages significantly enhance unit tests by clearly explaining the\nreasons behind test failures, yet they are frequently omitted by developers and\nautomated test-generation tools. Despite recent advancements, Large Language\nModels (LLMs) have not been systematically evaluated for their ability to\ngenerate informative assertion messages. In this paper, we introduce an\nevaluation of four state-of-the-art Fill-in-the-Middle (FIM) LLMs -\nQwen2.5-Coder-32B, Codestral-22B, CodeLlama-13B, and StarCoder - on a dataset\nof 216 Java test methods containing developer-written assertion messages. We\nfind that Codestral-22B achieves the highest quality score of 2.76 out of 5\nusing a human-like evaluation approach, compared to 3.24 for manually written\nmessages. Our ablation study shows that including descriptive test comments\nfurther improves Codestral's performance to 2.97, highlighting the critical\nrole of context in generating clear assertion messages. Structural analysis\ndemonstrates that all models frequently replicate developers' preferred\nlinguistic patterns. We discuss the limitations of the selected models and\nconventional text evaluation metrics in capturing diverse assertion message\nstructures. Our benchmark, evaluation results, and discussions provide an\nessential foundation for advancing automated, context-aware generation of\nassertion messages in test code. A replication package is available at\nhttps://doi.org/10.5281/zenodo.15293133", "AI": {"tldr": "\u672c\u6587\u8bc4\u4f30\u4e86\u56db\u79cd\u6700\u5148\u8fdb\u7684\u586b\u5145\u4e2d\u95f4(FIM)\u5927\u8bed\u8a00\u6a21\u578b\u5728\u751f\u6210Java\u6d4b\u8bd5\u65ad\u8a00\u6d88\u606f\u65b9\u9762\u7684\u80fd\u529b\uff0c\u53d1\u73b0Codestral-22B\u8868\u73b0\u6700\u4f73\uff0c\u5f97\u5206\u4e3a2.76/5\uff0c\u63a5\u8fd1\u4eba\u5de5\u7f16\u5199\u76843.24\u5206\u3002\u7814\u7a76\u8868\u660e\u5305\u542b\u63cf\u8ff0\u6027\u6d4b\u8bd5\u6ce8\u91ca\u53ef\u8fdb\u4e00\u6b65\u63d0\u5347\u6027\u80fd\u81f32.97\u5206\u3002", "motivation": "\u65ad\u8a00\u6d88\u606f\u80fd\u663e\u8457\u63d0\u5347\u5355\u5143\u6d4b\u8bd5\u7684\u53ef\u7406\u89e3\u6027\uff0c\u4f46\u5f00\u53d1\u8005\u548c\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177\u7ecf\u5e38\u5ffd\u7565\u7f16\u5199\u3002\u5c3d\u7ba1LLMs\u6709\u6f5c\u529b\uff0c\u4f46\u5c1a\u672a\u7cfb\u7edf\u8bc4\u4f30\u5176\u5728\u751f\u6210\u4fe1\u606f\u6027\u65ad\u8a00\u6d88\u606f\u65b9\u9762\u7684\u80fd\u529b\u3002", "method": "\u4f7f\u7528\u5305\u542b216\u4e2aJava\u6d4b\u8bd5\u65b9\u6cd5\u7684\u6570\u636e\u96c6\uff0c\u8bc4\u4f30\u56db\u79cdFIM LLMs(Qwen2.5-Coder-32B\u3001Codestral-22B\u3001CodeLlama-13B\u3001StarCoder)\uff0c\u91c7\u7528\u7c7b\u4eba\u8bc4\u4f30\u65b9\u6cd5\uff0c\u5e76\u8fdb\u884c\u6d88\u878d\u7814\u7a76\u5206\u6790\u6d4b\u8bd5\u6ce8\u91ca\u7684\u5f71\u54cd\u3002", "result": "Codestral-22B\u83b7\u5f97\u6700\u9ad8\u8d28\u91cf\u5f97\u52062.76/5\uff0c\u5305\u542b\u6d4b\u8bd5\u6ce8\u91ca\u540e\u63d0\u5347\u81f32.97\u5206\u3002\u6240\u6709\u6a21\u578b\u90fd\u80fd\u590d\u5236\u5f00\u53d1\u8005\u504f\u597d\u7684\u8bed\u8a00\u6a21\u5f0f\u3002\u4f20\u7edf\u6587\u672c\u8bc4\u4f30\u6307\u6807\u5728\u6355\u6349\u591a\u6837\u5316\u65ad\u8a00\u6d88\u606f\u7ed3\u6784\u65b9\u9762\u5b58\u5728\u5c40\u9650\u6027\u3002", "conclusion": "\u7814\u7a76\u4e3a\u63a8\u8fdb\u81ea\u52a8\u5316\u3001\u4e0a\u4e0b\u6587\u611f\u77e5\u7684\u6d4b\u8bd5\u4ee3\u7801\u65ad\u8a00\u6d88\u606f\u751f\u6210\u63d0\u4f9b\u4e86\u91cd\u8981\u57fa\u7840\uff0c\u5f3a\u8c03\u4e86\u4e0a\u4e0b\u6587\u5728\u751f\u6210\u6e05\u6670\u65ad\u8a00\u6d88\u606f\u4e2d\u7684\u5173\u952e\u4f5c\u7528\u3002"}}
{"id": "2509.19708", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.19708", "abs": "https://arxiv.org/abs/2509.19708", "authors": ["Anand Kumar", "Vishal Khare", "Deepak Sharma", "Satyam Kumar", "Vijay Saini", "Anshul Yadav", "Sachendra Jain", "Ankit Rana", "Pratham Verma", "Vaibhav Meena", "Avinash Edubilli"], "title": "Intuition to Evidence: Measuring AI's True Impact on Developer Productivity", "comment": "16 pages, 10 figures, 5 tables", "summary": "We present a comprehensive real-world evaluation of AI-assisted software\ndevelopment tools deployed at enterprise scale. Over one year, 300 engineers\nacross multiple teams integrated an in-house AI platform (DeputyDev) that\ncombines code generation and automated review capabilities into their daily\nworkflows. Through rigorous cohort analysis, our study demonstrates\nstatistically significant productivity improvements, including an overall 31.8%\nreduction in PR review cycle time.\n  Developer adoption was strong, with 85% satisfaction for code review features\nand 93% expressing a desire to continue using the platform. Adoption patterns\nshowed systematic scaling from 4% engagement in month 1 to 83% peak usage by\nmonth 6, stabilizing at 60% active engagement. Top adopters achieved a 61%\nincrease in code volume pushed to production, contributing to approximately 30\nto 40% of code shipped to production through this tool, accounting for an\noverall 28% increase in code shipment volume.\n  Unlike controlled benchmark evaluations, our longitudinal analysis provides\nempirical evidence from production environments, revealing both the\ntransformative potential and practical deployment challenges of integrating AI\ninto enterprise software development workflows.", "AI": {"tldr": "\u672c\u6587\u5bf9\u5728\u4f01\u4e1a\u89c4\u6a21\u90e8\u7f72\u7684AI\u8f85\u52a9\u8f6f\u4ef6\u5f00\u53d1\u5de5\u5177\u8fdb\u884c\u4e86\u4e3a\u671f\u4e00\u5e74\u7684\u771f\u5b9e\u4e16\u754c\u8bc4\u4f30\uff0c\u5c55\u793a\u4e86AI\u5e73\u53f0DeputyDev\u5728\u4ee3\u7801\u751f\u6210\u548c\u81ea\u52a8\u5ba1\u67e5\u65b9\u9762\u7684\u663e\u8457\u751f\u4ea7\u529b\u63d0\u5347\u6548\u679c\u3002", "motivation": "\u65e8\u5728\u901a\u8fc7\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u7eb5\u5411\u5206\u6790\uff0c\u63d0\u4f9bAI\u5de5\u5177\u5728\u4f01\u4e1a\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u6574\u5408\u7684\u5b9e\u8bc1\u8bc1\u636e\uff0c\u63ed\u793a\u5176\u53d8\u9769\u6f5c\u529b\u548c\u5b9e\u9645\u90e8\u7f72\u6311\u6218\u3002", "method": "\u5728\u4e00\u5e74\u65f6\u95f4\u5185\uff0c\u8ba9300\u540d\u5de5\u7a0b\u5e08\u8de8\u591a\u4e2a\u56e2\u961f\u96c6\u6210\u5185\u90e8AI\u5e73\u53f0DeputyDev\u5230\u65e5\u5e38\u5de5\u4f5c\u6d41\u7a0b\u4e2d\uff0c\u901a\u8fc7\u4e25\u683c\u7684\u961f\u5217\u5206\u6790\u8fdb\u884c\u8bc4\u4f30\u3002", "result": "\u7edf\u8ba1\u663e\u8457\u7684\u751f\u4ea7\u529b\u6539\u8fdb\uff1aPR\u5ba1\u67e5\u5468\u671f\u65f6\u95f4\u51cf\u5c1131.8%\uff1b\u5f00\u53d1\u8005\u6ee1\u610f\u5ea685%\uff0c93%\u5e0c\u671b\u7ee7\u7eed\u4f7f\u7528\uff1b\u4ee3\u7801\u63a8\u9001\u91cf\u589e\u52a061%\uff0c\u7ea630-40%\u7684\u751f\u4ea7\u4ee3\u7801\u901a\u8fc7\u8be5\u5de5\u5177\u4ea4\u4ed8\uff0c\u6574\u4f53\u4ee3\u7801\u4ea4\u4ed8\u91cf\u589e\u52a028%\u3002", "conclusion": "\u7814\u7a76\u8868\u660eAI\u8f85\u52a9\u5de5\u5177\u5728\u4f01\u4e1a\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u5177\u6709\u663e\u8457\u7684\u53d8\u9769\u6f5c\u529b\uff0c\u80fd\u591f\u6709\u6548\u63d0\u5347\u751f\u4ea7\u529b\u548c\u4ee3\u7801\u4ea4\u4ed8\u6548\u7387\uff0c\u4f46\u540c\u65f6\u4e5f\u9762\u4e34\u5b9e\u9645\u90e8\u7f72\u7684\u6311\u6218\u3002"}}
{"id": "2509.19918", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.19918", "abs": "https://arxiv.org/abs/2509.19918", "authors": ["Micheline B\u00e9n\u00e9dicte Moumoula", "Serge Lionel Nikiema", "Alb\u00e9rick Euraste Djire", "Abdoul Kader Kabore", "Jacques Klein", "Tegawend\u00e9 F. Bissyande"], "title": "Beyond Language Barriers: Multi-Agent Coordination for Multi-Language Code Generation", "comment": null, "summary": "Producing high-quality code across multiple programming languages is\nincreasingly important as today's software systems are built on heterogeneous\nstacks. Large language models (LLMs) have advanced the state of automated\nprogramming, yet their proficiency varies sharply between languages, especially\nthose with limited training data such as Rust, Perl, OCaml, and Erlang. Many\ncurrent solutions including language-specific fine-tuning, multi-agent\norchestration, transfer learning, and intermediate-representation pipelines\nstill approach each target language in isolation, missing opportunities to\nshare knowledge or exploit recurring cross-language patterns.\n  XL-CoGen tackles this challenge with a coordinated multi-agent architecture\nthat integrates intermediate representation, code generation, translation, and\nautomated repair. Its distinguishing feature is a data-driven mechanism for\nselecting bridging languages: empirically derived transfer matrices identify\nthe best intermediate languages based on demonstrated translation success\nrather than raw generation accuracy. The system performs early output\nvalidation, iteratively corrects errors, and reuses intermediate artifacts as\ncontextual scaffolds for subsequent translations.\n  Extensive experiments show that XL-CoGen yields notable improvements with 13\npercentage-point gains over the strongest fine-tuned baseline and as much as 30\npercentage points over existing single-language multi-agent methods. Ablation\nstudies further demonstrate that compatibility-guided bridging significantly\noutperforms LLM-based heuristics, confirming the value of cumulative\ncross-language knowledge transfer.", "AI": {"tldr": "XL-CoGen\u662f\u4e00\u4e2a\u534f\u8c03\u591a\u667a\u80fd\u4f53\u67b6\u6784\uff0c\u901a\u8fc7\u6570\u636e\u9a71\u52a8\u7684\u6865\u63a5\u8bed\u8a00\u9009\u62e9\u673a\u5236\uff0c\u663e\u8457\u63d0\u5347\u591a\u7f16\u7a0b\u8bed\u8a00\u4ee3\u7801\u751f\u6210\u8d28\u91cf\uff0c\u5728\u5f02\u6784\u6280\u672f\u6808\u73af\u5883\u4e2d\u5b9e\u73b0\u8de8\u8bed\u8a00\u77e5\u8bc6\u5171\u4eab\u548c\u6a21\u5f0f\u5229\u7528\u3002", "motivation": "\u5f53\u524d\u8f6f\u4ef6\u7cfb\u7edf\u6784\u5efa\u5728\u5f02\u6784\u6280\u672f\u6808\u4e0a\uff0c\u9700\u8981\u9ad8\u8d28\u91cf\u7684\u591a\u8bed\u8a00\u4ee3\u7801\u751f\u6210\u80fd\u529b\u3002\u73b0\u6709LLMs\u5728\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u95f4\u7684\u80fd\u529b\u5dee\u5f02\u663e\u8457\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u8bad\u7ec3\u6570\u636e\u6709\u9650\u7684Rust\u3001Perl\u3001OCaml\u548cErlang\u7b49\u8bed\u8a00\uff0c\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u5f80\u5f80\u5b64\u7acb\u5904\u7406\u6bcf\u79cd\u76ee\u6807\u8bed\u8a00\uff0c\u9519\u8fc7\u4e86\u77e5\u8bc6\u5171\u4eab\u548c\u8de8\u8bed\u8a00\u6a21\u5f0f\u5229\u7528\u7684\u673a\u4f1a\u3002", "method": "XL-CoGen\u91c7\u7528\u534f\u8c03\u591a\u667a\u80fd\u4f53\u67b6\u6784\uff0c\u96c6\u6210\u4e2d\u95f4\u8868\u793a\u3001\u4ee3\u7801\u751f\u6210\u3001\u7ffb\u8bd1\u548c\u81ea\u52a8\u4fee\u590d\u3002\u5176\u6838\u5fc3\u521b\u65b0\u662f\u6570\u636e\u9a71\u52a8\u7684\u6865\u63a5\u8bed\u8a00\u9009\u62e9\u673a\u5236\uff1a\u901a\u8fc7\u7ecf\u9a8c\u63a8\u5bfc\u7684\u8f6c\u79fb\u77e9\u9635\u8bc6\u522b\u6700\u4f73\u4e2d\u95f4\u8bed\u8a00\uff08\u57fa\u4e8e\u5b9e\u9645\u7ffb\u8bd1\u6210\u529f\u7387\u800c\u975e\u539f\u59cb\u751f\u6210\u51c6\u786e\u7387\uff09\uff0c\u7cfb\u7edf\u6267\u884c\u65e9\u671f\u8f93\u51fa\u9a8c\u8bc1\u3001\u8fed\u4ee3\u9519\u8bef\u4fee\u6b63\uff0c\u5e76\u91cd\u7528\u4e2d\u95f4\u4ea7\u7269\u4f5c\u4e3a\u540e\u7eed\u7ffb\u8bd1\u7684\u4e0a\u4e0b\u6587\u652f\u67b6\u3002", "result": "\u5e7f\u6cdb\u5b9e\u9a8c\u8868\u660e\uff0cXL-CoGen\u5e26\u6765\u4e86\u663e\u8457\u6539\u8fdb\uff0c\u6bd4\u6700\u5f3a\u7684\u5fae\u8c03\u57fa\u7ebf\u63d0\u9ad8\u4e8613\u4e2a\u767e\u5206\u70b9\uff0c\u6bd4\u73b0\u6709\u7684\u5355\u8bed\u8a00\u591a\u667a\u80fd\u4f53\u65b9\u6cd5\u63d0\u9ad8\u4e86\u591a\u8fbe30\u4e2a\u767e\u5206\u70b9\u3002\u6d88\u878d\u7814\u7a76\u8fdb\u4e00\u6b65\u8bc1\u660e\uff0c\u517c\u5bb9\u6027\u5f15\u5bfc\u7684\u6865\u63a5\u663e\u8457\u4f18\u4e8e\u57fa\u4e8eLLM\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u3002", "conclusion": "\u8be5\u7814\u7a76\u8bc1\u5b9e\u4e86\u7d2f\u79ef\u8de8\u8bed\u8a00\u77e5\u8bc6\u8f6c\u79fb\u7684\u4ef7\u503c\uff0cXL-CoGen\u901a\u8fc7\u534f\u8c03\u591a\u667a\u80fd\u4f53\u67b6\u6784\u548c\u6570\u636e\u9a71\u52a8\u7684\u6865\u63a5\u8bed\u8a00\u9009\u62e9\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u591a\u7f16\u7a0b\u8bed\u8a00\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u6311\u6218\uff0c\u4e3a\u5f02\u6784\u6280\u672f\u6808\u5f00\u53d1\u63d0\u4f9b\u4e86\u6709\u529b\u652f\u6301\u3002"}}
{"id": "2509.20010", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20010", "abs": "https://arxiv.org/abs/2509.20010", "authors": ["Xiaoning Ren", "Yuhang Ye", "Xiongfei Wu", "Yueming Wu", "Yinxing Xue"], "title": "Demystifying the Evolution of Neural Networks with BOM Analysis: Insights from a Large-Scale Study of 55,997 GitHub Repositories", "comment": "11pages,8figures", "summary": "Neural networks have become integral to many fields due to their exceptional\nperformance. The open-source community has witnessed a rapid influx of neural\nnetwork (NN) repositories with fast-paced iterations, making it crucial for\npractitioners to analyze their evolution to guide development and stay ahead of\ntrends. While extensive research has explored traditional software evolution\nusing Software Bill of Materials (SBOMs), these are ill-suited for NN software,\nwhich relies on pre-defined modules and pre-trained models (PTMs) with distinct\ncomponent structures and reuse patterns. Conceptual AI Bills of Materials\n(AIBOMs) also lack practical implementations for large-scale evolutionary\nanalysis. To fill this gap, we introduce the Neural Network Bill of Material\n(NNBOM), a comprehensive dataset construct tailored for NN software. We create\na large-scale NNBOM database from 55,997 curated PyTorch GitHub repositories,\ncataloging their TPLs, PTMs, and modules. Leveraging this database, we conduct\na comprehensive empirical study of neural network software evolution across\nsoftware scale, component reuse, and inter-domain dependency, providing\nmaintainers and developers with a holistic view of its long-term trends.\nBuilding on these findings, we develop two prototype applications,\n\\textit{Multi repository Evolution Analyzer} and \\textit{Single repository\nComponent Assessor and Recommender}, to demonstrate the practical value of our\nanalysis.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u795e\u7ecf\u7f51\u7edc\u7269\u6599\u6e05\u5355\uff08NNBOM\uff09\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u5206\u6790\u795e\u7ecf\u7f51\u7edc\u8f6f\u4ef6\u7684\u6f14\u5316\u8d8b\u52bf\uff0c\u5e76\u57fa\u4e8e55,997\u4e2aPyTorch GitHub\u4ed3\u5e93\u6784\u5efa\u4e86\u5927\u89c4\u6a21\u6570\u636e\u96c6\uff0c\u8fdb\u884c\u4e86\u5b9e\u8bc1\u7814\u7a76\u3002", "motivation": "\u4f20\u7edf\u8f6f\u4ef6\u7269\u6599\u6e05\u5355\uff08SBOM\uff09\u4e0d\u9002\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u8f6f\u4ef6\uff0c\u800c\u6982\u5ff5\u6027AI\u7269\u6599\u6e05\u5355\uff08AIBOM\uff09\u7f3a\u4e4f\u5927\u89c4\u6a21\u6f14\u5316\u5206\u6790\u7684\u5b9e\u9645\u5b9e\u73b0\u3002\u9700\u8981\u4e13\u95e8\u7684\u65b9\u6cd5\u6765\u5206\u6790\u795e\u7ecf\u7f51\u7edc\u8f6f\u4ef6\u7684\u7ec4\u4ef6\u7ed3\u6784\u548c\u91cd\u7528\u6a21\u5f0f\u3002", "method": "\u5f15\u5165NNBOM\u6570\u636e\u96c6\u6784\u9020\u65b9\u6cd5\uff0c\u4ece55,997\u4e2a\u7cbe\u9009\u7684PyTorch GitHub\u4ed3\u5e93\u4e2d\u6536\u96c6\u7b2c\u4e09\u65b9\u5e93\uff08TPLs\uff09\u3001\u9884\u8bad\u7ec3\u6a21\u578b\uff08PTMs\uff09\u548c\u6a21\u5757\u4fe1\u606f\uff0c\u8fdb\u884c\u8f6f\u4ef6\u89c4\u6a21\u3001\u7ec4\u4ef6\u91cd\u7528\u548c\u8de8\u9886\u57df\u4f9d\u8d56\u7684\u5168\u9762\u5b9e\u8bc1\u7814\u7a76\u3002", "result": "\u6784\u5efa\u4e86\u5927\u89c4\u6a21NNBOM\u6570\u636e\u5e93\uff0c\u5f00\u53d1\u4e86\u4e24\u4e2a\u539f\u578b\u5e94\u7528\uff1a\u591a\u4ed3\u5e93\u6f14\u5316\u5206\u6790\u5668\u548c\u5355\u4ed3\u5e93\u7ec4\u4ef6\u8bc4\u4f30\u63a8\u8350\u5668\uff0c\u5c55\u793a\u4e86\u5206\u6790\u7684\u5b9e\u9645\u4ef7\u503c\u3002", "conclusion": "NNBOM\u4e3a\u795e\u7ecf\u7f51\u7edc\u8f6f\u4ef6\u7684\u6f14\u5316\u5206\u6790\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u548c\u7ef4\u62a4\u8005\u7406\u89e3\u957f\u671f\u8d8b\u52bf\uff0c\u6307\u5bfc\u5f00\u53d1\u51b3\u7b56\u3002"}}
{"id": "2509.20136", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20136", "abs": "https://arxiv.org/abs/2509.20136", "authors": ["Wei Zhang", "Jack Yang", "Renshuai Tao", "Lingzheng Chai", "Shawn Guo", "Jiajun Wu", "Xiaoming Chen", "Ganqu Cui", "Ning Ding", "Xander Xu", "Hu Wei", "Bowen Zhou"], "title": "V-GameGym: Visual Game Generation for Code Large Language Models", "comment": null, "summary": "Code large language models have demonstrated remarkable capabilities in\nprogramming tasks, yet current benchmarks primarily focus on single modality\nrather than visual game development. Most existing code-related benchmarks\nevaluate syntax correctness and execution accuracy, overlooking critical\ngame-specific metrics such as playability, visual aesthetics, and user\nengagement that are essential for real-world deployment. To address the gap\nbetween current LLM capabilities in algorithmic problem-solving and competitive\nprogramming versus the comprehensive requirements of practical game\ndevelopment, we present V-GameGym, a comprehensive benchmark comprising 2,219\nhigh-quality samples across 100 thematic clusters derived from real-world\nrepositories, adopting a novel clustering-based curation methodology to ensure\nboth diversity and structural completeness. Further, we introduce a multimodal\nevaluation framework with an automated LLM-driven pipeline for visual code\nsynthesis using complete UI sandbox environments. Our extensive analysis\nreveals that V-GameGym effectively bridges the gap between code generation\naccuracy and practical game development workflows, providing quantifiable\nquality metrics for visual programming and interactive element generation.", "AI": {"tldr": "V-GameGym\u662f\u4e00\u4e2a\u9488\u5bf9\u89c6\u89c9\u6e38\u620f\u5f00\u53d1\u7684\u591a\u6a21\u6001\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b2,219\u4e2a\u9ad8\u8d28\u91cf\u6837\u672c\uff0c\u65e8\u5728\u586b\u8865\u5f53\u524d\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u5728\u7b97\u6cd5\u95ee\u9898\u89e3\u51b3\u4e0e\u5b9e\u9645\u6e38\u620f\u5f00\u53d1\u9700\u6c42\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002", "motivation": "\u5f53\u524d\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u57fa\u51c6\u6d4b\u8bd5\u4e3b\u8981\u5173\u6ce8\u8bed\u6cd5\u6b63\u786e\u6027\u548c\u6267\u884c\u51c6\u786e\u6027\uff0c\u5ffd\u89c6\u4e86\u6e38\u620f\u5f00\u53d1\u4e2d\u5173\u952e\u7684\u89c6\u89c9\u7f8e\u5b66\u3001\u53ef\u73a9\u6027\u548c\u7528\u6237\u53c2\u4e0e\u5ea6\u7b49\u6307\u6807\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u9645\u6e38\u620f\u5f00\u53d1\u9700\u6c42\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u805a\u7c7b\u7684\u7b5b\u9009\u65b9\u6cd5\u4ece\u771f\u5b9e\u4e16\u754c\u4ed3\u5e93\u4e2d\u63d0\u53d6100\u4e2a\u4e3b\u9898\u7c07\u7684\u6837\u672c\uff0c\u6784\u5efa\u591a\u6a21\u6001\u8bc4\u4f30\u6846\u67b6\uff0c\u4f7f\u7528\u5b8c\u6574\u7684UI\u6c99\u76d2\u73af\u5883\u8fdb\u884c\u81ea\u52a8\u5316LLM\u9a71\u52a8\u7684\u89c6\u89c9\u4ee3\u7801\u5408\u6210\u3002", "result": "V-GameGym\u6709\u6548\u8fde\u63a5\u4e86\u4ee3\u7801\u751f\u6210\u51c6\u786e\u6027\u4e0e\u5b9e\u9645\u6e38\u620f\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\uff0c\u4e3a\u89c6\u89c9\u7f16\u7a0b\u548c\u4ea4\u4e92\u5143\u7d20\u751f\u6210\u63d0\u4f9b\u4e86\u53ef\u91cf\u5316\u7684\u8d28\u91cf\u6307\u6807\u3002", "conclusion": "\u8be5\u57fa\u51c6\u6d4b\u8bd5\u4e3a\u8bc4\u4f30\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u5728\u89c6\u89c9\u6e38\u620f\u5f00\u53d1\u9886\u57df\u7684\u7efc\u5408\u80fd\u529b\u63d0\u4f9b\u4e86\u91cd\u8981\u5de5\u5177\uff0c\u63a8\u52a8\u4e86\u4ece\u5355\u7eaf\u7b97\u6cd5\u95ee\u9898\u89e3\u51b3\u5230\u5b9e\u9645\u5e94\u7528\u573a\u666f\u7684\u8f6c\u53d8\u3002"}}
{"id": "2509.20149", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20149", "abs": "https://arxiv.org/abs/2509.20149", "authors": ["Jianzhang Zhang", "Jialong Zhou", "Nan Niu", "Chuang Liu"], "title": "Enhancing Requirement Traceability through Data Augmentation Using Large Language Models", "comment": null, "summary": "Requirements traceability is crucial in software engineering to ensure\nconsistency between requirements and code. However, existing automated\ntraceability methods are constrained by the scarcity of training data and\nchallenges in bridging the semantic gap between artifacts. This study aims to\naddress the data scarcity problem in requirements traceability by employing\nlarge language models (LLMs) for data augmentation. We propose a novel approach\nthat utilizes prompt-based techniques with LLMs to generate augmented\nrequirement-to-code trace links, thereby enhancing the training dataset. Four\nLLMs (Gemini 1.5 Pro, Claude 3, GPT-3.5, and GPT-4) were used, employing both\nzero-shot and few-shot templates. Moreover, we optimized the encoder component\nof the tracing model to improve its efficiency and adaptability to augmented\ndata. The key contributions of this paper are: (1) proposing and evaluating\nfour prompt templates for data augmentation; (2) providing a comparative\nanalysis of four LLMs for generating trace links; (3) enhancing the model's\nencoder for improved adaptability to augmented datasets. Experimental results\nshow that our approach significantly enhances model performance, achieving an\nF1 score improvement of up to 28.59%, thus demonstrating its effectiveness and\npotential for practical application.", "AI": {"tldr": "\u5229\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u6570\u636e\u589e\u5f3a\uff0c\u89e3\u51b3\u9700\u6c42\u8ffd\u8e2a\u4e2d\u7684\u6570\u636e\u7a00\u7f3a\u95ee\u9898\uff0c\u901a\u8fc7\u63d0\u793a\u6280\u672f\u751f\u6210\u9700\u6c42\u5230\u4ee3\u7801\u7684\u8ffd\u8e2a\u94fe\u63a5\uff0c\u663e\u8457\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u81ea\u52a8\u5316\u9700\u6c42\u8ffd\u8e2a\u65b9\u6cd5\u53d7\u9650\u4e8e\u8bad\u7ec3\u6570\u636e\u7a00\u7f3a\u548c\u9700\u6c42\u4e0e\u4ee3\u7801\u4e4b\u95f4\u8bed\u4e49\u9e3f\u6c9f\u7684\u6311\u6218\uff0c\u9700\u8981\u89e3\u51b3\u6570\u636e\u4e0d\u8db3\u7684\u95ee\u9898\u3002", "method": "\u63d0\u51fa\u57fa\u4e8e\u63d0\u793a\u6280\u672f\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u56db\u79cdLLM\uff08Gemini 1.5 Pro\u3001Claude 3\u3001GPT-3.5\u3001GPT-4\uff09\u548c\u96f6\u6837\u672c/\u5c11\u6837\u672c\u6a21\u677f\u751f\u6210\u589e\u5f3a\u7684\u8ffd\u8e2a\u94fe\u63a5\uff0c\u5e76\u4f18\u5316\u8ffd\u8e2a\u6a21\u578b\u7684\u7f16\u7801\u5668\u7ec4\u4ef6\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff0cF1\u5206\u6570\u6700\u9ad8\u63d0\u534728.59%\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u89e3\u51b3\u4e86\u9700\u6c42\u8ffd\u8e2a\u4e2d\u7684\u6570\u636e\u7a00\u7f3a\u95ee\u9898\uff0c\u5177\u6709\u5b9e\u9645\u5e94\u7528\u6f5c\u529b\u3002"}}
{"id": "2509.20172", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.20172", "abs": "https://arxiv.org/abs/2509.20172", "authors": ["Daniel Maninger", "Leon Chemnitz", "Amir Molzam Sharifloo", "Jannis Brugger", "Mira Mezini"], "title": "Benchmarking Web API Integration Code Generation", "comment": "To be published in Proceedings of 2nd ACM International Conference on\n  AI-powered Software, Benchmark & Dataset Track (AIware '25)", "summary": "API integration is a cornerstone of our digital infrastructure, enabling\nsoftware systems to connect and interact. However, as shown by many studies,\nwriting or generating correct code to invoke APIs, particularly web APIs, is\nchallenging. Although large language models~(LLMs) have become popular in\nsoftware development, their effectiveness in automating the generation of web\nAPI integration code remains unexplored. In order to address this, we present a\ndataset and evaluation pipeline designed to assess the ability of LLMs to\ngenerate web API invocation code. Our experiments with several open-source LLMs\nreveal that generating API invocations poses a significant challenge, resulting\nin hallucinated endpoints, incorrect argument usage, and other errors. None of\nthe evaluated open-source models were able to solve more than 40% of the tasks.", "AI": {"tldr": "\u8bc4\u4f30\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210Web API\u96c6\u6210\u4ee3\u7801\u80fd\u529b\u7684\u7814\u7a76\uff0c\u53d1\u73b0\u73b0\u6709\u5f00\u6e90\u6a21\u578b\u5728\u751f\u6210API\u8c03\u7528\u4ee3\u7801\u65f6\u5b58\u5728\u663e\u8457\u6311\u6218\uff0c\u6210\u529f\u7387\u4f4e\u4e8e40%", "motivation": "API\u96c6\u6210\u662f\u6570\u5b57\u57fa\u7840\u8bbe\u65bd\u7684\u5173\u952e\uff0c\u4f46\u7f16\u5199\u6b63\u786e\u7684API\u8c03\u7528\u4ee3\u7801\u5177\u6709\u6311\u6218\u6027\u3002\u5c3d\u7ba1\u5927\u8bed\u8a00\u6a21\u578b\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u65e5\u76ca\u6d41\u884c\uff0c\u4f46\u5176\u5728\u81ea\u52a8\u5316\u751f\u6210Web API\u96c6\u6210\u4ee3\u7801\u65b9\u9762\u7684\u6709\u6548\u6027\u5c1a\u672a\u5f97\u5230\u5145\u5206\u63a2\u7d22", "method": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u6570\u636e\u96c6\u548c\u8bc4\u4f30\u6d41\u7a0b\uff0c\u7528\u4e8e\u8bc4\u4f30\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210Web API\u8c03\u7528\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u5e76\u5bf9\u591a\u4e2a\u5f00\u6e90\u5927\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u4e86\u5b9e\u9a8c", "result": "\u5b9e\u9a8c\u663e\u793a\u751f\u6210API\u8c03\u7528\u4ee3\u7801\u5b58\u5728\u91cd\u5927\u6311\u6218\uff0c\u5305\u62ec\u865a\u6784\u7aef\u70b9\u3001\u53c2\u6570\u4f7f\u7528\u9519\u8bef\u7b49\u95ee\u9898\u3002\u6240\u6709\u8bc4\u4f30\u7684\u5f00\u6e90\u6a21\u578b\u90fd\u65e0\u6cd5\u89e3\u51b3\u8d85\u8fc740%\u7684\u4efb\u52a1", "conclusion": "\u5f53\u524d\u5f00\u6e90\u5927\u8bed\u8a00\u6a21\u578b\u5728\u751f\u6210Web API\u96c6\u6210\u4ee3\u7801\u65b9\u9762\u80fd\u529b\u6709\u9650\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u6539\u8fdb"}}
{"id": "2509.20215", "categories": ["cs.SE", "cs.AI", "cs.AR"], "pdf": "https://arxiv.org/pdf/2509.20215", "abs": "https://arxiv.org/abs/2509.20215", "authors": ["Guang Yang", "Wei Zheng", "Xiang Chen", "Yifan Sun", "Fengji Zhang", "Terry Yue Zhuo"], "title": "The Cream Rises to the Top: Efficient Reranking Method for Verilog Code Generation", "comment": "Under review ICASSP 2026", "summary": "LLMs face significant challenges in Verilog generation due to limited\ndomain-specific knowledge. While sampling techniques improve pass@k metrics,\nhardware engineers need one trustworthy solution rather than uncertain\ncandidates. To bridge this gap, we formulate it as a semantic alignment problem\nbetween requirements and Verilog implementations, and propose VCD-RNK, a\ndiscriminator model tailored for efficient Verilog code reranking.\nSpecifically, VCD-RNKincorporates Verilog-specific reasoning by distilling\nexpert knowledge across three dimensions: code semantic analysis, test case\ngeneration, and functional correctness assessment. By explicitly simulating the\nabove reasoning processes during inference, VCD-RNK effectively avoids\ncomputationally intensive test execution in existing methods.", "AI": {"tldr": "VCD-RNK\u662f\u4e00\u4e2a\u9488\u5bf9Verilog\u4ee3\u7801\u91cd\u6392\u7684\u5224\u522b\u6a21\u578b\uff0c\u901a\u8fc7\u6a21\u62df\u4e13\u5bb6\u5728\u4ee3\u7801\u8bed\u4e49\u5206\u6790\u3001\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u548c\u529f\u80fd\u6b63\u786e\u6027\u8bc4\u4f30\u4e09\u4e2a\u7ef4\u5ea6\u7684\u63a8\u7406\u8fc7\u7a0b\uff0c\u89e3\u51b3LLMs\u5728Verilog\u751f\u6210\u4e2d\u56e0\u9886\u57df\u77e5\u8bc6\u6709\u9650\u800c\u9762\u4e34\u7684\u6311\u6218\u3002", "motivation": "LLMs\u5728Verilog\u4ee3\u7801\u751f\u6210\u65b9\u9762\u9762\u4e34\u9886\u57df\u7279\u5b9a\u77e5\u8bc6\u6709\u9650\u7684\u6311\u6218\uff0c\u867d\u7136\u91c7\u6837\u6280\u672f\u63d0\u9ad8\u4e86pass@k\u6307\u6807\uff0c\u4f46\u786c\u4ef6\u5de5\u7a0b\u5e08\u9700\u8981\u4e00\u4e2a\u53ef\u4fe1\u8d56\u7684\u89e3\u51b3\u65b9\u6848\u800c\u975e\u4e0d\u786e\u5b9a\u7684\u5019\u9009\u65b9\u6848\u3002", "method": "\u5c06\u95ee\u9898\u5b9a\u4e49\u4e3a\u9700\u6c42\u4e0eVerilog\u5b9e\u73b0\u4e4b\u95f4\u7684\u8bed\u4e49\u5bf9\u9f50\u95ee\u9898\uff0c\u63d0\u51faVCD-RNK\u5224\u522b\u6a21\u578b\uff0c\u901a\u8fc7\u4e09\u4e2a\u7ef4\u5ea6\uff08\u4ee3\u7801\u8bed\u4e49\u5206\u6790\u3001\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u3001\u529f\u80fd\u6b63\u786e\u6027\u8bc4\u4f30\uff09\u6765\u84b8\u998f\u4e13\u5bb6\u77e5\u8bc6\uff0c\u5728\u63a8\u7406\u65f6\u663e\u5f0f\u6a21\u62df\u8fd9\u4e9b\u63a8\u7406\u8fc7\u7a0b\u3002", "result": "VCD-RNK\u6709\u6548\u907f\u514d\u4e86\u73b0\u6709\u65b9\u6cd5\u4e2d\u8ba1\u7b97\u5bc6\u96c6\u7684\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u3002", "conclusion": "VCD-RNK\u4e3aVerilog\u4ee3\u7801\u751f\u6210\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u91cd\u6392\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u6a21\u62df\u4e13\u5bb6\u63a8\u7406\u8fc7\u7a0b\u63d0\u5347\u4e86\u4ee3\u7801\u751f\u6210\u7684\u53ef\u4fe1\u5ea6\u3002"}}
{"id": "2509.20300", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20300", "abs": "https://arxiv.org/abs/2509.20300", "authors": ["Jannis Kiesel", "Jonathan Heiss"], "title": "Confidentiality-Preserving Verifiable Business Processes through Zero-Knowledge Proofs", "comment": null, "summary": "Ensuring the integrity of business processes without disclosing confidential\nbusiness information is a major challenge in inter-organizational processes.\nThis paper introduces a zero-knowledge proof (ZKP)-based approach for the\nverifiable execution of business processes while preserving confidentiality. We\nintegrate ZK virtual machines (zkVMs) into business process management engines\nthrough a comprehensive system architecture and a prototypical implementation.\nOur approach supports chained verifiable computations through proof\ncompositions. On the example of product carbon footprinting, we model\nsequential footprinting activities and demonstrate how organizations can prove\nand verify the integrity of verifiable processes without exposing sensitive\ninformation. We assess different ZKP proving variants within process models for\ntheir efficiency in proving and verifying, and discuss the practical\nintegration of ZKPs throughout the Business Process Management (BPM) lifecycle.\nOur experiment-driven evaluation demonstrates the automation of process\nverification under given confidentiality constraints.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u5728\u4fdd\u62a4\u673a\u5bc6\u6027\u7684\u540c\u65f6\u5b9e\u73b0\u4e1a\u52a1\u6d41\u7a0b\u7684\u53ef\u9a8c\u8bc1\u6267\u884c\u3002\u901a\u8fc7\u5c06ZK\u865a\u62df\u673a\u96c6\u6210\u5230\u4e1a\u52a1\u6d41\u7a0b\u7ba1\u7406\u5f15\u64ce\u4e2d\uff0c\u652f\u6301\u94fe\u5f0f\u53ef\u9a8c\u8bc1\u8ba1\u7b97\uff0c\u5e76\u4ee5\u4ea7\u54c1\u78b3\u8db3\u8ff9\u4e3a\u4f8b\u5c55\u793a\u4e86\u8be5\u65b9\u6cd5\u7684\u5e94\u7528\u3002", "motivation": "\u5728\u8de8\u7ec4\u7ec7\u4e1a\u52a1\u6d41\u7a0b\u4e2d\uff0c\u786e\u4fdd\u4e1a\u52a1\u6d41\u7a0b\u5b8c\u6574\u6027\u800c\u4e0d\u6cc4\u9732\u5546\u4e1a\u673a\u5bc6\u4fe1\u606f\u662f\u4e00\u4e2a\u91cd\u5927\u6311\u6218\u3002\u9700\u8981\u4e00\u79cd\u80fd\u591f\u9a8c\u8bc1\u6d41\u7a0b\u6267\u884c\u6b63\u786e\u6027\u540c\u65f6\u4fdd\u62a4\u654f\u611f\u6570\u636e\u7684\u65b9\u6cd5\u3002", "method": "\u5c06ZK\u865a\u62df\u673a\uff08zkVMs\uff09\u96c6\u6210\u5230\u4e1a\u52a1\u6d41\u7a0b\u7ba1\u7406\u5f15\u64ce\u4e2d\uff0c\u901a\u8fc7\u7cfb\u7edf\u67b6\u6784\u548c\u539f\u578b\u5b9e\u73b0\uff0c\u652f\u6301\u8bc1\u660e\u7ec4\u5408\u7684\u94fe\u5f0f\u53ef\u9a8c\u8bc1\u8ba1\u7b97\u3002\u5728\u78b3\u8db3\u8ff9\u793a\u4f8b\u4e2d\u5efa\u6a21\u987a\u5e8f\u8db3\u8ff9\u6d3b\u52a8\u3002", "result": "\u5b9e\u9a8c\u8bc4\u4f30\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u80fd\u591f\u5728\u7ed9\u5b9a\u673a\u5bc6\u6027\u7ea6\u675f\u4e0b\u81ea\u52a8\u5316\u6d41\u7a0b\u9a8c\u8bc1\uff0c\u8bc4\u4f30\u4e86\u4e0d\u540cZKP\u8bc1\u660e\u53d8\u4f53\u5728\u6d41\u7a0b\u6a21\u578b\u4e2d\u7684\u8bc1\u660e\u548c\u9a8c\u8bc1\u6548\u7387\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6210\u529f\u5b9e\u73b0\u4e86\u5728\u4fdd\u62a4\u673a\u5bc6\u6027\u7684\u524d\u63d0\u4e0b\u9a8c\u8bc1\u4e1a\u52a1\u6d41\u7a0b\u5b8c\u6574\u6027\uff0c\u4e3aZKP\u5728\u4e1a\u52a1\u6d41\u7a0b\u7ba1\u7406\u751f\u547d\u5468\u671f\u4e2d\u7684\u5b9e\u9645\u96c6\u6210\u63d0\u4f9b\u4e86\u5b9e\u8df5\u6307\u5bfc\u3002"}}
{"id": "2509.20308", "categories": ["cs.SE", "68M15 (Primary), 68M12, 68Q42 (Secondary)", "D.2.5; C.2.2; F.4.2"], "pdf": "https://arxiv.org/pdf/2509.20308", "abs": "https://arxiv.org/abs/2509.20308", "authors": ["Alexander Liggesmeyer", "Jos\u00e9 Antonio Zamudio Amaya", "Andreas Zeller"], "title": "Protocol Testing with I/O Grammars", "comment": "20 pages", "summary": "Generating software tests faces two fundamental problems. First, one needs to\n_generate inputs_ that are syntactically and semantically correct, yet\nsufficiently diverse to cover behavior. Second, one needs an _oracle_ to _check\noutputs_ whether a test case is correct or not. Both problems become apparent\nin _protocol testing_, where inputs are messages exchanged between parties, and\noutputs are the responses of these parties.\n  In this paper, we propose a novel approach to protocol testing that combines\ninput generation and output checking in a single framework. We introduce _I/O\ngrammars_ as the first means to _completely_ specify the syntax and semantics\nof protocols, including messages, states, and interactions. Our implementation,\nbased on the FANDANGO framework, takes a single I/O grammar, and can act as a\n_test generator_, as a _mock object_, and as an _oracle_ for a _client_, a\n_server_, or both (or actually any number of parties), a versatility not found\nin any existing tool or formalism. User-defined _constraints}_can have the\ngenerator focus on arbitrary protocol features; $k$-path guidance\nsystematically covers states, messages, responses, and value alternatives in a\nunified fashion.\n  We evaluate the effectiveness of our approach by applying it to several\nprotocols, including DNS, FTP, and SMTP. We demonstrate that I/O grammars can\nspecify advanced protocol features correctly and completely, while also\nenabling output validation of the programs under test. In its evaluation, we\nfind that systematic coverage of the I/O grammar results in much quicker\ncoverage of the input and response spaces (and thus functionality) compared to\nthe random-based state-of-the-art approaches.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eI/O\u8bed\u6cd5\u7684\u534f\u8bae\u6d4b\u8bd5\u65b0\u65b9\u6cd5\uff0c\u5c06\u8f93\u5165\u751f\u6210\u548c\u8f93\u51fa\u68c0\u67e5\u7edf\u4e00\u5728\u4e00\u4e2a\u6846\u67b6\u4e2d\uff0c\u80fd\u591f\u5b8c\u6574\u6307\u5b9a\u534f\u8bae\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\uff0c\u5e76\u652f\u6301\u6d4b\u8bd5\u751f\u6210\u3001\u6a21\u62df\u5bf9\u8c61\u548c\u9a8c\u8bc1\u529f\u80fd\u3002", "motivation": "\u534f\u8bae\u6d4b\u8bd5\u9762\u4e34\u4e24\u4e2a\u57fa\u672c\u95ee\u9898\uff1a\u9700\u8981\u751f\u6210\u8bed\u6cd5\u548c\u8bed\u4e49\u6b63\u786e\u4e14\u591a\u6837\u5316\u7684\u8f93\u5165\uff0c\u4ee5\u53ca\u9700\u8981\u9a8c\u8bc1\u6d4b\u8bd5\u7528\u4f8b\u6b63\u786e\u6027\u7684\u673a\u5236\u3002\u73b0\u6709\u5de5\u5177\u65e0\u6cd5\u540c\u65f6\u89e3\u51b3\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002", "method": "\u5f15\u5165I/O\u8bed\u6cd5\u4f5c\u4e3a\u5b8c\u6574\u6307\u5b9a\u534f\u8bae\u8bed\u6cd5\u548c\u8bed\u4e49\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u5305\u62ec\u6d88\u606f\u3001\u72b6\u6001\u548c\u4ea4\u4e92\u3002\u57fa\u4e8eFANDANGO\u6846\u67b6\u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7ea6\u675f\u548ck\u8def\u5f84\u5f15\u5bfc\u6765\u7cfb\u7edf\u8986\u76d6\u534f\u8bae\u7279\u6027\u3002", "result": "\u5728DNS\u3001FTP\u3001SMTP\u7b49\u534f\u8bae\u4e0a\u7684\u8bc4\u4f30\u8868\u660e\uff0cI/O\u8bed\u6cd5\u80fd\u6b63\u786e\u5b8c\u6574\u5730\u6307\u5b9a\u9ad8\u7ea7\u534f\u8bae\u7279\u6027\uff0c\u540c\u65f6\u652f\u6301\u88ab\u6d4b\u7a0b\u5e8f\u7684\u8f93\u51fa\u9a8c\u8bc1\u3002\u7cfb\u7edf\u5316\u8986\u76d6I/O\u8bed\u6cd5\u6bd4\u968f\u673a\u65b9\u6cd5\u80fd\u66f4\u5feb\u8986\u76d6\u8f93\u5165\u548c\u54cd\u5e94\u7a7a\u95f4\u3002", "conclusion": "I/O\u8bed\u6cd5\u4e3a\u534f\u8bae\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u4e14\u5b8c\u6574\u7684\u89c4\u8303\u65b9\u6cd5\uff0c\u5176\u7cfb\u7edf\u5316\u8986\u76d6\u7b56\u7565\u5728\u529f\u80fd\u8986\u76d6\u6548\u7387\u4e0a\u4f18\u4e8e\u73b0\u6709\u7684\u968f\u673a\u65b9\u6cd5\u3002"}}
{"id": "2509.20353", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.20353", "abs": "https://arxiv.org/abs/2509.20353", "authors": ["Viktoria Stray", "Elias Goldmann Brandtz\u00e6g", "Viggo Tellefsen Wivestad", "Astri Barbala", "Nils Brede Moe"], "title": "Developer Productivity With and Without GitHub Copilot: A Longitudinal Mixed-Methods Case Study", "comment": "Accepted for publication in the Proceedings of the 59th Hawaii\n  International Conference on System Sciences (HICSS 2026)", "summary": "This study investigates the real-world impact of the generative AI (GenAI)\ntool GitHub Copilot on developer activity and perceived productivity. We\nconducted a mixed-methods case study in NAV IT, a large public sector agile\norganization. We analyzed 26,317 unique non-merge commits from 703 of NAV IT's\nGitHub repositories over a two-year period, focusing on commit-based activity\nmetrics from 25 Copilot users and 14 non-users. The analysis was complemented\nby survey responses on their roles and perceived productivity, as well as 13\ninterviews. Our analysis of activity metrics revealed that individuals who used\nCopilot were consistently more active than non-users, even prior to Copilot's\nintroduction. We did not find any statistically significant changes in\ncommit-based activity for Copilot users after they adopted the tool, although\nminor increases were observed. This suggests a discrepancy between changes in\ncommit-based metrics and the subjective experience of productivity.", "AI": {"tldr": "\u7814\u7a76GitHub Copilot\u5bf9\u5f00\u53d1\u8005\u6d3b\u52a8\u548c\u611f\u77e5\u751f\u4ea7\u529b\u7684\u5b9e\u9645\u5f71\u54cd\uff0c\u53d1\u73b0\u5728\u4ee3\u7801\u63d0\u4ea4\u6d3b\u52a8\u6307\u6807\u4e0a\u65e0\u663e\u8457\u53d8\u5316\uff0c\u4f46\u7528\u6237\u4e3b\u89c2\u611f\u53d7\u4e0e\u5ba2\u89c2\u6307\u6807\u5b58\u5728\u5dee\u5f02", "motivation": "\u8bc4\u4f30\u751f\u6210\u5f0fAI\u5de5\u5177GitHub Copilot\u5728\u771f\u5b9e\u5de5\u4f5c\u73af\u5883\u4e2d\u7684\u5b9e\u9645\u6548\u679c\uff0c\u586b\u8865\u73b0\u6709\u7814\u7a76\u4e2d\u5bf9\u5b9e\u9645\u751f\u4ea7\u529b\u5f71\u54cd\u7684\u7a7a\u767d", "method": "\u6df7\u5408\u65b9\u6cd5\u6848\u4f8b\u7814\u7a76\uff1a\u5206\u679026,317\u4e2a\u975e\u5408\u5e76\u63d0\u4ea4\u6570\u636e\uff0825\u540dCopilot\u7528\u6237vs 14\u540d\u975e\u7528\u6237\uff09\uff0c\u7ed3\u5408\u95ee\u5377\u8c03\u67e5\u548c13\u6b21\u8bbf\u8c08", "result": "Copilot\u7528\u6237\u5728\u4f7f\u7528\u5de5\u5177\u524d\u5c31\u6bd4\u975e\u7528\u6237\u66f4\u6d3b\u8dc3\uff1b\u4f7f\u7528Copilot\u540e\u63d0\u4ea4\u6d3b\u52a8\u6307\u6807\u65e0\u663e\u8457\u53d8\u5316\uff0c\u4ec5\u6709\u8f7b\u5fae\u589e\u52a0\uff1b\u4e3b\u89c2\u751f\u4ea7\u529b\u611f\u77e5\u4e0e\u5ba2\u89c2\u6307\u6807\u4e0d\u4e00\u81f4", "conclusion": "\u751f\u6210\u5f0fAI\u5de5\u5177\u7684\u5b9e\u9645\u5f71\u54cd\u9700\u8981\u7ed3\u5408\u5ba2\u89c2\u6307\u6807\u548c\u4e3b\u89c2\u4f53\u9a8c\u7efc\u5408\u8bc4\u4f30\uff0c\u4ec5\u9760\u4ee3\u7801\u63d0\u4ea4\u6570\u636e\u53ef\u80fd\u65e0\u6cd5\u5168\u9762\u53cd\u6620\u751f\u4ea7\u529b\u53d8\u5316"}}

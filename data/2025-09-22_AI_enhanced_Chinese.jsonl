{"id": "2509.15834", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.15834", "abs": "https://arxiv.org/abs/2509.15834", "authors": ["Shardul Chiplunkar", "Cl\u00e9ment Pit-Claudel"], "title": "Automatic layout of railroad diagrams", "comment": "24 pages (+2 appendix, +3 references); 22 figures (+4 appendix); 3\n  tables", "summary": "Railroad diagrams (also called \"syntax diagrams\") are a common, intuitive\nvisualization of grammars, but limited tooling and a lack of formal attention\nto their layout mostly confines them to hand-drawn documentation. We present\nthe first formal treatment of railroad diagram layout along with a principled,\npractical implementation. We characterize the problem as compiling a *diagram\nlanguage* (specifying conceptual components and how they connect and compose)\nto a *layout language* (specifying basic graphical shapes and their sizes and\npositions). We then implement a compiler that performs *line wrapping* to meet\na target width, as well as vertical *alignment* and horizontal *justification*\nper user-specified policies. We frame line wrapping as an optimization problem,\nwhere we describe principled dimensions of optimality and implement\ncorresponding heuristics. For front-end evaluation, we show that our diagram\nlanguage is well-suited for common applications by describing how regular\nexpressions and Backus-Naur form can be compiled to it. For back-end\nevaluation, we argue that our compiler is practical by comparing its output to\ndiagrams laid out by hand and by other tools.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u94c1\u8def\u56fe\u5e03\u5c40\u7684\u7b2c\u4e00\u4e2a\u5f62\u5f0f\u5316\u5904\u7406\u65b9\u6cd5\uff0c\u5305\u62ec\u4e00\u4e2a\u539f\u5219\u6027\u7684\u5b9e\u7528\u5b9e\u73b0\uff0c\u5c06\u56fe\u8bed\u8a00\u7f16\u8bd1\u4e3a\u5e03\u5c40\u8bed\u8a00\uff0c\u5e76\u5b9e\u73b0\u7ebf\u5305\u88c5\u3001\u5bf9\u9f50\u548c\u8c03\u6574\u7b49\u4f18\u5316\u529f\u80fd\u3002", "motivation": "\u94c1\u8def\u56fe\u662f\u5e38\u89c1\u7684\u8bed\u6cd5\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u5de5\u5177\u9650\u5236\u548c\u7f3a\u4e4f\u5f62\u5f0f\u5316\u5e03\u5c40\u5173\u6ce8\uff0c\u4e3b\u8981\u5c40\u9650\u4e8e\u624b\u7ed8\u6587\u6863\u3002\u9700\u8981\u7cfb\u7edf\u5316\u7684\u5e03\u5c40\u65b9\u6cd5\u3002", "method": "\u5c06\u95ee\u9898\u63cf\u8ff0\u4e3a\u5c06\u56fe\u8bed\u8a00\u7f16\u8bd1\u4e3a\u5e03\u5c40\u8bed\u8a00\uff0c\u5b9e\u73b0\u7f16\u8bd1\u5668\u8fdb\u884c\u7ebf\u5305\u88c5\u4ee5\u6ee1\u8db3\u76ee\u6807\u5bbd\u5ea6\uff0c\u4ee5\u53ca\u5782\u76f4\u5bf9\u9f50\u548c\u6c34\u5e73\u8c03\u6574\u3002\u5c06\u7ebf\u5305\u88c5\u6784\u5efa\u4e3a\u4f18\u5316\u95ee\u9898\uff0c\u4f7f\u7528\u542f\u53d1\u5f0f\u65b9\u6cd5\u3002", "result": "\u901a\u8fc7\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u5df4\u79d1\u65af-\u8bfa\u5c14\u8303\u5f0f\u7f16\u8bd1\u5230\u56fe\u8bed\u8a00\uff0c\u8bc1\u660e\u8be5\u65b9\u6cd5\u7684\u9002\u7528\u6027\uff1b\u901a\u8fc7\u4e0e\u5176\u4ed6\u5de5\u5177\u548c\u624b\u7ed8\u56fe\u7684\u6bd4\u8f83\uff0c\u9a8c\u8bc1\u7f16\u8bd1\u5668\u7684\u5b9e\u7528\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u5f62\u5f0f\u5316\u94c1\u8def\u56fe\u5e03\u5c40\u65b9\u6cd5\u548c\u7f16\u8bd1\u5668\u5b9e\u73b0\u662f\u5b9e\u7528\u4e14\u6709\u6548\u7684\uff0c\u4e3a\u8bed\u6cd5\u53ef\u89c6\u5316\u63d0\u4f9b\u4e86\u7cfb\u7edf\u5316\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.16172", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.16172", "abs": "https://arxiv.org/abs/2509.16172", "authors": ["Sergei Leonov", "Liam Davis"], "title": "Two Optimizations on the St\u00e5lmarck Procedure", "comment": "Presented at the FMCAD 2025 Student Forum. Not part of the official\n  FMCAD proceedings", "summary": "In this paper, we introduce StalmarckSAT, the a modern re-implementation of\nthe St\\aa lmarck Procedure for SAT solving, and present two novel strategies to\nimprove the Procedure, Cardinality Driven Branching (CDB) and Deductive\nPriority Ordering (DPO). CDB is a heuristic to improve branching with the\ndilemma rule, and DPO intelligently orders simple rules based on their\ndeductive potential. Our results demonstrate improved solve times with both\nstrategies.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86StalmarckSAT\u2014\u2014St\u00e5lmarck\u8fc7\u7a0b\u7684\u73b0\u4ee3\u91cd\u65b0\u5b9e\u73b0\uff0c\u5e76\u63d0\u51fa\u4e86\u4e24\u79cd\u65b0\u7b56\u7565\uff1a\u57fa\u6570\u9a71\u52a8\u5206\u652f(CDB)\u548c\u6f14\u7ece\u4f18\u5148\u7ea7\u6392\u5e8f(DPO)\u6765\u6539\u8fdb\u8be5\u8fc7\u7a0b\u3002", "motivation": "\u6539\u8fdbSt\u00e5lmarck\u8fc7\u7a0b\u7684SAT\u6c42\u89e3\u6027\u80fd\uff0c\u901a\u8fc7\u5f00\u53d1\u65b0\u7684\u5206\u652f\u542f\u53d1\u5f0f\u548c\u89c4\u5219\u6392\u5e8f\u7b56\u7565\u6765\u63d0\u9ad8\u6c42\u89e3\u6548\u7387\u3002", "method": "\u63d0\u51fa\u4e86\u4e24\u79cd\u65b0\u7b56\u7565\uff1aCDB\uff08\u6539\u8fdb\u5206\u652f\u9009\u62e9\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\uff09\u548cDPO\uff08\u57fa\u4e8e\u6f14\u7ece\u6f5c\u529b\u667a\u80fd\u6392\u5e8f\u7b80\u5355\u89c4\u5219\uff09\u3002\u8fd9\u4e9b\u7b56\u7565\u96c6\u6210\u5230StalmarckSAT\u4e2d\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u4e24\u79cd\u7b56\u7565\u90fd\u663e\u8457\u63d0\u9ad8\u4e86\u6c42\u89e3\u65f6\u95f4\u3002", "conclusion": "CDB\u548cDPO\u7b56\u7565\u6709\u6548\u63d0\u5347\u4e86St\u00e5lmarck\u8fc7\u7a0b\u7684\u6027\u80fd\uff0c\u8bc1\u660e\u4e86\u8fd9\u4e9b\u65b0\u65b9\u6cd5\u5728SAT\u6c42\u89e3\u4e2d\u7684\u4ef7\u503c\u3002"}}
{"id": "2509.15283", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.PL", "I.2.7; F.2.2; I.2.2"], "pdf": "https://arxiv.org/pdf/2509.15283", "abs": "https://arxiv.org/abs/2509.15283", "authors": ["Kadin Matotek", "Heather Cassel", "Md Amiruzzaman", "Linh B. Ngo"], "title": "Evaluating the Limitations of Local LLMs in Solving Complex Programming Challenges", "comment": "Comments: 16 pages, 3 figures, 8 tables, accepted to CCSC Eastern\n  2025", "summary": "This study examines the performance of today's open-source, locally hosted\nlarge-language models (LLMs) in handling complex competitive programming tasks\nwith extended problem descriptions and contexts. Building on the original\nFramework for AI-driven Code Generation Evaluation (FACE), the authors retrofit\nthe pipeline to work entirely offline through the Ollama runtime, collapsing\nFACE's sprawling per-problem directory tree into a handful of consolidated JSON\nfiles, and adding robust checkpointing so multi-day runs can resume after\nfailures. The enhanced framework generates, submits, and records solutions for\nthe full Kattis corpus of 3,589 problems across eight code-oriented models\nranging from 6.7-9 billion parameters. The submission results show that the\noverall pass@1 accuracy is modest for the local models, with the best models\nperforming at approximately half the acceptance rate of the proprietary models,\nGemini 1.5 and ChatGPT-4. These findings expose a persistent gap between\nprivate, cost-controlled LLM deployments and state-of-the-art proprietary\nservices, yet also highlight the rapid progress of open models and the\npractical benefits of an evaluation workflow that organizations can replicate\non in-house hardware.", "AI": {"tldr": "\u672c\u7814\u7a76\u8bc4\u4f30\u4e86\u5f00\u6e90\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578b\u5728\u590d\u6742\u7f16\u7a0b\u7ade\u8d5b\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u5176\u51c6\u786e\u7387\u7ea6\u4e3a\u4e13\u6709\u6a21\u578b\u7684\u4e00\u534a\uff0c\u63ed\u793a\u4e86\u5f00\u6e90\u4e0e\u4e13\u6709\u6a21\u578b\u4e4b\u95f4\u7684\u6027\u80fd\u5dee\u8ddd\uff0c\u4f46\u4e5f\u5c55\u793a\u4e86\u5f00\u6e90\u6a21\u578b\u7684\u5feb\u901f\u8fdb\u6b65\u3002", "motivation": "\u8bc4\u4f30\u5f53\u524d\u5f00\u6e90\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578b\u5904\u7406\u5177\u6709\u6269\u5c55\u95ee\u9898\u63cf\u8ff0\u548c\u4e0a\u4e0b\u6587\u7684\u590d\u6742\u7f16\u7a0b\u7ade\u8d5b\u4efb\u52a1\u7684\u80fd\u529b\uff0c\u6bd4\u8f83\u5f00\u6e90\u6a21\u578b\u4e0e\u4e13\u6709\u6a21\u578b\u7684\u6027\u80fd\u5dee\u5f02\u3002", "method": "\u57fa\u4e8eFACE\u6846\u67b6\u8fdb\u884c\u6539\u9020\uff0c\u4f7f\u5176\u5b8c\u5168\u79bb\u7ebf\u8fd0\u884c\uff0c\u4f7f\u7528Ollama\u8fd0\u884c\u65f6\uff0c\u5c06\u76ee\u5f55\u7ed3\u6784\u6574\u5408\u4e3aJSON\u6587\u4ef6\u5e76\u6dfb\u52a0\u68c0\u67e5\u70b9\u529f\u80fd\u3002\u5bf9Kattis\u8bed\u6599\u5e93\u76843,589\u4e2a\u95ee\u9898\u57288\u4e2a\u4ee3\u7801\u5bfc\u5411\u6a21\u578b\uff086.7-90\u4ebf\u53c2\u6570\uff09\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002", "result": "\u672c\u5730\u6a21\u578b\u7684\u6574\u4f53pass@1\u51c6\u786e\u7387\u8f83\u4e3a\u4e00\u822c\uff0c\u6700\u4f73\u6a21\u578b\u7684\u63a5\u53d7\u7387\u7ea6\u4e3a\u4e13\u6709\u6a21\u578b\uff08Gemini 1.5\u548cChatGPT-4\uff09\u7684\u4e00\u534a\u3002", "conclusion": "\u5f00\u6e90\u672c\u5730\u6a21\u578b\u4e0e\u6700\u5148\u8fdb\u4e13\u6709\u670d\u52a1\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u5dee\u8ddd\uff0c\u4f46\u5f00\u6e90\u6a21\u578b\u8fdb\u6b65\u8fc5\u901f\uff0c\u4e14\u53ef\u5728\u7ec4\u7ec7\u5185\u90e8\u786c\u4ef6\u4e0a\u590d\u73b0\u7684\u8bc4\u4f30\u6d41\u7a0b\u5177\u6709\u5b9e\u9645\u4ef7\u503c\u3002"}}
{"id": "2509.15397", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.15397", "abs": "https://arxiv.org/abs/2509.15397", "authors": ["Simantika Bhattacharjee Dristi", "Matthew B. Dwyer"], "title": "LoCaL: Countering Surface Bias in Code Evaluation Metrics", "comment": null, "summary": "With the increasing popularity of large language models (LLMs) and LLM-based\nagents, reliable and effective code evaluation metrics (CEMs) have become\ncrucial for progress across several software engineering tasks. While popular\nbenchmarks often provide test cases to assess the correctness of generated\ncode, crafting and executing test cases is expensive. Reference-based CEMs\nprovide a cheaper alternative by scoring a candidate program based on its\nfunctional similarity to a reference. Although prior research has focused on\nreporting the weak correlation between these CEMs and functional correctness,\nthe causes are only assumed, and plausible solutions remain unexplored. In this\nwork, we critically evaluate four state-of-the-art reference-based CEMs,\nrevealing their strong bias towards surface-level features rather than code\nfunctionality. Despite this surface bias, current evaluation datasets for these\nCEMs rarely include code pairs that are surface-similar yet functionally\ndissimilar, or functionally similar yet surface-dissimilar. To mitigate this\ngap, we propose LoCaL (Looks Can Lie), a CEM evaluation benchmark, with 3117\ncode pairs at both the method and program levels. Each pair is labeled with a\nfunctional similarity score and aims to target regions where CEMs are likely to\nperform poorly. The functional similarity scores are calculated through\ndifferential fuzzing, which eliminates the need for predefined test cases and,\nat the same time, improves the reliability of the scores by executing an order\nof magnitude more tests than prior work. We find that all four CEMs show\nsignificant performance degradation on LoCaL, compared to the baselines.\nFinally, based on our findings, we draw the implication that exposing CEMs to\nLoCaL-like data might facilitate the development of metrics that are robust to\nsurface bias.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86LoCaL\u57fa\u51c6\u6d4b\u8bd5\uff0c\u7528\u4e8e\u8bc4\u4f30\u57fa\u4e8e\u53c2\u8003\u7684\u4ee3\u7801\u8bc4\u4f30\u6307\u6807\uff08CEMs\uff09\uff0c\u53d1\u73b0\u73b0\u6709CEMs\u5b58\u5728\u8868\u9762\u7279\u5f81\u504f\u89c1\uff0c\u5e76\u5728\u65b0\u57fa\u51c6\u4e0a\u8868\u73b0\u663e\u8457\u4e0b\u964d\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u548c\u57fa\u4e8eLLM\u7684\u4ee3\u7406\u65e5\u76ca\u6d41\u884c\uff0c\u53ef\u9760\u7684\u4ee3\u7801\u8bc4\u4f30\u6307\u6807\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u73b0\u6709\u53c2\u8003\u578bCEMs\u4e0e\u529f\u80fd\u6b63\u786e\u6027\u7684\u76f8\u5173\u6027\u8f83\u5f31\uff0c\u4f46\u539f\u56e0\u672a\u88ab\u6df1\u5165\u63a2\u7a76\uff0c\u89e3\u51b3\u65b9\u6848\u4e5f\u672a\u88ab\u63a2\u7d22\u3002", "method": "\u6279\u5224\u6027\u8bc4\u4f30\u56db\u79cd\u6700\u5148\u8fdb\u7684\u53c2\u8003\u578bCEMs\uff0c\u63d0\u51faLoCaL\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b3117\u4e2a\u4ee3\u7801\u5bf9\uff0c\u901a\u8fc7\u5dee\u5206\u6a21\u7cca\u6d4b\u8bd5\u8ba1\u7b97\u529f\u80fd\u76f8\u4f3c\u6027\u5206\u6570\uff0c\u65e0\u9700\u9884\u5b9a\u4e49\u6d4b\u8bd5\u7528\u4f8b\u3002", "result": "\u6240\u6709\u56db\u79cdCEMs\u5728LoCaL\u57fa\u51c6\u4e0a\u7684\u6027\u80fd\u76f8\u6bd4\u57fa\u7ebf\u90fd\u51fa\u73b0\u663e\u8457\u4e0b\u964d\uff0c\u8868\u660e\u5b83\u4eec\u5bf9\u8868\u9762\u7279\u5f81\u5b58\u5728\u5f3a\u70c8\u504f\u89c1\u3002", "conclusion": "\u5c06CEMs\u66b4\u9732\u4e8eLoCaL\u7c7b\u4f3c\u6570\u636e\u53ef\u80fd\u6709\u52a9\u4e8e\u5f00\u53d1\u5bf9\u8868\u9762\u504f\u89c1\u5177\u6709\u9c81\u68d2\u6027\u7684\u6307\u6807\u3002"}}
{"id": "2509.15567", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.15567", "abs": "https://arxiv.org/abs/2509.15567", "authors": ["Hongyu Kuang", "Ning Zhang", "Hui Gao", "Xin Zhou", "Wesley K. G. Assun\u00e7\u00e3o", "Xiaoxing Ma", "Dong Shao", "Guoping Rong", "He Zhang"], "title": "Brevity is the Soul of Wit: Condensing Code Changes to Improve Commit Message Generation", "comment": null, "summary": "Commit messages are valuable resources for describing why code changes are\ncommitted to repositories in version control systems (e.g., Git). They\neffectively help developers understand code changes and better perform software\nmaintenance tasks. Unfortunately, developers often neglect to write\nhigh-quality commit messages in practice. Therefore, a growing body of work is\nproposed to generate commit messages automatically. These works all\ndemonstrated that how to organize and represent code changes is vital in\ngenerating good commit messages, including the use of fine-grained graphs or\nembeddings to better represent code changes. In this study, we choose an\nalternative way to condense code changes before generation, i.e., proposing\nbrief yet concise text templates consisting of the following three parts: (1)\nsummarized code changes, (2) elicited comments, and (3) emphasized code\nidentifiers. Specifically, we first condense code changes by using our proposed\ntemplates with the help of a heuristic-based tool named ChangeScribe, and then\nfine-tune CodeLlama-7B on the pairs of our proposed templates and corresponding\ncommit messages. Our proposed templates better utilize pre-trained language\nmodels, while being naturally brief and readable to complement generated commit\nmessages for developers. Our evaluation based on a widely used dataset showed\nthat our approach can outperform six baselines in terms of BLEU-Norm, METEOR,\nand ROUGE-L, with average improvements of 51.7%, 78.7%, and 62.5%,\nrespectively. The ablation study and human evaluation also provide further\ninsights into the effectiveness of our approach.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u901a\u8fc7\u6587\u672c\u6a21\u677f\u6765\u538b\u7f29\u4ee3\u7801\u53d8\u66f4\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u63d0\u4ea4\u6d88\u606f\u3002\u8be5\u65b9\u6cd5\u4f7f\u7528\u5305\u542b\u4e09\u90e8\u5206\u7684\u6a21\u677f\uff08\u4ee3\u7801\u53d8\u66f4\u6458\u8981\u3001\u63d0\u53d6\u7684\u6ce8\u91ca\u3001\u5f3a\u8c03\u7684\u4ee3\u7801\u6807\u8bc6\u7b26\uff09\uff0c\u7ed3\u5408ChangeScribe\u5de5\u5177\u548cCodeLlama-7B\u6a21\u578b\uff0c\u5728\u591a\u4e2a\u6307\u6807\u4e0a\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u57fa\u7ebf\u65b9\u6cd5\u3002", "motivation": "\u5f00\u53d1\u8005\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\u7ecf\u5e38\u5ffd\u89c6\u7f16\u5199\u9ad8\u8d28\u91cf\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u800c\u73b0\u6709\u7684\u81ea\u52a8\u751f\u6210\u65b9\u6cd5\u9700\u8981\u66f4\u597d\u5730\u7ec4\u7ec7\u548c\u8868\u793a\u4ee3\u7801\u53d8\u66f4\u4fe1\u606f\u3002\u672c\u6587\u65e8\u5728\u901a\u8fc7\u7b80\u6d01\u7684\u6587\u672c\u6a21\u677f\u6765\u66f4\u597d\u5730\u5229\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u751f\u6210\u66f4\u6613\u8bfb\u7684\u63d0\u4ea4\u6d88\u606f\u3002", "method": "\u9996\u5148\u4f7f\u7528\u57fa\u4e8e\u542f\u53d1\u5f0f\u7684ChangeScribe\u5de5\u5177\u5c06\u4ee3\u7801\u53d8\u66f4\u538b\u7f29\u4e3a\u5305\u542b\u4e09\u90e8\u5206\u7684\u6587\u672c\u6a21\u677f\uff1a(1)\u4ee3\u7801\u53d8\u66f4\u6458\u8981\u3001(2)\u63d0\u53d6\u7684\u6ce8\u91ca\u3001(3)\u5f3a\u8c03\u7684\u4ee3\u7801\u6807\u8bc6\u7b26\u3002\u7136\u540e\u5728\u6a21\u677f\u4e0e\u5bf9\u5e94\u63d0\u4ea4\u6d88\u606f\u7684\u914d\u5bf9\u6570\u636e\u4e0a\u5fae\u8c03CodeLlama-7B\u6a21\u578b\u3002", "result": "\u5728\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\uff0c\u8be5\u65b9\u6cd5\u5728BLEU-Norm\u3001METEOR\u548cROUGE-L\u6307\u6807\u4e0a\u5206\u522b\u6bd4\u516d\u4e2a\u57fa\u7ebf\u65b9\u6cd5\u5e73\u5747\u63d0\u5347\u4e8651.7%\u300178.7%\u548c62.5%\u3002\u6d88\u878d\u7814\u7a76\u548c\u4eba\u5de5\u8bc4\u4f30\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u6587\u672c\u6a21\u677f\u65b9\u6cd5\u80fd\u591f\u6709\u6548\u538b\u7f29\u4ee3\u7801\u53d8\u66f4\u4fe1\u606f\uff0c\u66f4\u597d\u5730\u5229\u7528\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u81ea\u7136\u7b80\u6d01\u4e14\u53ef\u8bfb\u6027\u5f3a\u7684\u8865\u5145\u4fe1\u606f\u3002"}}
{"id": "2509.15777", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.15777", "abs": "https://arxiv.org/abs/2509.15777", "authors": ["Haoran Xu", "Zhi Chen", "Junxiao Han", "Xinkui Zhao", "Jianwei Yin", "Shuiguang Deng"], "title": "How Far Are We? An Empirical Analysis of Current Vulnerability Localization Approaches", "comment": null, "summary": "Open-source software vulnerability patch detection is a critical component\nfor maintaining software security and ensuring software supply chain integrity.\nTraditional manual detection methods face significant scalability challenges\nwhen processing large volumes of commit histories, while being prone to human\nerrors and omissions. Existing automated approaches, including heuristic-based\nmethods and pre-trained model solutions, suffer from limited accuracy, poor\ngeneralization capabilities, and inherent methodological constraints that\nhinder their practical deployment. To address these fundamental challenges,\nthis paper conducts a comprehensive empirical study of existing vulnerability\npatch detection methods, revealing four key insights that guide the design of\neffective solutions: the critical impact of search space reduction, the\nsuperiority of pre-trained semantic understanding over architectural\ncomplexity, the temporal limitations of web crawling approaches, and the\nadvantages of knowledge-driven methods. Based on these insights, we propose a\nnovel two-stage framework that combines version-driven candidate filtering with\nlarge language model-based multi-round dialogue voting to achieve accurate and\nefficient vulnerability patch identification. Extensive experiments on a\ndataset containing 750 real vulnerabilities demonstrate that our method\noutperforms current approaches.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u4e24\u9636\u6bb5\u6846\u67b6\uff0c\u7ed3\u5408\u7248\u672c\u9a71\u52a8\u5019\u9009\u8fc7\u6ee4\u548c\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u591a\u8f6e\u5bf9\u8bdd\u6295\u7968\uff0c\u7528\u4e8e\u5f00\u6e90\u8f6f\u4ef6\u6f0f\u6d1e\u8865\u4e01\u68c0\u6d4b\uff0c\u5728750\u4e2a\u771f\u5b9e\u6f0f\u6d1e\u6570\u636e\u96c6\u4e0a\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u4f18\u8d8a\u6027\u3002", "motivation": "\u4f20\u7edf\u624b\u52a8\u68c0\u6d4b\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u63d0\u4ea4\u5386\u53f2\u5904\u7406\u4e2d\u9762\u4e34\u53ef\u6269\u5c55\u6027\u6311\u6218\u4e14\u6613\u51fa\u9519\uff0c\u73b0\u6709\u81ea\u52a8\u5316\u65b9\u6cd5\u5b58\u5728\u51c6\u786e\u7387\u6709\u9650\u3001\u6cdb\u5316\u80fd\u529b\u5dee\u548c\u65b9\u6cd5\u7ea6\u675f\u7b49\u95ee\u9898\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u63d0\u51fa\u4e24\u9636\u6bb5\u6846\u67b6\uff1a\u7b2c\u4e00\u9636\u6bb5\u901a\u8fc7\u7248\u672c\u9a71\u52a8\u5019\u9009\u8fc7\u6ee4\u7f29\u5c0f\u641c\u7d22\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u9636\u6bb5\u4f7f\u7528\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u591a\u8f6e\u5bf9\u8bdd\u6295\u7968\u673a\u5236\u8fdb\u884c\u7cbe\u786e\u8bc6\u522b\u3002", "result": "\u5728\u5305\u542b750\u4e2a\u771f\u5b9e\u6f0f\u6d1e\u7684\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5e7f\u6cdb\u5b9e\u9a8c\uff0c\u8bc1\u660e\u8be5\u65b9\u6cd5\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "conclusion": "\u57fa\u4e8e\u5b9e\u8bc1\u7814\u7a76\u53d1\u73b0\u7684\u56db\u4e2a\u5173\u952e\u6d1e\u5bdf\u8bbe\u8ba1\u7684\u6846\u67b6\u80fd\u591f\u5b9e\u73b0\u51c6\u786e\u9ad8\u6548\u7684\u5f00\u6e90\u8f6f\u4ef6\u6f0f\u6d1e\u8865\u4e01\u68c0\u6d4b\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u7684\u5c40\u9650\u6027\u3002"}}
{"id": "2509.15893", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.15893", "abs": "https://arxiv.org/abs/2509.15893", "authors": ["Andrea Bombarda", "Federico Conti", "Marcello Minervini", "Aurora Zanenga", "Claudio Menghi"], "title": "Failure Modes and Effects Analysis: An Experience from the E-Bike Domain", "comment": "12 pages", "summary": "Software failures can have catastrophic and costly consequences. Functional\nFailure Mode and Effects Analysis (FMEA) is a standard technique used within\nCyber-Physical Systems (CPS) to identify software failures and assess their\nconsequences. Simulation-driven approaches have recently been shown to be\neffective in supporting FMEA. However, industries need evidence of the\neffectiveness of these approaches to increase practical adoption. This\nindustrial paper presents our experience with using FMEA to analyze the safety\nof a CPS from the e-Bike domain. We used Simulink Fault Analyzer, an industrial\ntool that supports engineers with FMEA. We identified 13 realistic faults,\nmodeled them, and analyzed their effects. We sought expert feedback to analyze\nthe appropriateness of our models and the effectiveness of the faults in\ndetecting safety breaches. Our results reveal that for the faults we\nidentified, our models were accurate or contained minor imprecision that we\nsubsequently corrected. They also confirm that FMEA helps engineers improve\ntheir models. Specifically, the output provided by the simulation-driven\nsupport for 38.4% (5 out of 13) of the faults did not match the engineers'\nexpectations, helping them discover unexpected effects of the faults. We\npresent a thorough discussion of our results and ten lessons learned. Our\nfindings are useful for software engineers who work as Simulink engineers, use\nthe Simulink Fault Analyzer, or work as safety analysts.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u5de5\u4e1a\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\u4e86\u57fa\u4e8e\u4eff\u771f\u7684FMEA\u65b9\u6cd5\u5728CPS\u5b89\u5168\u5206\u6790\u4e2d\u7684\u6709\u6548\u6027\uff0c\u4f7f\u7528Simulink Fault Analyzer\u5de5\u5177\u5bf9\u7535\u52a8\u81ea\u884c\u8f66\u7cfb\u7edf\u8fdb\u884c\u6545\u969c\u5206\u6790\uff0c\u53d1\u73b0\u8be5\u65b9\u6cd5\u80fd\u6709\u6548\u5e2e\u52a9\u5de5\u7a0b\u5e08\u6539\u8fdb\u6a21\u578b\u5e76\u53d1\u73b0\u610f\u5916\u6545\u969c\u6548\u5e94\u3002", "motivation": "\u5de5\u4e1a\u754c\u9700\u8981\u8bc1\u636e\u8bc1\u660e\u57fa\u4e8e\u4eff\u771f\u7684FMEA\u65b9\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6709\u6548\u6027\uff0c\u4ee5\u4fc3\u8fdb\u5176\u66f4\u5e7f\u6cdb\u7684\u5b9e\u9645\u91c7\u7528\u3002\u672c\u6587\u65e8\u5728\u901a\u8fc7\u4e00\u4e2a\u5177\u4f53\u7684CPS\uff08\u7535\u52a8\u81ea\u884c\u8f66\uff09\u6848\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u79cd\u65b9\u6cd5\u7684\u5b9e\u7528\u6027\u3002", "method": "\u4f7f\u7528Simulink Fault Analyzer\u5de5\u4e1a\u5de5\u5177\uff0c\u8bc6\u522b\u4e8613\u4e2a\u73b0\u5b9e\u6545\u969c\u5e76\u5efa\u6a21\u5206\u6790\u5176\u5f71\u54cd\u3002\u901a\u8fc7\u4e13\u5bb6\u53cd\u9988\u8bc4\u4f30\u6a21\u578b\u51c6\u786e\u6027\u548c\u6545\u969c\u68c0\u6d4b\u5b89\u5168\u8fdd\u89c4\u7684\u6709\u6548\u6027\u3002", "result": "\u5bf9\u4e8e\u8bc6\u522b\u7684\u6545\u969c\uff0c\u6a21\u578b\u51c6\u786e\u6216\u4ec5\u5305\u542b\u8f7b\u5fae\u4e0d\u7cbe\u786e\uff08\u5df2\u4fee\u6b63\uff09\u300238.4%\uff085/13\uff09\u7684\u6545\u969c\u4eff\u771f\u7ed3\u679c\u4e0e\u5de5\u7a0b\u5e08\u9884\u671f\u4e0d\u7b26\uff0c\u5e2e\u52a9\u4ed6\u4eec\u53d1\u73b0\u610f\u5916\u7684\u6545\u969c\u6548\u5e94\u3002FMEA\u786e\u5b9e\u80fd\u5e2e\u52a9\u5de5\u7a0b\u5e08\u6539\u8fdb\u6a21\u578b\u3002", "conclusion": "\u57fa\u4e8e\u4eff\u771f\u7684FMEA\u65b9\u6cd5\u5728CPS\u5b89\u5168\u5206\u6790\u4e2d\u5177\u6709\u5b9e\u9645\u4ef7\u503c\uff0c\u80fd\u6709\u6548\u53d1\u73b0\u610f\u5916\u6545\u969c\u6548\u5e94\u5e76\u6539\u8fdb\u7cfb\u7edf\u6a21\u578b\u3002\u7814\u7a76\u7ed3\u679c\u4e3aSimulink\u5de5\u7a0b\u5e08\u3001\u5b89\u5168\u5206\u6790\u5e08\u7b49\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u7ecf\u9a8c\u6559\u8bad\u3002"}}
{"id": "2509.15971", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.15971", "abs": "https://arxiv.org/abs/2509.15971", "authors": ["Owen Truong", "Terrence Zhang", "Arnav Marchareddy", "Ryan Lee", "Jeffery Busold", "Michael Socas", "Eman Abdullah AlOmar"], "title": "LeakageDetector 2.0: Analyzing Data Leakage in Jupyter-Driven Machine Learning Pipelines", "comment": null, "summary": "In software development environments, code quality is crucial. This study\naims to assist Machine Learning (ML) engineers in enhancing their code by\nidentifying and correcting Data Leakage issues within their models. Data\nLeakage occurs when information from the test dataset is inadvertently included\nin the training data when preparing a data science model, resulting in\nmisleading performance evaluations. ML developers must carefully separate their\ndata into training, evaluation, and test sets to avoid introducing Data Leakage\ninto their code. In this paper, we develop a new Visual Studio Code (VS Code)\nextension, called LeakageDetector, that detects Data Leakage, mainly Overlap,\nPreprocessing and Multi-test leakage, from Jupyter Notebook files. Beyond\ndetection, we included two correction mechanisms: a conventional approach,\nknown as a quick fix, which manually fixes the leakage, and an LLM-driven\napproach that guides ML developers toward best practices for building ML\npipelines.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3aLeakageDetector\u7684VS Code\u6269\u5c55\uff0c\u7528\u4e8e\u68c0\u6d4b\u548c\u4fee\u590dJupyter Notebook\u4e2d\u7684\u6570\u636e\u6cc4\u6f0f\u95ee\u9898\uff0c\u5305\u62ec\u91cd\u53e0\u6cc4\u6f0f\u3001\u9884\u5904\u7406\u6cc4\u6f0f\u548c\u591a\u6d4b\u8bd5\u6cc4\u6f0f\u3002", "motivation": "\u5728\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u4e2d\uff0c\u6570\u636e\u6cc4\u6f0f\u4f1a\u5bfc\u81f4\u6a21\u578b\u6027\u80fd\u8bc4\u4f30\u5931\u771f\uff0c\u5f71\u54cd\u4ee3\u7801\u8d28\u91cf\u3002ML\u5de5\u7a0b\u5e08\u9700\u8981\u6709\u6548\u5de5\u5177\u6765\u8bc6\u522b\u548c\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u521b\u5efaVS Code\u6269\u5c55\uff0c\u5305\u542b\u68c0\u6d4b\u673a\u5236\u548c\u4e24\u79cd\u4fee\u590d\u65b9\u5f0f\uff1a\u4f20\u7edf\u624b\u52a8\u4fee\u590d\u548c\u57fa\u4e8eLLM\u7684\u6307\u5bfc\u6027\u4fee\u590d\u3002", "result": "\u5f00\u53d1\u4e86\u80fd\u591f\u81ea\u52a8\u68c0\u6d4b\u6570\u636e\u6cc4\u6f0f\u5e76\u63d0\u4f9b\u4fee\u590d\u5efa\u8bae\u7684\u5de5\u5177\u3002", "conclusion": "LeakageDetector\u6269\u5c55\u6709\u52a9\u4e8eML\u5f00\u53d1\u8005\u907f\u514d\u6570\u636e\u6cc4\u6f0f\uff0c\u63d0\u5347\u6a21\u578b\u8bc4\u4f30\u7684\u51c6\u786e\u6027\u3002"}}
{"id": "2509.16081", "categories": ["cs.SE", "cs.MS", "G.1.3; D.2.11"], "pdf": "https://arxiv.org/pdf/2509.16081", "abs": "https://arxiv.org/abs/2509.16081", "authors": ["Marcel Koch", "Tobias Ribizel", "Pratik Nayak", "Fritz G\u00f6bel", "Gregor Olenik", "Terry Cojean"], "title": "Software Development Aspects of Integrating Linear Algebra Libraries", "comment": "16 pages, 2 figures", "summary": "Many scientific discoveries are made through, or aided by, the use of\nsimulation software. These sophisticated software applications are not built\nfrom the ground up, instead they rely on smaller parts for specific use cases,\nusually from domains unfamiliar to the application scientists. The software\nlibrary Ginkgo is one of these building blocks to handle sparse numerical\nlinear algebra on different platforms. By using Ginkgo, applications are able\nto ease the transition to modern systems, and speed up their simulations\nthrough faster numerical linear algebra routines. This paper discusses the\nchallenges and benefits for application software in adopting Ginkgo. It will\npresent examples from different domains, such as CFD, power grid simulation, as\nwell as electro-cardiophysiology. For these cases, the impact of the\nintegrations on the application code is discussed from a software engineering\nstandpoint, and in particular, the approaches taken by Ginkgo and the\napplications to enable sustainable software development are highlighted.", "AI": {"tldr": "\u672c\u6587\u8ba8\u8bba\u4e86\u5e94\u7528\u8f6f\u4ef6\u91c7\u7528Ginkgo\u7a00\u758f\u6570\u503c\u7ebf\u6027\u4ee3\u6570\u5e93\u7684\u6311\u6218\u548c\u76ca\u5904\uff0c\u901a\u8fc7CFD\u3001\u7535\u7f51\u4eff\u771f\u548c\u5fc3\u7535\u751f\u7406\u5b66\u7b49\u9886\u57df\u7684\u6848\u4f8b\uff0c\u4ece\u8f6f\u4ef6\u5de5\u7a0b\u89d2\u5ea6\u5206\u6790\u96c6\u6210\u5bf9\u5e94\u7528\u4ee3\u7801\u7684\u5f71\u54cd\uff0c\u5e76\u5f3a\u8c03\u53ef\u6301\u7eed\u8f6f\u4ef6\u5f00\u53d1\u7684\u65b9\u6cd5\u3002", "motivation": "\u8bb8\u591a\u79d1\u5b66\u53d1\u73b0\u4f9d\u8d56\u4e8e\u6a21\u62df\u8f6f\u4ef6\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u901a\u5e38\u9700\u8981\u96c6\u6210\u6765\u81ea\u4e0d\u540c\u9886\u57df\u7684\u7279\u5b9a\u529f\u80fd\u7ec4\u4ef6\u3002Ginkgo\u4f5c\u4e3a\u5904\u7406\u7a00\u758f\u6570\u503c\u7ebf\u6027\u4ee3\u6570\u7684\u57fa\u7840\u5e93\uff0c\u80fd\u5e2e\u52a9\u5e94\u7528\u8f6f\u4ef6\u66f4\u597d\u5730\u9002\u5e94\u73b0\u4ee3\u7cfb\u7edf\u5e76\u52a0\u901f\u4eff\u771f\u8fc7\u7a0b\u3002", "method": "\u901a\u8fc7\u5206\u6790\u4e0d\u540c\u9886\u57df\uff08CFD\u3001\u7535\u7f51\u4eff\u771f\u3001\u5fc3\u7535\u751f\u7406\u5b66\uff09\u7684\u5e94\u7528\u6848\u4f8b\uff0c\u4ece\u8f6f\u4ef6\u5de5\u7a0b\u89d2\u5ea6\u8bc4\u4f30Ginkgo\u96c6\u6210\u5bf9\u5e94\u7528\u4ee3\u7801\u7684\u5f71\u54cd\uff0c\u91cd\u70b9\u5173\u6ce8\u53ef\u6301\u7eed\u8f6f\u4ef6\u5f00\u53d1\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002", "result": "Ginkgo\u80fd\u591f\u5e2e\u52a9\u5e94\u7528\u8f6f\u4ef6\u7b80\u5316\u5411\u73b0\u4ee3\u7cfb\u7edf\u7684\u8fc7\u6e21\uff0c\u5e76\u901a\u8fc7\u66f4\u5feb\u7684\u6570\u503c\u7ebf\u6027\u4ee3\u6570\u4f8b\u7a0b\u52a0\u901f\u4eff\u771f\u8fc7\u7a0b\u3002\u96c6\u6210\u8fc7\u7a0b\u4e2d\u9700\u8981\u89e3\u51b3\u8f6f\u4ef6\u5de5\u7a0b\u65b9\u9762\u7684\u6311\u6218\uff0c\u4f46\u80fd\u5e26\u6765\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "Ginkgo\u4f5c\u4e3a\u7a00\u758f\u6570\u503c\u7ebf\u6027\u4ee3\u6570\u7684\u57fa\u7840\u7ec4\u4ef6\uff0c\u4e3a\u79d1\u5b66\u8ba1\u7b97\u5e94\u7528\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u5408\u7406\u7684\u8f6f\u4ef6\u5de5\u7a0b\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u53ef\u6301\u7eed\u7684\u96c6\u6210\u548c\u5f00\u53d1\u3002"}}
{"id": "2509.16140", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.16140", "abs": "https://arxiv.org/abs/2509.16140", "authors": ["Avinash Patil"], "title": "When Bugs Linger: A Study of Anomalous Resolution Time Outliers and Their Themes", "comment": "7 pages, 2 tables, 21 figures", "summary": "Efficient bug resolution is critical for maintaining software quality and\nuser satisfaction. However, specific bug reports experience unusually long\nresolution times, which may indicate underlying process inefficiencies or\ncomplex issues. This study presents a comprehensive analysis of bug resolution\nanomalies across seven prominent open-source repositories: Cassandra, Firefox,\nHadoop, HBase, SeaMonkey, Spark, and Thunderbird. Utilizing statistical methods\nsuch as Z-score and Interquartile Range (IQR), we identify anomalies in bug\nresolution durations. To understand the thematic nature of these anomalies, we\napply Term Frequency-Inverse Document Frequency (TF-IDF) for textual feature\nextraction and KMeans clustering to group similar bug summaries. Our findings\nreveal consistent patterns across projects, with anomalies often clustering\naround test failures, enhancement requests, and user interface issues. This\napproach provides actionable insights for project maintainers to prioritize and\neffectively address long-standing bugs.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86\u4e03\u4e2a\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u4e2dbug\u89e3\u51b3\u65f6\u95f4\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u4f7f\u7528\u7edf\u8ba1\u65b9\u6cd5\u548c\u6587\u672c\u5206\u6790\u6280\u672f\u8bc6\u522b\u5f02\u5e38bug\u62a5\u544a\u7684\u4e3b\u9898\u6a21\u5f0f\u3002", "motivation": "\u9ad8\u6548\u89e3\u51b3bug\u5bf9\u4e8e\u7ef4\u62a4\u8f6f\u4ef6\u8d28\u91cf\u548c\u7528\u6237\u6ee1\u610f\u5ea6\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u67d0\u4e9bbug\u62a5\u544a\u5b58\u5728\u5f02\u5e38\u957f\u7684\u89e3\u51b3\u65f6\u95f4\uff0c\u8fd9\u53ef\u80fd\u8868\u660e\u5b58\u5728\u6f5c\u5728\u7684\u8fc7\u7a0b\u6548\u7387\u4f4e\u4e0b\u6216\u590d\u6742\u95ee\u9898\u3002", "method": "\u4f7f\u7528Z-score\u548c\u56db\u5206\u4f4d\u8ddd(IQR)\u7edf\u8ba1\u65b9\u6cd5\u8bc6\u522bbug\u89e3\u51b3\u65f6\u95f4\u7684\u5f02\u5e38\u503c\uff0c\u5e94\u7528TF-IDF\u8fdb\u884c\u6587\u672c\u7279\u5f81\u63d0\u53d6\uff0c\u5e76\u4f7f\u7528KMeans\u805a\u7c7b\u5bf9\u76f8\u4f3c\u7684bug\u6458\u8981\u8fdb\u884c\u5206\u7ec4\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5f02\u5e38bug\u901a\u5e38\u56f4\u7ed5\u6d4b\u8bd5\u5931\u8d25\u3001\u529f\u80fd\u589e\u5f3a\u8bf7\u6c42\u548c\u7528\u6237\u754c\u9762\u95ee\u9898\u7b49\u4e3b\u9898\u805a\u7c7b\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u5728\u4e03\u4e2a\u9879\u76ee\u4e2d\u8868\u73b0\u4e00\u81f4\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u9879\u76ee\u7ef4\u62a4\u8005\u63d0\u4f9b\u4e86\u53ef\u64cd\u4f5c\u7684\u89c1\u89e3\uff0c\u5e2e\u52a9\u4ed6\u4eec\u4f18\u5148\u5904\u7406\u5e76\u6709\u6548\u89e3\u51b3\u957f\u671f\u5b58\u5728\u7684bug\u3002"}}
{"id": "2509.16187", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.16187", "abs": "https://arxiv.org/abs/2509.16187", "authors": ["Ali Reza Ibrahimzada", "Brandon Paulsen", "Reyhaneh Jabbarvand", "Joey Dodds", "Daniel Kroening"], "title": "MatchFixAgent: Language-Agnostic Autonomous Repository-Level Code Translation Validation and Repair", "comment": null, "summary": "Code translation transforms source code from one programming language (PL) to\nanother. Validating the functional equivalence of translation and repairing, if\nnecessary, are critical steps in code translation. Existing automated\nvalidation and repair approaches struggle to generalize to many PLs due to high\nengineering overhead, and they rely on existing and often inadequate test\nsuites, which results in false claims of equivalence and ineffective\ntranslation repair. We develop MatchFixAgent, a large language model\n(LLM)-based, PL-agnostic framework for equivalence validation and repair of\ntranslations. MatchFixAgent features a multi-agent architecture that divides\nequivalence validation into several sub-tasks to ensure thorough and consistent\nsemantic analysis of the translation. Then it feeds this analysis to test agent\nto write and execute tests. Upon observing a test failure, the repair agent\nattempts to fix the translation bug. The final (in)equivalence decision is made\nby the verdict agent, considering semantic analyses and test execution results.\n  We compare MatchFixAgent's validation and repair results with four\nrepository-level code translation techniques. We use 2,219 translation pairs\nfrom their artifacts, which cover 6 PL pairs, and are collected from 24 GitHub\nprojects totaling over 900K lines of code. Our results demonstrate that\nMatchFixAgent produces (in)equivalence verdicts for 99.2% of translation pairs,\nwith the same equivalence validation result as prior work on 72.8% of them.\nWhen MatchFixAgent's result disagrees with prior work, we find that 60.7% of\nthe time MatchFixAgent's result is actually correct. In addition, we show that\nMatchFixAgent can repair 50.6% of inequivalent translation, compared to prior\nwork's 18.5%. This demonstrates that MatchFixAgent is far more adaptable to\nmany PL pairs than prior work, while producing highly accurate validation\nresults.", "AI": {"tldr": "MatchFixAgent\u662f\u4e00\u4e2a\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u6846\u67b6\uff0c\u7528\u4e8e\u4ee3\u7801\u7ffb\u8bd1\u7684\u7b49\u4ef7\u6027\u9a8c\u8bc1\u548c\u4fee\u590d\uff0c\u901a\u8fc7\u591a\u667a\u80fd\u4f53\u67b6\u6784\u5b9e\u73b0\u8bed\u4e49\u5206\u6790\u548c\u6d4b\u8bd5\u6267\u884c\uff0c\u5728\u591a\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5bf9\u4e0a\u8868\u73b0\u51fa\u8272\u3002", "motivation": "\u73b0\u6709\u81ea\u52a8\u5316\u9a8c\u8bc1\u548c\u4fee\u590d\u65b9\u6cd5\u96be\u4ee5\u6cdb\u5316\u5230\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e14\u4f9d\u8d56\u4e0d\u5145\u5206\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5bfc\u81f4\u7b49\u4ef7\u6027\u5224\u65ad\u9519\u8bef\u548c\u4fee\u590d\u6548\u679c\u4e0d\u4f73\u3002", "method": "\u91c7\u7528\u591a\u667a\u80fd\u4f53\u67b6\u6784\uff0c\u5c06\u7b49\u4ef7\u6027\u9a8c\u8bc1\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u4efb\u52a1\uff0c\u5305\u62ec\u8bed\u4e49\u5206\u6790\u3001\u6d4b\u8bd5\u7f16\u5199\u6267\u884c\u3001\u9519\u8bef\u4fee\u590d\u548c\u6700\u7ec8\u88c1\u51b3\uff0c\u5b9e\u73b0\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u7684\u9a8c\u8bc1\u548c\u4fee\u590d\u3002", "result": "\u57282,219\u4e2a\u7ffb\u8bd1\u5bf9\uff08\u8986\u76d66\u79cd\u7f16\u7a0b\u8bed\u8a00\u5bf9\uff09\u4e0a\u6d4b\u8bd5\uff0cMatchFixAgent\u4e3a99.2%\u7684\u7ffb\u8bd1\u5bf9\u751f\u6210\u7b49\u4ef7\u6027\u5224\u65ad\uff0c\u4e0e\u5148\u524d\u5de5\u4f5c\u4e00\u81f4\u7387\u8fbe72.8%\uff0c\u4e0d\u4e00\u81f4\u65f660.7%\u7684\u60c5\u51b5\u4e0bMatchFixAgent\u6b63\u786e\uff0c\u4fee\u590d\u6210\u529f\u738750.6%\u8fdc\u8d85\u5148\u524d\u5de5\u4f5c\u768418.5%\u3002", "conclusion": "MatchFixAgent\u76f8\u6bd4\u73b0\u6709\u65b9\u6cd5\u80fd\u66f4\u597d\u5730\u9002\u5e94\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u5bf9\uff0c\u540c\u65f6\u4ea7\u751f\u9ad8\u5ea6\u51c6\u786e\u7684\u9a8c\u8bc1\u7ed3\u679c\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u7ffb\u8bd1\u7684\u9a8c\u8bc1\u548c\u4fee\u590d\u80fd\u529b\u3002"}}

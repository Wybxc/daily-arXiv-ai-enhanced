{"id": "2508.08322", "categories": ["cs.SE", "cs.AI", "68T07, 68N01", "D.2.2; I.2.6; D.2.5; I.2.8"], "pdf": "https://arxiv.org/pdf/2508.08322", "abs": "https://arxiv.org/abs/2508.08322", "authors": ["Muhammad Haseeb"], "title": "Context Engineering for Multi-Agent LLM Code Assistants Using Elicit, NotebookLM, ChatGPT, and Claude Code", "comment": "15 pages, 5 figures, research paper on multi-agent LLM systems for\n  code generation", "summary": "Large Language Models (LLMs) have shown promise in automating code generation\nand software engineering tasks, yet they often struggle with complex,\nmulti-file projects due to context limitations and knowledge gaps. We propose a\nnovel context engineering workflow that combines multiple AI components: an\nIntent Translator (GPT-5) for clarifying user requirements, an Elicit-powered\nsemantic literature retrieval for injecting domain knowledge, NotebookLM-based\ndocument synthesis for contextual understanding, and a Claude Code multi-agent\nsystem for code generation and validation. Our integrated approach leverages\nintent clarification, retrieval-augmented generation, and specialized\nsub-agents orchestrated via Claude's agent framework. We demonstrate that this\nmethod significantly improves the accuracy and reliability of code assistants\nin real-world repositories, yielding higher single-shot success rates and\nbetter adherence to project context than baseline single-agent approaches.\nQualitative results on a large Next.js codebase show the multi-agent system\neffectively plans, edits, and tests complex features with minimal human\nintervention. We compare our system with recent frameworks like CodePlan,\nMASAI, and HyperAgent, highlighting how targeted context injection and agent\nrole decomposition lead to state-of-the-art performance. Finally, we discuss\nthe implications for deploying LLM-based coding assistants in production, along\nwith lessons learned on context management and future research directions.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408\u591aAI\u7ec4\u4ef6\u7684\u4e0a\u4e0b\u6587\u5de5\u7a0b\u5de5\u4f5c\u6d41\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u751f\u6210\u52a9\u624b\u5728\u590d\u6742\u9879\u76ee\u4e2d\u7684\u51c6\u786e\u6027\u548c\u53ef\u9760\u6027\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u751f\u6210\u548c\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u4e2d\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u5904\u7406\u590d\u6742\u591a\u6587\u4ef6\u9879\u76ee\u65f6\u5b58\u5728\u4e0a\u4e0b\u6587\u9650\u5236\u548c\u77e5\u8bc6\u7f3a\u53e3\u3002", "method": "\u7ed3\u5408\u610f\u56fe\u7ffb\u8bd1\u3001\u8bed\u4e49\u6587\u732e\u68c0\u7d22\u3001\u6587\u6863\u5408\u6210\u548c\u591a\u4ee3\u7406\u4ee3\u7801\u751f\u6210\u4e0e\u9a8c\u8bc1\uff0c\u901a\u8fc7Claude\u4ee3\u7406\u6846\u67b6\u534f\u8c03\u3002", "result": "\u65b9\u6cd5\u5728\u771f\u5b9e\u4ee3\u7801\u5e93\u4e2d\u663e\u8457\u63d0\u9ad8\u4e86\u5355\u6b21\u6210\u529f\u7387\uff0c\u5e76\u5728Next.js\u4ee3\u7801\u5e93\u4e2d\u5c55\u793a\u4e86\u9ad8\u6548\u89c4\u5212\u548c\u6d4b\u8bd5\u80fd\u529b\u3002", "conclusion": "\u591a\u4ee3\u7406\u7cfb\u7edf\u548c\u4e0a\u4e0b\u6587\u6ce8\u5165\u63d0\u5347\u4e86\u6027\u80fd\uff0c\u4e3aLLM\u4ee3\u7801\u52a9\u624b\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u5e94\u7528\u63d0\u4f9b\u4e86\u65b0\u65b9\u5411\u3002"}}
{"id": "2508.08332", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.08332", "abs": "https://arxiv.org/abs/2508.08332", "authors": ["Humza Ashraf", "Syed Muhammad Danish", "Aris Leivadeas", "Yazan Otoum", "Zeeshan Sattar"], "title": "Energy-Aware Code Generation with LLMs: Benchmarking Small vs. Large Language Models for Sustainable AI Programming", "comment": null, "summary": "Large Language Models (LLMs) are widely used for code generation. However,\ncommercial models like ChatGPT require significant computing power, which leads\nto high energy use and carbon emissions. This has raised concerns about their\nenvironmental impact. In this study, we evaluate open-source Small Language\nModels (SLMs) trained explicitly for code generation and compare their\nperformance and energy efficiency against large LLMs and efficient\nhuman-written Python code. The goal is to investigate whether SLMs can match\nthe performance of LLMs on certain types of programming problems while\nproducing more energy-efficient code. We evaluate 150 coding problems from\nLeetCode, evenly distributed across three difficulty levels: easy, medium, and\nhard. Our comparison includes three small open-source models, StableCode-3B,\nStarCoderBase-3B, and Qwen2.5-Coder-3B-Instruct, and two large commercial\nmodels, GPT-4.0 and DeepSeek-Reasoner. The generated code is evaluated using\nfour key metrics: run-time, memory usage, energy consumption, and correctness.\nWe use human-written solutions as a baseline to assess the quality and\nefficiency of the model-generated code. Results indicate that LLMs achieve the\nhighest correctness across all difficulty levels, but SLMs are often more\nenergy-efficient when their outputs are correct. In over 52% of the evaluated\nproblems, SLMs consumed the same or less energy than LLMs.", "AI": {"tldr": "\u7814\u7a76\u6bd4\u8f83\u5f00\u6e90\u5c0f\u578b\u8bed\u8a00\u6a21\u578b\uff08SLMs\uff09\u4e0e\u5927\u578b\u5546\u4e1a\u6a21\u578b\uff08LLMs\uff09\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u6027\u80fd\u548c\u80fd\u6e90\u6548\u7387\uff0c\u53d1\u73b0SLMs\u5728\u6b63\u786e\u65f6\u66f4\u8282\u80fd\u3002", "motivation": "\u5546\u4e1aLLMs\u7684\u9ad8\u80fd\u8017\u548c\u78b3\u6392\u653e\u5f15\u53d1\u73af\u5883\u62c5\u5fe7\uff0c\u7814\u7a76\u65e8\u5728\u63a2\u7d22SLMs\u662f\u5426\u80fd\u66ff\u4ee3LLMs\u5e76\u66f4\u8282\u80fd\u3002", "method": "\u8bc4\u4f30150\u4e2aLeetCode\u7f16\u7a0b\u95ee\u9898\uff0c\u6bd4\u8f833\u4e2a\u5f00\u6e90SLMs\u548c2\u4e2a\u5546\u4e1aLLMs\u7684\u8fd0\u884c\u65f6\u3001\u5185\u5b58\u3001\u80fd\u8017\u548c\u6b63\u786e\u6027\u3002", "result": "LLMs\u6b63\u786e\u7387\u6700\u9ad8\uff0c\u4f46SLMs\u572852%\u7684\u95ee\u9898\u4e2d\u80fd\u8017\u76f8\u540c\u6216\u66f4\u4f4e\u3002", "conclusion": "SLMs\u5728\u6b63\u786e\u65f6\u66f4\u8282\u80fd\uff0c\u53ef\u4f5c\u4e3aLLMs\u7684\u73af\u4fdd\u66ff\u4ee3\u65b9\u6848\u3002"}}
{"id": "2508.08342", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.08342", "abs": "https://arxiv.org/abs/2508.08342", "authors": ["Maximilian Jungwirth", "Martin Gruber", "Gordon Fraser"], "title": "Improving Merge Pipeline Throughput in Continuous Integration via Pull Request Prioritization", "comment": "This paper is accepted on the Industry Track of the 41st\n  International Conference on Software Maintenance and Evolution (ICSME 2025)", "summary": "Integrating changes into large monolithic software repositories is a critical\nstep in modern software development that substantially impacts the speed of\nfeature delivery, the stability of the codebase, and the overall productivity\nof development teams. To ensure the stability of the main branch, many\norganizations use merge pipelines that test software versions before the\nchanges are permanently integrated. However, the load on merge pipelines is\noften so high that they become bottlenecks, despite the use of parallelization.\nExisting optimizations frequently rely on specific build systems, limiting\ntheir generalizability and applicability. In this paper we propose to optimize\nthe order of PRs in merge pipelines using practical build predictions utilizing\nonly historical build data, PR metadata, and contextual information to estimate\nthe likelihood of successful builds in the merge pipeline. By dynamically\nprioritizing likely passing PRs during peak hours, this approach maximizes\nthroughput when it matters most. Experiments conducted on a real-world,\nlarge-scale project demonstrate that predictive ordering significantly\noutperforms traditional first-in-first-out (FIFO), as well as\nnon-learning-based ordering strategies. Unlike alternative optimizations, this\napproach is agnostic to the underlying build system and thus easily integrable\ninto existing automated merge pipelines.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5386\u53f2\u6784\u5efa\u6570\u636e\u548cPR\u5143\u6570\u636e\u7684\u9884\u6d4b\u65b9\u6cd5\uff0c\u4f18\u5316\u5408\u5e76\u7ba1\u9053\u4e2dPR\u7684\u987a\u5e8f\uff0c\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf\u3002", "motivation": "\u5927\u578b\u5355\u4f53\u8f6f\u4ef6\u4ed3\u5e93\u7684\u5408\u5e76\u7ba1\u9053\u5e38\u56e0\u9ad8\u8d1f\u8f7d\u6210\u4e3a\u74f6\u9888\uff0c\u73b0\u6709\u4f18\u5316\u65b9\u6cd5\u4f9d\u8d56\u7279\u5b9a\u6784\u5efa\u7cfb\u7edf\uff0c\u901a\u7528\u6027\u4e0d\u8db3\u3002", "method": "\u5229\u7528\u5386\u53f2\u6784\u5efa\u6570\u636e\u3001PR\u5143\u6570\u636e\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u9884\u6d4b\u6784\u5efa\u6210\u529f\u6982\u7387\uff0c\u52a8\u6001\u4f18\u5148\u5904\u7406\u53ef\u80fd\u901a\u8fc7\u7684PR\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u5728\u771f\u5b9e\u5927\u89c4\u6a21\u9879\u76ee\u4e2d\u663e\u8457\u4f18\u4e8eFIFO\u548c\u975e\u5b66\u4e60\u578b\u6392\u5e8f\u7b56\u7565\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e0d\u4f9d\u8d56\u7279\u5b9a\u6784\u5efa\u7cfb\u7edf\uff0c\u6613\u4e8e\u96c6\u6210\u5230\u73b0\u6709\u5408\u5e76\u7ba1\u9053\u4e2d\uff0c\u6709\u6548\u63d0\u5347\u6548\u7387\u3002"}}
{"id": "2508.08545", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.08545", "abs": "https://arxiv.org/abs/2508.08545", "authors": ["Youssef Esseddiq Ouatiti", "Mohammed Sayagh", "Bram Adams", "Ahmed E. Hassan"], "title": "OmniLLP: Enhancing LLM-based Log Level Prediction with Context-Aware Retrieval", "comment": null, "summary": "Developers insert logging statements in source code to capture relevant\nruntime information essential for maintenance and debugging activities. Log\nlevel choice is an integral, yet tricky part of the logging activity as it\ncontrols log verbosity and therefore influences systems' observability and\nperformance. Recent advances in ML-based log level prediction have leveraged\nlarge language models (LLMs) to propose log level predictors (LLPs) that\ndemonstrated promising performance improvements (AUC between 0.64 and 0.8).\nNevertheless, current LLM-based LLPs rely on randomly selected in-context\nexamples, overlooking the structure and the diverse logging practices within\nmodern software projects. In this paper, we propose OmniLLP, a novel LLP\nenhancement framework that clusters source files based on (1) semantic\nsimilarity reflecting the code's functional purpose, and (2) developer\nownership cohesion. By retrieving in-context learning examples exclusively from\nthese semantic and ownership aware clusters, we aim to provide more coherent\nprompts to LLPs leveraging LLMs, thereby improving their predictive accuracy.\nOur results show that both semantic and ownership-aware clusterings\nstatistically significantly improve the accuracy (by up to 8\\% AUC) of the\nevaluated LLM-based LLPs compared to random predictors (i.e., leveraging\nrandomly selected in-context examples from the whole project). Additionally,\nour approach that combines the semantic and ownership signal for in-context\nprediction achieves an impressive 0.88 to 0.96 AUC across our evaluated\nprojects. Our findings highlight the value of integrating software\nengineering-specific context, such as code semantic and developer ownership\nsignals into LLM-LLPs, offering developers a more accurate, contextually-aware\napproach to logging and therefore, enhancing system maintainability and\nobservability.", "AI": {"tldr": "OmniLLP\u901a\u8fc7\u57fa\u4e8e\u8bed\u4e49\u76f8\u4f3c\u6027\u548c\u5f00\u53d1\u8005\u6240\u6709\u6743\u51dd\u805a\u529b\u7684\u805a\u7c7b\u65b9\u6cd5\uff0c\u6539\u8fdb\u4e86\u57fa\u4e8eLLM\u7684\u65e5\u5fd7\u7ea7\u522b\u9884\u6d4b\uff08LLP\uff09\uff0c\u663e\u8457\u63d0\u5347\u4e86\u9884\u6d4b\u51c6\u786e\u6027\uff08AUC\u8fbe0.88-0.96\uff09\u3002", "motivation": "\u65e5\u5fd7\u7ea7\u522b\u9009\u62e9\u5bf9\u7cfb\u7edf\u53ef\u89c2\u6d4b\u6027\u548c\u6027\u80fd\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u73b0\u6709\u57fa\u4e8eLLM\u7684LLP\u4f9d\u8d56\u968f\u673a\u4e0a\u4e0b\u6587\u793a\u4f8b\uff0c\u5ffd\u7565\u4e86\u4ee3\u7801\u7ed3\u6784\u548c\u5f00\u53d1\u5b9e\u8df5\u591a\u6837\u6027\u3002", "method": "\u63d0\u51faOmniLLP\u6846\u67b6\uff0c\u901a\u8fc7\u8bed\u4e49\u76f8\u4f3c\u6027\u548c\u5f00\u53d1\u8005\u6240\u6709\u6743\u51dd\u805a\u529b\u805a\u7c7b\u6e90\u6587\u4ef6\uff0c\u4ece\u4e2d\u9009\u62e9\u4e0a\u4e0b\u6587\u793a\u4f8b\uff0c\u4f18\u5316LLP\u9884\u6d4b\u3002", "result": "\u8bed\u4e49\u548c\u6240\u6709\u6743\u805a\u7c7b\u663e\u8457\u63d0\u5347LLP\u51c6\u786e\u6027\uff08AUC\u63d0\u9ad88%\uff09\uff0c\u7ed3\u5408\u4e24\u79cd\u4fe1\u53f7\u7684\u65b9\u6cd5\u5728\u591a\u4e2a\u9879\u76ee\u4e2d\u8868\u73b0\u4f18\u5f02\uff08AUC 0.88-0.96\uff09\u3002", "conclusion": "\u5c06\u4ee3\u7801\u8bed\u4e49\u548c\u5f00\u53d1\u8005\u6240\u6709\u6743\u4fe1\u53f7\u878d\u5165LLM-LLP\uff0c\u53ef\u63d0\u4f9b\u66f4\u51c6\u786e\u7684\u65e5\u5fd7\u7ea7\u522b\u9884\u6d4b\uff0c\u63d0\u5347\u7cfb\u7edf\u53ef\u7ef4\u62a4\u6027\u548c\u53ef\u89c2\u6d4b\u6027\u3002"}}
{"id": "2508.08496", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2508.08496", "abs": "https://arxiv.org/abs/2508.08496", "authors": ["Mudathir Mohamed", "Nick Feng", "Andrew Reynolds", "Cesare Tinelli", "Clark Barrett", "Marsha Chechik"], "title": "Solving Set Constraints with Comprehensions and Bounded Quantifiers", "comment": null, "summary": "Many real applications problems can be encoded easily as quantified formulas\nin SMT. However, this simplicity comes at the cost of difficulty during solving\nby SMT solvers. Different strategies and quantifier instantiation techniques\nhave been developed to tackle this. However, SMT solvers still struggle with\nquantified formulas generated by some applications. In this paper, we discuss\nthe use of set-bounded quantifiers, quantifiers whose variable ranges over a\nfinite set. These quantifiers can be implemented using quantifier-free fragment\nof the theory of finite relations with a filter operator, a form of restricted\ncomprehension, that constructs a subset from a finite set using a predicate. We\nshow that this approach outperforms other quantification techniques in\nsatisfiable problems generated by the SLEEC tool, and is very competitive on\nunsatisfiable benchmarks compared to LEGOS, a specialized solver for SLEEC. We\nalso identify a decidable class of constraints with restricted applications of\nthe filter operator, while showing that unrestricted applications lead to\nundecidability.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u4f7f\u7528\u96c6\u5408\u6709\u754c\u91cf\u8bcd\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u6709\u9650\u5173\u7cfb\u7406\u8bba\u548c\u8fc7\u6ee4\u5668\u64cd\u4f5c\u7b26\u5b9e\u73b0\uff0c\u4f18\u4e8e\u73b0\u6709\u6280\u672f\uff0c\u5e76\u5728\u7279\u5b9a\u95ee\u9898\u4e2d\u8868\u73b0\u4f18\u5f02\u3002", "motivation": "SMT\u6c42\u89e3\u5668\u5728\u5904\u7406\u91cf\u5316\u516c\u5f0f\u65f6\u5b58\u5728\u56f0\u96be\uff0c\u5c24\u5176\u662f\u67d0\u4e9b\u5e94\u7528\u751f\u6210\u7684\u516c\u5f0f\u3002\u672c\u6587\u65e8\u5728\u63a2\u7d22\u66f4\u9ad8\u6548\u7684\u91cf\u5316\u6280\u672f\u3002", "method": "\u91c7\u7528\u96c6\u5408\u6709\u754c\u91cf\u8bcd\uff0c\u5229\u7528\u6709\u9650\u5173\u7cfb\u7406\u8bba\u548c\u8fc7\u6ee4\u5668\u64cd\u4f5c\u7b26\u5b9e\u73b0\u91cf\u5316\u516c\u5f0f\u7684\u6c42\u89e3\u3002", "result": "\u8be5\u65b9\u6cd5\u5728SLEEC\u5de5\u5177\u751f\u6210\u7684\u53ef\u6ee1\u8db3\u95ee\u9898\u4e0a\u8868\u73b0\u4f18\u5f02\uff0c\u5728\u4e0d\u53ef\u6ee1\u8db3\u95ee\u9898\u4e0a\u4e0e\u4e13\u7528\u6c42\u89e3\u5668LEGOS\u7ade\u4e89\u3002\u540c\u65f6\u53d1\u73b0\u4e86\u4e00\u7c7b\u53ef\u5224\u5b9a\u7684\u7ea6\u675f\u7c7b\u3002", "conclusion": "\u96c6\u5408\u6709\u754c\u91cf\u8bcd\u65b9\u6cd5\u5728\u7279\u5b9a\u573a\u666f\u4e0b\u9ad8\u6548\uff0c\u4e14\u90e8\u5206\u7ea6\u675f\u7c7b\u53ef\u5224\u5b9a\uff0c\u4f46\u65e0\u9650\u5236\u5e94\u7528\u4f1a\u5bfc\u81f4\u4e0d\u53ef\u5224\u5b9a\u6027\u3002"}}
{"id": "2508.08661", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.08661", "abs": "https://arxiv.org/abs/2508.08661", "authors": ["Chunhua Liu", "Hong Yi Lin", "Patanamon Thongtanunam"], "title": "Hallucinations in Code Change to Natural Language Generation: Prevalence and Evaluation of Detection Metrics", "comment": "8 main pages, 5 figures", "summary": "Language models have shown strong capabilities across a wide range of tasks\nin software engineering, such as code generation, yet they suffer from\nhallucinations. While hallucinations have been studied independently in natural\nlanguage and code generation, their occurrence in tasks involving code changes\nwhich have a structurally complex and context-dependent format of code remains\nlargely unexplored. This paper presents the first comprehensive analysis of\nhallucinations in two critical tasks involving code change to natural language\ngeneration: commit message generation and code review comment generation. We\nquantify the prevalence of hallucinations in recent language models and explore\na range of metric-based approaches to automatically detect them. Our findings\nreveal that approximately 50\\% of generated code reviews and 20\\% of generated\ncommit messages contain hallucinations. Whilst commonly used metrics are weak\ndetectors on their own, combining multiple metrics substantially improves\nperformance. Notably, model confidence and feature attribution metrics\neffectively contribute to hallucination detection, showing promise for\ninference-time detection.\\footnote{All code and data will be released upon\nacceptance.", "AI": {"tldr": "\u8be5\u8bba\u6587\u9996\u6b21\u5168\u9762\u5206\u6790\u4e86\u4ee3\u7801\u53d8\u66f4\u4efb\u52a1\u4e2d\u7684\u5e7b\u89c9\u95ee\u9898\uff0c\u53d1\u73b050%\u7684\u4ee3\u7801\u5ba1\u67e5\u548c20%\u7684\u63d0\u4ea4\u6d88\u606f\u5b58\u5728\u5e7b\u89c9\uff0c\u5e76\u63d0\u51fa\u591a\u6307\u6807\u7ed3\u5408\u7684\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86\u68c0\u6d4b\u6027\u80fd\u3002", "motivation": "\u7814\u7a76\u4ee3\u7801\u53d8\u66f4\u4efb\u52a1\uff08\u5982\u63d0\u4ea4\u6d88\u606f\u751f\u6210\u548c\u4ee3\u7801\u5ba1\u67e5\u8bc4\u8bba\u751f\u6210\uff09\u4e2d\u8bed\u8a00\u6a21\u578b\u7684\u5e7b\u89c9\u95ee\u9898\uff0c\u586b\u8865\u4e86\u73b0\u6709\u7814\u7a76\u7684\u7a7a\u767d\u3002", "method": "\u91cf\u5316\u4e86\u8fd1\u671f\u8bed\u8a00\u6a21\u578b\u4e2d\u5e7b\u89c9\u7684\u666e\u904d\u6027\uff0c\u5e76\u63a2\u7d22\u4e86\u591a\u79cd\u57fa\u4e8e\u6307\u6807\u7684\u81ea\u52a8\u68c0\u6d4b\u65b9\u6cd5\u3002", "result": "\u7ea650%\u7684\u4ee3\u7801\u5ba1\u67e5\u548c20%\u7684\u63d0\u4ea4\u6d88\u606f\u5305\u542b\u5e7b\u89c9\uff1b\u591a\u6307\u6807\u7ed3\u5408\u663e\u8457\u63d0\u5347\u4e86\u68c0\u6d4b\u6027\u80fd\uff0c\u6a21\u578b\u7f6e\u4fe1\u5ea6\u548c\u7279\u5f81\u5f52\u56e0\u6307\u6807\u8868\u73b0\u7a81\u51fa\u3002", "conclusion": "\u591a\u6307\u6807\u7ed3\u5408\u7684\u65b9\u6cd5\u5728\u5e7b\u89c9\u68c0\u6d4b\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u4e3a\u63a8\u7406\u65f6\u68c0\u6d4b\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2508.09053", "categories": ["cs.LO", "68Q10, 68N19"], "pdf": "https://arxiv.org/pdf/2508.09053", "abs": "https://arxiv.org/abs/2508.09053", "authors": ["Klaus-Dieter Schewe", "Flavio Ferrarotti"], "title": "Behavioural Theory of Reflective Algorithms II: Reflective Parallel Algorithms", "comment": "49 pages; short version (without proofs) published in LNCS vol.\n  15728: Rigorous State-Based Methods, 2025", "summary": "We develop a behavioural theory of reflective parallel algorithms (RAs), i.e.\nsynchronous parallel algorithms that can modify their own behaviour. The theory\ncomprises a set of postulates defining the class of RAs, an abstract machine\nmodel, and the proof that all RAs are captured by this machine model. RAs are\nsequential-time, parallel algorithms, where every state includes a\nrepresentation of the algorithm in that state, thus enabling linguistic\nreflection. Bounded exploration is preserved using multiset comprehension terms\nas values. The abstract machine model is defined by reflective Abstract State\nMachines (rASMs), which extend ASMs using extended states that include an\nupdatable representation of the main ASM rule to be executed by the machine in\nthat state.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u53cd\u5c04\u5e76\u884c\u7b97\u6cd5\uff08RAs\uff09\u7684\u884c\u4e3a\u7406\u8bba\uff0c\u5305\u62ec\u5b9a\u4e49RAs\u7684\u516c\u7406\u3001\u62bd\u8c61\u673a\u5668\u6a21\u578b\u53ca\u8bc1\u660e\u8be5\u6a21\u578b\u80fd\u6355\u83b7\u6240\u6709RAs\u3002RAs\u662f\u987a\u5e8f\u65f6\u95f4\u5e76\u884c\u7b97\u6cd5\uff0c\u652f\u6301\u8bed\u8a00\u53cd\u5c04\uff0c\u901a\u8fc7\u591a\u96c6\u7406\u89e3\u9879\u4fdd\u6301\u6709\u754c\u63a2\u7d22\u3002", "motivation": "\u7814\u7a76\u80fd\u591f\u81ea\u6211\u4fee\u6539\u884c\u4e3a\u7684\u540c\u6b65\u5e76\u884c\u7b97\u6cd5\uff08RAs\uff09\uff0c\u4e3a\u5176\u5efa\u7acb\u7406\u8bba\u57fa\u7840\u548c\u8ba1\u7b97\u6a21\u578b\u3002", "method": "\u63d0\u51fa\u53cd\u5c04\u62bd\u8c61\u72b6\u6001\u673a\uff08rASMs\uff09\u4f5c\u4e3aRAs\u7684\u62bd\u8c61\u673a\u5668\u6a21\u578b\uff0c\u6269\u5c55\u4e86ASMs\u4ee5\u652f\u6301\u72b6\u6001\u4e2d\u5305\u542b\u53ef\u66f4\u65b0\u7684\u4e3b\u89c4\u5219\u8868\u793a\u3002", "result": "\u8bc1\u660e\u6240\u6709RAs\u5747\u53ef\u7531rASMs\u6355\u83b7\uff0c\u4e14\u901a\u8fc7\u591a\u96c6\u7406\u89e3\u9879\u4fdd\u6301\u4e86\u6709\u754c\u63a2\u7d22\u6027\u8d28\u3002", "conclusion": "rASMs\u4e3aRAs\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u8ba1\u7b97\u6a21\u578b\uff0c\u652f\u6301\u8bed\u8a00\u53cd\u5c04\u548c\u884c\u4e3a\u4fee\u6539\u3002"}}
{"id": "2508.08868", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.08868", "abs": "https://arxiv.org/abs/2508.08868", "authors": ["Henning Femmer", "Frank Houdek", "Max Unterbusch", "Andreas Vogelsang"], "title": "Description and Comparative Analysis of QuRE: A New Industrial Requirements Quality Dataset", "comment": null, "summary": "Requirements quality is central to successful software and systems\nengineering. Empirical research on quality defects in natural language\nrequirements relies heavily on datasets, ideally as realistic and\nrepresentative as possible. However, such datasets are often inaccessible,\nsmall, or lack sufficient detail. This paper introduces QuRE (Quality in\nRequirements), a new dataset comprising 2,111 industrial requirements that have\nbeen annotated through a real-world review process. Previously used for over\nfive years as part of an industrial contract, this dataset is now being\nreleased to the research community. In this work, we furthermore provide\ndescriptive statistics on the dataset, including measures such as lexical\ndiversity and readability, and compare it to existing requirements datasets and\nsynthetically generated requirements. In contrast to synthetic datasets, QuRE\nis linguistically similar to existing ones. However, this dataset comes with a\ndetailed context description, and its labels have been created and used\nsystematically and extensively in an industrial context over a period of close\nto a decade. Our goal is to foster transparency, comparability, and empirical\nrigor by supporting the development of a common gold standard for requirements\nquality datasets. This, in turn, will enable more sound and collaborative\nresearch efforts in the field.", "AI": {"tldr": "\u8bba\u6587\u4ecb\u7ecd\u4e86QuRE\u6570\u636e\u96c6\uff0c\u5305\u542b2111\u6761\u5de5\u4e1a\u9700\u6c42\uff0c\u6807\u6ce8\u8be6\u7ec6\u4e14\u6765\u81ea\u771f\u5b9e\u5de5\u4e1a\u73af\u5883\uff0c\u65e8\u5728\u63d0\u5347\u9700\u6c42\u8d28\u91cf\u7814\u7a76\u7684\u900f\u660e\u5ea6\u548c\u53ef\u6bd4\u6027\u3002", "motivation": "\u9700\u6c42\u8d28\u91cf\u5bf9\u8f6f\u4ef6\u548c\u7cfb\u7edf\u5de5\u7a0b\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u73b0\u6709\u6570\u636e\u96c6\u5f80\u5f80\u4e0d\u5b8c\u6574\u6216\u7f3a\u4e4f\u7ec6\u8282\uff0c\u963b\u788d\u4e86\u5b9e\u8bc1\u7814\u7a76\u3002", "method": "\u5f15\u5165QuRE\u6570\u636e\u96c6\uff0c\u63d0\u4f9b\u63cf\u8ff0\u6027\u7edf\u8ba1\uff08\u5982\u8bcd\u6c47\u591a\u6837\u6027\u548c\u53ef\u8bfb\u6027\uff09\uff0c\u5e76\u4e0e\u73b0\u6709\u6570\u636e\u96c6\u53ca\u5408\u6210\u6570\u636e\u5bf9\u6bd4\u3002", "result": "QuRE\u5728\u8bed\u8a00\u4e0a\u4e0e\u73b0\u6709\u6570\u636e\u96c6\u76f8\u4f3c\uff0c\u4f46\u6807\u6ce8\u66f4\u7cfb\u7edf\u5316\u4e14\u6765\u81ea\u957f\u671f\u5de5\u4e1a\u5b9e\u8df5\uff0c\u63d0\u4f9b\u8be6\u7ec6\u4e0a\u4e0b\u6587\u3002", "conclusion": "QuRE\u652f\u6301\u5efa\u7acb\u9700\u6c42\u8d28\u91cf\u7814\u7a76\u7684\u5171\u540c\u6807\u51c6\uff0c\u4fc3\u8fdb\u66f4\u4e25\u8c28\u548c\u534f\u4f5c\u7684\u7814\u7a76\u3002"}}
{"id": "2508.08872", "categories": ["cs.SE", "D.2.5"], "pdf": "https://arxiv.org/pdf/2508.08872", "abs": "https://arxiv.org/abs/2508.08872", "authors": ["Dylan Callaghan", "Alexandra van der Spuy", "Bernd Fischer"], "title": "Empirical Analysis of Temporal and Spatial Fault Characteristics in Multi-Fault Bug Repositories", "comment": null, "summary": "Fixing software faults contributes significantly to the cost of software\nmaintenance and evolution. Techniques for reducing these costs require datasets\nof software faults, as well as an understanding of the faults, for optimal\ntesting and evaluation. In this paper, we present an empirical analysis of the\ntemporal and spatial characteristics of faults existing in 16 open-source Java\nand Python projects, which form part of the Defects4J and BugsInPy datasets,\nrespectively. Our findings show that many faults in these software systems are\nlong-lived, leading to the majority of software versions having multiple\ncoexisting faults. This is in contrast to the assumptions of the original\ndatasets, where the majority of versions only identify a single fault. In\naddition, we show that although the faults are found in only a small subset of\nthe systems, these faults are often evenly distributed amongst this subset,\nleading to relatively few bug hotspots.", "AI": {"tldr": "\u8bba\u6587\u5206\u6790\u4e86\u5f00\u6e90Java\u548cPython\u9879\u76ee\u4e2d\u8f6f\u4ef6\u6545\u969c\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u7279\u6027\uff0c\u53d1\u73b0\u8bb8\u591a\u6545\u969c\u957f\u671f\u5b58\u5728\u4e14\u5206\u5e03\u5747\u5300\uff0c\u6311\u6218\u4e86\u73b0\u6709\u6570\u636e\u96c6\u7684\u5047\u8bbe\u3002", "motivation": "\u964d\u4f4e\u8f6f\u4ef6\u7ef4\u62a4\u6210\u672c\u9700\u8981\u4e86\u89e3\u6545\u969c\u7279\u6027\uff0c\u4f46\u73b0\u6709\u6570\u636e\u96c6\u5047\u8bbe\u5355\u4e00\u6545\u969c\u7248\u672c\uff0c\u4e0e\u5b9e\u9645\u4e0d\u7b26\u3002", "method": "\u5bf9Defects4J\u548cBugsInPy\u6570\u636e\u96c6\u4e2d\u768416\u4e2a\u5f00\u6e90\u9879\u76ee\u8fdb\u884c\u5b9e\u8bc1\u5206\u6790\u3002", "result": "\u53d1\u73b0\u6545\u969c\u957f\u671f\u5b58\u5728\u4e14\u5206\u5e03\u5747\u5300\uff0c\u591a\u6570\u7248\u672c\u5171\u5b58\u591a\u4e2a\u6545\u969c\uff0c\u800c\u975e\u5355\u4e00\u6545\u969c\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u6311\u6218\u4e86\u73b0\u6709\u6570\u636e\u96c6\u7684\u5047\u8bbe\uff0c\u4e3a\u4f18\u5316\u6d4b\u8bd5\u548c\u8bc4\u4f30\u63d0\u4f9b\u4e86\u65b0\u89c6\u89d2\u3002"}}
{"id": "2508.08952", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.08952", "abs": "https://arxiv.org/abs/2508.08952", "authors": ["Hyunwoo Kim", "Jaeseong Lee", "Sunpyo Hong", "Changmin Han"], "title": "Toward Automated Hypervisor Scenario Generation Based on VM Workload Profiling for Resource-Constrained Environments", "comment": null, "summary": "In the automotive industry, the rise of software-defined vehicles (SDVs) has\n  driven a shift toward virtualization-based architectures that consolidate\n  diverse automotive workloads on a shared hardware platform. To support this\n  evolution, chipset vendors provide board support packages (BSPs), hypervisor\n  setups, and resource allocation guidelines. However, adapting these static\n  configurations to varying system requirements and workloads remain a\n  significant challenge for Tier 1 integrators.\n  This paper presents an automated scenario generation framework, which helps\n  automotive vendors to allocate hardware resources efficiently across multiple\n  VMs. By profiling runtime behavior and integrating both theoretical models\nand\n  vendor heuristics, the proposed tool generates optimized hypervisor\n  configurations tailored to system constraints.\n  We compare two main approaches for modeling target QoS based on profiled data\n  and resource allocation: domain-guided parametric modeling and deep\n  learning-based modeling. We further describe our optimization strategy using\n  the selected QoS model to derive efficient resource allocations. Finally, we\n  report on real-world deployments to demonstrate the effectiveness of our\n  framework in improving integration efficiency and reducing development time\nin\n  resource-constrained environments.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u81ea\u52a8\u5316\u573a\u666f\u751f\u6210\u6846\u67b6\uff0c\u5e2e\u52a9\u6c7d\u8f66\u884c\u4e1a\u9ad8\u6548\u5206\u914d\u786c\u4ef6\u8d44\u6e90\uff0c\u4f18\u5316\u865a\u62df\u673a\u914d\u7f6e\u3002", "motivation": "\u968f\u7740\u8f6f\u4ef6\u5b9a\u4e49\u8f66\u8f86\uff08SDV\uff09\u7684\u5174\u8d77\uff0c\u6c7d\u8f66\u884c\u4e1a\u9700\u8981\u9002\u5e94\u52a8\u6001\u7cfb\u7edf\u9700\u6c42\u548c\u5de5\u4f5c\u8d1f\u8f7d\u7684\u865a\u62df\u5316\u67b6\u6784\uff0c\u4f46\u73b0\u6709\u9759\u6001\u914d\u7f6e\u96be\u4ee5\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u3002", "method": "\u901a\u8fc7\u5206\u6790\u8fd0\u884c\u65f6\u884c\u4e3a\u5e76\u7ed3\u5408\u7406\u8bba\u6a21\u578b\u548c\u4f9b\u5e94\u5546\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u5f00\u53d1\u4e86\u4e00\u79cd\u5de5\u5177\uff0c\u751f\u6210\u4f18\u5316\u7684\u865a\u62df\u673a\u914d\u7f6e\u3002\u6bd4\u8f83\u4e86\u4e24\u79cd\u5efa\u6a21\u65b9\u6cd5\uff1a\u9886\u57df\u5f15\u5bfc\u7684\u53c2\u6570\u5316\u5efa\u6a21\u548c\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5efa\u6a21\u3002", "result": "\u5b9e\u9645\u90e8\u7f72\u8868\u660e\uff0c\u8be5\u6846\u67b6\u663e\u8457\u63d0\u9ad8\u4e86\u96c6\u6210\u6548\u7387\u5e76\u7f29\u77ed\u4e86\u5f00\u53d1\u65f6\u95f4\u3002", "conclusion": "\u8be5\u81ea\u52a8\u5316\u6846\u67b6\u4e3a\u8d44\u6e90\u53d7\u9650\u73af\u5883\u4e2d\u7684\u865a\u62df\u673a\u914d\u7f6e\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}

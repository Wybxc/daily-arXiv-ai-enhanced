{"id": "2509.04253", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.04253", "abs": "https://arxiv.org/abs/2509.04253", "authors": ["Siyuan He", "Songlin Jia", "Yuyan Bao", "Tiark Rompf"], "title": "When Lifetimes Liberate: A Type System for Arenas with Higher-Order Reachability Tracking", "comment": null, "summary": "Static resource management in higher-order functional languages remains\nelusive due to tensions between control, expressiveness, and flexibility.\nRegion-based systems [Grossman et al. 2002; Tofte et al. 2001] offer control\nover lifetimes and expressive in-region sharing, but restrict resources to\nlexical scopes. Rust, an instance of ownership types [Clarke et al. 2013],\noffers non-lexical lifetimes and robust safety guarantees, yet its global\ninvariants make common sharing patterns hard to express. Reachability types\n[Wei et al. 2024] enable reasoning about sharing and separation, but lack\npractical tools for controlling resource lifetimes.\n  In this work, we try to unify their strengths. Our solution enables grouping\nresources as arenas for arbitrary sharing and static guarantees of lexically\nscoped lifetimes. Crucially, arenas and lexical lifetimes are not the only\nchoice: users may also manage resources individually, with non-lexical\nlifetimes. Regardless of mode, resources share the same type, preserving the\nhigher-order parametric nature of the language.\n  Obtaining static safety guarantee in a higher-order language with flexible\nsharing is nontrivial. To this end, we propose two new extensions atop\nreachability types [Wei et al. 2024]. First, A<: features a novel\ntwo-dimensional store model to enable coarse-grained reachability tracking for\narbitrarily shared resources within arenas. Building on this, {A}<: establishes\nlexical lifetime control with static guarantees. As the first reachability\nformalism presented for lifetime control, {A}<: avoids the complication of\nflow-sensitive reasoning and retains expressive power and simplicity. Both\ncalculi are formalized and proven type safe in Rocq.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u7edf\u4e00\u4e86\u533a\u57df\u7cfb\u7edf\u3001\u6240\u6709\u6743\u7c7b\u578b\u548c\u53ef\u8fbe\u6027\u7c7b\u578b\u7684\u4f18\u70b9\uff0c\u652f\u6301\u968f\u610f\u5171\u4eab\u7684\u8d44\u6e90\u6c60\u7ba1\u7406\u548c\u9759\u6001\u8bc1\u660e\u7684\u8bcd\u6cd5\u751f\u547d\u5468\u671f\u63a7\u5236\u3002", "motivation": "\u89e3\u51b3\u9ad8\u9636\u51fd\u6570\u8bed\u8a00\u4e2d\u9759\u6001\u8d44\u6e90\u7ba1\u7406\u7684\u6311\u6218\uff0c\u533a\u57df\u7cfb\u7edf\u3001\u6240\u6709\u6743\u7c7b\u578b\u548c\u53ef\u8fbe\u6027\u7c7b\u578b\u90fd\u6709\u5404\u81ea\u7684\u9650\u5236\uff0c\u9700\u8981\u4e00\u79cd\u7edf\u4e00\u65b9\u6848\u6765\u7ed3\u5408\u5b83\u4eec\u7684\u4f18\u70b9\u3002", "method": "\u5728\u53ef\u8fbe\u6027\u7c7b\u578b\u57fa\u7840\u4e0a\u63d0\u51fa\u4e86\u4e24\u4e2a\u65b0\u6269\u5c55\uff1aA<:\u4f7f\u7528\u4e8c\u7ef4\u5b58\u50a8\u6a21\u578b\u652f\u6301\u7c97\u7c92\u5ea6\u53ef\u8fbe\u6027\u8ddf\u8e2a\uff0c{A}<:\u5b9e\u73b0\u8bcd\u6cd5\u751f\u547d\u5468\u671f\u63a7\u5236\u3002\u4e24\u79cd\u8ba1\u7b97\u6cd5\u90fd\u5728Rocq\u4e2d\u5f62\u5f0f\u5316\u5e76\u8bc1\u660e\u7c7b\u578b\u5b89\u5168\u3002", "result": "\u8bbe\u8ba1\u51fa\u7684\u7c7b\u578b\u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u652f\u6301\u8d44\u6e90\u6c60\u7684\u968f\u610f\u5171\u4eab\u548c\u9759\u6001\u8bc1\u660e\u7684\u8bcd\u6cd5\u751f\u547d\u5468\u671f\uff0c\u4e5f\u652f\u6301\u4e2a\u4f53\u8d44\u6e90\u7684\u975e\u8bcd\u6cd5\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u4fdd\u6301\u4e86\u8bed\u8a00\u7684\u9ad8\u9636\u53c2\u6570\u6027\u8d28\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u63d0\u4f9b\u4e86\u7b2c\u4e00\u4e2a\u7528\u4e8e\u751f\u547d\u5468\u671f\u63a7\u5236\u7684\u53ef\u8fbe\u6027\u5f62\u5f0f\u7cfb\u7edf\uff0c\u907f\u514d\u4e86\u6d41\u6548\u611f\u63a8\u7406\u7684\u590d\u6742\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u8868\u8fbe\u529b\u548c\u7b80\u6d01\u6027\uff0c\u4e3a\u9ad8\u9636\u51fd\u6570\u8bed\u8a00\u7684\u9759\u6001\u8d44\u6e90\u7ba1\u7406\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.03541", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03541", "abs": "https://arxiv.org/abs/2509.03541", "authors": ["Chong Wang", "Haoning Wu", "Peng Liang", "Maya Daneva", "Marten van Sinderen"], "title": "Towards the Datasets Used in Requirements Engineering of Mobile Apps: Preliminary Findings from a Systematic Mapping Study", "comment": null, "summary": "[Background] Research on requirements engineering (RE) for mobile apps\nemploys datasets formed by app users, developers or vendors. However, little is\nknown about the sources of these datasets in terms of platforms and the RE\nactivities that were researched with the help of the respective datasets.\n[Aims] The goal of this paper is to investigate the state-of-the-art of the\ndatasets of mobile apps used in existing RE research. [Method] We carried out a\nsystematic mapping study by following the guidelines of Kitchenham et al.\n[Results] Based on 43 selected papers, we found that Google Play and Apple App\nStore provide the datasets for more than 90% of published research in RE for\nmobile apps. We also found that the most investigated RE activities - based on\ndatasets, are requirements elicitation and requirements analysis. [Conclusions]\nOur most important conclusions are: (1) there is a growth in the use of\ndatasets for RE research of mobile apps since 2012, (2) the RE knowledge for\nmobile apps might be skewed due to the overuse of Google Play and Apple App\nStore, (3) there are attempts to supplement reviews of apps from repositories\nwith other data sources, (4) there is a need to expand the alternative sources\nand experiments with complimentary use of multiple sources, if the community\nwants more generalizable results. Plus, it is expected to expand the research\non other RE activities, beyond elicitation and analysis.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u7cfb\u7edf\u6620\u5c04\u7814\u7a76\u5206\u6790\u4e86\u79fb\u52a8\u5e94\u7528\u9700\u6c42\u5de5\u7a0b\u9886\u57df\u7684\u6570\u636e\u96c6\u4f7f\u7528\u72b6\u51b5\uff0c\u53d1\u73b0Google Play\u548cApple App Store\u5360\u636e\u4e86\u8d85\u8fc790%\u7684\u7814\u7a76\u6570\u636e\u6765\u6e90\uff0c\u5e76\u5efa\u8bae\u6269\u5927\u6570\u636e\u6e90\u8303\u56f4\u4ee5\u83b7\u5f97\u66f4\u5177\u666e\u904d\u6027\u7684\u7814\u7a76\u7ed3\u679c\u3002", "motivation": "\u76ee\u524d\u79fb\u52a8\u5e94\u7528\u9700\u6c42\u5de5\u7a0b\u7814\u7a76\u4f7f\u7528\u7684\u6570\u636e\u96c6\u6e90\u5e73\u53f0\u548c\u9700\u6c42\u6d3b\u52a8\u7814\u7a76\u8303\u56f4\u4e0d\u660e\uff0c\u9700\u8981\u8fdb\u884c\u7cfb\u7edf\u6027\u8bc4\u4f30\u3002", "method": "\u91c7\u7528Kitchenham\u7b49\u4eba\u7684\u7cfb\u7edf\u6620\u5c04\u7814\u7a76\u6307\u5357\uff0c\u5bf943\u7bc7\u9009\u5b9a\u8bba\u6587\u8fdb\u884c\u5206\u6790\u3002", "result": "\u53d1\u73b0Google Play\u548cApple App Store\u63d0\u4f9b\u4e86\u8d85\u8fc790%\u7684\u9700\u6c42\u5de5\u7a76\u6570\u636e\u96c6\uff0c\u6700\u5e38\u7814\u7a76\u7684\u9700\u6c42\u6d3b\u52a8\u662f\u9700\u6c42\u83b7\u53d6\u548c\u9700\u6c42\u5206\u6790\u3002", "conclusion": "\u9700\u6c42\u5de5\u7a0b\u7814\u7a76\u5bf9\u79fb\u52a8\u5e94\u7528\u7684\u6570\u636e\u96c6\u4f7f\u7528\u4ece2012\u5e74\u4ee5\u6765\u589e\u957f\uff0c\u4f46\u8fc7\u5ea6\u4f9d\u8d56\u4e3b\u8981\u5e73\u53f0\u53ef\u80fd\u5bfc\u81f4\u77e5\u8bc6\u504f\u5dee\uff0c\u9700\u8981\u6269\u5927\u6570\u636e\u6e90\u8303\u56f4\u548c\u7814\u7a76\u5176\u4ed6\u9700\u6c42\u6d3b\u52a8\u3002"}}
{"id": "2509.03554", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03554", "abs": "https://arxiv.org/abs/2509.03554", "authors": ["Cheng-Yang Tsai", "Tzu-Wei Huang", "Jen-Wei Shih", "I-Hsiang Wang", "Yu-Cheng Lin", "Rung-Bin Lin"], "title": "A Multi-stage Error Diagnosis for APB Transaction", "comment": null, "summary": "Functional verification and debugging are critical bottlenecks in modern\nSystem-on-Chip (SoC) design, with manual detection of Advanced Peripheral Bus\n(APB) transaction errors in large Value Change Dump (VCD) files being\ninefficient and error-prone. Addressing the 2025 ICCAD Contest Problem D, this\nstudy proposes an automated error diagnosis framework using a hierarchical\nRandom Forest-based architecture. The multi-stage error diagnosis employs four\npre-trained binary classifiers to sequentially detect Out-of-Range Access,\nAddress Corruption, and Data Corruption errors, prioritizing high-certainty\naddress-related faults before tackling complex data errors to enhance\nefficiency. Experimental results show an overall accuracy of 91.36%, with\nnear-perfect precision and recall for address errors and robust performance for\ndata errors. Although the final results of the ICCAD 2025 CAD Contest are yet\nto be announced as of the submission date, our team achieved first place in the\nbeta stage, highlighting the method's competitive strength. This research\nvalidates the potential of hierarchical machine learning as a powerful\nautomated tool for hardware debugging in Electronic Design Automation (EDA).", "AI": {"tldr": "\u57fa\u4e8e\u5c42\u6b21\u968f\u673a\u68ee\u6797\u7684\u81ea\u52a8\u5316APB\u4ea4\u6613\u9519\u8bef\u8bca\u65ad\u6846\u67b6\uff0c\u5728ICCAD 2025\u7ade\u8d5b\u4e2d\u83b7\u5f97\u4e8691.36%\u7684\u6574\u4f53\u51c6\u786e\u7387\u548c\u6d4b\u8bd5\u9636\u6bb5\u7b2c\u4e00\u540d", "motivation": "\u89e3\u51b3\u624b\u52a8\u68c0\u6d4bAPB\u4ea4\u6613\u9519\u8bef\u5728\u5927\u89c4\u6a21VCD\u6587\u4ef6\u4e2d\u6548\u7387\u4f4e\u4e0b\u3001\u5bb9\u6613\u51fa\u9519\u7684\u95ee\u9898", "method": "\u4f7f\u7528\u56db\u4e2a\u9884\u8bad\u7ec3\u7684\u4e8c\u5143\u5206\u7c7b\u5668\u6784\u6210\u7684\u5c42\u6b21\u968f\u673a\u68ee\u6797\u67b6\u6784\uff0c\u9010\u6b65\u68c0\u6d4b\u8d85\u51fa\u8303\u56f4\u8bbf\u95ee\u3001\u5730\u5740\u6c61\u67d3\u548c\u6570\u636e\u6c61\u67d3\u9519\u8bef", "result": "\u6574\u4f53\u51c6\u786e\u738791.36%\uff0c\u5730\u5740\u9519\u8bef\u68c0\u6d4b\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u63a5\u8fd1100%\uff0c\u6570\u636e\u9519\u8bef\u68c0\u6d4b\u7a33\u5065\uff0c\u5728ICCAD 2025\u7ade\u8d5b\u6d4b\u8bd5\u9636\u6bb5\u83b7\u5f97\u7b2c\u4e00\u540d", "conclusion": "\u5c42\u6b21\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u5728EDA\u786c\u4ef6\u8c03\u8bd5\u4e2d\u5177\u6709\u5f3a\u5927\u6f5c\u529b\uff0c\u80fd\u591f\u6709\u6548\u89e3\u51b3\u624b\u52a8\u8bca\u65ad\u7684\u6548\u7387\u95ee\u9898"}}
{"id": "2509.03560", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.03560", "abs": "https://arxiv.org/abs/2509.03560", "authors": ["Atanu Kundu", "Pratyay Sarkar", "Rajarshi Ray"], "title": "A Cegar-centric Bounded Reachability Analysis for Compositional Affine Hybrid Systems", "comment": null, "summary": "Reachability analysis of compositional hybrid systems, where individual\ncomponents are modeled as hybrid automata, poses unique challenges. In addition\nto preserving the compositional semantics while computing system behaviors,\nalgorithms have to cater to the explosion in the number of locations in the\nparallel product automaton. In this paper, we propose a bounded reachability\nanalysis algorithm for compositional hybrid systems with piecewise affine\ndynamics, based on the principle of counterexample guided abstraction\nrefinement (CEGAR). In particular, the algorithm searches for a counterexample\nin the discrete abstraction of the composition model, without explicitly\ncomputing a product automaton. When a counterexample is discovered in the\nabstraction, its validity is verified by a refinement of the state-space guided\nby the abstract counterexample. The state-space refinement is through a\nsymbolic reachability analysis, particularly using a state-of-the-art algorithm\nwith support functions as the continuous state representation. In addition, the\nalgorithm mixes different semantics of composition with the objective of\nimproved efficiency. Step compositional semantics is followed while exploring\nthe abstract (discrete) state-space, while shallow compositional semantics is\nfollowed during state-space refinement with symbolic reachability analysis.\nOptimizations such as caching the results of the symbolic reachability\nanalysis, which can be later reused, have been proposed. We implement this\nalgorithm in the tool SAT-Reach and demonstrate the scalability benefits.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8eCEGAR\u7684\u8fb9\u754c\u53ef\u8fbe\u6027\u5206\u6790\u7b97\u6cd5\uff0c\u7528\u4e8e\u5206\u6790\u5177\u6709\u5206\u6bb5\u4eff\u5c04\u52a8\u529b\u5b66\u7684\u7ec4\u5408\u6df7\u5408\u7cfb\u7edf\uff0c\u907f\u514d\u663e\u5f0f\u8ba1\u7b97\u4e58\u79ef\u81ea\u52a8\u673a\uff0c\u901a\u8fc7\u62bd\u8c61\u53cd\u4f8b\u5f15\u5bfc\u7684\u72b6\u6001\u7a7a\u95f4\u7ec6\u5316\u6765\u63d0\u9ad8\u6548\u7387\u3002", "motivation": "\u7ec4\u5408\u6df7\u5408\u7cfb\u7edf\u7684\u53ef\u8fbe\u6027\u5206\u6790\u9762\u4e34\u72ec\u7279\u6311\u6218\uff0c\u9700\u8981\u4fdd\u6301\u7ec4\u5408\u8bed\u4e49\u7684\u540c\u65f6\u5904\u7406\u5e76\u884c\u4e58\u79ef\u81ea\u52a8\u673a\u4e2d\u4f4d\u7f6e\u6570\u91cf\u7684\u7206\u70b8\u95ee\u9898\u3002", "method": "\u4f7f\u7528\u53cd\u4f8b\u5f15\u5bfc\u62bd\u8c61\u7ec6\u5316(CEGAR)\u539f\u5219\uff0c\u5728\u7ec4\u5408\u6a21\u578b\u7684\u79bb\u6563\u62bd\u8c61\u4e2d\u641c\u7d22\u53cd\u4f8b\uff0c\u901a\u8fc7\u7b26\u53f7\u53ef\u8fbe\u6027\u5206\u6790\u8fdb\u884c\u72b6\u6001\u7a7a\u95f4\u7ec6\u5316\uff0c\u91c7\u7528\u652f\u6301\u51fd\u6570\u4f5c\u4e3a\u8fde\u7eed\u72b6\u6001\u8868\u793a\uff0c\u5e76\u6df7\u5408\u4e0d\u540c\u7ec4\u5408\u8bed\u4e49\u4ee5\u63d0\u9ad8\u6548\u7387\u3002", "result": "\u7b97\u6cd5\u5728SAT-Reach\u5de5\u5177\u4e2d\u5b9e\u73b0\uff0c\u5c55\u793a\u4e86\u53ef\u6269\u5c55\u6027\u4f18\u52bf\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u89e3\u51b3\u4e86\u7ec4\u5408\u6df7\u5408\u7cfb\u7edf\u53ef\u8fbe\u6027\u5206\u6790\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u95ee\u9898\uff0c\u901a\u8fc7\u907f\u514d\u663e\u5f0f\u4e58\u79ef\u8ba1\u7b97\u548c\u4f18\u5316\u7b56\u7565\u5b9e\u73b0\u4e86\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u3002"}}
{"id": "2509.03534", "categories": ["cs.FL", "q-bio.PE"], "pdf": "https://arxiv.org/pdf/2509.03534", "abs": "https://arxiv.org/abs/2509.03534", "authors": ["Devansh Vimal", "Cole Mathis", "Westley Weimer", "Stephanie Forrest"], "title": "Prebiotic Functional Programs: Endogenous Selection in an Artificial Chemistry", "comment": null, "summary": "Artificial chemistry simulations produce many intriguing emergent behaviors,\nbut they are often difficult to steer or control. This paper proposes a method\nfor steering the dynamics of a classic artificial chemistry model, known as\nAlChemy (Algorithmic Chemistry), which is based on untyped lambda calculus. Our\napproach leverages features that are endogenous to AlChemy without constructing\nan explicit external fitness function or building learning into the dynamics.\nWe demonstrate the approach by synthesizing non-trivial lambda functions, such\nas Church addition and succession, from simple primitives. The results provide\ninsight into the possibility of endogenous selection in diverse systems such as\nautocatalytic chemical networks and software systems.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65e0\u9700\u5916\u90e8\u9002\u5e94\u5ea6\u51fd\u6570\u6216\u5185\u7f6e\u5b66\u4e60\u673a\u5236\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u5f15\u5bfc\u57fa\u4e8e\u65e0\u7c7b\u578blambda\u6f14\u7b97\u7684AlChemy\u4eba\u5de5\u5316\u5b66\u6a21\u578b\u7684\u52a8\u529b\u5b66\uff0c\u6210\u529f\u5408\u6210\u4e86Church\u52a0\u6cd5\u548c\u540e\u7ee7\u51fd\u6570\u7b49\u590d\u6742lambda\u51fd\u6570", "motivation": "\u4eba\u5de5\u5316\u5b66\u6a21\u62df\u867d\u7136\u80fd\u4ea7\u751f\u6709\u8da3\u7684\u6d8c\u73b0\u884c\u4e3a\uff0c\u4f46\u5f80\u5f80\u96be\u4ee5\u5f15\u5bfc\u6216\u63a7\u5236\u3002\u672c\u6587\u65e8\u5728\u89e3\u51b3AlChemy\u6a21\u578b\u4e2d\u7684\u52a8\u529b\u5b66\u63a7\u5236\u95ee\u9898", "method": "\u5229\u7528AlChemy\u6a21\u578b\u5185\u751f\u7684\u7279\u5f81\uff0c\u4e0d\u6784\u5efa\u663e\u5f0f\u7684\u5916\u90e8\u9002\u5e94\u5ea6\u51fd\u6570\uff0c\u4e5f\u4e0d\u5728\u52a8\u529b\u5b66\u4e2d\u5185\u7f6e\u5b66\u4e60\u673a\u5236", "result": "\u6210\u529f\u4ece\u7b80\u5355\u539f\u8bed\u5408\u6210\u4e86\u975e\u5e73\u51e1\u7684lambda\u51fd\u6570\uff0c\u5305\u62ecChurch\u52a0\u6cd5\u548c\u540e\u7ee7\u51fd\u6570", "conclusion": "\u7814\u7a76\u7ed3\u679c\u4e3a\u81ea\u50ac\u5316\u5316\u5b66\u7f51\u7edc\u548c\u8f6f\u4ef6\u7cfb\u7edf\u7b49\u591a\u6837\u5316\u7cfb\u7edf\u4e2d\u5185\u6e90\u6027\u9009\u62e9\u7684\u53ef\u80fd\u6027\u63d0\u4f9b\u4e86\u89c1\u89e3"}}
{"id": "2509.03668", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03668", "abs": "https://arxiv.org/abs/2509.03668", "authors": ["Matt Rau", "Chris Brown", "John Edwards"], "title": "Parse Tree Tracking Through Time for Programming Process Analysis at Scale", "comment": null, "summary": "Background and Context: Programming process data can be utilized to\nunderstand the processes students use to write computer programming\nassignments. Keystroke- and line-level event logs have been used in the past in\nvarious ways, primarily in high-level descriptive statistics (e.g., timings,\ncharacter deletion rate, etc). Analysis of behavior in context (e.g., how much\ntime students spend working on loops) has been cumbersome because of our\ninability to automatically track high-level code representations, such as\nabstract syntax trees, through time and unparseable states.\n  Objective: Our study has two goals. The first is to design the first\nalgorithm that tracks parse tree nodes through time. Second, we utilize this\nalgorithm to perform a partial replication study of prior work that used manual\ntracking of code representations, as well as other novel analyses of student\nprogramming behavior that can now be done at scale.\n  Method: We use two algorithms presented in this paper to track parse tree\nnodes through time and construct tree representations for unparseable code\nstates. We apply these algorithms to a public keystroke data from student\ncoursework in a 2021 CS1 course and conduct analysis on the resulting parse\ntrees.\n  Findings: We discover newly observable statistics at scale, including that\ncode is deleted at similar rates inside and outside of conditionals and loops,\na third of commented out code is eventually restored, and that frequency with\nwhich students jump around in their code may not be indicative of struggle.\n  Implications: The ability to track parse trees through time opens the door to\nunderstanding new dimensions of student programming, such as best practices of\nstructural development of code over time, quantitative measurement of what\nsyntactic constructs students struggle most with, refactoring behavior, and\nattention shifting within the code.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u9996\u4e2a\u7b97\u6cd5\u6765\u8ffd\u8e2a\u89e3\u6790\u6811\u8282\u70b9\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u7528\u4e8e\u5206\u6790\u5b66\u751f\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\u7684\u4ee3\u7801\u7ed3\u6784\u6f14\u53d8\uff0c\u53d1\u73b0\u4e86\u65b0\u7684\u7f16\u7a0b\u884c\u4e3a\u7edf\u8ba1\u6a21\u5f0f\u3002", "motivation": "\u4f20\u7edf\u65b9\u6cd5\u53ea\u80fd\u4f7f\u7528\u9ad8\u7ea7\u63cf\u8ff0\u6027\u7edf\u8ba1\u6765\u5206\u6790\u7f16\u7a0b\u8fc7\u7a0b\u6570\u636e\uff0c\u65e0\u6cd5\u81ea\u52a8\u8ffd\u8e2a\u4ee3\u7801\u62bd\u8c61\u8bed\u6cd5\u6811\u5728\u65f6\u95f4\u548c\u4e0d\u53ef\u89e3\u6790\u72b6\u6001\u4e0b\u7684\u53d8\u5316\uff0c\u9650\u5236\u4e86\u6df1\u5165\u7406\u89e3\u5b66\u751f\u7f16\u7a0b\u884c\u4e3a\u3002", "method": "\u4f7f\u7528\u4e24\u79cd\u65b0\u7b97\u6cd5\u8ffd\u8e2a\u89e3\u6790\u6811\u8282\u70b9\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u5e76\u4e3a\u4e0d\u53ef\u89e3\u6790\u4ee3\u7801\u72b6\u6001\u6784\u5efa\u6811\u8868\u793a\uff0c\u5e94\u7528\u4e8e2021\u5e74CS1\u8bfe\u7a0b\u7684\u5b66\u751f\u51fb\u952e\u6570\u636e\u8fdb\u884c\u5206\u6790\u3002", "result": "\u53d1\u73b0\u4e86\u65b0\u7684\u53ef\u89c2\u6d4b\u7edf\u8ba1\u89c4\u5f8b\uff1a\u6761\u4ef6\u8bed\u53e5\u548c\u5faa\u73af\u5185\u5916\u7684\u4ee3\u7801\u5220\u9664\u7387\u76f8\u4f3c\uff0c\u4e09\u5206\u4e4b\u4e00\u7684\u6ce8\u91ca\u4ee3\u7801\u6700\u7ec8\u88ab\u6062\u590d\uff0c\u4ee3\u7801\u8df3\u8f6c\u9891\u7387\u4e0d\u4e00\u5b9a\u53cd\u6620\u5b66\u4e60\u56f0\u96be\u3002", "conclusion": "\u8ffd\u8e2a\u89e3\u6790\u6811\u968f\u65f6\u95f4\u53d8\u5316\u7684\u80fd\u529b\u4e3a\u7406\u89e3\u5b66\u751f\u7f16\u7a0b\u7684\u65b0\u7ef4\u5ea6\u6253\u5f00\u4e86\u5927\u95e8\uff0c\u5305\u62ec\u4ee3\u7801\u7ed3\u6784\u53d1\u5c55\u6700\u4f73\u5b9e\u8df5\u3001\u8bed\u6cd5\u7ed3\u6784\u56f0\u96be\u91cf\u5316\u3001\u91cd\u6784\u884c\u4e3a\u548c\u4ee3\u7801\u5185\u6ce8\u610f\u529b\u8f6c\u79fb\u7b49\u3002"}}
{"id": "2509.04129", "categories": ["cs.LO", "cs.AI", "cs.FL", "math.PR"], "pdf": "https://arxiv.org/pdf/2509.04129", "abs": "https://arxiv.org/abs/2509.04129", "authors": ["Mickael Randour"], "title": "Simplicity Lies in the Eye of the Beholder: A Strategic Perspective on Controllers in Reactive Synthesis", "comment": "Invited paper at RP 2025", "summary": "In the game-theoretic approach to controller synthesis, we model the\ninteraction between a system to be controlled and its environment as a game\nbetween these entities, and we seek an appropriate (e.g., winning or optimal)\nstrategy for the system. This strategy then serves as a formal blueprint for a\nreal-world controller. A common belief is that simple (e.g., using limited\nmemory) strategies are better: corresponding controllers are easier to conceive\nand understand, and cheaper to produce and maintain.\n  This invited contribution focuses on the complexity of strategies in a\nvariety of synthesis contexts. We discuss recent results concerning memory and\nrandomness, and take a brief look at what lies beyond our traditional notions\nof complexity for strategies.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u63a7\u5236\u5668\u5408\u6210\u4e2d\u7b56\u7565\u590d\u6742\u6027\u7684\u6700\u65b0\u7814\u7a76\u8fdb\u5c55\uff0c\u91cd\u70b9\u5173\u6ce8\u5185\u5b58\u4f7f\u7528\u548c\u968f\u673a\u6027\u5728\u4e0d\u540c\u5408\u6210\u73af\u5883\u4e2d\u7684\u4f5c\u7528\u3002", "motivation": "\u5728\u535a\u5f08\u8bba\u63a7\u5236\u5668\u5408\u6210\u4e2d\uff0c\u7b80\u5355\u7b56\u7565\uff08\u5982\u6709\u9650\u5185\u5b58\uff09\u901a\u5e38\u88ab\u8ba4\u4e3a\u66f4\u597d\uff0c\u56e0\u4e3a\u5bf9\u5e94\u7684\u63a7\u5236\u5668\u66f4\u6613\u7406\u89e3\u3001\u751f\u4ea7\u548c\u7ef4\u62a4\u6210\u672c\u66f4\u4f4e\u3002\u672c\u6587\u65e8\u5728\u5206\u6790\u7b56\u7565\u590d\u6742\u6027\u7684\u5404\u4e2a\u65b9\u9762\u3002", "method": "\u901a\u8fc7\u8ba8\u8bba\u8fd1\u671f\u5173\u4e8e\u5185\u5b58\u4f7f\u7528\u548c\u968f\u673a\u6027\u7684\u7814\u7a76\u6210\u679c\uff0c\u5206\u6790\u4e0d\u540c\u5408\u6210\u73af\u5883\u4e0b\u7b56\u7565\u7684\u590d\u6742\u6027\u7279\u5f81\u3002", "result": "\u6587\u7ae0\u7efc\u8ff0\u4e86\u7b56\u7565\u590d\u6742\u6027\u7814\u7a76\u7684\u6700\u65b0\u8fdb\u5c55\uff0c\u5305\u62ec\u5185\u5b58\u9700\u6c42\u548c\u968f\u673a\u6027\u5728\u7b56\u7565\u8bbe\u8ba1\u4e2d\u7684\u4f5c\u7528\uff0c\u5e76\u63a2\u8ba8\u4e86\u4f20\u7edf\u590d\u6742\u6027\u6982\u5ff5\u4e4b\u5916\u7684\u65b0\u7814\u7a76\u65b9\u5411\u3002", "conclusion": "\u7b56\u7565\u590d\u6742\u6027\u662f\u63a7\u5236\u5668\u5408\u6210\u4e2d\u7684\u91cd\u8981\u8003\u91cf\u56e0\u7d20\uff0c\u9700\u8981\u7efc\u5408\u8003\u8651\u5185\u5b58\u4f7f\u7528\u3001\u968f\u673a\u6027\u7b49\u7ef4\u5ea6\uff0c\u672a\u6765\u7814\u7a76\u9700\u8981\u8d85\u8d8a\u4f20\u7edf\u7684\u590d\u6742\u6027\u6982\u5ff5\u6846\u67b6\u3002"}}
{"id": "2509.03848", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2509.03848", "abs": "https://arxiv.org/abs/2509.03848", "authors": ["Rodrigo Oliveira Zacarias", "Rodrigo Pereira dos Santos", "Patricia Lago"], "title": "Towards an Understanding of Developer Experience-Driven Transparency in Software Ecosystems", "comment": "36 pages Submitted to the ACM Transactions on Software Engineering\n  and Methodology. 2025", "summary": "Software ecosystems (SECO) have become a dominant paradigm in the software\nindustry, enabling third-party developers to co-create value through\ncomplementary components and services. While Developer Experience (DX) is\nincreasingly recognized as critical for sustainable SECO, transparency remains\nan underexplored factor shaping how developers perceive and interact with\necosystems. Existing studies acknowledge transparency as essential for trust,\nfairness, and engagement, yet its relationship with DX has not been\nsystematically conceptualized. Hence, this work aims to advance the\nunderstanding of transparency in SECO from a developer-centered perspective. To\nthis end, we propose SECO-TransDX (Transparency in Software Ecosystems from a\nDeveloper Experience Perspective), a conceptual model that introduces the\nnotion of DX-driven transparency. The model identifies 63 interrelated\nconcepts, including conditioning factors, ecosystem procedures, artifacts, and\nrelational dynamics that influence how transparency is perceived and\nconstructed during developer interactions. SECO-TransDX was built upon prior\nresearch and refined through a Delphi study with experts from academia and\nindustry. It offers a structured lens to examine how transparency mediates DX\nacross technical, social, and organizational layers. For researchers, it lays\nthe groundwork for future studies and tool development; for practitioners, it\nsupports the design of trustworthy, developer-centered platforms that improve\ntransparency and foster long-term engagement in SECO.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86SECO-TransDX\u6982\u5ff5\u6a21\u578b\uff0c\u4ece\u5f00\u53d1\u8005\u4f53\u9a8c\u89d2\u5ea6\u7cfb\u7edf\u5316\u7814\u7a76\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u900f\u660e\u6027\u95ee\u9898\uff0c\u8bc6\u522b\u4e8663\u4e2a\u76f8\u5173\u6982\u5ff5\u5e76\u901a\u8fc7\u5c08\u5bb6\u8c03\u67e5\u7cbe\u70bc\u6a21\u578b\u3002", "motivation": "\u867d\u7136\u900f\u660e\u6027\u88ab\u8ba4\u4e3a\u5bf9\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u7684\u4fe1\u4efb\u3001\u516c\u5e73\u548c\u53c2\u4e0e\u5ea6\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5176\u4e0e\u5f00\u53d1\u8005\u4f53\u9a8c\u7684\u5173\u7cfb\u4ecd\u7f3a\u4e4f\u7cfb\u7edf\u5316\u7406\u8bba\u5316\u3002\u672c\u7814\u7a76\u5e0c\u671b\u4ece\u5f00\u53d1\u8005\u4e2d\u5fc3\u89c6\u89d2\u63d0\u5347\u5bf9SECO\u900f\u660e\u6027\u7684\u7406\u89e3\u3002", "method": "\u57fa\u4e8e\u5148\u524d\u7814\u7a76\uff0c\u901a\u8fc7Delphi\u7814\u7a76\u65b9\u6cd5\u4e0e\u5b66\u672f\u754c\u548c\u4e1a\u754c\u5c08\u5bb6\u5408\u4f5c\uff0c\u6784\u5efa\u4e86SECO-TransDX\u6982\u5ff5\u6a21\u578b\u3002\u8be5\u6a21\u578b\u5305\u542b\u6761\u4ef6\u56e0\u7d20\u3001\u751f\u6001\u7cfb\u7edf\u7a0b\u5e8f\u3001\u4ea7\u51fa\u7269\u548c\u5173\u7cfb\u52a8\u6001\u7b49\u7ec4\u6210\u90e8\u5206\u3002", "result": "\u7814\u7a76\u63d0\u51fa\u4e86\u4e00\u4e2a\u5305\u542b63\u4e2a\u76f8\u4e92\u5173\u8054\u6982\u5ff5\u7684\u7ed3\u6784\u5316\u6a21\u578b\uff0c\u63cf\u8ff0\u4e86\u900f\u660e\u6027\u5982\u4f55\u5728\u6280\u672f\u3001\u793e\u4f1a\u548c\u7ec4\u7ec7\u5c42\u9762\u4e2d\u4f5c\u4e3a\u5f00\u53d1\u8005\u4f53\u9a8c\u7684\u4e2d\u4ecb\u56e0\u7d20\u3002", "conclusion": "SECO-TransDX\u6a21\u578b\u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u672a\u6765\u7814\u7a76\u548c\u5de5\u5177\u5f00\u53d1\u7684\u57fa\u7840\uff0c\u540c\u65f6\u4e3a\u5b9e\u8df5\u8005\u8bbe\u8ba1\u66f4\u53ef\u4fe1\u8d56\u3001\u4ee5\u5f00\u53d1\u8005\u4e3a\u4e2d\u5fc3\u7684\u5e73\u53f0\u63d0\u4f9b\u652f\u6301\uff0c\u901a\u8fc7\u63d0\u9ad8\u900f\u660e\u6027\u6765\u4fc3\u8fdb\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u7684\u957f\u671f\u53c2\u4e0e\u3002"}}
{"id": "2509.04347", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.04347", "abs": "https://arxiv.org/abs/2509.04347", "authors": ["Johanna Brunar", "Michael Pinsker", "Moritz Sch\u00f6bi"], "title": "Janus-faces of temporal constraint languages: a dichotomy of expressivity", "comment": "21 pages", "summary": "The Bodirsky-K\\'ara classification of temporal constraint languages stands as\none of the earliest and most seminal complexity classifications within\ninfinite-domain Constraint Satisfaction Problems (CSPs), yet it remains one of\nthe most mysterious in terms of algorithms and algebraic invariants for the\ntractable cases. We show that those temporal languages which do not\npp-construct EVERYTHING (and thus by the classification are solvable in\npolynomial time) have, in fact, very limited expressive power as measured by\nthe graphs and hypergraphs they can pp-interpret. This limitation yields many\npreviously unknown algebraic consequences, while also providing new, uniform\nproofs for known invariance properties. In particular, we show that such\ntemporal constraint languages admit $4$-ary pseudo-Siggers polymorphisms -- a\nresult that sustains the possibility that the existence of such polymorphisms\nextends to the much broader context of the Bodirsky-Pinsker conjecture.", "AI": {"tldr": "\u8be5\u8bba\u6587\u5206\u6790\u4e86Bodirsky-K\u00e1ra\u65f6\u95f4\u7ea6\u675f\u8bed\u8a00\u5206\u7c7b\u4e2d\u7684\u53ef\u5904\u7406\u6848\u4f8b\uff0c\u53d1\u73b0\u8fd9\u4e9b\u8bed\u8a00\u5177\u6709\u6709\u9650\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5e76\u8bc1\u660e\u4e86\u5b83\u4eec\u5b58\u57284\u5143\u4f2aSiggers\u591a\u6001\u6027\uff0c\u652f\u6301Bodirsky-Pinsker\u731c\u60f3\u7684\u53ef\u80fd\u6027\u3002", "motivation": "Bodirsky-K\u00e1ra\u65f6\u95f4\u7ea6\u675f\u8bed\u8a00\u5206\u7c7b\u662f\u65e0\u9650\u57df\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\u4e2d\u6700\u65e9\u4e14\u6700\u91cd\u8981\u7684\u590d\u6742\u6027\u5206\u7c7b\u4e4b\u4e00\uff0c\u4f46\u5176\u53ef\u5904\u7406\u6848\u4f8b\u7684\u7b97\u6cd5\u548c\u4ee3\u6570\u4e0d\u53d8\u91cf\u4ecd\u7136\u795e\u79d8\uff0c\u9700\u8981\u6df1\u5165\u7814\u7a76\u3002", "method": "\u901a\u8fc7\u5206\u6790\u65f6\u95f4\u8bed\u8a00\u4e0d\u80fdpp-\u6784\u9020\u6240\u6709\u5185\u5bb9\u7684\u80fd\u529b\u9650\u5236\uff0c\u6d4b\u91cf\u5b83\u4eec\u80fd\u591fpp-\u89e3\u91ca\u7684\u56fe\u548c\u8d85\u56fe\uff0c\u7814\u7a76\u5176\u8868\u8fbe\u80fd\u529b\u7684\u5c40\u9650\u6027\u3002", "result": "\u53d1\u73b0\u8fd9\u4e9b\u65f6\u95f4\u7ea6\u675f\u8bed\u8a00\u5177\u6709\u975e\u5e38\u6709\u9650\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u83b7\u5f97\u4e86\u8bb8\u591a\u5148\u524d\u672a\u77e5\u7684\u4ee3\u6570\u7ed3\u679c\uff0c\u5e76\u4e3a\u5df2\u77e5\u7684\u4e0d\u53d8\u6027\u63d0\u4f9b\u4e86\u65b0\u7684\u7edf\u4e00\u8bc1\u660e\uff0c\u7279\u522b\u662f\u8bc1\u660e\u4e86\u5b83\u4eec\u5b58\u57284\u5143\u4f2aSiggers\u591a\u6001\u6027\u3002", "conclusion": "\u8fd9\u4e9b\u53d1\u73b0\u652f\u6301\u4e86Bodirsky-Pinsker\u731c\u60f3\u7684\u53ef\u80fd\u6027\uff0c\u5373\u4f2aSiggers\u591a\u6001\u6027\u7684\u5b58\u5728\u53ef\u80fd\u6269\u5c55\u5230\u66f4\u5e7f\u6cdb\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u4e2d\u3002"}}
{"id": "2509.03875", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03875", "abs": "https://arxiv.org/abs/2509.03875", "authors": ["Ziyou Jiang", "Mingyang Li", "Guowei Yang", "Lin Shi", "Qing Wang"], "title": "VulRTex: A Reasoning-Guided Approach to Identify Vulnerabilities from Rich-Text Issue Report", "comment": "25 pages, 7 figures, submitting to TOSEM journal", "summary": "Software vulnerabilities exist in open-source software (OSS), and the\ndevelopers who discover these vulnerabilities may submit issue reports (IRs) to\ndescribe their details. Security practitioners need to spend a lot of time\nmanually identifying vulnerability-related IRs from the community, and the time\ngap may be exploited by attackers to harm the system. Previously, researchers\nhave proposed automatic approaches to facilitate identifying these\nvulnerability-related IRs, but these works focus on textual descriptions but\nlack the comprehensive analysis of IR's rich-text information. In this paper,\nwe propose VulRTex, a reasoning-guided approach to identify\nvulnerability-related IRs with their rich-text information. In particular,\nVulRTex first utilizes the reasoning ability of the Large Language Model (LLM)\nto prepare the Vulnerability Reasoning Database with historical IRs. Then, it\nretrieves the relevant cases from the prepared reasoning database to generate\nreasoning guidance, which guides LLM to identify vulnerabilities by reasoning\nanalysis on target IRs' rich-text information. To evaluate the performance of\nVulRTex, we conduct experiments on 973,572 IRs, and the results show that\nVulRTex achieves the highest performance in identifying the\nvulnerability-related IRs and predicting CWE-IDs when the dataset is\nimbalanced, outperforming the best baseline with +11.0% F1, +20.2% AUPRC, and\n+10.5% Macro-F1, and 2x lower time cost than baseline reasoning approaches.\nFurthermore, VulRTex has been applied to identify 30 emerging vulnerabilities\nacross 10 representative OSS projects in 2024's GitHub IRs, and 11 of them are\nsuccessfully assigned CVE-IDs, which illustrates VulRTex's practicality.", "AI": {"tldr": "VulRTex\u662f\u4e00\u4e2a\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u80fd\u529b\u7684\u6f0f\u6d1e\u76f8\u5173issue\u62a5\u544a\u8bc6\u522b\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u5efa\u6f0f\u6d1e\u63a8\u7406\u6570\u636e\u5e93\u548c\u68c0\u7d22\u76f8\u5173\u6848\u4f8b\u6765\u6307\u5bfcLLM\u5206\u6790\u76ee\u6807IR\u7684\u5bcc\u6587\u672c\u4fe1\u606f\uff0c\u5728\u6570\u636e\u4e0d\u5e73\u8861\u60c5\u51b5\u4e0b\u8868\u73b0\u4f18\u5f02\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u4e2d\u5b58\u5728\u5b89\u5168\u6f0f\u6d1e\uff0c\u5f00\u53d1\u8005\u63d0\u4ea4\u7684issue\u62a5\u544a\u9700\u8981\u5b89\u5168\u4ece\u4e1a\u8005\u624b\u52a8\u8bc6\u522b\u6f0f\u6d1e\u76f8\u5173\u62a5\u544a\uff0c\u8017\u65f6\u4e14\u5b58\u5728\u65f6\u95f4\u5dee\u53ef\u80fd\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002\u73b0\u6709\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u6587\u672c\u63cf\u8ff0\uff0c\u7f3a\u4e4f\u5bf9IR\u5bcc\u6587\u672c\u4fe1\u606f\u7684\u7efc\u5408\u5206\u6790\u3002", "method": "VulRTex\u9996\u5148\u5229\u7528LLM\u7684\u63a8\u7406\u80fd\u529b\u6784\u5efa\u6f0f\u6d1e\u63a8\u7406\u6570\u636e\u5e93\uff0c\u7136\u540e\u68c0\u7d22\u76f8\u5173\u6848\u4f8b\u751f\u6210\u63a8\u7406\u6307\u5bfc\uff0c\u5f15\u5bfcLLM\u5bf9\u76ee\u6807IR\u7684\u5bcc\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u63a8\u7406\u5206\u6790\u6765\u8bc6\u522b\u6f0f\u6d1e\u3002", "result": "\u5728973,572\u4e2aIR\u4e0a\u7684\u5b9e\u9a8c\u663e\u793a\uff0cVulRTex\u5728\u6570\u636e\u4e0d\u5e73\u8861\u60c5\u51b5\u4e0b\u8868\u73b0\u6700\u4f73\uff0c\u6bd4\u6700\u4f73\u57fa\u7ebfF1\u63d0\u9ad811.0%\uff0cAUPRC\u63d0\u9ad820.2%\uff0cMacro-F1\u63d0\u9ad810.5%\uff0c\u65f6\u95f4\u6210\u672c\u6bd4\u57fa\u7ebf\u63a8\u7406\u65b9\u6cd5\u4f4e2\u500d\u3002\u6210\u529f\u8bc6\u522b2024\u5e74GitHub IR\u4e2d10\u4e2a\u4ee3\u8868\u6027OSS\u9879\u76ee\u768430\u4e2a\u65b0\u5174\u6f0f\u6d1e\uff0c\u5176\u4e2d11\u4e2a\u83b7\u5f97CVE-ID\u5206\u914d\u3002", "conclusion": "VulRTex\u901a\u8fc7\u5229\u7528LLM\u7684\u63a8\u7406\u80fd\u529b\u548c\u5bcc\u6587\u672c\u4fe1\u606f\u5206\u6790\uff0c\u6709\u6548\u8bc6\u522b\u6f0f\u6d1e\u76f8\u5173IR\uff0c\u5177\u6709\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\uff0c\u80fd\u591f\u5e2e\u52a9\u5b89\u5168\u4ece\u4e1a\u8005\u66f4\u9ad8\u6548\u5730\u53d1\u73b0\u548c\u5e94\u5bf9\u8f6f\u4ef6\u6f0f\u6d1e\u3002"}}
{"id": "2509.03876", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03876", "abs": "https://arxiv.org/abs/2509.03876", "authors": ["Xingchu Chen", "Chengwei Liu", "Jialun Cao", "Yang Xiao", "Xinyue Cai", "Yeting Li", "Jingyi Shi", "Tianqi Sun", "Haiming Chen ang Wei Huo"], "title": "Vulnerability-Affected Versions Identification: How Far Are We?", "comment": null, "summary": "Identifying which software versions are affected by a vulnerability is\ncritical for patching, risk mitigation.Despite a growing body of tools, their\nreal-world effectiveness remains unclear due to narrow evaluation scopes often\nlimited to early SZZ variants, outdated techniques, and small or\ncoarse-graineddatasets. In this paper, we present the first comprehensive\nempirical study of vulnerability affected versions identification. We curate a\nhigh quality benchmark of 1,128 real-world C/C++ vulnerabilities and\nsystematically evaluate 12 representative tools from both tracing and matching\nparadigms across four dimensions: effectiveness at both vulnerability and\nversion levels, root causes of false positives and negatives, sensitivity to\npatch characteristics, and ensemble potential. Our findings reveal fundamental\nlimitations: no tool exceeds 45.0% accuracy, with key challenges stemming from\nheuristic dependence, limited semantic reasoning, and rigid matching logic.\nPatch structures such as add-only and cross-file changes further hinder\nperformance. Although ensemble strategies can improve results by up to 10.1%,\noverall accuracy remains below 60.0%, highlighting the need for fundamentally\nnew approaches. Moreover, our study offers actionable insights to guide tool\ndevelopment, combination strategies, and future research in this critical area.\nFinally, we release the replicated code and benchmark on our website to\nencourage future contributions.outdated techniques, and small or coarse grained\ndatasets.", "AI": {"tldr": "\u9996\u4e2a\u5168\u9762\u7684\u6f0f\u6d1e\u5f71\u54cd\u7248\u672c\u8bc6\u522b\u5b9e\u8bc1\u7814\u7a76\uff0c\u8bc4\u4f3012\u79cd\u5de5\u5177\u57281128\u4e2a\u771f\u5b9eC/C++\u6f0f\u6d1e\u4e0a\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u6240\u6709\u5de5\u5177\u51c6\u786e\u7387\u4e0d\u8d85\u8fc745%\uff0c\u96c6\u6210\u7b56\u7565\u6700\u591a\u63d0\u534710.1%\u4f46\u4ecd\u4f4e\u4e8e60%", "motivation": "\u73b0\u6709\u6f0f\u6d1e\u5f71\u54cd\u7248\u672c\u8bc6\u522b\u5de5\u5177\u5728\u771f\u5b9e\u73af\u5883\u4e2d\u7684\u6709\u6548\u6027\u4e0d\u660e\u786e\uff0c\u8bc4\u4f30\u8303\u56f4\u72ed\u7a84\u4e14\u5c40\u9650\u4e8e\u65e9\u671fSZZ\u53d8\u4f53\u3001\u8fc7\u65f6\u6280\u672f\u548c\u5c0f\u89c4\u6a21\u6570\u636e\u96c6", "method": "\u6784\u5efa\u5305\u542b1128\u4e2a\u771f\u5b9eC/C++\u6f0f\u6d1e\u7684\u9ad8\u8d28\u91cf\u57fa\u51c6\uff0c\u4ece\u8ffd\u8e2a\u548c\u5339\u914d\u4e24\u79cd\u8303\u5f0f\u7cfb\u7edf\u8bc4\u4f3012\u79cd\u4ee3\u8868\u6027\u5de5\u5177\uff0c\u6db5\u76d6\u6f0f\u6d1e\u7ea7\u522b\u548c\u7248\u672c\u7ea7\u522b\u7684\u6709\u6548\u6027\u3001\u8bef\u62a5\u8bef\u8bca\u6839\u56e0\u3001\u5bf9\u8865\u4e01\u7279\u6027\u7684\u654f\u611f\u6027\u4ee5\u53ca\u96c6\u6210\u6f5c\u529b\u56db\u4e2a\u7ef4\u5ea6", "result": "\u53d1\u73b0\u6839\u672c\u6027\u5c40\u9650\uff1a\u65e0\u5de5\u5177\u8d85\u8fc745.0%\u51c6\u786e\u7387\uff0c\u4e3b\u8981\u6311\u6218\u6765\u81ea\u542f\u53d1\u5f0f\u4f9d\u8d56\u3001\u6709\u9650\u8bed\u4e49\u63a8\u7406\u548c\u50f5\u5316\u5339\u914d\u903b\u8f91\uff1b\u4ec5\u6dfb\u52a0\u548c\u8de8\u6587\u4ef6\u66f4\u6539\u7b49\u8865\u4e01\u7ed3\u6784\u8fdb\u4e00\u6b65\u964d\u4f4e\u6027\u80fd\uff1b\u96c6\u6210\u7b56\u7565\u6700\u591a\u63d0\u534710.1%\u4f46\u6574\u4f53\u51c6\u786e\u7387\u4ecd\u4f4e\u4e8e60.0%", "conclusion": "\u9700\u8981\u4ece\u6839\u672c\u4e0a\u5f00\u53d1\u65b0\u65b9\u6cd5\uff0c\u7814\u7a76\u4e3a\u5de5\u5177\u5f00\u53d1\u3001\u7ec4\u5408\u7b56\u7565\u548c\u672a\u6765\u7814\u7a76\u63d0\u4f9b\u4e86\u53ef\u884c\u89c1\u89e3\uff0c\u5e76\u516c\u5f00\u590d\u73b0\u4ee3\u7801\u548c\u57fa\u51c6\u4ee5\u9f13\u52b1\u672a\u6765\u8d21\u732e"}}
{"id": "2509.03896", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.03896", "abs": "https://arxiv.org/abs/2509.03896", "authors": ["Zushuai Zhang", "Elliott Wen", "Ewan Tempero"], "title": "Analyzing Variations in Dependency Distributions Due to Code Smell Interactions", "comment": null, "summary": "The existence of dependencies between modules, such as classes, can mean that\nchanging a module triggers ripple effects that make maintenance complex and\ncostly, so the advice is to minimize dependencies between modules. It is\ntherefore important to understand the circumstances that can lead to increased\ndependencies. Recent studies suggest that code smells, which are\ncharacteristics of code that indicate potential design issues, may interact in\nways that increase dependencies between modules. In this study, we aim to\nconfirm previous observations and investigate whether and how the distribution\nof static dependencies changes in the presence of code smell interactions. We\nconducted a dependency analysis on 116 open-source Java systems to quantify the\ninteractions, comparing interactions among code smells and interactions between\ncode smells and non-code smells. Our results suggest that while interactions\nbetween code smell pairs are associated with increases in certain dependencies\nand decreases in others, overall, they are associated with an increase in total\ndependencies. For example, the median number of dependencies between Feature\nEnvy methods and Data Classes is seven times as many as when the methods are\nnon-Feature Envy methods, increasing from 1 to 7. This implies that developers\nshould prioritize addressing code smells that interact with each other, rather\nthan code smells that exist only in isolation.", "AI": {"tldr": "\u4ee3\u7801\u5f02\u5473\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u4f1a\u663e\u8457\u589e\u52a0\u6a21\u5757\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5bfc\u81f4\u7ef4\u62a4\u590d\u6742\u6027\u548c\u6210\u672c\u4e0a\u5347", "motivation": "\u4ee3\u7801\u5f02\u5473\u4f5c\u4e3a\u6f0f\u6d1e\u8bbe\u8ba1\u7684\u5f62\u5f0f\u8868\u73b0\uff0c\u53ef\u80fd\u901a\u8fc7\u76f8\u4e92\u4f5c\u7528\u589e\u52a0\u6a21\u5757\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u8fd9\u4f1a\u7ed9\u7cfb\u7edf\u7ef4\u62a4\u5e26\u6765\u96be\u5ea6\u548c\u6210\u672c", "method": "\u5bf9116\u4e2a\u5f00\u6e90Java\u7cfb\u7edf\u8fdb\u884c\u4f9d\u8d56\u5206\u6790\uff0c\u91cf\u5316\u4ee3\u7801\u5f02\u5473\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u5e76\u4e0e\u975e\u5f02\u5473\u60c5\u51b5\u8fdb\u884c\u5bf9\u6bd4", "result": "\u4ee3\u7801\u5f02\u5473\u5bf9\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u5bfc\u81f4\u603b\u4f9d\u8d56\u5173\u7cfb\u7684\u589e\u52a0\uff0c\u4f8b\u5982Feature Envy\u65b9\u6cd5\u4e0eData Classes\u76f8\u4e92\u4f5c\u7528\u65f6\u4f9d\u8d56\u6570\u91cf\u662f\u5355\u72ec\u5b58\u5728\u65f6\u76847\u500d", "conclusion": "\u5f00\u53d1\u8005\u5e94\u4f18\u5148\u5904\u7406\u76f8\u4e92\u4f5c\u7528\u7684\u4ee3\u7801\u5f02\u5473\uff0c\u800c\u975e\u5355\u72ec\u5b58\u5728\u7684\u5f02\u5473\uff0c\u4ee5\u51cf\u5c11\u6a21\u5757\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u548c\u964d\u4f4e\u7ef4\u62a4\u590d\u6742\u6027"}}
{"id": "2509.03900", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.03900", "abs": "https://arxiv.org/abs/2509.03900", "authors": ["Yuvraj Agrawal"], "title": "The Auth Shim: A Lightweight Architectural Pattern for Integrating Enterprise SSO with Standalone Open-Source Applications", "comment": null, "summary": "Open-source software OSS is widely adopted in enterprise settings, but\nstandalone tools often lack native support for protocols like SAML or OIDC,\ncreating a critical security integration gap. This paper introduces and\nformalizes the Auth Shim, a lightweight architectural pattern designed to solve\nthis problem. The Auth Shim is a minimal, external proxy service that acts as a\ncompatibility layer, translating requests from an enterprise Identity Provider\nIdP into the native session management mechanism of a target application. A key\nprerequisite for this pattern is that the target application must expose a\nprogrammatic, secure administrative API. We present a case study of the\npattern's implementation at Adobe to integrate a popular OSS BI tool with Okta\nSAML, which enabled automated Role-Based Access Control RBAC via IAM group\nmapping and eliminated manual user provisioning. By defining its components,\ninteractions, and production deployment considerations, this paper provides a\nreusable, secure, and cost-effective blueprint for integrating any standalone\nOSS tool into an enterprise SSO ecosystem, thereby enabling organizations to\nembrace open-source innovation without compromising on security governance.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86Auth Shim\u67b6\u6784\u6a21\u5f0f\uff0c\u901a\u8fc7\u5916\u90e8\u4ee3\u7406\u670d\u52a1\u89e3\u51b3\u5f00\u6e90\u8f6f\u4ef6\u7f3a\u4e4f\u4f01\u4e1a\u7ea7\u8eab\u4efd\u8ba4\u8bc1\u534f\u8bae\u652f\u6301\u7684\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86OSS\u5de5\u5177\u4e0e\u4f01\u4e1aSSO\u751f\u6001\u7cfb\u7edf\u7684\u5b89\u5168\u96c6\u6210\u3002", "motivation": "\u4f01\u4e1a\u5e7f\u6cdb\u91c7\u7528\u5f00\u6e90\u8f6f\u4ef6\uff0c\u4f46\u8bb8\u591aOSS\u5de5\u5177\u7f3a\u4e4f\u5bf9SAML\u3001OIDC\u7b49\u4f01\u4e1a\u7ea7\u8eab\u4efd\u8ba4\u8bc1\u534f\u8bae\u7684\u539f\u751f\u652f\u6301\uff0c\u5bfc\u81f4\u5b89\u5168\u96c6\u6210\u7f3a\u53e3\uff0c\u963b\u788d\u4e86\u5f00\u6e90\u521b\u65b0\u5728\u4f01\u4e1a\u73af\u5883\u4e2d\u7684\u91c7\u7528\u3002", "method": "\u63d0\u51faAuth Shim\u8f7b\u91cf\u7ea7\u67b6\u6784\u6a21\u5f0f\uff1a\u4f5c\u4e3a\u5916\u90e8\u4ee3\u7406\u670d\u52a1\uff0c\u5728\u8eab\u4efd\u63d0\u4f9b\u5546\u548c\u76ee\u6807\u5e94\u7528\u4e4b\u95f4\u5145\u5f53\u517c\u5bb9\u5c42\uff0c\u5c06IdP\u8bf7\u6c42\u8f6c\u6362\u4e3a\u76ee\u6807\u5e94\u7528\u7684\u539f\u751f\u4f1a\u8bdd\u7ba1\u7406\u673a\u5236\u3002\u8981\u6c42\u76ee\u6807\u5e94\u7528\u5fc5\u987b\u63d0\u4f9b\u5b89\u5168\u7684\u7a0b\u5e8f\u5316\u7ba1\u7406API\u3002", "result": "\u5728Adobe\u7684\u6848\u4f8b\u7814\u7a76\u4e2d\u6210\u529f\u5b9e\u73b0\u4e86\u5c06\u6d41\u884cOSS BI\u5de5\u5177\u4e0eOkta SAML\u96c6\u6210\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8eIAM\u7ec4\u6620\u5c04\u7684\u81ea\u52a8\u5316RBAC\uff0c\u6d88\u9664\u4e86\u624b\u52a8\u7528\u6237\u914d\u7f6e\uff0c\u8bc1\u660e\u4e86\u8be5\u6a21\u5f0f\u7684\u6709\u6548\u6027\u3002", "conclusion": "Auth Shim\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u91cd\u7528\u3001\u5b89\u5168\u4e14\u7ecf\u6d4e\u9ad8\u6548\u7684\u84dd\u56fe\uff0c\u4f7f\u4f01\u4e1a\u80fd\u591f\u5728\u4fdd\u6301\u5b89\u5168\u6cbb\u7406\u7684\u540c\u65f6\u91c7\u7528\u5f00\u6e90\u521b\u65b0\uff0c\u89e3\u51b3\u4e86OSS\u5de5\u5177\u4e0e\u4f01\u4e1a\u8eab\u4efd\u8ba4\u8bc1\u751f\u6001\u7cfb\u7edf\u96c6\u6210\u7684\u5173\u952e\u95ee\u9898\u3002"}}
{"id": "2509.04078", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.04078", "abs": "https://arxiv.org/abs/2509.04078", "authors": ["Jingjing Liu", "Zeming Liu", "Zihao Cheng", "Mengliang He", "Xiaoming Shi", "Yuhang Guo", "Xiangrong Zhu", "Yuanfang Guo", "Yunhong Wang", "Haifeng Wang"], "title": "RepoDebug: Repository-Level Multi-Task and Multi-Language Debugging Evaluation of Large Language Models", "comment": "30 pages, 12 figures, EMNLP 2025 Findings", "summary": "Large Language Models (LLMs) have exhibited significant proficiency in code\ndebugging, especially in automatic program repair, which may substantially\nreduce the time consumption of developers and enhance their efficiency.\nSignificant advancements in debugging datasets have been made to promote the\ndevelopment of code debugging. However, these datasets primarily focus on\nassessing the LLM's function-level code repair capabilities, neglecting the\nmore complex and realistic repository-level scenarios, which leads to an\nincomplete understanding of the LLM's challenges in repository-level debugging.\nWhile several repository-level datasets have been proposed, they often suffer\nfrom limitations such as limited diversity of tasks, languages, and error\ntypes. To mitigate this challenge, this paper introduces RepoDebug, a\nmulti-task and multi-language repository-level code debugging dataset with 22\nsubtypes of errors that supports 8 commonly used programming languages and 3\ndebugging tasks. Furthermore, we conduct evaluation experiments on 10 LLMs,\nwhere Claude 3.5 Sonnect, the best-performing model, still cannot perform well\nin repository-level debugging.", "AI": {"tldr": "RepoDebug\u662f\u4e00\u4e2a\u591a\u4efb\u52a1\u3001\u591a\u8bed\u8a00\u7684\u4ed3\u5e93\u7ea7\u4ee3\u7801\u8c03\u8bd5\u6570\u636e\u96c6\uff0c\u5305\u542b22\u79cd\u9519\u8bef\u5b50\u7c7b\u578b\u30018\u79cd\u7f16\u7a0b\u8bed\u8a00\u548c3\u79cd\u8c03\u8bd5\u4efb\u52a1\uff0c\u7528\u4e8e\u8bc4\u4f30LLM\u5728\u590d\u6742\u4ed3\u5e93\u7ea7\u8c03\u8bd5\u573a\u666f\u4e2d\u7684\u8868\u73b0\u3002", "motivation": "\u73b0\u6709\u8c03\u8bd5\u6570\u636e\u96c6\u4e3b\u8981\u5173\u6ce8\u51fd\u6570\u7ea7\u4ee3\u7801\u4fee\u590d\uff0c\u5ffd\u7565\u4e86\u66f4\u590d\u6742\u548c\u73b0\u5b9e\u7684\u4ed3\u5e93\u7ea7\u573a\u666f\uff0c\u5bfc\u81f4\u5bf9LLM\u5728\u4ed3\u5e93\u7ea7\u8c03\u8bd5\u4e2d\u9762\u4e34\u7684\u6311\u6218\u7406\u89e3\u4e0d\u5b8c\u6574\u3002", "method": "\u6784\u5efaRepoDebug\u6570\u636e\u96c6\uff0c\u5305\u542b\u591a\u4efb\u52a1\u3001\u591a\u8bed\u8a00\u548c\u591a\u79cd\u9519\u8bef\u7c7b\u578b\uff0c\u5e76\u572810\u4e2a\u5927\u578b\u8bed\u8a00\u6a21\u578b\u4e0a\u8fdb\u884c\u8bc4\u4f30\u5b9e\u9a8c\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\uff0c\u5373\u4f7f\u662f\u8868\u73b0\u6700\u597d\u7684Claude 3.5 Sonnet\u6a21\u578b\u5728\u4ed3\u5e93\u7ea7\u8c03\u8bd5\u4efb\u52a1\u4e2d\u4ecd\u7136\u8868\u73b0\u4e0d\u4f73\u3002", "conclusion": "\u4ed3\u5e93\u7ea7\u4ee3\u7801\u8c03\u8bd5\u5bf9LLM\u6765\u8bf4\u4ecd\u7136\u662f\u4e00\u4e2a\u5177\u6709\u6311\u6218\u6027\u7684\u4efb\u52a1\uff0c\u9700\u8981\u66f4\u5148\u8fdb\u7684\u6570\u636e\u96c6\u548c\u65b9\u6cd5\u6765\u63d0\u5347\u6a21\u578b\u5728\u6b64\u7c7b\u590d\u6742\u573a\u666f\u4e2d\u7684\u8868\u73b0\u3002"}}
{"id": "2509.04260", "categories": ["cs.SE", "cs.AI", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.04260", "abs": "https://arxiv.org/abs/2509.04260", "authors": ["Haowei Quan", "Junjie Wang", "Xinzhe Li", "Terry Yue Zhuo", "Xiao Chen", "Xiaoning Du"], "title": "An Empirical Study of Vulnerabilities in Python Packages and Their Detection", "comment": null, "summary": "In the rapidly evolving software development landscape, Python stands out for\nits simplicity, versatility, and extensive ecosystem. Python packages, as units\nof organization, reusability, and distribution, have become a pressing concern,\nhighlighted by the considerable number of vulnerability reports. As a scripting\nlanguage, Python often cooperates with other languages for performance or\ninteroperability. This adds complexity to the vulnerabilities inherent to\nPython packages, and the effectiveness of current vulnerability detection tools\nremains underexplored. This paper addresses these gaps by introducing PyVul,\nthe first comprehensive benchmark suite of Python-package vulnerabilities.\nPyVul includes 1,157 publicly reported, developer-verified vulnerabilities,\neach linked to its affected packages. To accommodate diverse detection\ntechniques, it provides annotations at both commit and function levels. An\nLLM-assisted data cleansing method is incorporated to improve label accuracy,\nachieving 100% commit-level and 94% function-level accuracy, establishing PyVul\nas the most precise large-scale Python vulnerability benchmark. We further\ncarry out a distribution analysis of PyVul, which demonstrates that\nvulnerabilities in Python packages involve multiple programming languages and\nexhibit a wide variety of types. Moreover, our analysis reveals that\nmulti-lingual Python packages are potentially more susceptible to\nvulnerabilities. Evaluation of state-of-the-art detectors using this benchmark\nreveals a significant discrepancy between the capabilities of existing tools\nand the demands of effectively identifying real-world security issues in Python\npackages. Additionally, we conduct an empirical review of the top-ranked CWEs\nobserved in Python packages, to diagnose the fine-grained limitations of\ncurrent detection tools and highlight the necessity for future advancements in\nthe field.", "AI": {"tldr": "PyVul\u662f\u9996\u4e2a\u5168\u9762\u7684Python\u5305\u6f0f\u6d1e\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5305\u542b1157\u4e2a\u516c\u5f00\u62a5\u544a\u7684\u5f00\u53d1\u8005\u9a8c\u8bc1\u6f0f\u6d1e\uff0c\u63d0\u4f9b\u63d0\u4ea4\u548c\u51fd\u6570\u7ea7\u522b\u7684\u6807\u6ce8\uff0c\u51c6\u786e\u7387\u5206\u522b\u8fbe\u5230100%\u548c94%\u3002\u8bc4\u4f30\u53d1\u73b0\u73b0\u6709\u68c0\u6d4b\u5de5\u5177\u5728\u8bc6\u522b\u771f\u5b9e\u4e16\u754cPython\u5305\u5b89\u5168\u95ee\u9898\u4e0a\u5b58\u5728\u663e\u8457\u5dee\u8ddd\u3002", "motivation": "Python\u5305\u4f5c\u4e3a\u7ec4\u7ec7\u3001\u91cd\u7528\u548c\u5206\u53d1\u5355\u5143\u5b58\u5728\u5927\u91cf\u6f0f\u6d1e\u62a5\u544a\uff0c\u4e14Python\u5e38\u4e0e\u5176\u4ed6\u8bed\u8a00\u534f\u4f5c\u589e\u52a0\u4e86\u6f0f\u6d1e\u590d\u6742\u6027\uff0c\u5f53\u524d\u6f0f\u6d1e\u68c0\u6d4b\u5de5\u5177\u7684\u6709\u6548\u6027\u5c1a\u672a\u5145\u5206\u63a2\u7d22\u3002", "method": "\u5f15\u5165PyVul\u57fa\u51c6\u5957\u4ef6\uff0c\u5305\u542b1157\u4e2a\u516c\u5f00\u62a5\u544a\u7684\u5f00\u53d1\u8005\u9a8c\u8bc1\u6f0f\u6d1e\uff0c\u63d0\u4f9b\u63d0\u4ea4\u548c\u51fd\u6570\u7ea7\u522b\u6807\u6ce8\uff0c\u91c7\u7528LLM\u8f85\u52a9\u6570\u636e\u6e05\u6d17\u65b9\u6cd5\u63d0\u9ad8\u6807\u7b7e\u51c6\u786e\u6027\u3002", "result": "PyVul\u8fbe\u5230100%\u63d0\u4ea4\u7ea7\u522b\u548c94%\u51fd\u6570\u7ea7\u522b\u51c6\u786e\u7387\uff0c\u662f\u591a\u8bed\u8a00Python\u5305\u6f0f\u6d1e\u7684\u6700\u7cbe\u786e\u5927\u89c4\u6a21\u57fa\u51c6\u3002\u5206\u6790\u53d1\u73b0\u591a\u8bed\u8a00Python\u5305\u66f4\u5bb9\u6613\u53d7\u5230\u6f0f\u6d1e\u5f71\u54cd\uff0c\u73b0\u6709\u68c0\u6d4b\u5de5\u5177\u5b58\u5728\u663e\u8457\u80fd\u529b\u5dee\u8ddd\u3002", "conclusion": "PyVul\u4e3aPython\u5305\u6f0f\u6d1e\u68c0\u6d4b\u63d0\u4f9b\u4e86\u9ad8\u8d28\u91cf\u57fa\u51c6\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u5de5\u5177\u7684\u5c40\u9650\u6027\uff0c\u5f3a\u8c03\u4e86\u8be5\u9886\u57df\u672a\u6765\u53d1\u5c55\u7684\u5fc5\u8981\u6027\uff0c\u7279\u522b\u662f\u9488\u5bf9\u591a\u8bed\u8a00\u73af\u5883\u4e0b\u7684\u6f0f\u6d1e\u68c0\u6d4b\u3002"}}
{"id": "2509.04328", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.04328", "abs": "https://arxiv.org/abs/2509.04328", "authors": ["Amine Barrak", "Emna Ksontini", "Ridouane Atike", "Fehmi Jaafar"], "title": "FaaSGuard: Secure CI/CD for Serverless Applications -- An OpenFaaS Case Study", "comment": "IEEE International Conference on Source Code Analysis & Manipulation\n  (SCAM 2025)", "summary": "Serverless computing significantly alters software development by abstracting\ninfrastructure management and enabling rapid, modular, event-driven\ndeployments. Despite its benefits, the distinct characteristics of serverless\nfunctions, such as ephemeral execution and fine-grained scalability, pose\nunique security challenges, particularly in open-source platforms like\nOpenFaaS. Existing approaches typically address isolated phases of the\nDevSecOps lifecycle, lacking an integrated and comprehensive security strategy.\nTo bridge this gap, we propose FaaSGuard, a unified DevSecOps pipeline\nexplicitly designed for open-source serverless environments. FaaSGuard\nsystematically embeds lightweight, fail-closed security checks into every stage\nof the development lifecycle-planning, coding, building, deployment, and\nmonitoring-effectively addressing threats such as injection attacks, hard-coded\nsecrets, and resource exhaustion. We validate our approach empirically through\na case study involving 20 real-world serverless functions from public GitHub\nrepositories. Results indicate that FaaSGuard effectively detects and prevents\ncritical vulnerabilities, demonstrating high precision (95%) and recall (91%)\nwithout significant disruption to established CI/CD practices.", "AI": {"tldr": "FaaSGuard\u662f\u4e00\u4e2a\u9488\u5bf9\u5f00\u6e90\u65e0\u670d\u52a1\u5668\u73af\u5883\u7684\u7edf\u4e00DevSecOps\u7ba1\u9053\uff0c\u901a\u8fc7\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\u5d4c\u5165\u8f7b\u91cf\u7ea7\u5b89\u5168\u68c0\u67e5\uff0c\u6709\u6548\u68c0\u6d4b\u548c\u9632\u6b62\u5173\u952e\u6f0f\u6d1e\u3002", "motivation": "\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u867d\u7136\u7b80\u5316\u4e86\u57fa\u7840\u8bbe\u65bd\u7ba1\u7406\uff0c\u4f46\u5176\u77ed\u6682\u6267\u884c\u548c\u7ec6\u7c92\u5ea6\u53ef\u6269\u5c55\u6027\u7b49\u7279\u6027\u5e26\u6765\u4e86\u72ec\u7279\u7684\u5b89\u5168\u6311\u6218\uff0c\u7279\u522b\u662f\u5728OpenFaaS\u7b49\u5f00\u6e90\u5e73\u53f0\u4e2d\u3002\u73b0\u6709\u65b9\u6cd5\u901a\u5e38\u53ea\u5173\u6ce8DevSecOps\u751f\u547d\u5468\u671f\u7684\u5b64\u7acb\u9636\u6bb5\uff0c\u7f3a\u4e4f\u96c6\u6210\u5316\u7684\u5168\u9762\u5b89\u5168\u7b56\u7565\u3002", "method": "\u63d0\u51faFaaSGuard\u7edf\u4e00DevSecOps\u7ba1\u9053\uff0c\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u7684\u6bcf\u4e2a\u9636\u6bb5\uff08\u89c4\u5212\u3001\u7f16\u7801\u3001\u6784\u5efa\u3001\u90e8\u7f72\u548c\u76d1\u63a7\uff09\u7cfb\u7edf\u6027\u5730\u5d4c\u5165\u8f7b\u91cf\u7ea7\u3001\u6545\u969c\u5173\u95ed\u7684\u5b89\u5168\u68c0\u67e5\uff0c\u6709\u6548\u5e94\u5bf9\u6ce8\u5165\u653b\u51fb\u3001\u786c\u7f16\u7801\u5bc6\u94a5\u548c\u8d44\u6e90\u8017\u5c3d\u7b49\u5a01\u80c1\u3002", "result": "\u901a\u8fc7\u5bf9\u6765\u81eaGitHub\u516c\u5171\u4ed3\u5e93\u768420\u4e2a\u771f\u5b9e\u65e0\u670d\u52a1\u5668\u51fd\u6570\u8fdb\u884c\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\uff0cFaaSGuard\u80fd\u591f\u6709\u6548\u68c0\u6d4b\u548c\u9632\u6b62\u5173\u952e\u6f0f\u6d1e\uff0c\u8868\u73b0\u51fa\u9ad8\u7cbe\u5ea6\uff0895%\uff09\u548c\u9ad8\u53ec\u56de\u7387\uff0891%\uff09\uff0c\u4e14\u4e0d\u4f1a\u663e\u8457\u5e72\u6270\u73b0\u6709\u7684CI/CD\u5b9e\u8df5\u3002", "conclusion": "FaaSGuard\u4e3a\u5f00\u6e90\u65e0\u670d\u52a1\u5668\u73af\u5883\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u96c6\u6210\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u5728DevSecOps\u5168\u751f\u547d\u5468\u671f\u4e2d\u5d4c\u5165\u5b89\u5168\u68c0\u67e5\uff0c\u6210\u529f\u89e3\u51b3\u4e86\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u7279\u6709\u7684\u5b89\u5168\u6311\u6218\u3002"}}
{"id": "2509.04423", "categories": ["cs.SE", "cs.DB"], "pdf": "https://arxiv.org/pdf/2509.04423", "abs": "https://arxiv.org/abs/2509.04423", "authors": ["Fatima Zulfiqar Ali", "Atrooba Ilyas"], "title": "Design and Development of a Web Platform for Blood Donation Management", "comment": "10 pages, 6 figures, conference", "summary": "Blood donation is a critical component of healthcare, yet locating suitable\ndonors in emergencies often presents significant challenges. This paper\npresents the design and development of a Blood Donation Web Platform, a\nweb-based system that connects patients, donors, and administrators within a\ncentralized digital space. The platform allows interested donors to register\ntheir personal information, including blood group, contact details, and\navailability. Patients can search for donors based on blood group and location,\nand the system provides a list of nearby donors who are ready to donate. The\nplatform design was guided by use case, database, class, and sequence diagrams\nto ensure a well-structured and efficient system architecture. Modern web\ntechnologies, including PHP (Laravel framework), HTML, CSS, Bootstrap, and\nMySQL, supported by XAMPP and Visual Studio Code, were employed to implement a\ndynamic, interactive, and user-friendly platform. By streamlining donor\nrefgistration, blood requests, and communication, the proposed system reduces\ndelays and complexities in emergencies, improving timely accessibility of blood\nand enhancing overall efficiency in blood donation services.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u7684\u732e\u8840\u5e73\u53f0\uff0c\u4f7f\u7528PHP(Laravel)\u3001HTML\u3001CSS\u3001Bootstrap\u548cMySQL\u6280\u672f\uff0c\u901a\u8fc7\u96c6\u4e2d\u5f0f\u6570\u5b57\u7a7a\u95f4\u8fde\u63a5\u60a3\u8005\u3001\u732e\u8840\u8005\u548c\u7ba1\u7406\u5458\uff0c\u63d0\u9ad8\u7d27\u6025\u60c5\u51b5\u4e0b\u8840\u6db2\u83b7\u53d6\u6548\u7387\u3002", "motivation": "\u533b\u7597\u4fdd\u5065\u4e2d\u732e\u8840\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5728\u7d27\u6025\u60c5\u51b5\u4e0b\u5bfb\u627e\u5408\u9002\u732e\u8840\u8005\u5b58\u5728\u91cd\u5927\u6311\u6218\uff0c\u9700\u8981\u5efa\u7acb\u6570\u5b57\u5316\u8fde\u63a5\u5e73\u53f0\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u91c7\u7528\u7528\u4f8b\u56fe\u3001\u6570\u636e\u5e93\u56fe\u3001\u7c7b\u56fe\u548c\u5e8f\u5217\u56fe\u6307\u5bfc\u5e73\u53f0\u8bbe\u8ba1\uff0c\u4f7f\u7528PHP(Laravel\u6846\u67b6)\u3001HTML\u3001CSS\u3001Bootstrap\u548cMySQL\u6280\u672f\u6808\uff0c\u901a\u8fc7XAMPP\u548cVisual Studio Code\u5f00\u53d1\u52a8\u6001\u4ea4\u4e92\u5f0f\u7f51\u7edc\u5e73\u53f0\u3002", "result": "\u5b9e\u73b0\u4e86\u732e\u8840\u8005\u6ce8\u518c\u4e2a\u4eba\u4fe1\u606f\u3001\u60a3\u8005\u6309\u8840\u578b\u548c\u4f4d\u7f6e\u641c\u7d22\u732e\u8840\u8005\u3001\u7cfb\u7edf\u63d0\u4f9b\u9644\u8fd1\u53ef\u7528\u732e\u8840\u8005\u5217\u8868\u7b49\u529f\u80fd\uff0c\u5efa\u7acb\u4e86\u7ed3\u6784\u826f\u597d\u7684\u7cfb\u7edf\u67b6\u6784\u3002", "conclusion": "\u8be5\u5e73\u53f0\u901a\u8fc7\u7b80\u5316\u732e\u8840\u8005\u6ce8\u518c\u3001\u8840\u6db2\u8bf7\u6c42\u548c\u6c9f\u901a\u6d41\u7a0b\uff0c\u51cf\u5c11\u4e86\u7d27\u6025\u60c5\u51b5\u4e0b\u7684\u5ef6\u8bef\u548c\u590d\u6742\u6027\uff0c\u63d0\u9ad8\u4e86\u8840\u6db2\u53ca\u65f6\u53ef\u53ca\u6027\u548c\u732e\u8840\u670d\u52a1\u6574\u4f53\u6548\u7387\u3002"}}

{"id": "2509.10572", "categories": ["cs.SE", "cs.AI", "cs.DB"], "pdf": "https://arxiv.org/pdf/2509.10572", "abs": "https://arxiv.org/abs/2509.10572", "authors": ["Ashlesha Akella", "Akshar Kaul", "Krishnasuri Narayanam", "Sameep Mehta"], "title": "Quality Assessment of Tabular Data using Large Language Models and Code Generation", "comment": "EMNLP industry track submitted", "summary": "Reliable data quality is crucial for downstream analysis of tabular datasets,\nyet rule-based validation often struggles with inefficiency, human\nintervention, and high computational costs. We present a three-stage framework\nthat combines statistical inliner detection with LLM-driven rule and code\ngeneration. After filtering data samples through traditional clustering, we\niteratively prompt LLMs to produce semantically valid quality rules and\nsynthesize their executable validators through code-generating LLMs. To\ngenerate reliable quality rules, we aid LLMs with retrieval-augmented\ngeneration (RAG) by leveraging external knowledge sources and domain-specific\nfew-shot examples. Robust guardrails ensure the accuracy and consistency of\nboth rules and code snippets. Extensive evaluations on benchmark datasets\nconfirm the effectiveness of our approach.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u4e2a\u4e09\u9636\u6bb5\u6846\u67b6\uff0c\u7ed3\u5408\u7edf\u8ba1\u5f02\u5e38\u503c\u68c0\u6d4b\u548cLLM\u9a71\u52a8\u7684\u89c4\u5219\u4e0e\u4ee3\u7801\u751f\u6210\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u8868\u683c\u6570\u636e\u8d28\u91cf\u9a8c\u8bc1", "motivation": "\u4f20\u7edf\u57fa\u4e8e\u89c4\u5219\u7684\u6570\u636e\u8d28\u91cf\u9a8c\u8bc1\u65b9\u6cd5\u5b58\u5728\u6548\u7387\u4f4e\u4e0b\u3001\u9700\u8981\u4eba\u5de5\u5e72\u9884\u548c\u8ba1\u7b97\u6210\u672c\u9ad8\u7684\u95ee\u9898\uff0c\u9700\u8981\u66f4\u667a\u80fd\u7684\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848", "method": "\u4e09\u9636\u6bb5\u6846\u67b6\uff1a1\uff09\u4f20\u7edf\u805a\u7c7b\u8fc7\u6ee4\u6570\u636e\u6837\u672c\uff1b2\uff09\u8fed\u4ee3\u63d0\u793aLLM\u751f\u6210\u8bed\u4e49\u6709\u6548\u7684\u8d28\u91cf\u89c4\u5219\uff1b3\uff09\u901a\u8fc7\u4ee3\u7801\u751f\u6210LLM\u5408\u6210\u53ef\u6267\u884c\u9a8c\u8bc1\u5668\u3002\u4f7f\u7528RAG\u6280\u672f\u589e\u5f3aLLM\uff0c\u5229\u7528\u5916\u90e8\u77e5\u8bc6\u6e90\u548c\u9886\u57df\u7279\u5b9a\u793a\u4f8b", "result": "\u5728\u57fa\u51c6\u6570\u636e\u96c6\u4e0a\u7684\u5e7f\u6cdb\u8bc4\u4f30\u8bc1\u5b9e\u4e86\u8be5\u65b9\u6cd5\u7684\u6709\u6548\u6027", "conclusion": "\u8be5\u6846\u67b6\u80fd\u591f\u53ef\u9760\u5730\u81ea\u52a8\u5316\u751f\u6210\u6570\u636e\u8d28\u91cf\u89c4\u5219\u548c\u9a8c\u8bc1\u4ee3\u7801\uff0c\u663e\u8457\u63d0\u9ad8\u8868\u683c\u6570\u636e\u8d28\u91cf\u9a8c\u8bc1\u7684\u6548\u7387\u548c\u51c6\u786e\u6027"}}
{"id": "2509.10649", "categories": ["cs.SE", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2509.10649", "abs": "https://arxiv.org/abs/2509.10649", "authors": ["Johan Cederbladh", "Loek Cleophas", "Eduard Kamburjan", "Lucas Lima", "Rakshit Mittal", "Hans Vangheluwe"], "title": "Reasonable Experiments in Model-Based Systems Engineering", "comment": null, "summary": "With the current trend in Model-Based Systems Engineering towards Digital\nEngineering and early Validation & Verification, experiments are increasingly\nused to estimate system parameters and explore design decisions. Managing such\nexperimental configuration metadata and results is of utmost importance in\naccelerating overall design effort. In particular, we observe it is important\nto 'intelligent-ly' reuse experiment-related data to save time and effort by\nnot performing potentially superfluous, time-consuming, and resource-intensive\nexperiments. In this work, we present a framework for managing experiments on\ndigital and/or physical assets with a focus on case-based reasoning with domain\nknowledge to reuse experimental data efficiently by deciding whether an\nalready-performed experiment (or associated answer) can be reused to answer a\nnew (potentially different) question from the engineer/user without having to\nset up and perform a new experiment. We provide the general architecture for\nsuch an experiment manager and validate our approach using an industrial\nvehicular energy system-design case study.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u4e2a\u57fa\u4e8e\u6848\u4f8b\u63a8\u7406\u7684\u5b9e\u9a8c\u7ba1\u7406\u6846\u67b6\uff0c\u901a\u8fc7\u667a\u80fd\u91cd\u7528\u5b9e\u9a8c\u6570\u636e\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u5b9e\u9a8c\uff0c\u52a0\u901f\u7cfb\u7edf\u5de5\u7a0b\u8bbe\u8ba1\u8fc7\u7a0b", "motivation": "\u968f\u7740\u57fa\u4e8e\u6a21\u578b\u7684\u7cfb\u7edf\u5de5\u7a0b\u5411\u6570\u5b57\u5de5\u7a0b\u548c\u65e9\u671f\u9a8c\u8bc1\u9a8c\u8bc1\u53d1\u5c55\uff0c\u5b9e\u9a8c\u914d\u7f6e\u5143\u6570\u636e\u548c\u7ed3\u679c\u7ba1\u7406\u5bf9\u52a0\u901f\u6574\u4f53\u8bbe\u8ba1\u5de5\u4f5c\u81f3\u5173\u91cd\u8981\uff0c\u9700\u8981\u667a\u80fd\u91cd\u7528\u5b9e\u9a8c\u76f8\u5173\u6570\u636e\u6765\u8282\u7701\u65f6\u95f4\u548c\u8d44\u6e90", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u7ba1\u7406\u6570\u5b57/\u7269\u7406\u8d44\u4ea7\u5b9e\u9a8c\u7684\u6846\u67b6\uff0c\u91cd\u70b9\u91c7\u7528\u57fa\u4e8e\u6848\u4f8b\u63a8\u7406\u548c\u9886\u57df\u77e5\u8bc6\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u5224\u65ad\u5df2\u6709\u5b9e\u9a8c\u662f\u5426\u80fd\u56de\u7b54\u65b0\u95ee\u9898\u6765\u51b3\u5b9a\u662f\u5426\u91cd\u7528\u5b9e\u9a8c\u6570\u636e", "result": "\u63d0\u4f9b\u4e86\u901a\u7528\u5b9e\u9a8c\u7ba1\u7406\u5668\u67b6\u6784\uff0c\u5e76\u901a\u8fc7\u5de5\u4e1a\u8f66\u8f86\u80fd\u6e90\u7cfb\u7edf\u8bbe\u8ba1\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027", "conclusion": "\u8be5\u6846\u67b6\u80fd\u591f\u6709\u6548\u91cd\u7528\u5b9e\u9a8c\u6570\u636e\uff0c\u907f\u514d\u8bbe\u7f6e\u548c\u6267\u884c\u65b0\u5b9e\u9a8c\uff0c\u663e\u8457\u63d0\u9ad8\u7cfb\u7edf\u5de5\u7a0b\u5b9e\u9a8c\u7ba1\u7406\u7684\u6548\u7387\u548c\u8d44\u6e90\u5229\u7528\u7387"}}
{"id": "2509.10819", "categories": ["cs.SE", "cs.CR", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.10819", "abs": "https://arxiv.org/abs/2509.10819", "authors": ["Christoph Hochrainer", "Valentin W\u00fcstholz", "Maria Christakis"], "title": "Arguzz: Testing zkVMs for Soundness and Completeness Bugs", "comment": null, "summary": "Zero-knowledge virtual machines (zkVMs) are increasingly deployed in\ndecentralized applications and blockchain rollups since they enable verifiable\noff-chain computation. These VMs execute general-purpose programs, frequently\nwritten in Rust, and produce succinct cryptographic proofs. However, zkVMs are\ncomplex, and bugs in their constraint systems or execution logic can cause\ncritical soundness (accepting invalid executions) or completeness (rejecting\nvalid ones) issues.\n  We present Arguzz, the first automated tool for testing zkVMs for soundness\nand completeness bugs. To detect such bugs, Arguzz combines a novel variant of\nmetamorphic testing with fault injection. In particular, it generates\nsemantically equivalent program pairs, merges them into a single Rust program\nwith a known output, and runs it inside a zkVM. By injecting faults into the\nVM, Arguzz mimics malicious or buggy provers to uncover overly weak\nconstraints.\n  We used Arguzz to test six real-world zkVMs (RISC Zero, Nexus, Jolt, SP1,\nOpenVM, and Pico) and found eleven bugs in three of them. One RISC Zero bug\nresulted in a $50,000 bounty, despite prior audits, demonstrating the critical\nneed for systematic testing of zkVMs.", "AI": {"tldr": "Arguzz\u662f\u9996\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5zkVM\uff08\u96f6\u77e5\u8bc6\u865a\u62df\u673a\uff09\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u7ed3\u5408\u53d8\u5f62\u6d4b\u8bd5\u548c\u6545\u969c\u6ce8\u5165\u6765\u68c0\u6d4bzkVM\u4e2d\u7684\u6b63\u786e\u6027\u548c\u5b8c\u6574\u6027\u6f0f\u6d1e\uff0c\u57286\u4e2a\u771f\u5b9ezkVM\u4e2d\u53d1\u73b0\u4e8611\u4e2a\u6f0f\u6d1e", "motivation": "zkVM\u5728\u533a\u5757\u94fe\u548c\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4f46\u5176\u7ea6\u675f\u7cfb\u7edf\u548c\u6267\u884c\u903b\u8f91\u4e2d\u7684\u6f0f\u6d1e\u53ef\u80fd\u5bfc\u81f4\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\uff08\u63a5\u53d7\u65e0\u6548\u6267\u884c\u6216\u62d2\u7edd\u6709\u6548\u6267\u884c\uff09\uff0c\u73b0\u6709\u5ba1\u8ba1\u65b9\u6cd5\u53ef\u80fd\u9057\u6f0f\u5173\u952e\u6f0f\u6d1e", "method": "\u91c7\u7528\u65b0\u9896\u7684\u53d8\u5f62\u6d4b\u8bd5\u53d8\u4f53\u4e0e\u6545\u969c\u6ce8\u5165\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5\uff1a\u751f\u6210\u8bed\u4e49\u7b49\u4ef7\u7684\u7a0b\u5e8f\u5bf9\uff0c\u5408\u5e76\u4e3a\u5177\u6709\u5df2\u77e5\u8f93\u51fa\u7684Rust\u7a0b\u5e8f\uff0c\u5728zkVM\u4e2d\u8fd0\u884c\u5e76\u901a\u8fc7\u6545\u969c\u6ce8\u5165\u6a21\u62df\u6076\u610f\u8bc1\u660e\u8005\u6765\u53d1\u73b0\u7ea6\u675f\u8fc7\u5f31\u7684\u95ee\u9898", "result": "\u6d4b\u8bd5\u4e866\u4e2a\u771f\u5b9ezkVM\uff08RISC Zero\u3001Nexus\u3001Jolt\u3001SP1\u3001OpenVM\u548cPico\uff09\uff0c\u5728\u5176\u4e2d3\u4e2a\u7cfb\u7edf\u4e2d\u53d1\u73b0\u4e8611\u4e2a\u6f0f\u6d1e\uff0c\u5176\u4e2d\u4e00\u4e2aRISC Zero\u6f0f\u6d1e\u83b7\u5f97\u4e865\u4e07\u7f8e\u5143\u7684\u6f0f\u6d1e\u8d4f\u91d1", "conclusion": "\u5c3d\u7ba1\u7ecf\u8fc7\u5ba1\u8ba1\uff0czkVM\u4ecd\u5b58\u5728\u4e25\u91cd\u6f0f\u6d1e\uff0c\u7cfb\u7edf\u5316\u6d4b\u8bd5\u5de5\u5177\u5982Arguzz\u5bf9\u4e8e\u786e\u4fddzkVM\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981"}}
{"id": "2509.10920", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.10920", "abs": "https://arxiv.org/abs/2509.10920", "authors": ["Guan-Yan Yang", "Farn Wang", "You-Zong Gu", "Ya-Wen Teng", "Kuo-Hui Yeh", "Ping-Hsueh Ho", "Wei-Ling Wen"], "title": "TPSQLi: Test Prioritization for SQL Injection Vulnerability Detection in Web Applications", "comment": "20 pages; 8 figures", "summary": "The rapid proliferation of network applications has led to a significant\nincrease in network attacks. According to the OWASP Top 10 Projects report\nreleased in 2021, injection attacks rank among the top three vulnerabilities in\nsoftware projects. This growing threat landscape has increased the complexity\nand workload of software testing, necessitating advanced tools to support agile\ndevelopment cycles. This paper introduces a novel test prioritization method\nfor SQL injection vulnerabilities to enhance testing efficiency. By leveraging\nprevious test outcomes, our method adjusts defense strength vectors for\nsubsequent tests, optimizing the testing workflow and tailoring defense\nmechanisms to specific software needs. This approach aims to improve the\neffectiveness and efficiency of vulnerability detection and mitigation through\na flexible framework that incorporates dynamic adjustments and considers the\ntemporal aspects of vulnerability exposure.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u57fa\u4e8e\u5386\u53f2\u6d4b\u8bd5\u7ed3\u679c\u52a8\u6001\u8c03\u6574\u9632\u5fa1\u5f3a\u5ea6\u5411\u91cf\u7684SQL\u6ce8\u5165\u6f0f\u6d1e\u6d4b\u8bd5\u4f18\u5148\u7ea7\u6392\u5e8f\u65b9\u6cd5\uff0c\u4ee5\u63d0\u9ad8\u6d4b\u8bd5\u6548\u7387\u548c\u6f0f\u6d1e\u68c0\u6d4b\u6548\u679c", "motivation": "\u7f51\u7edc\u653b\u51fb\u5feb\u901f\u589e\u957f\uff0cSQL\u6ce8\u5165\u4f4d\u5217OWASP Top 10\u524d\u4e09\uff0c\u4f20\u7edf\u6d4b\u8bd5\u65b9\u6cd5\u96be\u4ee5\u5e94\u5bf9\u654f\u6377\u5f00\u53d1\u9700\u6c42\uff0c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u6f0f\u6d1e\u68c0\u6d4b\u5de5\u5177", "method": "\u5229\u7528\u5148\u524d\u6d4b\u8bd5\u7ed3\u679c\u8c03\u6574\u540e\u7eed\u6d4b\u8bd5\u7684\u9632\u5fa1\u5f3a\u5ea6\u5411\u91cf\uff0c\u901a\u8fc7\u52a8\u6001\u8c03\u6574\u673a\u5236\u4f18\u5316\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u5e76\u6839\u636e\u8f6f\u4ef6\u7279\u5b9a\u9700\u6c42\u5b9a\u5236\u9632\u5fa1\u673a\u5236", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u63d0\u9ad8SQL\u6ce8\u5165\u6f0f\u6d1e\u68c0\u6d4b\u7684\u6548\u7387\u548c\u6709\u6548\u6027\uff0c\u901a\u8fc7\u7075\u6d3b\u7684\u6846\u67b6\u5b9e\u73b0\u52a8\u6001\u8c03\u6574\u5e76\u8003\u8651\u6f0f\u6d1e\u66b4\u9732\u7684\u65f6\u95f4\u56e0\u7d20", "conclusion": "\u6240\u63d0\u51fa\u7684\u6d4b\u8bd5\u4f18\u5148\u7ea7\u6392\u5e8f\u65b9\u6cd5\u4e3aSQL\u6ce8\u5165\u6f0f\u6d1e\u68c0\u6d4b\u63d0\u4f9b\u4e86\u66f4\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u652f\u6301\u654f\u6377\u5f00\u53d1\u5468\u671f\u5e76\u63d0\u5347\u8f6f\u4ef6\u5b89\u5168\u6027"}}
{"id": "2509.11877", "categories": ["cs.LO", "cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11877", "abs": "https://arxiv.org/abs/2509.11877", "authors": ["Andrei Arusoaie", "Hora\u0163iu Cheval", "Radu Iosif"], "title": "Proceedings 9th edition of Working Formal Methods Symposium", "comment": null, "summary": "This volume contains the proceedings of the 9th Working Formal Methods\nSymposium, which was held at the Alexandru Ioan Cuza University, Ia\\c{s}i,\nRomania on September 17-19, 2025.", "AI": {"tldr": "\u7b2c\u4e5d\u5c4a\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\uff0c2025\u5e749\u6708\u5728\u7f57\u9a6c\u5c3c\u4e9a\u96c5\u897f\u5927\u5b66\u4e3e\u884c", "motivation": "\u8bb0\u5f55\u548c\u4f20\u64ad\u7b2c\u4e5d\u5c4a\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u8ba8\u4f1a\u7684\u7814\u7a76\u6210\u679c\uff0c\u4fc3\u8fdb\u5f62\u5f0f\u5316\u65b9\u6cd5\u9886\u57df\u7684\u5b66\u672f\u4ea4\u6d41", "method": "\u4f1a\u8bae\u8bba\u6587\u96c6\u5f62\u5f0f\uff0c\u6536\u5f55\u7814\u8ba8\u4f1a\u671f\u95f4\u53d1\u8868\u7684\u5b66\u672f\u8bba\u6587", "result": "\u6210\u529f\u4e3e\u529e\u4e86\u7814\u8ba8\u4f1a\u5e76\u51fa\u7248\u4e86\u4f1a\u8bae\u8bba\u6587\u96c6\uff0c\u6c47\u96c6\u4e86\u5f62\u5f0f\u5316\u65b9\u6cd5\u9886\u57df\u7684\u6700\u65b0\u7814\u7a76\u6210\u679c", "conclusion": "\u8be5\u8bba\u6587\u96c6\u4e3a\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u7a76\u793e\u533a\u63d0\u4f9b\u4e86\u91cd\u8981\u7684\u5b66\u672f\u8d44\u6e90\uff0c\u63a8\u52a8\u4e86\u8be5\u9886\u57df\u7684\u53d1\u5c55"}}
{"id": "2509.11418", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2509.11418", "abs": "https://arxiv.org/abs/2509.11418", "authors": ["Runming Li", "Yue Yao", "Robert Harper"], "title": "Mechanizing Synthetic Tait Computability in Istari", "comment": null, "summary": "Categorical gluing is a powerful technique for proving meta-theorems of type\ntheories such as canonicity and normalization. Synthetic Tait Computability\n(STC) provides an abstract treatment of the complex gluing models by\ninternalizing the gluing category into a modal dependent type theory with a\nphase distinction. This work presents a mechanization of STC in the Istari\nproof assistant. Istari is a Martin-L\\\"{o}f-style extensional type theory with\nequality reflection. Equality reflection eliminates the nuisance of transport\nreasoning typically found in intensional proof assistants. This work develops a\nreusable library for synthetic phase distinction, including modalities,\nextension types, and strict glue types, and applies it to two case studies: (1)\na canonicity model for dependent type theory with dependent products and\nbooleans with large elimination, and (2) a Kripke canonicity model for the\ncost-aware logical framework. Our results demonstrate that the core STC\nconstructions can be formalized essentially verbatim in Istari, preserving the\nelegance of the on-paper arguments while ensuring machine-checked correctness.", "AI": {"tldr": "\u5728Istari\u8bc1\u660e\u52a9\u624b\u4e2d\u5b9e\u73b0\u4e86\u5408\u6210Tait\u53ef\u8ba1\u7b97\u6027(STC)\u7684\u5f62\u5f0f\u5316\uff0c\u5305\u62ec\u6a21\u6001\u3001\u6269\u5c55\u7c7b\u578b\u548c\u4e25\u683c\u80f6\u5408\u7c7b\u578b\uff0c\u5e76\u5e94\u7528\u4e8e\u4e24\u4e2a\u6848\u4f8b\u7814\u7a76\uff1a\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u7684\u5178\u8303\u6027\u6a21\u578b\u548c\u6210\u672c\u611f\u77e5\u903b\u8f91\u6846\u67b6\u7684Kripke\u5178\u8303\u6027\u6a21\u578b", "motivation": "\u8303\u7574\u80f6\u5408\u662f\u8bc1\u660e\u7c7b\u578b\u7406\u8bba\u5143\u5b9a\u7406\uff08\u5982\u5178\u8303\u6027\u548c\u5f52\u4e00\u5316\uff09\u7684\u6709\u529b\u6280\u672f\uff0cSTC\u901a\u8fc7\u5c06\u80f6\u5408\u8303\u7574\u5185\u5316\u5230\u5177\u6709\u76f8\u4f4d\u533a\u5206\u7684\u6a21\u6001\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u4e2d\uff0c\u4e3a\u590d\u6742\u80f6\u5408\u6a21\u578b\u63d0\u4f9b\u62bd\u8c61\u5904\u7406", "method": "\u5728Istari\u8bc1\u660e\u52a9\u624b\u4e2d\u5f00\u53d1\u53ef\u91cd\u7528\u7684\u5408\u6210\u76f8\u4f4d\u533a\u5206\u5e93\uff0c\u5305\u62ec\u6a21\u6001\u3001\u6269\u5c55\u7c7b\u578b\u548c\u4e25\u683c\u80f6\u5408\u7c7b\u578b\uff0c\u7136\u540e\u5e94\u7528\u4e8e\u4e24\u4e2a\u5177\u4f53\u6848\u4f8b\u7814\u7a76", "result": "\u6838\u5fc3STC\u6784\u9020\u53ef\u4ee5\u5728Istari\u4e2d\u51e0\u4e4e\u9010\u5b57\u5f62\u5f0f\u5316\uff0c\u4fdd\u6301\u4e86\u7eb8\u4e0a\u8bba\u8bc1\u7684\u4f18\u96c5\u6027\u540c\u65f6\u786e\u4fdd\u673a\u5668\u68c0\u67e5\u7684\u6b63\u786e\u6027", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u5c55\u793a\u4e86\u5728\u5177\u6709\u7b49\u5f0f\u53cd\u5c04\u7684\u6269\u5c55\u7c7b\u578b\u7406\u8bba\u4e2d\u6210\u529f\u5b9e\u73b0STC\u5f62\u5f0f\u5316\uff0c\u4e3a\u7c7b\u578b\u7406\u8bba\u5143\u5b9a\u7406\u7684\u673a\u5668\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u6709\u6548\u9014\u5f84"}}
{"id": "2509.12077", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2509.12077", "abs": "https://arxiv.org/abs/2509.12077", "authors": ["Yvo Ad Meeres", "Franti\u0161ek Mr\u00e1z"], "title": "A Unifying Approach to Picture Automata", "comment": "A full version of a paper for ITAT WAFNL 2025", "summary": "A directed acyclic graph (DAG) can represent a two-dimensional string or\npicture. We propose recognizing picture languages using DAG automata by\nencoding 2D inputs into DAGs. An encoding can be input-agnostic (based on input\nsize only) or input-driven (depending on symbols). Three distinct\ninput-agnostic encodings characterize classes of picture languages accepted by\nreturning finite automata, boustrophedon automata, and online tessellation\nautomata. Encoding a string as a simple directed path limits recognition to\nregular languages. However, input-driven encodings allow DAG automata to\nrecognize some context-sensitive string languages and outperform online\ntessellation automata in two dimensions.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4f7f\u7528DAG\u81ea\u52a8\u673a\u901a\u8fc7\u5c06\u4e8c\u7ef4\u8f93\u5165\u7f16\u7801\u4e3a\u6709\u5411\u65e0\u73af\u56fe\u6765\u8bc6\u522b\u56fe\u7247\u8bed\u8a00\uff0c\u5c55\u793a\u4e86\u8f93\u5165\u65e0\u5173\u548c\u8f93\u5165\u76f8\u5173\u7f16\u7801\u65b9\u6cd5\u5728\u4e0d\u540c\u81ea\u52a8\u673a\u6a21\u578b\u4e2d\u7684\u8868\u8fbe\u80fd\u529b", "motivation": "\u7814\u7a76\u5982\u4f55\u5229\u7528\u6709\u5411\u65e0\u73af\u56fe(DAG)\u6765\u8868\u793a\u4e8c\u7ef4\u5b57\u7b26\u4e32\u6216\u56fe\u7247\uff0c\u5e76\u63a2\u7d22\u901a\u8fc7\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\u4f7f\u7528DAG\u81ea\u52a8\u673a\u6765\u8bc6\u522b\u56fe\u7247\u8bed\u8a00\u7684\u80fd\u529b", "method": "\u63d0\u51fa\u4e24\u79cd\u7f16\u7801\u65b9\u6cd5\uff1a\u8f93\u5165\u65e0\u5173\u7f16\u7801\uff08\u4ec5\u57fa\u4e8e\u8f93\u5165\u5927\u5c0f\uff09\u548c\u8f93\u5165\u76f8\u5173\u7f16\u7801\uff08\u4f9d\u8d56\u4e8e\u7b26\u53f7\u5185\u5bb9\uff09\u3002\u4f7f\u7528DAG\u81ea\u52a8\u673a\u5904\u7406\u8fd9\u4e9b\u7f16\u7801\u540e\u7684\u56fe\u7ed3\u6784\u6765\u8bc6\u522b\u8bed\u8a00", "result": "\u4e09\u79cd\u4e0d\u540c\u7684\u8f93\u5165\u65e0\u5173\u7f16\u7801\u5206\u522b\u523b\u753b\u4e86\u8fd4\u56de\u6709\u9650\u81ea\u52a8\u673a\u3001\u725b\u8015\u5f0f\u81ea\u52a8\u673a\u548c\u5728\u7ebf\u9576\u5d4c\u81ea\u52a8\u673a\u63a5\u53d7\u7684\u56fe\u7247\u8bed\u8a00\u7c7b\u3002\u8f93\u5165\u76f8\u5173\u7f16\u7801\u4f7fDAG\u81ea\u52a8\u673a\u80fd\u591f\u8bc6\u522b\u67d0\u4e9b\u4e0a\u4e0b\u6587\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u8bed\u8a00\uff0c\u5e76\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\u4f18\u4e8e\u5728\u7ebf\u9576\u5d4c\u81ea\u52a8\u673a", "conclusion": "DAG\u81ea\u52a8\u673a\u901a\u8fc7\u9002\u5f53\u7684\u7f16\u7801\u7b56\u7565\u80fd\u591f\u6709\u6548\u8bc6\u522b\u56fe\u7247\u8bed\u8a00\uff0c\u8f93\u5165\u76f8\u5173\u7f16\u7801\u63d0\u4f9b\u4e86\u66f4\u5f3a\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u8d85\u8d8a\u4e86\u4f20\u7edf\u81ea\u52a8\u673a\u6a21\u578b\u5728\u4e8c\u7ef4\u8bed\u8a00\u8bc6\u522b\u65b9\u9762\u7684\u6027\u80fd"}}
{"id": "2509.10946", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.10946", "abs": "https://arxiv.org/abs/2509.10946", "authors": ["Roberto Morabito", "Guanghan Wu"], "title": "When the Code Autopilot Breaks: Why LLMs Falter in Embedded Machine Learning", "comment": "This paper has been accepted for publication in Computer (IEEE). Upon\n  publication, the copyright will be transferred to IEEE", "summary": "Large Language Models (LLMs) are increasingly used to automate software\ngeneration in embedded machine learning workflows, yet their outputs often fail\nsilently or behave unpredictably. This article presents an empirical\ninvestigation of failure modes in LLM-powered ML pipelines, based on an\nautopilot framework that orchestrates data preprocessing, model conversion, and\non-device inference code generation. We show how prompt format, model behavior,\nand structural assumptions influence both success rates and failure\ncharacteristics, often in ways that standard validation pipelines fail to\ndetect. Our analysis reveals a diverse set of error-prone behaviors, including\nformat-induced misinterpretations and runtime-disruptive code that compiles but\nbreaks downstream. We derive a taxonomy of failure categories and analyze\nerrors across multiple LLMs, highlighting common root causes and systemic\nfragilities. Though grounded in specific devices, our study reveals broader\nchallenges in LLM-based code generation. We conclude by discussing directions\nfor improving reliability and traceability in LLM-powered embedded ML systems.", "AI": {"tldr": "\u5bf9LLM\u9a71\u52a8\u7684\u5d4c\u5165\u5f0f\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u6d41\u4e2d\u4ee3\u7801\u751f\u6210\u5931\u8d25\u6a21\u5f0f\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u63ed\u793a\u4e86\u63d0\u793a\u683c\u5f0f\u3001\u6a21\u578b\u884c\u4e3a\u548c\u7ed3\u6784\u5047\u8bbe\u5982\u4f55\u5f71\u54cd\u6210\u529f\u7387\u548c\u5931\u8d25\u7279\u5f81\uff0c\u63d0\u51fa\u4e86\u5931\u8d25\u5206\u7c7b\u6cd5\u5e76\u5206\u6790\u4e86\u591a\u4e2aLLM\u7684\u5e38\u89c1\u9519\u8bef\u6839\u6e90\u3002", "motivation": "\u968f\u7740\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728\u5d4c\u5165\u5f0f\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u6d41\u4e2d\u81ea\u52a8\u5316\u8f6f\u4ef6\u751f\u6210\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5176\u8f93\u51fa\u7ecf\u5e38\u51fa\u73b0\u9759\u9ed8\u5931\u8d25\u6216\u4e0d\u53ef\u9884\u6d4b\u884c\u4e3a\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u5730\u7814\u7a76\u8fd9\u4e9b\u5931\u8d25\u6a21\u5f0f\u4ee5\u63d0\u9ad8\u53ef\u9760\u6027\u3002", "method": "\u57fa\u4e8e\u81ea\u52a8\u9a7e\u9a76\u6846\u67b6\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u8be5\u6846\u67b6\u534f\u8c03\u6570\u636e\u9884\u5904\u7406\u3001\u6a21\u578b\u8f6c\u6362\u548c\u7247\u4e0a\u63a8\u7406\u4ee3\u7801\u751f\u6210\uff0c\u5206\u6790\u63d0\u793a\u683c\u5f0f\u3001\u6a21\u578b\u884c\u4e3a\u548c\u7ed3\u6784\u5047\u8bbe\u5bf9LLM\u8f93\u51fa\u7684\u5f71\u54cd\u3002", "result": "\u7814\u7a76\u63ed\u793a\u4e86\u591a\u79cd\u6613\u51fa\u9519\u884c\u4e3a\uff0c\u5305\u62ec\u683c\u5f0f\u5f15\u8d77\u7684\u8bef\u89e3\u548c\u7f16\u8bd1\u901a\u8fc7\u4f46\u7834\u574f\u4e0b\u6e38\u8fd0\u884c\u7684\u4ee3\u7801\uff0c\u5efa\u7acb\u4e86\u5931\u8d25\u5206\u7c7b\u6cd5\u5e76\u8bc6\u522b\u4e86\u8de8\u591a\u4e2aLLM\u7684\u5e38\u89c1\u7cfb\u7edf\u6027\u8106\u5f31\u6027\u3002", "conclusion": "\u5c3d\u7ba1\u57fa\u4e8e\u7279\u5b9a\u8bbe\u5907\uff0c\u4f46\u7814\u7a76\u63ed\u793a\u4e86LLM\u4ee3\u7801\u751f\u6210\u9762\u4e34\u7684\u5e7f\u6cdb\u6311\u6218\uff0c\u63d0\u51fa\u4e86\u6539\u8fdbLLM\u9a71\u52a8\u5d4c\u5165\u5f0fML\u7cfb\u7edf\u53ef\u9760\u6027\u548c\u53ef\u8ffd\u6eaf\u6027\u7684\u65b9\u5411\u3002"}}
{"id": "2410.04581", "categories": ["cs.PL", "cs.DS", "cs.LO", "cs.SE"], "pdf": "https://arxiv.org/pdf/2410.04581", "abs": "https://arxiv.org/abs/2410.04581", "authors": ["Lee Zheng Han", "Umang Mathur"], "title": "Efficient Decrease-and-Conquer Linearizability Monitoring", "comment": null, "summary": "Linearizability has become the de facto correctness specification for\nimplementations of concurrent data structures. While formally verifying such\nimplementations remains challenging, linearizability monitoring has emerged as\na promising first step to rule out early problems in the development of custom\nimplementations, and serves as a key component in approaches that stress test\nsuch implementations. In this work, we investigate linearizability monitoring\n-- check if an execution history of an implementation is linearizable. While\nthis problem is intractable in general, a systematic understanding of when it\nbecomes tractable has remained elusive. We revisit this problem and first\npresent a unified `decrease-and-conquer' algorithmic framework for\nlinearizability monitoring. At its heart, this framework asks to identify\nspecial linearizability-preserving values in a given history -- values whose\npresence yields an equilinearizable sub-history when removed, and whose absence\nindicates non-linearizability. We prove that a polynomial time algorithm for\nthe problem of identifying linearizability-preserving values, yields a\npolynomial time algorithm for linearizability monitoring, while conversely,\nintractability of this problem implies intractability of the monitoring\nproblem. We demonstrate our framework's effectiveness by instantiating it for\nseveral popular data types -- sets, stacks, queues and priority queues --\nderiving polynomial time algorithms for each, with the unambiguity restriction,\nwhere each insertion to the underlying data structure adds a distinct value. We\noptimize these algorithms to achieve the optimal log-linear time complexity by\namortizing the cost of solving sub-problems through efficient data structures.\nOur implementation and evaluation on publicly available implementations show\nthat our approach scales to large histories and outperforms existing tools.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\"decrease-and-conquer\"\u7b97\u6cd5\u6846\u67b6\u7528\u4e8e\u7ebf\u6027\u5316\u76d1\u63a7\uff0c\u901a\u8fc7\u8bc6\u522b\u7ebf\u6027\u5316\u4fdd\u6301\u503c\u6765\u9ad8\u6548\u68c0\u6d4b\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u7684\u6b63\u786e\u6027", "motivation": "\u7ebf\u6027\u5316\u5df2\u6210\u4e3a\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u7684\u6b63\u786e\u6027\u6807\u51c6\uff0c\u4f46\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4ecd\u7136\u56f0\u96be\u3002\u7ebf\u6027\u5316\u76d1\u63a7\u4f5c\u4e3a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u91cd\u8981\u7b2c\u4e00\u6b65\uff0c\u80fd\u591f\u65e9\u671f\u53d1\u73b0\u95ee\u9898\uff0c\u4f46\u76ee\u524d\u5bf9\u4f55\u65f6\u8be5\u95ee\u9898\u53ef\u9ad8\u6548\u89e3\u51b3\u7f3a\u4e4f\u7cfb\u7edf\u7406\u89e3", "method": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\"decrease-and-conquer\"\u7b97\u6cd5\u6846\u67b6\uff0c\u6838\u5fc3\u662f\u8bc6\u522b\u7ebf\u6027\u5316\u4fdd\u6301\u503c\u2014\u2014\u8fd9\u4e9b\u503c\u7684\u5b58\u5728\u4f7f\u5f97\u79fb\u9664\u540e\u4ea7\u751f\u7b49\u4ef7\u7ebf\u6027\u5316\u7684\u5b50\u5386\u53f2\uff0c\u5176\u7f3a\u5931\u8868\u660e\u975e\u7ebf\u6027\u5316\u3002\u5c06\u8be5\u6846\u67b6\u5b9e\u4f8b\u5316\u5230\u96c6\u5408\u3001\u6808\u3001\u961f\u5217\u548c\u4f18\u5148\u961f\u5217\u7b49\u5e38\u7528\u6570\u636e\u7c7b\u578b", "result": "\u4e3a\u591a\u79cd\u6570\u636e\u7c7b\u578b\u5f00\u53d1\u4e86\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff0c\u5728\u65e0\u6b67\u4e49\u9650\u5236\u4e0b\uff08\u6bcf\u4e2a\u63d2\u5165\u64cd\u4f5c\u6dfb\u52a0\u4e0d\u540c\u503c\uff09\u5b9e\u73b0\u4e86\u6700\u4f18\u7684\u5bf9\u6570\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5b9e\u9a8c\u8868\u660e\u8be5\u65b9\u6cd5\u53ef\u6269\u5c55\u5230\u5927\u578b\u5386\u53f2\u8bb0\u5f55\u5e76\u4f18\u4e8e\u73b0\u6709\u5de5\u5177", "conclusion": "\u8be5\u6846\u67b6\u4e3a\u7ebf\u6027\u5316\u76d1\u63a7\u63d0\u4f9b\u4e86\u7cfb\u7edf\u5316\u7684\u7406\u8bba\u57fa\u7840\uff0c\u8bc1\u660e\u4e86\u8bc6\u522b\u7ebf\u6027\u5316\u4fdd\u6301\u503c\u95ee\u9898\u7684\u590d\u6742\u5ea6\u4e0e\u76d1\u63a7\u95ee\u9898\u590d\u6742\u5ea6\u7b49\u4ef7\uff0c\u5e76\u4e3a\u591a\u79cd\u6570\u636e\u7ed3\u6784\u63d0\u4f9b\u4e86\u9ad8\u6548\u76d1\u63a7\u7b97\u6cd5"}}
{"id": "2509.11901", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2509.11901", "abs": "https://arxiv.org/abs/2509.11901", "authors": ["Kentaro Kobayashi", "Yukiyoshi Kameyama"], "title": "Expressive Power of One-Shot Control Operators and Coroutines", "comment": "Full version of the paper accepted at APLAS 2025. Includes appendices\n  with proofs. 59 pages", "summary": "Control operators, such as exceptions and effect handlers, provide a means of\nrepresenting computational effects in programs abstractly and modularly. While\nmost theoretical studies have focused on multi-shot control operators, one-shot\ncontrol operators -- which restrict the use of captured continuations to at\nmost once -- are gaining attention for their balance between expressiveness and\nefficiency. This study aims to fill the gap. We present a mathematically\nrigorous comparison of the expressive power among one-shot control operators,\nincluding effect handlers, delimited continuations, and even asymmetric\ncoroutines. Following previous studies on multi-shot control operators, we\nadopt Felleisen's macro-expressiveness as our measure of expressiveness. We\nverify the folklore that one-shot effect handlers and one-shot\ndelimited-control operators can be macro-expressed by asymmetric coroutines,\nbut not vice versa. We explain why a previous informal argument fails, and how\nto revise it to make a valid macro-translation.", "AI": {"tldr": "\u672c\u6587\u5bf9\u5355\u6b21\u63a7\u5236\u64cd\u4f5c\u7b26\uff08\u5305\u62ec\u5f02\u5e38\u5904\u7406\u3001\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u3001\u5206\u9694\u5ef6\u7eed\u548c\u4e0d\u5bf9\u79f0\u534f\u7a0b\uff09\u7684\u8868\u8fbe\u80fd\u529b\u8fdb\u884c\u4e86\u4e25\u683c\u7684\u6570\u5b66\u6bd4\u8f83\uff0c\u586b\u8865\u4e86\u5355\u6b21\u63a7\u5236\u64cd\u4f5c\u7b26\u7814\u7a76\u7684\u7a7a\u767d\u3002", "motivation": "\u867d\u7136\u5927\u591a\u6570\u7406\u8bba\u7814\u7a76\u5173\u6ce8\u591a\u6b21\u63a7\u5236\u64cd\u4f5c\u7b26\uff0c\u4f46\u5355\u6b21\u63a7\u5236\u64cd\u4f5c\u7b26\u5728\u8868\u8fbe\u80fd\u529b\u548c\u6548\u7387\u4e4b\u95f4\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u5e73\u8861\uff0c\u9700\u8981\u5bf9\u5176\u8868\u8fbe\u80fd\u529b\u8fdb\u884c\u7cfb\u7edf\u7814\u7a76\u3002", "method": "\u91c7\u7528Felleisen\u7684\u5b8f\u8868\u8fbe\u80fd\u529b\u4f5c\u4e3a\u8861\u91cf\u6807\u51c6\uff0c\u5bf9\u5355\u6b21\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u3001\u5355\u6b21\u5206\u9694\u63a7\u5236\u64cd\u4f5c\u7b26\u548c\u4e0d\u5bf9\u79f0\u534f\u7a0b\u8fdb\u884c\u6570\u5b66\u4e25\u8c28\u7684\u6bd4\u8f83\u5206\u6790\u3002", "result": "\u9a8c\u8bc1\u4e86\u5355\u6b21\u6548\u679c\u5904\u7406\u7a0b\u5e8f\u548c\u5355\u6b21\u5206\u9694\u63a7\u5236\u64cd\u4f5c\u7b26\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5bf9\u79f0\u534f\u7a0b\u8fdb\u884c\u5b8f\u8868\u8fbe\uff0c\u4f46\u53cd\u4e4b\u4e0d\u6210\u7acb\u3002\u4fee\u6b63\u4e86\u5148\u524d\u975e\u6b63\u5f0f\u8bba\u8bc1\u7684\u7f3a\u9677\u5e76\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u5b8f\u8f6c\u6362\u65b9\u6cd5\u3002", "conclusion": "\u5355\u6b21\u63a7\u5236\u64cd\u4f5c\u7b26\u4e4b\u95f4\u5b58\u5728\u660e\u786e\u7684\u8868\u8fbe\u80fd\u529b\u5c42\u6b21\u5173\u7cfb\uff0c\u4e0d\u5bf9\u79f0\u534f\u7a0b\u5728\u8868\u8fbe\u80fd\u529b\u4e0a\u66f4\u5f3a\uff0c\u4e3a\u63a7\u5236\u64cd\u4f5c\u7b26\u7684\u7406\u8bba\u7814\u7a76\u63d0\u4f9b\u4e86\u91cd\u8981\u8d21\u732e\u3002"}}
{"id": "2504.10813", "categories": ["cs.PL", "cs.FL", "cs.LO", "cs.SE"], "pdf": "https://arxiv.org/pdf/2504.10813", "abs": "https://arxiv.org/abs/2504.10813", "authors": ["Zhendong Ang", "Azadeh Farzan", "Umang Mathur"], "title": "Enhanced Data Race Prediction Through Modular Reasoning", "comment": null, "summary": "There are two orthogonal methodologies for efficient prediction of data races\nfrom concurrent program runs: commutativity and prefix reasoning. There are\nseveral instances of each methodology in the literature, with the goal of\npredicting data races using a streaming algorithm where the required memory\ndoes not grow proportional to the length of the observed run, but these\ninstances were mostly created in an ad hoc manner, without much attention to\ntheir unifying underlying principles. In this paper, we identify and formalize\nthese principles for each category with the ultimate goal of paving the way for\ncombining them into a new algorithm which shares their efficiency\ncharacteristics but offers strictly more prediction power. In particular, we\nformalize three distinct classes of races predictable using commutativity\nreasoning, and compare them. We identify three different styles of prefix\nreasoning, and prove that they predict the same class of races, which provably\ncontains all races predictable by any commutativity reasoning technique.\n  Our key contribution is combining prefix reasoning and commutativity\nreasoning in a modular way to introduce a new class of races, granular prefix\nraces, that are predictable in constant-space and linear time, in a streaming\nfashion. This class of races includes all races predictable using commutativity\nand prefix reasoning techniques. We present an improved constant-space\nalgorithm for prefix reasoning alone based on the idea of antichains (from\nlanguage theory). This improved algorithm is the stepping stone that is\nrequired to devise an efficient algorithm for prediction of granular prefix\nraces. We present experimental results to demonstrate the expressive power and\nperformance of our new algorithm.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u5316\u5206\u6790\u4e86\u5e76\u53d1\u7a0b\u5e8f\u6570\u636e\u7ade\u4e89\u9884\u6d4b\u7684\u4e24\u79cd\u6b63\u4ea4\u65b9\u6cd5\uff08\u4ea4\u6362\u6027\u548c\u524d\u7f00\u63a8\u7406\uff09\uff0c\u63d0\u51fa\u4e86\u65b0\u7684\u7c92\u5ea6\u524d\u7f00\u7ade\u4e89\u7c7b\u522b\uff0c\u5e76\u8bbe\u8ba1\u4e86\u9ad8\u6548\u7684\u5e38\u6570\u7a7a\u95f4\u6d41\u5f0f\u9884\u6d4b\u7b97\u6cd5", "motivation": "\u73b0\u6709\u6570\u636e\u7ade\u4e89\u9884\u6d4b\u65b9\u6cd5\uff08\u4ea4\u6362\u6027\u63a8\u7406\u548c\u524d\u7f00\u63a8\u7406\uff09\u5927\u591a\u662f\u4e34\u65f6\u8bbe\u8ba1\u7684\uff0c\u7f3a\u4e4f\u7edf\u4e00\u7684\u7406\u8bba\u57fa\u7840\uff0c\u4e14\u5404\u81ea\u5b58\u5728\u5c40\u9650\u6027\u3002\u672c\u6587\u65e8\u5728\u5f62\u5f0f\u5316\u8fd9\u4e9b\u65b9\u6cd5\u7684\u539f\u7406\uff0c\u5e76\u63a2\u7d22\u5c06\u5b83\u4eec\u7ed3\u5408\u4ee5\u83b7\u5f97\u66f4\u5f3a\u9884\u6d4b\u80fd\u529b\u7684\u65b9\u6cd5", "method": "1) \u5f62\u5f0f\u5316\u4e86\u4ea4\u6362\u6027\u63a8\u7406\u53ef\u9884\u6d4b\u7684\u4e09\u79cd\u7ade\u4e89\u7c7b\u522b\u5e76\u8fdb\u884c\u6bd4\u8f83\uff1b2) \u8bc6\u522b\u4e86\u4e09\u79cd\u524d\u7f00\u63a8\u7406\u98ce\u683c\u5e76\u8bc1\u660e\u5b83\u4eec\u9884\u6d4b\u76f8\u540c\u7684\u7ade\u4e89\u7c7b\u522b\uff1b3) \u63d0\u51fa\u4e86\u7ed3\u5408\u524d\u7f00\u63a8\u7406\u548c\u4ea4\u6362\u6027\u63a8\u7406\u7684\u6a21\u5757\u5316\u65b9\u6cd5\uff0c\u5f15\u5165\u7c92\u5ea6\u524d\u7f00\u7ade\u4e89\u65b0\u7c7b\u522b\uff1b4) \u57fa\u4e8e\u53cd\u94fe\u601d\u60f3\u6539\u8fdb\u4e86\u524d\u7f00\u63a8\u7406\u7684\u5e38\u6570\u7a7a\u95f4\u7b97\u6cd5", "result": "\u8bc1\u660e\u4e86\u524d\u7f00\u63a8\u7406\u53ef\u9884\u6d4b\u7684\u7ade\u4e89\u7c7b\u522b\u5305\u542b\u6240\u6709\u4ea4\u6362\u6027\u63a8\u7406\u53ef\u9884\u6d4b\u7684\u7ade\u4e89\u3002\u63d0\u51fa\u7684\u7c92\u5ea6\u524d\u7f00\u7ade\u4e89\u7c7b\u522b\u53ef\u5728\u5e38\u6570\u7a7a\u95f4\u548c\u7ebf\u6027\u65f6\u95f4\u5185\u4ee5\u6d41\u5f0f\u65b9\u5f0f\u9884\u6d4b\uff0c\u4e14\u5305\u542b\u6240\u6709\u4ea4\u6362\u6027\u548c\u524d\u7f00\u63a8\u7406\u6280\u672f\u53ef\u9884\u6d4b\u7684\u7ade\u4e89", "conclusion": "\u901a\u8fc7\u7cfb\u7edf\u5316\u5206\u6790\u548c\u7ed3\u5408\u4e24\u79cd\u6b63\u4ea4\u65b9\u6cd5\uff0c\u672c\u6587\u63d0\u51fa\u4e86\u66f4\u5f3a\u5927\u7684\u6570\u636e\u7ade\u4e89\u9884\u6d4b\u6846\u67b6\uff0c\u4e3a\u9ad8\u6548\u5e76\u53d1\u7a0b\u5e8f\u5206\u6790\u63d0\u4f9b\u4e86\u65b0\u7684\u7406\u8bba\u57fa\u7840\u548c\u5b9e\u7528\u7b97\u6cd5"}}
{"id": "2509.11000", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.11000", "abs": "https://arxiv.org/abs/2509.11000", "authors": ["Omid Gheibi", "Christian K\u00e4stner", "Pooyan Jamshidi"], "title": "Hardness, Structural Knowledge, and Opportunity: An Analytical Framework for Modular Performance Modeling", "comment": null, "summary": "Performance-influence models are beneficial for understanding how\nconfigurations affect system performance, but their creation is challenging due\nto the exponential growth of configuration spaces. While gray-box approaches\nleverage selective \"structural knowledge\" (like the module execution graph of\nthe system) to improve modeling, the relationship between this knowledge, a\nsystem's characteristics (we call them \"structural aspects\"), and potential\nmodel improvements is not well understood. This paper addresses this gap by\nformally investigating how variations in structural aspects (e.g., the number\nof modules and options per module) and the level of structural knowledge impact\nthe creation of \"opportunities\" for improved \"modular performance modeling\". We\nintroduce and quantify the concept of modeling \"hardness\", defined as the\ninherent difficulty of performance modeling. Through controlled experiments\nwith synthetic system models, we establish an \"analytical matrix\" to measure\nthese concepts. Our findings show that modeling hardness is primarily driven by\nthe number of modules and configuration options per module. More importantly,\nwe demonstrate that both higher levels of structural knowledge and increased\nmodeling hardness significantly enhance the opportunity for improvement. The\nimpact of these factors varies by performance metric; for ranking accuracy\n(e.g., in debugging task), structural knowledge is more dominant, while for\nprediction accuracy (e.g., in resource management task), hardness plays a\nstronger role. These results provide actionable insights for system designers,\nguiding them to strategically allocate time and select appropriate modeling\napproaches based on a system's characteristics and a given task's objectives.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u7cfb\u7edf\u7ed3\u6784\u7279\u5f81\u548c\u7ed3\u6784\u77e5\u8bc6\u6c34\u5e73\u5982\u4f55\u5f71\u54cd\u6027\u80fd\u5efa\u6a21\u7684\u96be\u5ea6\u548c\u6539\u8fdb\u673a\u4f1a\uff0c\u53d1\u73b0\u6a21\u5757\u6570\u91cf\u548c\u914d\u7f6e\u9009\u9879\u662f\u4e3b\u8981\u5f71\u54cd\u56e0\u7d20\uff0c\u5e76\u4e3a\u7cfb\u7edf\u8bbe\u8ba1\u8005\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc", "motivation": "\u6027\u80fd\u5f71\u54cd\u6a21\u578b\u6709\u52a9\u4e8e\u7406\u89e3\u914d\u7f6e\u5982\u4f55\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\uff0c\u4f46\u7531\u4e8e\u914d\u7f6e\u7a7a\u95f4\u5448\u6307\u6570\u7ea7\u589e\u957f\uff0c\u521b\u5efa\u8fd9\u4e9b\u6a21\u578b\u5177\u6709\u6311\u6218\u6027\u3002\u867d\u7136\u7070\u76d2\u65b9\u6cd5\u5229\u7528\u9009\u62e9\u6027\u7ed3\u6784\u77e5\u8bc6\u6765\u6539\u8fdb\u5efa\u6a21\uff0c\u4f46\u8fd9\u79cd\u77e5\u8bc6\u4e0e\u7cfb\u7edf\u7279\u5f81\u53ca\u6a21\u578b\u6539\u8fdb\u6f5c\u529b\u4e4b\u95f4\u7684\u5173\u7cfb\u5c1a\u672a\u5f97\u5230\u5145\u5206\u7406\u89e3", "method": "\u901a\u8fc7\u63a7\u5236\u5b9e\u9a8c\u4f7f\u7528\u5408\u6210\u7cfb\u7edf\u6a21\u578b\uff0c\u5f15\u5165\u5e76\u91cf\u5316\u5efa\u6a21\"\u786c\u5ea6\"\u6982\u5ff5\uff0c\u5efa\u7acb\u5206\u6790\u77e9\u9635\u6765\u6d4b\u91cf\u7ed3\u6784\u7279\u5f81\u53d8\u5316\u548c\u7ed3\u6784\u77e5\u8bc6\u6c34\u5e73\u5bf9\u6a21\u5757\u5316\u6027\u80fd\u5efa\u6a21\u673a\u4f1a\u7684\u5f71\u54cd", "result": "\u7814\u7a76\u53d1\u73b0\u5efa\u6a21\u786c\u5ea6\u4e3b\u8981\u7531\u6a21\u5757\u6570\u91cf\u548c\u6bcf\u4e2a\u6a21\u5757\u7684\u914d\u7f6e\u9009\u9879\u9a71\u52a8\u3002\u66f4\u9ad8\u7684\u7ed3\u6784\u77e5\u8bc6\u6c34\u5e73\u548c\u589e\u52a0\u7684\u5efa\u6a21\u786c\u5ea6\u90fd\u80fd\u663e\u8457\u63d0\u5347\u6539\u8fdb\u673a\u4f1a\uff0c\u4f46\u5f71\u54cd\u56e0\u6027\u80fd\u6307\u6807\u800c\u5f02\uff1a\u5bf9\u4e8e\u6392\u540d\u51c6\u786e\u6027\uff0c\u7ed3\u6784\u77e5\u8bc6\u66f4\u5360\u4e3b\u5bfc\uff1b\u5bf9\u4e8e\u9884\u6d4b\u51c6\u786e\u6027\uff0c\u786c\u5ea6\u8d77\u66f4\u5f3a\u4f5c\u7528", "conclusion": "\u7814\u7a76\u7ed3\u679c\u4e3a\u7cfb\u7edf\u8bbe\u8ba1\u8005\u63d0\u4f9b\u4e86\u53ef\u64cd\u4f5c\u7684\u89c1\u89e3\uff0c\u6307\u5bfc\u4ed6\u4eec\u6839\u636e\u7cfb\u7edf\u7279\u5f81\u548c\u4efb\u52a1\u76ee\u6807\u6218\u7565\u6027\u5730\u5206\u914d\u65f6\u95f4\u5e76\u9009\u62e9\u5408\u9002\u7684\u5efa\u6a21\u65b9\u6cd5"}}
{"id": "2201.06325", "categories": ["cs.LO", "cs.DC", "cs.DS", "cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2201.06325", "abs": "https://arxiv.org/abs/2201.06325", "authors": ["Umang Mathur", "Andreas Pavlogiannis", "H\u00fcnkar Can Tun\u00e7", "Mahesh Viswanathan"], "title": "A Tree Clock Data Structure for Causal Orderings in Concurrent Executions", "comment": null, "summary": "Dynamic techniques are a scalable and effective way to analyze concurrent\nprograms. Instead of analyzing all behaviors of a program, these techniques\ndetect errors by focusing on a single program execution. Often a crucial step\nin these techniques is to define a causal ordering between events in the\nexecution, which is then computed using vector clocks, a simple data structure\nthat stores logical times of threads. The two basic operations of vector\nclocks, namely join and copy, require $\\Theta(k)$ time, where $k$ is the number\nof threads. Thus they are a computational bottleneck when $k$ is large.\n  In this work, we introduce tree clocks, a new data structure that replaces\nvector clocks for computing causal orderings in program executions. Joining and\ncopying tree clocks takes time that is roughly proportional to the number of\nentries being modified, and hence the two operations do not suffer the a-priori\n$\\Theta(k)$ cost per application. We show that when used to compute the classic\nhappens-before (HB) partial order, tree clocks are optimal, in the sense that\nno other data structure can lead to smaller asymptotic running time. Moreover,\nwe demonstrate that tree clocks can be used to compute other partial orders,\nsuch as schedulable-happens-before (SHB) and the standard Mazurkiewicz (MAZ)\npartial order, and thus are a versatile data structure. Our experiments show\nthat just by replacing vector clocks with tree clocks, the computation becomes\nfrom $2.02 \\times$ faster (MAZ) to $2.66 \\times$ (SHB) and $2.97 \\times$ (HB)\non average per benchmark. These results illustrate that tree clocks have the\npotential to become a standard data structure with wide applications in\nconcurrent analyses.", "AI": {"tldr": "\u6811\u949f\u662f\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u66ff\u4ee3\u5411\u91cf\u949f\u6765\u8ba1\u7b97\u5e76\u53d1\u7a0b\u5e8f\u6267\u884c\u4e2d\u7684\u56e0\u679c\u6392\u5e8f\uff0c\u5e76\u5728\u6027\u80fd\u4e0a\u5b9e\u73b0\u4e86\u663e\u8457\u63d0\u5347", "motivation": "\u5411\u91cf\u949f\u7684\u57fa\u672c\u64cd\u4f5c\uff08join\u548ccopy\uff09\u9700\u8981\u03b8(k)\u65f6\u95f4\uff0ck\u4e3a\u7ebf\u7a0b\u6570\uff0c\u5f53k\u8f83\u5927\u65f6\u6210\u4e3a\u8ba1\u7b97\u74f6\u9888", "method": "\u63d0\u51fa\u6811\u949f\u6570\u636e\u7ed3\u6784\uff0cjoin\u548ccopy\u64cd\u4f5c\u7684\u65f6\u95f4\u5927\u7ea6\u4e0e\u4fee\u6539\u7684\u6761\u76ee\u6570\u6210\u6b63\u6bd4\uff0c\u907f\u514d\u4e86\u03b8(k)\u7684\u6bcf\u6b21\u64cd\u4f5c\u6210\u672c", "result": "\u5728\u8ba1\u7b97happens-before\u7b49\u504f\u5e8f\u5173\u7cfb\u65f6\uff0c\u6811\u949f\u8fbe\u5230\u4e86\u6700\u4f18\u8fd0\u884c\u65f6\u95f4\uff0c\u5e73\u5747\u6027\u80fd\u63d0\u53472.02\u500d\uff08MAZ\uff09\u52302.97\u500d\uff08HB\uff09", "conclusion": "\u6811\u949f\u5177\u6709\u6210\u4e3a\u5e76\u53d1\u5206\u6790\u9886\u57df\u6807\u51c6\u6570\u636e\u7ed3\u6784\u7684\u6f5c\u529b\uff0c\u80fd\u591f\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u504f\u5e8f\u5173\u7cfb\u7684\u8ba1\u7b97"}}
{"id": "2509.11065", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.11065", "abs": "https://arxiv.org/abs/2509.11065", "authors": ["Yuan Si", "Daming Li", "Hanyuan Shi", "Jialu Zhang"], "title": "ViScratch: Using Large Language Models and Gameplay Videos for Automated Feedback in Scratch", "comment": null, "summary": "Block-based programming environments such as Scratch are increasingly popular\nin programming education, in particular for young learners. While the use of\nblocks helps prevent syntax errors, semantic bugs remain common and difficult\nto debug. Existing tools for Scratch debugging rely heavily on predefined rules\nor user manual inputs, and crucially, they ignore the platform's inherently\nvisual nature.\n  We introduce ViScratch, the first multimodal feedback generation system for\nScratch that leverages both the project's block code and its generated gameplay\nvideo to diagnose and repair bugs. ViScratch uses a two-stage pipeline: a\nvision-language model first aligns visual symptoms with code structure to\nidentify a single critical issue, then proposes minimal, abstract syntax tree\nlevel repairs that are verified via execution in the Scratch virtual machine.\n  We evaluate ViScratch on a set of real-world Scratch projects against\nstate-of-the-art LLM-based tools and human testers. Results show that gameplay\nvideo is a crucial debugging signal: ViScratch substantially outperforms prior\ntools in both bug identification and repair quality, even without access to\nproject descriptions or goals. This work demonstrates that video can serve as a\nfirst-class specification in visual programming environments, opening new\ndirections for LLM-based debugging beyond symbolic code alone.", "AI": {"tldr": "ViScratch\u662f\u4e00\u4e2a\u7528\u4e8eScratch\u7f16\u7a0b\u73af\u5883\u7684\u591a\u6a21\u6001\u8c03\u8bd5\u7cfb\u7edf\uff0c\u901a\u8fc7\u7ed3\u5408\u4ee3\u7801\u5757\u548c\u6e38\u620f\u89c6\u9891\u6765\u8bca\u65ad\u548c\u4fee\u590dbug\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u7684\u57fa\u4e8eLLM\u7684\u5de5\u5177\u3002", "motivation": "\u73b0\u6709\u7684Scratch\u8c03\u8bd5\u5de5\u5177\u4e3b\u8981\u4f9d\u8d56\u9884\u5b9a\u4e49\u89c4\u5219\u6216\u7528\u6237\u624b\u52a8\u8f93\u5165\uff0c\u5ffd\u7565\u4e86\u5e73\u53f0\u7684\u89c6\u89c9\u7279\u6027\uff0c\u65e0\u6cd5\u6709\u6548\u5904\u7406\u8bed\u4e49\u9519\u8bef\u3002", "method": "\u91c7\u7528\u4e24\u9636\u6bb5\u6d41\u6c34\u7ebf\uff1a\u9996\u5148\u4f7f\u7528\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\u5c06\u89c6\u89c9\u75c7\u72b6\u4e0e\u4ee3\u7801\u7ed3\u6784\u5bf9\u9f50\u4ee5\u8bc6\u522b\u5173\u952e\u95ee\u9898\uff0c\u7136\u540e\u63d0\u51fa\u6700\u5c0f\u5316\u7684AST\u7ea7\u522b\u4fee\u590d\u5e76\u5728Scratch\u865a\u62df\u673a\u4e2d\u9a8c\u8bc1\u3002", "result": "ViScratch\u5728\u771f\u5b9eScratch\u9879\u76ee\u4e0a\u663e\u8457\u4f18\u4e8e\u6700\u5148\u8fdb\u7684\u57fa\u4e8eLLM\u7684\u5de5\u5177\u548c\u4eba\u5de5\u6d4b\u8bd5\u8005\uff0c\u6e38\u620f\u89c6\u9891\u6210\u4e3a\u5173\u952e\u7684\u8c03\u8bd5\u4fe1\u53f7\u3002", "conclusion": "\u89c6\u9891\u53ef\u4ee5\u4f5c\u4e3a\u53ef\u89c6\u5316\u7f16\u7a0b\u73af\u5883\u4e2d\u7684\u4e00\u7b49\u89c4\u8303\uff0c\u4e3a\u57fa\u4e8eLLM\u7684\u8c03\u8bd5\u5f00\u8f9f\u4e86\u8d85\u8d8a\u7eaf\u7b26\u53f7\u4ee3\u7801\u7684\u65b0\u65b9\u5411\u3002"}}
{"id": "2509.11132", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11132", "abs": "https://arxiv.org/abs/2509.11132", "authors": ["Xiaoyu Zhang", "Weipeng Jiang", "Juan Zhai", "Shiqing Ma", "Qingshuang Bao", "Chenhao Lin", "Chao Shen", "Tianlin Li", "Yang Liu"], "title": "Rethinking Technology Stack Selection with AI Coding Proficiency", "comment": "23 pages", "summary": "Large language models (LLMs) are now an integral part of software development\nworkflows and are reshaping the whole process. Traditional technology stack\nselection has not caught up. Most of the existing selection methods focus\nsolely on the inherent attributes of the technology, overlooking whether the\nLLM can effectively leverage the chosen technology. For example, when\ngenerating code snippets using popular libraries like Selenium (one of the most\nwidely used test automation tools with over 33k GitHub stars), existing LLMs\nfrequently generate low-quality code snippets (e.g., using deprecated APIs and\nmethods, or containing syntax errors). As such, teams using LLM assistants risk\nchoosing technologies that cannot be used effectively by LLMs, yielding high\ndebugging effort and mounting technical debt. We foresee a practical question\nin the LLM era, is a technology ready for AI-assisted development? In this\npaper, we first propose the concept, AI coding proficiency, the degree to which\nLLMs can utilize a given technology to generate high-quality code snippets. We\nconduct the first comprehensive empirical study examining AI proficiency across\n170 third-party libraries and 61 task scenarios, evaluating six widely used\nLLMs. Our findings reveal that libraries with similar functionalities can\nexhibit up to 84% differences in the quality score of LLM-generated code, while\ndifferent models also exhibit quality gaps among their generation results using\nthe same library. These gaps translate into real engineering costs and can\nsteer developer choices toward a narrow set of libraries with high AI coding\nproficiency, threatening technological diversity in the ecosystem. We call on\nthe community to integrate AI proficiency assessments into technology selection\nframeworks and develop mitigation strategies, preserving competitive balance in\nAI-driven development.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86AI\u7f16\u7a0b\u719f\u7ec3\u5ea6\u7684\u6982\u5ff5\uff0c\u8bc4\u4f30LLMs\u4f7f\u7528\u4e0d\u540c\u6280\u672f\u5e93\u751f\u6210\u9ad8\u8d28\u91cf\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u53d1\u73b0\u4e0d\u540c\u5e93\u4e4b\u95f4\u7684AI\u719f\u7ec3\u5ea6\u5dee\u5f02\u9ad8\u8fbe84%\uff0c\u8fd9\u4f1a\u5f71\u54cd\u6280\u672f\u9009\u62e9\u548c\u751f\u6001\u7cfb\u7edf\u591a\u6837\u6027\u3002", "motivation": "\u4f20\u7edf\u6280\u672f\u6808\u9009\u62e9\u65b9\u6cd5\u53ea\u5173\u6ce8\u6280\u672f\u672c\u8eab\u5c5e\u6027\uff0c\u5ffd\u89c6\u4e86LLMs\u662f\u5426\u80fd\u6709\u6548\u5229\u7528\u6240\u9009\u6280\u672f\u3002\u73b0\u6709LLMs\u5728\u4f7f\u7528\u6d41\u884c\u5e93\u65f6\u7ecf\u5e38\u751f\u6210\u4f4e\u8d28\u91cf\u4ee3\u7801\uff0c\u5bfc\u81f4\u9ad8\u8c03\u8bd5\u6210\u672c\u548c\u6280\u672f\u503a\u52a1\u3002", "method": "\u9996\u6b21\u5bf9170\u4e2a\u7b2c\u4e09\u65b9\u5e93\u548c61\u4e2a\u4efb\u52a1\u573a\u666f\u8fdb\u884c\u5168\u9762\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u8bc4\u4f306\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684LLMs\u7684AI\u7f16\u7a0b\u719f\u7ec3\u5ea6\u3002", "result": "\u529f\u80fd\u76f8\u4f3c\u7684\u5e93\u5728LLM\u751f\u6210\u4ee3\u7801\u8d28\u91cf\u5f97\u5206\u4e0a\u5dee\u5f02\u9ad8\u8fbe84%\uff0c\u4e0d\u540c\u6a21\u578b\u4f7f\u7528\u76f8\u540c\u5e93\u65f6\u4e5f\u5b58\u5728\u8d28\u91cf\u5dee\u8ddd\u3002\u8fd9\u4e9b\u5dee\u8ddd\u8f6c\u5316\u4e3a\u5b9e\u9645\u5de5\u7a0b\u6210\u672c\uff0c\u53ef\u80fd\u5bfc\u81f4\u5f00\u53d1\u8005\u53ea\u9009\u62e9AI\u719f\u7ec3\u5ea6\u9ad8\u7684\u5c11\u6570\u5e93\u3002", "conclusion": "\u547c\u5401\u793e\u533a\u5c06AI\u719f\u7ec3\u5ea6\u8bc4\u4f30\u6574\u5408\u5230\u6280\u672f\u9009\u62e9\u6846\u67b6\u4e2d\uff0c\u5236\u5b9a\u7f13\u89e3\u7b56\u7565\uff0c\u4ee5\u4fdd\u6301AI\u9a71\u52a8\u5f00\u53d1\u4e2d\u7684\u7ade\u4e89\u5e73\u8861\u548c\u6280\u672f\u591a\u6837\u6027\u3002"}}
{"id": "2509.11238", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11238", "abs": "https://arxiv.org/abs/2509.11238", "authors": ["Dongming Jin", "Zhi Jin", "Yiran Zhang", "Zheng Fang", "Linyu Li", "Yuanpeng He", "Xiaohong Chen", "Weisong Sun"], "title": "UserTrace: User-Level Requirements Generation and Traceability Recovery from Software Project Repositories", "comment": "21page, 5 figures", "summary": "Software maintainability critically depends on high-quality requirements\ndescriptions and explicit traceability between requirements and code. Although\nautomated code summarization (ACS) and requirements traceability (RT)\ntechniques have been widely studied, existing ACS methods mainly generate\nimplementation-level (i.e., developer-oriented) requirements (IRs) for\nfine-grained units (e.g., methods), while RT techniques often overlook the\nimpact of project evolution. As a result, user-level (i.e., end user-oriented)\nrequirements (URs) and live trace links remain underexplored, despite their\nimportance for supporting user understanding and for validating whether\nAI-generated software aligns with user intent. To address this gap, we propose\nUserTrace, a multi-agent system that automatically generates URs and recovers\nlive trace links (from URs to IRs to code) from software repositories.\nUserTrace coordinates four specialized agents (i.e., Code Reviewer, Searcher,\nWriter, and Verifier) through a three-phase process: structuring repository\ndependencies, deriving IRs for code units, and synthesizing URs with\ndomain-specific context. Our comparative evaluation shows that UserTrace\nproduces URs with higher completeness, correctness, and helpfulness than an\nestablished baseline, and achieves superior precision in trace link recovery\ncompared to five state-of-the-art RT approaches. A user study further\ndemonstrates that UserTrace helps end users validate whether the AI-generated\nrepositories align with their intent.", "AI": {"tldr": "UserTrace\u662f\u4e00\u4e2a\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\uff0c\u901a\u8fc7\u81ea\u52a8\u5316\u751f\u6210\u7528\u6237\u7ea7\u9700\u6c42(URs)\u548c\u6062\u590d\u4eceURs\u5230\u5b9e\u73b0\u7ea7\u9700\u6c42(IRs)\u518d\u5230\u4ee3\u7801\u7684\u5b9e\u65f6\u8ffd\u8e2a\u94fe\u63a5\uff0c\u89e3\u51b3\u4e86\u8f6f\u4ef6\u7ef4\u62a4\u4e2d\u7684\u9700\u6c42\u8d28\u91cf\u548c\u8ffd\u8e2a\u6027\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u7684\u81ea\u52a8\u5316\u4ee3\u7801\u6458\u8981(ACS)\u65b9\u6cd5\u4e3b\u8981\u751f\u6210\u9762\u5411\u5f00\u53d1\u8005\u7684\u5b9e\u73b0\u7ea7\u9700\u6c42\uff0c\u800c\u9700\u6c42\u8ffd\u8e2a(RT)\u6280\u672f\u5f80\u5f80\u5ffd\u7565\u9879\u76ee\u6f14\u8fdb\u7684\u5f71\u54cd\uff0c\u5bfc\u81f4\u7528\u6237\u7ea7\u9700\u6c42\u548c\u5b9e\u65f6\u8ffd\u8e2a\u94fe\u63a5\u672a\u88ab\u5145\u5206\u63a2\u7d22\uff0c\u8fd9\u5bf9\u652f\u6301\u7528\u6237\u7406\u89e3\u548c\u9a8c\u8bc1AI\u751f\u6210\u8f6f\u4ef6\u662f\u5426\u7b26\u5408\u7528\u6237\u610f\u56fe\u81f3\u5173\u91cd\u8981\u3002", "method": "UserTrace\u534f\u8c03\u56db\u4e2a\u4e13\u4e1a\u667a\u80fd\u4f53\uff08\u4ee3\u7801\u5ba1\u67e5\u5458\u3001\u641c\u7d22\u5668\u3001\u7f16\u5199\u5668\u548c\u9a8c\u8bc1\u5668\uff09\uff0c\u901a\u8fc7\u4e09\u9636\u6bb5\u6d41\u7a0b\uff1a\u7ed3\u6784\u5316\u4ed3\u5e93\u4f9d\u8d56\u3001\u4e3a\u4ee3\u7801\u5355\u5143\u63a8\u5bfc\u5b9e\u73b0\u7ea7\u9700\u6c42\u3001\u4ee5\u53ca\u7ed3\u5408\u9886\u57df\u7279\u5b9a\u4e0a\u4e0b\u6587\u5408\u6210\u7528\u6237\u7ea7\u9700\u6c42\u3002", "result": "\u6bd4\u8f83\u8bc4\u4f30\u663e\u793a\uff0cUserTrace\u751f\u6210\u7684\u7528\u6237\u7ea7\u9700\u6c42\u5728\u5b8c\u6574\u6027\u3001\u6b63\u786e\u6027\u548c\u6709\u7528\u6027\u65b9\u9762\u4f18\u4e8e\u73b0\u6709\u57fa\u7ebf\uff0c\u5728\u8ffd\u8e2a\u94fe\u63a5\u6062\u590d\u7cbe\u5ea6\u4e0a\u4f18\u4e8e\u4e94\u79cd\u6700\u5148\u8fdb\u7684\u9700\u6c42\u8ffd\u8e2a\u65b9\u6cd5\u3002\u7528\u6237\u7814\u7a76\u8fdb\u4e00\u6b65\u8bc1\u660eUserTrace\u80fd\u5e2e\u52a9\u6700\u7ec8\u7528\u6237\u9a8c\u8bc1AI\u751f\u6210\u7684\u4ed3\u5e93\u662f\u5426\u7b26\u5408\u5176\u610f\u56fe\u3002", "conclusion": "UserTrace\u7cfb\u7edf\u6709\u6548\u89e3\u51b3\u4e86\u7528\u6237\u7ea7\u9700\u6c42\u751f\u6210\u548c\u5b9e\u65f6\u8ffd\u8e2a\u94fe\u63a5\u6062\u590d\u7684\u95ee\u9898\uff0c\u4e3a\u8f6f\u4ef6\u7ef4\u62a4\u548cAI\u751f\u6210\u8f6f\u4ef6\u7684\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u91cd\u8981\u652f\u6301\u3002"}}
{"id": "2509.11252", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.11252", "abs": "https://arxiv.org/abs/2509.11252", "authors": ["Chengze li", "Yitong Zhang", "Jia Li", "Liyi Cai", "Ge Li"], "title": "Beyond Autoregression: An Empirical Study of Diffusion Large Language Models for Code Generation", "comment": null, "summary": "LLMs have become the mainstream approaches to code generation. Existing LLMs\nmainly employ autoregressive generation, i.e. generating code token-by-token\nfrom left to right. However, the underlying autoregressive generation has two\nlimitations in code generation. First, autoregressive LLMs only generate a\ntoken at each step, showing low efficiency in practice. Second, programming is\na non-sequential process involving back-and-forth editing, while autoregressive\nLLMs only employ the left-to-right generation order. These two intrinsic\nlimitations hinder the further development of LLMs in code generation.\nRecently, diffusion LLMs have emerged as a promising alternative. Diffusion\nLLMs address the above limitations with two advances, including multi-token\nprediction (i.e. generating multiple tokens at each step) and flexible\ngeneration order (i.e. flexibly determining which positions to generate\ntokens). However, there is no systematic study exploring diffusion LLMs in code\ngeneration. To bridge the knowledge gap, we present the first empirical study\nof diffusion LLMs for code generation. Our study involves 9 representative\ndiffusion LLMs and conduct experiments on 4 widely used benchmarks. Based on\nthe results, we summarize the following findings. (1) Existing diffusion LLMs\nare competitive with autoregressive LLMs with similar sizes. (2) Diffusion LLMs\nhave a stronger length extrapolation ability than autoregressive LLMs and\nperform better in long code understanding. (3) We explore factors impacting the\neffectiveness and efficiency of diffusion LLMs, and provide practical guidance.\n(4) We discuss several promising further directions to improve diffusion LLMs\non code generation. We open-source all source code, data, and results to\nfacilitate the following research. The code is publicly available at\nhttps://github.com/zhangyitonggg/dllm4code.", "AI": {"tldr": "\u672c\u6587\u9996\u6b21\u7cfb\u7edf\u7814\u7a76\u6269\u6563LLM\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u5e94\u7528\uff0c\u53d1\u73b0\u6269\u6563LLM\u5728\u6027\u80fd\u4e0a\u4e0e\u81ea\u56de\u5f52LLM\u76f8\u5f53\uff0c\u4f46\u5728\u957f\u4ee3\u7801\u7406\u89e3\u548c\u957f\u5ea6\u5916\u63a8\u65b9\u9762\u8868\u73b0\u66f4\u597d\uff0c\u5e76\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc\u3002", "motivation": "\u73b0\u6709\u81ea\u56de\u5f52LLM\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u5b58\u5728\u6548\u7387\u4f4e\u4e0b\u548c\u751f\u6210\u987a\u5e8f\u56fa\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u800c\u6269\u6563LLM\u901a\u8fc7\u591atoken\u9884\u6d4b\u548c\u7075\u6d3b\u751f\u6210\u987a\u5e8f\u6709\u671b\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u7f3a\u4e4f\u7cfb\u7edf\u7814\u7a76\u3002", "method": "\u5bf99\u4e2a\u4ee3\u8868\u6027\u6269\u6563LLM\u57284\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e0a\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u6bd4\u8f83\u5176\u4e0e\u81ea\u56de\u5f52LLM\u7684\u6027\u80fd\u5dee\u5f02\uff0c\u5e76\u5206\u6790\u5f71\u54cd\u6548\u679c\u548c\u6548\u7387\u7684\u56e0\u7d20\u3002", "result": "\u6269\u6563LLM\u4e0e\u540c\u7b49\u89c4\u6a21\u7684\u81ea\u56de\u5f52LLM\u6027\u80fd\u76f8\u5f53\uff1b\u5728\u957f\u5ea6\u5916\u63a8\u548c\u957f\u4ee3\u7801\u7406\u89e3\u65b9\u9762\u8868\u73b0\u66f4\u4f18\uff1b\u8bc6\u522b\u4e86\u5f71\u54cd\u6269\u6563LLM\u6548\u679c\u548c\u6548\u7387\u7684\u5173\u952e\u56e0\u7d20\u3002", "conclusion": "\u6269\u6563LLM\u662f\u4ee3\u7801\u751f\u6210\u7684\u6709\u524d\u666f\u66ff\u4ee3\u65b9\u6848\uff0c\u7814\u7a76\u4e3a\u5176\u6539\u8fdb\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc\uff0c\u5e76\u6307\u51fa\u4e86\u672a\u6765\u53d1\u5c55\u65b9\u5411\u3002"}}
{"id": "2509.11258", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11258", "abs": "https://arxiv.org/abs/2509.11258", "authors": ["Regan Meloche", "Durga Sivakumar", "Amal A. Anda", "Sofana Alfuhaid", "Daniel Amyot", "Luigi Logrippo", "John Mylopoulos"], "title": "A Web-Based Environment for the Specification and Generation of Smart Legal Contracts", "comment": "12 pages, 5 figures, 2 tables, conference", "summary": "Monitoring the compliance of contract performance against legal obligations\nis important in order to detect violations, ideally, as soon as they occur.\nSuch monitoring can nowadays be achieved through the use of smart contracts,\nwhich provide protection against tampering as well as some level of automation\nin handling violations. However, there exists a large gap between natural\nlanguage contracts and smart contract implementations. This paper introduces a\nWeb-based environment that partly fills that gap by supporting the\nuser-assisted refinement of Symboleo specifications corresponding to legal\ncontract templates, followed by the automated generation of monitoring smart\ncontracts deployable on the Hyperledger Fabric platform. This environment,\nillustrated using a sample contract from the transactive energy domain, shows\nmuch potential in accelerating the development of smart contracts in a legal\ncompliance context.", "AI": {"tldr": "\u57fa\u4e8eWeb\u7684\u73af\u5883\uff0c\u652f\u6301\u7528\u6237\u8f85\u52a9\u5b8c\u5584Symboleo\u89c4\u8303\uff0c\u81ea\u52a8\u751f\u6210\u53ef\u90e8\u7f72\u5728Hyperledger Fabric\u5e73\u53f0\u4e0a\u7684\u76d1\u63a7\u667a\u80fd\u5408\u7ea6\uff0c\u7528\u4e8e\u6cd5\u5f8b\u5408\u540c\u5408\u89c4\u6027\u76d1\u6d4b", "motivation": "\u81ea\u7136\u8bed\u8a00\u5408\u540c\u4e0e\u667a\u80fd\u5408\u7ea6\u5b9e\u73b0\u4e4b\u95f4\u5b58\u5728\u5de8\u5927\u5dee\u8ddd\uff0c\u9700\u8981\u6709\u6548\u76d1\u6d4b\u5408\u540c\u5c65\u884c\u5408\u89c4\u6027\u4ee5\u5c3d\u65e9\u53d1\u73b0\u8fdd\u7ea6\u884c\u4e3a", "method": "\u5f00\u53d1Web\u73af\u5883\u652f\u6301\u7528\u6237\u8f85\u52a9\u5b8c\u5584Symboleo\u89c4\u8303\uff0c\u7136\u540e\u81ea\u52a8\u751f\u6210\u53ef\u90e8\u7f72\u5728Hyperledger Fabric\u5e73\u53f0\u7684\u76d1\u63a7\u667a\u80fd\u5408\u7ea6", "result": "\u901a\u8fc7\u4ea4\u6613\u80fd\u6e90\u9886\u57df\u7684\u793a\u4f8b\u5408\u540c\u5c55\u793a\u4e86\u8be5\u73af\u5883\u5728\u6cd5\u5f8b\u5408\u89c4\u80cc\u666f\u4e0b\u52a0\u901f\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u7684\u6f5c\u529b", "conclusion": "\u8be5Web\u73af\u5883\u90e8\u5206\u586b\u8865\u4e86\u81ea\u7136\u8bed\u8a00\u5408\u540c\u4e0e\u667a\u80fd\u5408\u7ea6\u5b9e\u73b0\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u4e3a\u6cd5\u5f8b\u5408\u89c4\u76d1\u6d4b\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177"}}
{"id": "2509.11312", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.11312", "abs": "https://arxiv.org/abs/2509.11312", "authors": ["Wenchao Gu", "Yupan Chen", "Yanlin Wang", "Hongyu Zhang", "Cuiyun Gao", "Michael R. Lyu"], "title": "Weakly Supervised Vulnerability Localization via Multiple Instance Learning", "comment": null, "summary": "Software vulnerability detection has emerged as a significant concern in the\nfield of software security recently, capturing the attention of numerous\nresearchers and developers. Most previous approaches focus on coarse-grained\nvulnerability detection, such as at the function or file level. However, the\ndevelopers would still encounter the challenge of manually inspecting a large\nvolume of code inside the vulnerable function to identify the specific\nvulnerable statements for modification, indicating the importance of\nvulnerability localization. Training the model for vulnerability localization\nusually requires ground-truth labels at the statement-level, and labeling\nvulnerable statements demands expert knowledge, which incurs high costs. Hence,\nthe demand for an approach that eliminates the need for additional labeling at\nthe statement-level is on the rise. To tackle this problem, we propose a novel\napproach called WAVES for WeAkly supervised Vulnerability Localization via\nmultiplE inStance learning, which does not need the additional statement-level\nlabels during the training. WAVES has the capability to determine whether a\nfunction is vulnerable (i.e., vulnerability detection) and pinpoint the\nvulnerable statements (i.e., vulnerability localization). Specifically,\ninspired by the concept of multiple instance learning, WAVES converts the\nground-truth label at the function-level into pseudo labels for individual\nstatements, eliminating the need for additional statement-level labeling. These\npseudo labels are utilized to train the classifiers for the function-level\nrepresentation vectors. Extensive experimentation on three popular benchmark\ndatasets demonstrates that, in comparison to previous baselines, our approach\nachieves comparable performance in vulnerability detection and state-of-the-art\nperformance in statement-level vulnerability localization.", "AI": {"tldr": "WAVES\u662f\u4e00\u79cd\u57fa\u4e8e\u591a\u793a\u4f8b\u5b66\u4e60\u7684\u5f31\u76d1\u7763\u6f0f\u6d1e\u5b9a\u4f4d\u65b9\u6cd5\uff0c\u65e0\u9700\u8bed\u53e5\u7ea7\u6807\u6ce8\u5373\u53ef\u540c\u65f6\u5b9e\u73b0\u6f0f\u6d1e\u68c0\u6d4b\u548c\u7cbe\u786e\u5b9a\u4f4d", "motivation": "\u73b0\u6709\u6f0f\u6d1e\u68c0\u6d4b\u65b9\u6cd5\u4e3b\u8981\u5728\u51fd\u6570\u6216\u6587\u4ef6\u7ea7\u522b\u8fdb\u884c\u7c97\u7c92\u5ea6\u68c0\u6d4b\uff0c\u5f00\u53d1\u8005\u4ecd\u9700\u624b\u52a8\u68c0\u67e5\u5927\u91cf\u4ee3\u7801\u6765\u5b9a\u4f4d\u5177\u4f53\u6f0f\u6d1e\u8bed\u53e5\u3002\u8bed\u53e5\u7ea7\u6807\u6ce8\u9700\u8981\u4e13\u5bb6\u77e5\u8bc6\u4e14\u6210\u672c\u9ad8\u6602\uff0c\u56e0\u6b64\u9700\u8981\u65e0\u9700\u989d\u5916\u8bed\u53e5\u7ea7\u6807\u6ce8\u7684\u65b9\u6cd5", "method": "\u57fa\u4e8e\u591a\u793a\u4f8b\u5b66\u4e60\u6982\u5ff5\uff0c\u5c06\u51fd\u6570\u7ea7\u771f\u5b9e\u6807\u7b7e\u8f6c\u6362\u4e3a\u8bed\u53e5\u7ea7\u4f2a\u6807\u7b7e\uff0c\u65e0\u9700\u989d\u5916\u8bed\u53e5\u7ea7\u6807\u6ce8\u3002\u5229\u7528\u8fd9\u4e9b\u4f2a\u6807\u7b7e\u8bad\u7ec3\u51fd\u6570\u7ea7\u8868\u793a\u5411\u91cf\u7684\u5206\u7c7b\u5668", "result": "\u5728\u4e09\u4e2a\u6d41\u884c\u57fa\u51c6\u6570\u636e\u96c6\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u5728\u6f0f\u6d1e\u68c0\u6d4b\u65b9\u9762\u8fbe\u5230\u53ef\u6bd4\u6027\u80fd\uff0c\u5728\u8bed\u53e5\u7ea7\u6f0f\u6d1e\u5b9a\u4f4d\u65b9\u9762\u8fbe\u5230\u6700\u5148\u8fdb\u6027\u80fd", "conclusion": "WAVES\u65b9\u6cd5\u6210\u529f\u89e3\u51b3\u4e86\u65e0\u9700\u8bed\u53e5\u7ea7\u6807\u6ce8\u7684\u6f0f\u6d1e\u5b9a\u4f4d\u95ee\u9898\uff0c\u4e3a\u8f6f\u4ef6\u5b89\u5168\u9886\u57df\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u5f31\u76d1\u7763\u5b66\u4e60\u89e3\u51b3\u65b9\u6848"}}
{"id": "2509.11446", "categories": ["cs.SE", "D.2.0; D.2.1; I.2.7"], "pdf": "https://arxiv.org/pdf/2509.11446", "abs": "https://arxiv.org/abs/2509.11446", "authors": ["Mohammad Amin Zadenoori", "Jacek D\u0105browski", "Waad Alhoshan", "Liping Zhao", "Alessio Ferrari"], "title": "Large Language Models (LLMs) for Requirements Engineering (RE): A Systematic Literature Review", "comment": null, "summary": "Large Language Models (LLMs) are finding applications in numerous domains,\nand Requirements Engineering (RE) is increasingly benefiting from their\ncapabilities to assist with complex, language-intensive tasks. This paper\npresents a systematic literature review of 74 primary studies published between\n2023 and 2024, examining how LLMs are being applied in RE. The study\ncategorizes the literature according to several dimensions, including\npublication trends, RE activities, prompting strategies, and evaluation\nmethods. Our findings indicate notable patterns, among which we observe\nsubstantial differences compared to previous works leveraging standard Natural\nLanguage Processing (NLP) techniques. Most of the studies focus on using LLMs\nfor requirements elicitation and validation, rather than defect detection and\nclassification, which were dominant in the past. Researchers have also\nbroadened their focus and addressed novel tasks, e.g., test generation,\nexploring the integration of RE with other software engineering (SE)\ndisciplines. Although requirements specifications remain the primary focus,\nother artifacts are increasingly considered, including issues from issue\ntracking systems, regulations, and technical manuals. The studies mostly rely\non GPT-based models, and often use Zero-shot or Few-shot prompting. They are\nusually evaluated in controlled environments, with limited use in industry\nsettings and limited integration in complex workflows. Our study outlines\nimportant future directions, such as leveraging the potential to expand the\ninfluence of RE in SE, exploring less-studied tasks, improving prompting\nmethods, and testing in real-world environments. Our contribution also helps\nresearchers and practitioners use LLMs more effectively in RE, by providing a\nlist of identified tools leveraging LLMs for RE, as well as datasets.", "AI": {"tldr": "\u672c\u6587\u5bf92023-2024\u5e74\u95f474\u9879\u5173\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u5728\u9700\u6c42\u5de5\u7a0b\u4e2d\u5e94\u7528\u7684\u7814\u7a76\u8fdb\u884c\u4e86\u7cfb\u7edf\u6027\u6587\u732e\u7efc\u8ff0\uff0c\u5206\u6790\u4e86\u5e94\u7528\u6a21\u5f0f\u3001\u7814\u7a76\u8d8b\u52bf\u548c\u672a\u6765\u65b9\u5411\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u5404\u4e2a\u9886\u57df\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u9700\u6c42\u5de5\u7a0b\u4f5c\u4e3a\u8bed\u8a00\u5bc6\u96c6\u578b\u4efb\u52a1\u4e5f\u5f00\u59cb\u53d7\u76ca\u4e8eLLM\u7684\u80fd\u529b\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u5730\u4e86\u89e3\u5f53\u524d\u7814\u7a76\u73b0\u72b6\u548c\u5e94\u7528\u6a21\u5f0f\u3002", "method": "\u91c7\u7528\u7cfb\u7edf\u6027\u6587\u732e\u7efc\u8ff0\u65b9\u6cd5\uff0c\u5bf974\u7bc7\u4e3b\u8981\u7814\u7a76\u8fdb\u884c\u5206\u6790\uff0c\u4ece\u53d1\u8868\u8d8b\u52bf\u3001RE\u6d3b\u52a8\u3001\u63d0\u793a\u7b56\u7565\u3001\u8bc4\u4f30\u65b9\u6cd5\u7b49\u591a\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5206\u7c7b\u7814\u7a76\u3002", "result": "\u7814\u7a76\u53d1\u73b0LLM\u5728\u9700\u6c42\u5de5\u7a0b\u4e2d\u7684\u5e94\u7528\u4e3b\u8981\u96c6\u4e2d\u5728\u9700\u6c42\u83b7\u53d6\u548c\u9a8c\u8bc1\uff0c\u800c\u975e\u4f20\u7edf\u7684\u7f3a\u9677\u68c0\u6d4b\uff1b\u4e3b\u8981\u4f7f\u7528GPT\u6a21\u578b\u548c\u96f6\u6837\u672c/\u5c11\u6837\u672c\u63d0\u793a\uff1b\u7814\u7a76\u591a\u5728\u53d7\u63a7\u73af\u5883\u4e2d\u8fdb\u884c\uff0c\u5de5\u4e1a\u5e94\u7528\u6709\u9650\u3002", "conclusion": "LLM\u4e3a\u9700\u6c42\u5de5\u7a0b\u5e26\u6765\u4e86\u65b0\u7684\u673a\u9047\uff0c\u4f46\u9700\u8981\u8fdb\u4e00\u6b65\u63a2\u7d22\u8f83\u5c11\u7814\u7a76\u7684\u4efb\u52a1\u3001\u6539\u8fdb\u63d0\u793a\u65b9\u6cd5\u3001\u52a0\u5f3a\u5de5\u4e1a\u73af\u5883\u6d4b\u8bd5\uff0c\u5e76\u6269\u5c55RE\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u5f71\u54cd\u529b\u3002"}}
{"id": "2509.11523", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11523", "abs": "https://arxiv.org/abs/2509.11523", "authors": ["Ziliang Wang", "Ge Li", "Jia Li", "Hao Zhu", "Zhi Jin"], "title": "VulAgent: Hypothesis-Validation based Multi-Agent Vulnerability Detection", "comment": null, "summary": "The application of language models to project-level vulnerability detection\nremains challenging, owing to the dual requirement of accurately localizing\nsecurity-sensitive code and correctly correlating and reasoning over complex\nprogram context. We present VulAgent, a multi-agent vulnerability detection\nframework based on hypothesis validation. Our design is inspired by how human\nauditors review code: when noticing a sensitive operation, they form a\nhypothesis about a possible vulnerability, consider potential trigger paths,\nand then verify the hypothesis against the surrounding context. VulAgent\nimplements a semantics-sensitive, multi-view detection pipeline: specialized\nagents, each aligned to a specific analysis perspective (e.g., memory,\nauthorization), collaboratively surface and precisely localize sensitive code\nsites with higher coverage. Building on this, VulAgent adopts a\nhypothesis-validation paradigm: for each vulnerability report, it builds\nhypothesis conditions and a trigger path, steering the LLM to target the\nrelevant program context and defensive checks during verification, which\nreduces false positives. On average across the two datasets, VulAgent improves\noverall accuracy by 6.6%, increases the correct identification rate of\nvulnerable--fixed code pairs by up to 450% (246% on average), and reduces the\nfalse positive rate by about 36% compared with state-of-the-art LLM-based\nbaselines.", "AI": {"tldr": "VulAgent\u662f\u4e00\u4e2a\u57fa\u4e8e\u5047\u8bbe\u9a8c\u8bc1\u7684\u591a\u667a\u80fd\u4f53\u6f0f\u6d1e\u68c0\u6d4b\u6846\u67b6\uff0c\u901a\u8fc7\u6a21\u62df\u4eba\u7c7b\u4ee3\u7801\u5ba1\u8ba1\u8fc7\u7a0b\uff0c\u63d0\u9ad8\u9879\u76ee\u7ea7\u6f0f\u6d1e\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u548c\u8986\u76d6\u7387\uff0c\u964d\u4f4e\u8bef\u62a5\u7387\u3002", "motivation": "\u8bed\u8a00\u6a21\u578b\u5728\u9879\u76ee\u7ea7\u6f0f\u6d1e\u68c0\u6d4b\u4e2d\u9762\u4e34\u51c6\u786e\u8bc6\u522b\u5b89\u5168\u654f\u611f\u4ee3\u7801\u548c\u590d\u6742\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u63a8\u7406\u7684\u53cc\u91cd\u6311\u6218\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u68c0\u6d4b\u65b9\u6cd5\u3002", "method": "\u91c7\u7528\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u6846\u67b6\uff0c\u6bcf\u4e2a\u667a\u80fd\u4f53\u4e13\u6ce8\u4e8e\u7279\u5b9a\u5206\u6790\u89c6\u89d2\uff08\u5982\u5185\u5b58\u3001\u6388\u6743\uff09\uff0c\u901a\u8fc7\u5047\u8bbe\u9a8c\u8bc1\u8303\u5f0f\uff1a\u5f62\u6210\u6f0f\u6d1e\u5047\u8bbe\u3001\u6784\u5efa\u89e6\u53d1\u8def\u5f84\u3001\u9a8c\u8bc1\u76f8\u5173\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u548c\u9632\u5fa1\u68c0\u67e5\u3002", "result": "\u5728\u4e24\u4e2a\u6570\u636e\u96c6\u4e0a\u5e73\u5747\u63d0\u9ad8\u6574\u4f53\u51c6\u786e\u73876.6%\uff0c\u6b63\u786e\u8bc6\u522b\u6f0f\u6d1e-\u4fee\u590d\u4ee3\u7801\u5bf9\u7684\u6bd4\u7387\u6700\u9ad8\u63d0\u5347450%\uff08\u5e73\u5747246%\uff09\uff0c\u8bef\u62a5\u7387\u964d\u4f4e\u7ea636%\u3002", "conclusion": "VulAgent\u901a\u8fc7\u8bed\u4e49\u654f\u611f\u7684\u591a\u89c6\u89d2\u68c0\u6d4b\u6d41\u6c34\u7ebf\u548c\u5047\u8bbe\u9a8c\u8bc1\u8303\u5f0f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u57fa\u4e8eLLM\u7684\u6f0f\u6d1e\u68c0\u6d4b\u6027\u80fd\uff0c\u4e3a\u9879\u76ee\u7ea7\u5b89\u5168\u5206\u6790\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.11566", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11566", "abs": "https://arxiv.org/abs/2509.11566", "authors": ["Hua Guo", "Yunhong Ji", "Xuan Zhou"], "title": "Sedeve-Kit, a Specification-Driven Development Framework for Building Distributed Systems", "comment": null, "summary": "Developing distributed systems presents significant challenges, primarily due\nto the complexity introduced by non-deterministic concurrency and faults. To\naddress these, we propose a specification-driven development framework. Our\nmethod encompasses three key stages. The first stage defines system\nspecifications and invariants using TLA${^+}$. It allows us to perform model\nchecking on the algorithm's correctness and generate test cases for subsequent\ndevelopment phases. In the second stage, based on the established\nspecifications, we write code to ensure consistency and accuracy in the\nimplementation. Finally, after completing the coding process, we rigorously\ntest the system using the test cases generated in the initial stage. This\nprocess ensures system quality by maintaining a strong connection between the\nabstract design and the concrete implementation through continuous\nverification.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8eTLA+\u7684\u89c4\u8303\u9a71\u52a8\u5f00\u53d1\u6846\u67b6\uff0c\u901a\u8fc7\u4e09\u9636\u6bb5\u65b9\u6cd5\u786e\u4fdd\u5206\u5e03\u5f0f\u7cfb\u7edf\u8d28\u91cf\uff1a\u89c4\u8303\u5b9a\u4e49\u4e0e\u6a21\u578b\u68c0\u67e5\u3001\u4ee3\u7801\u5b9e\u73b0\u3001\u6d4b\u8bd5\u9a8c\u8bc1", "motivation": "\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u975e\u786e\u5b9a\u6027\u5e76\u53d1\u548c\u6545\u969c\u5e26\u6765\u7684\u590d\u6742\u6027\u6311\u6218\uff0c\u786e\u4fdd\u7cfb\u7edf\u6b63\u786e\u6027\u548c\u53ef\u9760\u6027", "method": "\u4e09\u9636\u6bb5\u5f00\u53d1\u6846\u67b6\uff1a1) \u4f7f\u7528TLA+\u5b9a\u4e49\u89c4\u8303\u548c\u4e0d\u53d8\u5f0f\uff0c\u8fdb\u884c\u6a21\u578b\u68c0\u67e5\u5e76\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\uff1b2) \u57fa\u4e8e\u89c4\u8303\u7f16\u5199\u4ee3\u7801\uff1b3) \u4f7f\u7528\u7b2c\u4e00\u9636\u6bb5\u751f\u6210\u7684\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u4e25\u683c\u6d4b\u8bd5", "result": "\u5efa\u7acb\u4e86\u62bd\u8c61\u8bbe\u8ba1\u4e0e\u5177\u4f53\u5b9e\u73b0\u4e4b\u95f4\u7684\u5f3a\u8fde\u63a5\uff0c\u901a\u8fc7\u6301\u7eed\u9a8c\u8bc1\u786e\u4fdd\u7cfb\u7edf\u8d28\u91cf", "conclusion": "\u8be5\u89c4\u8303\u9a71\u52a8\u5f00\u53d1\u6846\u67b6\u80fd\u6709\u6548\u5e94\u5bf9\u5206\u5e03\u5f0f\u7cfb\u7edf\u5f00\u53d1\u7684\u590d\u6742\u6027\uff0c\u63d0\u9ad8\u7cfb\u7edf\u6b63\u786e\u6027\u548c\u53ef\u9760\u6027"}}
{"id": "2509.11626", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.11626", "abs": "https://arxiv.org/abs/2509.11626", "authors": ["Prerna Agarwal", "Himanshu Gupta", "Soujanya Soni", "Rohith Vallam", "Renuka Sindhgatta", "Sameep Mehta"], "title": "Automated Creation and Enrichment Framework for Improved Invocation of Enterprise APIs as Tools", "comment": null, "summary": "Recent advancements in Large Language Models (LLMs) has lead to the\ndevelopment of agents capable of complex reasoning and interaction with\nexternal tools. In enterprise contexts, the effective use of such tools that\nare often enabled by application programming interfaces (APIs), is hindered by\npoor documentation, complex input or output schema, and large number of\noperations. These challenges make tool selection difficult and reduce the\naccuracy of payload formation by up to 25%. We propose ACE, an automated tool\ncreation and enrichment framework that transforms enterprise APIs into\nLLM-compatible tools. ACE, (i) generates enriched tool specifications with\nparameter descriptions and examples to improve selection and invocation\naccuracy, and (ii) incorporates a dynamic shortlisting mechanism that filters\nrelevant tools at runtime, reducing prompt complexity while maintaining\nscalability. We validate our framework on both proprietary and open-source APIs\nand demonstrate its integration with agentic frameworks. To the best of our\nknowledge, ACE is the first end-to-end framework that automates the creation,\nenrichment, and dynamic selection of enterprise API tools for LLM agents.", "AI": {"tldr": "ACE\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u5de5\u5177\u521b\u5efa\u548c\u589e\u5f3a\u6846\u67b6\uff0c\u5c06\u4f01\u4e1aAPI\u8f6c\u6362\u4e3aLLM\u517c\u5bb9\u5de5\u5177\uff0c\u901a\u8fc7\u751f\u6210\u4e30\u5bcc\u7684\u5de5\u5177\u89c4\u8303\u548c\u52a8\u6001\u7b5b\u9009\u673a\u5236\u63d0\u9ad8\u5de5\u5177\u9009\u62e9\u548c\u8c03\u7528\u51c6\u786e\u6027", "motivation": "\u4f01\u4e1a\u73af\u5883\u4e2dAPI\u5de5\u5177\u4f7f\u7528\u5b58\u5728\u6587\u6863\u8d28\u91cf\u5dee\u3001\u8f93\u5165\u8f93\u51fa\u6a21\u5f0f\u590d\u6742\u3001\u64cd\u4f5c\u6570\u91cf\u591a\u7b49\u95ee\u9898\uff0c\u5bfc\u81f4\u5de5\u5177\u9009\u62e9\u56f0\u96be\u4e14\u6709\u6548\u8d1f\u8f7d\u5f62\u6210\u51c6\u786e\u7387\u4e0b\u964d\u9ad8\u8fbe25%", "method": "ACE\u6846\u67b6(i)\u751f\u6210\u5305\u542b\u53c2\u6570\u63cf\u8ff0\u548c\u793a\u4f8b\u7684\u589e\u5f3a\u5de5\u5177\u89c4\u8303\uff0c(ii)\u96c6\u6210\u52a8\u6001\u7b5b\u9009\u673a\u5236\u5728\u8fd0\u884c\u65f6\u8fc7\u6ee4\u76f8\u5173\u5de5\u5177\uff0c\u964d\u4f4e\u63d0\u793a\u590d\u6742\u5ea6\u540c\u65f6\u4fdd\u6301\u53ef\u6269\u5c55\u6027", "result": "\u5728\u4e13\u6709\u548c\u5f00\u6e90API\u4e0a\u9a8c\u8bc1\u4e86\u6846\u67b6\u6709\u6548\u6027\uff0c\u5e76\u5c55\u793a\u4e86\u4e0e\u4ee3\u7406\u6846\u67b6\u7684\u96c6\u6210\u80fd\u529b", "conclusion": "ACE\u662f\u9996\u4e2a\u7aef\u5230\u7aef\u81ea\u52a8\u5316\u4f01\u4e1aAPI\u5de5\u5177\u521b\u5efa\u3001\u589e\u5f3a\u548c\u52a8\u6001\u9009\u62e9\u7684\u6846\u67b6\uff0c\u4e3aLLM\u4ee3\u7406\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u5de5\u5177\u517c\u5bb9\u6027\u548c\u4f7f\u7528\u6548\u7387"}}
{"id": "2509.11686", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.11686", "abs": "https://arxiv.org/abs/2509.11686", "authors": ["Jian Wang", "Xiaofei Xie", "Qiang Hu", "Shangqing Liu", "Yi Li"], "title": "Do Code Semantics Help? A Comprehensive Study on Execution Trace-Based Information for Code Large Language Models", "comment": "EMNLP2025-findings", "summary": "Code Large Language Models (Code LLMs) have opened a new era in programming\nwith their impressive capabilities. However, recent research has revealed\ncritical limitations in their ability to reason about runtime behavior and\nunderstand the actual functionality of programs, which poses significant\nchallenges for their post-training and practical deployment. Specifically, Code\nLLMs encounter two principal issues: (1) a lack of proficiency in reasoning\nabout program execution behavior, as they struggle to interpret what programs\nactually do during runtime, and (2) the inconsistent and fragmented\nrepresentation of semantic information, such as execution traces, across\nexisting methods, which hinders their ability to generalize and reason\neffectively. These challenges underscore the necessity for more systematic\napproaches to enhance the reasoning capabilities of Code LLMs. To address these\nissues, we introduce a generic framework to support integrating semantic\ninformation~(e.g., execution trace) to code task-relevant prompts, and conduct\na comprehensive study to explore the role of semantic information in enhancing\nthe reasoning ability of Code LLMs accordingly. Specifically, we focus on\ninvestigating the usefulness of trace-based semantic information in boosting\nsupervised fine-tuning~(SFT) and post-phase inference of Code LLMs. The\nexperimental results surprisingly disagree with previous works and demonstrate\nthat semantic information has limited usefulness for SFT and test time scaling\nof Code LLM.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u53d1\u73b0\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u5728\u63a8\u7406\u7a0b\u5e8f\u8fd0\u884c\u65f6\u884c\u4e3a\u65b9\u9762\u5b58\u5728\u5c40\u9650\uff0c\u8bed\u4e49\u4fe1\u606f\uff08\u5982\u6267\u884c\u8f68\u8ff9\uff09\u5bf9\u76d1\u7763\u5fae\u8c03\u548c\u63a8\u7406\u9636\u6bb5\u7684\u63d0\u5347\u6548\u679c\u6709\u9650\uff0c\u4e0e\u5148\u524d\u7814\u7a76\u7ed3\u8bba\u76f8\u53cd\u3002", "motivation": "\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u5728\u7406\u89e3\u7a0b\u5e8f\u5b9e\u9645\u529f\u80fd\u548c\u63a8\u7406\u8fd0\u884c\u65f6\u884c\u4e3a\u65b9\u9762\u5b58\u5728\u663e\u8457\u7f3a\u9677\uff0c\u73b0\u6709\u65b9\u6cd5\u5bf9\u8bed\u4e49\u4fe1\u606f\u7684\u8868\u793a\u4e0d\u4e00\u81f4\u4e14\u788e\u7247\u5316\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u7684\u65b9\u6cd5\u6765\u589e\u5f3a\u5176\u63a8\u7406\u80fd\u529b\u3002", "method": "\u5f15\u5165\u4e00\u4e2a\u901a\u7528\u6846\u67b6\u6765\u6574\u5408\u8bed\u4e49\u4fe1\u606f\uff08\u5982\u6267\u884c\u8f68\u8ff9\uff09\u5230\u4ee3\u7801\u4efb\u52a1\u76f8\u5173\u7684\u63d0\u793a\u4e2d\uff0c\u5e76\u5168\u9762\u7814\u7a76\u8bed\u4e49\u4fe1\u606f\u5728\u63d0\u5347\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u80fd\u529b\u4e2d\u7684\u4f5c\u7528\uff0c\u7279\u522b\u5173\u6ce8\u57fa\u4e8e\u8f68\u8ff9\u7684\u8bed\u4e49\u4fe1\u606f\u5728\u76d1\u7763\u5fae\u8c03\u548c\u63a8\u7406\u9636\u6bb5\u7684\u6548\u679c\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u4e0e\u5148\u524d\u7814\u7a76\u76f8\u53cd\uff0c\u8868\u660e\u8bed\u4e49\u4fe1\u606f\u5bf9\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u7684\u76d1\u7763\u5fae\u8c03\u548c\u6d4b\u8bd5\u65f6\u6269\u5c55\u7684\u7528\u5904\u6709\u9650\u3002", "conclusion": "\u8bed\u4e49\u4fe1\u606f\u5728\u63d0\u5347\u4ee3\u7801\u5927\u8bed\u8a00\u6a21\u578b\u7684\u63a8\u7406\u80fd\u529b\u65b9\u9762\u6548\u679c\u6709\u9650\uff0c\u9700\u8981\u63a2\u7d22\u5176\u4ed6\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u6765\u589e\u5f3a\u6a21\u578b\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u65f6\u884c\u4e3a\u7684\u7406\u89e3\u80fd\u529b\u3002"}}
{"id": "2509.11691", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11691", "abs": "https://arxiv.org/abs/2509.11691", "authors": ["Lukas Rauh", "Mel-Rick S\u00fcner", "Daniel Schel", "Thomas Bauernhansl"], "title": "AI Asset Management for Manufacturing (AIM4M): Development of a Process Model for Operationalization", "comment": "10 pages, 4 figures, submitted for revision review at International\n  Conference on Industry of the Future and Smart Manufacturing (ISM) 2025", "summary": "The benefits of adopting artificial intelligence (AI) in manufacturing are\nundeniable. However, operationalizing AI beyond the prototype, especially when\ninvolved with cyber-physical production systems (CPPS), remains a significant\nchallenge due to the technical system complexity, a lack of implementation\nstandards and fragmented organizational processes. To this end, this paper\nproposes a new process model for the lifecycle management of AI assets designed\nto address challenges in manufacturing and facilitate effective\noperationalization throughout the entire AI lifecycle. The process model, as a\ntheoretical contribution, builds on machine learning operations (MLOps)\nprinciples and refines three aspects to address the domain-specific\nrequirements from the CPPS context. As a result, the proposed process model\naims to support organizations in practice to systematically develop, deploy and\nmanage AI assets across their full lifecycle while aligning with CPPS-specific\nconstraints and regulatory demands.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8eMLOps\u539f\u5219\u7684\u65b0\u6d41\u7a0b\u6a21\u578b\uff0c\u7528\u4e8e\u5236\u9020\u4e1aAI\u8d44\u4ea7\u5168\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u89e3\u51b3CPPS\u73af\u5883\u4e2d\u7684\u5b9e\u65bd\u6311\u6218", "motivation": "\u5236\u9020\u4e1a\u91c7\u7528AI\u7684\u597d\u5904\u660e\u663e\uff0c\u4f46\u5c06AI\u4ece\u539f\u578b\u6269\u5c55\u5230\u5b9e\u9645\u8fd0\u8425\uff0c\u7279\u522b\u662f\u5728\u7f51\u7edc\u7269\u7406\u751f\u4ea7\u7cfb\u7edf(CPPS)\u4e2d\uff0c\u9762\u4e34\u6280\u672f\u590d\u6742\u6027\u9ad8\u3001\u7f3a\u4e4f\u5b9e\u65bd\u6807\u51c6\u548c\u788e\u7247\u5316\u7ec4\u7ec7\u6d41\u7a0b\u7b49\u6311\u6218", "method": "\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u8fd0\u7ef4(MLOps)\u539f\u5219\u6784\u5efa\u6d41\u7a0b\u6a21\u578b\uff0c\u9488\u5bf9CPPS\u9886\u57df\u7684\u7279\u5b9a\u9700\u6c42\u7ec6\u5316\u4e09\u4e2a\u65b9\u9762\uff0c\u652f\u6301AI\u8d44\u4ea7\u7684\u5168\u751f\u547d\u5468\u671f\u7ba1\u7406", "result": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u7406\u8bba\u8d21\u732e\u6027\u7684\u6d41\u7a0b\u6a21\u578b\uff0c\u65e8\u5728\u5e2e\u52a9\u7ec4\u7ec7\u5728\u5b9e\u8df5\u4e2d\u7cfb\u7edf\u5316\u5730\u5f00\u53d1\u3001\u90e8\u7f72\u548c\u7ba1\u7406AI\u8d44\u4ea7", "conclusion": "\u8be5\u6d41\u7a0b\u6a21\u578b\u80fd\u591f\u4f7fAI\u8d44\u4ea7\u5728\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u4e0eCPPS\u7279\u5b9a\u7ea6\u675f\u548c\u76d1\u7ba1\u8981\u6c42\u4fdd\u6301\u4e00\u81f4\uff0c\u4fc3\u8fdb\u5236\u9020\u4e1aAI\u7684\u6709\u6548\u8fd0\u8425\u5316"}}
{"id": "2509.11708", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11708", "abs": "https://arxiv.org/abs/2509.11708", "authors": ["Zhantong Xue", "Pingchuan Ma", "Zhaoyu Wang", "Shuai Wang"], "title": "From Evaluation to Enhancement: Large Language Models for Zero-Knowledge Proof Code Generation", "comment": null, "summary": "Zero-knowledge proofs (ZKPs) are increasingly deployed in domains such as\nprivacy-preserving authentication, blockchain scalability, and secure finance.\nHowever, authoring ZK programs remains challenging: unlike mainstream\nprogramming, ZK development requires reasoning about finite field arithmetic,\nconstraint systems, and gadgets, making it knowledge-intensive and error-prone.\nWhile large language models (LLMs) have demonstrated strong code generation\ncapabilities in general-purpose languages, their effectiveness for ZK\nprogramming, where correctness hinges on both language mastery and gadget-level\nreasoning, remains unexplored. To address this gap, we propose\n\\textsc{ZK-Eval}, a domain-specific evaluation pipeline that probes LLM\ncapabilities at three levels: language knowledge, gadget competence, and\nend-to-end program generation. Our evaluation of four state-of-the-art LLMs\nreveals that models excel at surface-level syntax but struggle with gadget\nusage and semantic correctness, often yielding incorrect programs. Based on\nthese insights, we introduce \\textsc{ZK-Coder}, an agentic framework that\naugments LLMs with constraint sketching, guided retrieval, and interactive\nrepair. Experiments on Circom and Noir show substantial gains, with success\nrates improving from 17.35\\% to 83.38\\% and from 32.21\\% to 90.05\\%,\nrespectively. With \\textsc{ZK-Eval} and \\textsc{ZK-Coder}, we establish a\nfoundation for systematically measuring and augmenting LLMs in ZK code\ngeneration to lower barriers for practitioners and advance trustworthy\ncomputation.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86ZK-Eval\u8bc4\u4f30\u6846\u67b6\u548cZK-Coder\u4ee3\u7406\u6846\u67b6\uff0c\u7528\u4e8e\u8bc4\u4f30\u548c\u63d0\u5347\u5927\u8bed\u8a00\u6a21\u578b\u5728\u96f6\u77e5\u8bc6\u8bc1\u660e\u7f16\u7a0b\u4e2d\u7684\u80fd\u529b\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u4ee3\u7801\u751f\u6210\u6210\u529f\u7387\u3002", "motivation": "\u96f6\u77e5\u8bc6\u8bc1\u660e\u7f16\u7a0b\u5177\u6709\u77e5\u8bc6\u5bc6\u96c6\u548c\u6613\u9519\u7684\u7279\u70b9\uff0c\u73b0\u6709\u5927\u8bed\u8a00\u6a21\u578b\u5728\u901a\u7528\u7f16\u7a0b\u9886\u57df\u8868\u73b0\u4f18\u5f02\uff0c\u4f46\u5728ZK\u7f16\u7a0b\u4e2d\u7684\u6709\u6548\u6027\u5c1a\u672a\u88ab\u63a2\u7d22\uff0c\u9700\u8981\u4e13\u95e8\u7684\u8bc4\u4f30\u548c\u6539\u8fdb\u65b9\u6cd5\u3002", "method": "\u63d0\u51faZK-Eval\u4e09\u7ea7\u8bc4\u4f30\u7ba1\u9053\uff08\u8bed\u8a00\u77e5\u8bc6\u3001\u7ec4\u4ef6\u80fd\u529b\u3001\u7aef\u5230\u7aef\u7a0b\u5e8f\u751f\u6210\uff09\uff0c\u5e76\u5f00\u53d1ZK-Coder\u4ee3\u7406\u6846\u67b6\uff0c\u5305\u542b\u7ea6\u675f\u8349\u56fe\u3001\u5f15\u5bfc\u68c0\u7d22\u548c\u4ea4\u4e92\u5f0f\u4fee\u590d\u4e09\u4e2a\u7ec4\u4ef6\u3002", "result": "\u5bf9\u56db\u4e2a\u5148\u8fdbLLM\u7684\u8bc4\u4f30\u663e\u793a\u6a21\u578b\u5728\u8868\u9762\u8bed\u6cd5\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u7ec4\u4ef6\u4f7f\u7528\u548c\u8bed\u4e49\u6b63\u786e\u6027\u4e0a\u5b58\u5728\u56f0\u96be\u3002ZK-Coder\u5728Circom\u548cNoir\u4e0a\u5206\u522b\u5c06\u6210\u529f\u7387\u4ece17.35%\u63d0\u5347\u523083.38%\u548c\u4ece32.21%\u63d0\u5347\u523090.05%\u3002", "conclusion": "\u901a\u8fc7ZK-Eval\u548cZK-Coder\uff0c\u4e3a\u7cfb\u7edf\u5316\u6d4b\u91cf\u548c\u589e\u5f3aLLM\u5728ZK\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u80fd\u529b\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u6709\u52a9\u4e8e\u964d\u4f4e\u5b9e\u8df5\u95e8\u69db\u5e76\u63a8\u8fdb\u53ef\u4fe1\u8ba1\u7b97\u53d1\u5c55\u3002"}}
{"id": "2509.11738", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.11738", "abs": "https://arxiv.org/abs/2509.11738", "authors": ["Maria K\u00fc\u00fcsvek", "Hina Anwar"], "title": "Toward Greener Background Processes -- Measuring Energy Cost of Autosave Feature", "comment": "Author version. Accepted for publication in the proceedings of the\n  International Conference on Product-Focused Software Process Improvement\n  (PROFES 2025)", "summary": "Background processes in desktop applications are often overlooked in energy\nconsumption studies, yet they represent continuous, automated workloads with\nsignificant cumulative impact. This paper introduces a reusable process for\nevaluating the energy behavior of such features at the level of operational\ndesign. The process works in three phases: 1) decomposing background\nfunctionality into core operations, 2) operational isolation, and 3) controlled\nmeasurements enabling comparative profiling. We instantiate the process in a\ncase study of autosave implementations across three open-source Python-based\ntext editors. Using 900 empirical software-based energy measurements, we\nidentify key design factors affecting energy use, including save frequency,\nbuffering strategy, and auxiliary logic such as change detection. We give four\nactionable recommendations for greener implementations of autosave features in\nPython to support sustainable software practices.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u53ef\u91cd\u7528\u7684\u4e09\u9636\u6bb5\u6d41\u7a0b\u6765\u8bc4\u4f30\u684c\u9762\u5e94\u7528\u540e\u53f0\u529f\u80fd\u7684\u80fd\u8017\u884c\u4e3a\uff0c\u901a\u8fc7Python\u6587\u672c\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u4fdd\u5b58\u529f\u80fd\u6848\u4f8b\u7814\u7a76\uff0c\u8bc6\u522b\u51fa\u5f71\u54cd\u80fd\u8017\u7684\u5173\u952e\u8bbe\u8ba1\u56e0\u7d20\u5e76\u7ed9\u51fa\u7eff\u8272\u5b9e\u73b0\u5efa\u8bae", "motivation": "\u684c\u9762\u5e94\u7528\u7684\u540e\u53f0\u8fdb\u7a0b\u5728\u80fd\u8017\u7814\u7a76\u4e2d\u5e38\u88ab\u5ffd\u89c6\uff0c\u4f46\u8fd9\u4e9b\u6301\u7eed\u8fd0\u884c\u7684\u81ea\u52a8\u5316\u5de5\u4f5c\u8d1f\u8f7d\u5177\u6709\u663e\u8457\u7684\u7d2f\u79ef\u5f71\u54cd\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u7684\u8bc4\u4f30\u65b9\u6cd5", "method": "\u4e09\u9636\u6bb5\u6d41\u7a0b\uff1a1) \u5c06\u540e\u53f0\u529f\u80fd\u5206\u89e3\u4e3a\u6838\u5fc3\u64cd\u4f5c 2) \u64cd\u4f5c\u9694\u79bb 3) \u53d7\u63a7\u6d4b\u91cf\u5b9e\u73b0\u6bd4\u8f83\u5206\u6790\u3002\u5728\u4e09\u4e2a\u5f00\u6e90Python\u6587\u672c\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u4fdd\u5b58\u5b9e\u73b0\u4e2d\u8fdb\u884c\u6848\u4f8b\u7814\u7a76\uff0c\u8fdb\u884c\u4e86900\u6b21\u57fa\u4e8e\u8f6f\u4ef6\u7684\u80fd\u8017\u6d4b\u91cf", "result": "\u8bc6\u522b\u51fa\u5f71\u54cd\u80fd\u8017\u7684\u5173\u952e\u8bbe\u8ba1\u56e0\u7d20\uff1a\u4fdd\u5b58\u9891\u7387\u3001\u7f13\u51b2\u7b56\u7565\u4ee5\u53ca\u53d8\u66f4\u68c0\u6d4b\u7b49\u8f85\u52a9\u903b\u8f91", "conclusion": "\u63d0\u51fa\u4e86\u56db\u4e2a\u53ef\u64cd\u4f5c\u7684\u5efa\u8bae\uff0c\u652f\u6301Python\u4e2d\u81ea\u52a8\u4fdd\u5b58\u529f\u80fd\u7684\u7eff\u8272\u5b9e\u73b0\uff0c\u4fc3\u8fdb\u53ef\u6301\u7eed\u8f6f\u4ef6\u5f00\u53d1\u5b9e\u8df5"}}
{"id": "2509.11748", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.11748", "abs": "https://arxiv.org/abs/2509.11748", "authors": ["Marius Mignard", "Steven Costiou", "Nicolas Anquetil", "Anne Etien"], "title": "Analysing Python Machine Learning Notebooks with Moose", "comment": null, "summary": "Machine Learning (ML) code, particularly within notebooks, often exhibits\nlower quality compared to traditional software. Bad practices arise at three\ndistinct levels: general Python coding conventions, the organizational\nstructure of the notebook itself, and ML-specific aspects such as\nreproducibility and correct API usage. However, existing analysis tools\ntypically focus on only one of these levels and struggle to capture ML-specific\nsemantics, limiting their ability to detect issues. This paper introduces\nVespucci Linter, a static analysis tool with multi-level capabilities, built on\nMoose and designed to address this challenge. Leveraging a metamodeling\napproach that unifies the notebook's structural elements with Python code\nentities, our linter enables a more contextualized analysis to identify issues\nacross all three levels. We implemented 22 linting rules derived from the\nliterature and applied our tool to a corpus of 5,000 notebooks from the Kaggle\nplatform. The results reveal violations at all levels, validating the relevance\nof our multi-level approach and demonstrating Vespucci Linter's potential to\nimprove the quality and reliability of ML development in notebook environments.", "AI": {"tldr": "Vespucci Linter\u662f\u4e00\u4e2a\u591a\u5c42\u6b21\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u4e13\u95e8\u7528\u4e8e\u68c0\u6d4b\u673a\u5668\u5b66\u4e60\u7b14\u8bb0\u672c\u4ee3\u7801\u4e2d\u7684\u8d28\u91cf\u95ee\u9898\uff0c\u6db5\u76d6Python\u7f16\u7801\u89c4\u8303\u3001\u7b14\u8bb0\u672c\u7ec4\u7ec7\u7ed3\u6784\u548cML\u7279\u5b9a\u95ee\u9898\u4e09\u4e2a\u5c42\u9762\u3002", "motivation": "\u673a\u5668\u5b66\u4e60\u4ee3\u7801\uff08\u7279\u522b\u662f\u5728\u7b14\u8bb0\u672c\u4e2d\uff09\u901a\u5e38\u8d28\u91cf\u8f83\u4f4e\uff0c\u5b58\u5728\u4e09\u4e2a\u5c42\u9762\u7684\u4e0d\u826f\u5b9e\u8df5\uff1a\u901a\u7528Python\u7f16\u7801\u89c4\u8303\u3001\u7b14\u8bb0\u672c\u7ec4\u7ec7\u7ed3\u6784\u4ee5\u53caML\u7279\u5b9a\u65b9\u9762\uff08\u5982\u53ef\u91cd\u73b0\u6027\u548c\u6b63\u786eAPI\u4f7f\u7528\uff09\u3002\u73b0\u6709\u5de5\u5177\u901a\u5e38\u53ea\u5173\u6ce8\u5176\u4e2d\u4e00\u4e2a\u5c42\u9762\uff0c\u96be\u4ee5\u6355\u6349ML\u7279\u5b9a\u8bed\u4e49\u3002", "method": "\u57fa\u4e8eMoose\u6784\u5efa\u7684\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u91c7\u7528\u5143\u5efa\u6a21\u65b9\u6cd5\u7edf\u4e00\u7b14\u8bb0\u672c\u7ed3\u6784\u5143\u7d20\u548cPython\u4ee3\u7801\u5b9e\u4f53\uff0c\u5b9e\u73b0\u4e8622\u4e2a\u57fa\u4e8e\u6587\u732e\u7684linting\u89c4\u5219\uff0c\u5e76\u5728Kaggle\u5e73\u53f0\u76845000\u4e2a\u7b14\u8bb0\u672c\u8bed\u6599\u5e93\u4e0a\u5e94\u7528\u3002", "result": "\u5728\u6240\u6709\u4e09\u4e2a\u5c42\u9762\u90fd\u53d1\u73b0\u4e86\u8fdd\u89c4\u884c\u4e3a\uff0c\u9a8c\u8bc1\u4e86\u591a\u5c42\u6b21\u65b9\u6cd5\u7684\u76f8\u5173\u6027\uff0c\u8bc1\u660e\u4e86Vespucci Linter\u5728\u63d0\u9ad8\u7b14\u8bb0\u672c\u73af\u5883\u4e2dML\u5f00\u53d1\u8d28\u91cf\u548c\u53ef\u9760\u6027\u65b9\u9762\u7684\u6f5c\u529b\u3002", "conclusion": "Vespucci Linter\u901a\u8fc7\u591a\u5c42\u6b21\u5206\u6790\u65b9\u6cd5\u6709\u6548\u8bc6\u522b\u673a\u5668\u5b66\u4e60\u7b14\u8bb0\u672c\u4ee3\u7801\u4e2d\u7684\u8d28\u91cf\u95ee\u9898\uff0c\u4e3a\u89e3\u51b3ML\u5f00\u53d1\u4e2d\u7684\u4ee3\u7801\u8d28\u91cf\u6311\u6218\u63d0\u4f9b\u4e86\u6709\u529b\u5de5\u5177\u3002"}}
{"id": "2509.11787", "categories": ["cs.SE", "cs.MA"], "pdf": "https://arxiv.org/pdf/2509.11787", "abs": "https://arxiv.org/abs/2509.11787", "authors": ["Pascal Joos", "Islem Bouzenia", "Michael Pradel"], "title": "CodeCureAgent: Automatic Classification and Repair of Static Analysis Warnings", "comment": null, "summary": "Static analysis tools are widely used to detect bugs, vulnerabilities, and\ncode smells. Traditionally, developers must resolve these warnings manually.\nBecause this process is tedious, developers sometimes ignore warnings, leading\nto an accumulation of warnings and a degradation of code quality. This paper\npresents CodeCureAgent, an approach that harnesses LLM-based agents to\nautomatically analyze, classify, and repair static analysis warnings. Unlike\nprevious work, our method does not follow a predetermined algorithm. Instead,\nwe adopt an agentic framework that iteratively invokes tools to gather\nadditional information from the codebase (e.g., via code search) and edit the\ncodebase to resolve the warning. CodeCureAgent detects and suppresses false\npositives, while fixing true positives when identified. We equip CodeCureAgent\nwith a three-step heuristic to approve patches: (1) build the project, (2)\nverify that the warning disappears without introducing new warnings, and (3)\nrun the test suite. We evaluate CodeCureAgent on a dataset of 1,000 SonarQube\nwarnings found in 106 Java projects and covering 291 distinct rules. Our\napproach produces plausible fixes for 96.8% of the warnings, outperforming\nstate-of-the-art baseline approaches by 30.7% and 29.2% in plausible-fix rate,\nrespectively. Manual inspection of 291 cases reveals a correct-fix rate of\n86.3%, showing that CodeCureAgent can reliably repair static analysis warnings.\nThe approach incurs LLM costs of about 2.9 cents (USD) and an end-to-end\nprocessing time of about four minutes per warning. We envision CodeCureAgent\nhelping to clean existing codebases and being integrated into CI/CD pipelines\nto prevent the accumulation of static analysis warnings.", "AI": {"tldr": "CodeCureAgent\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u7684\u667a\u80fd\u4f53\u65b9\u6cd5\uff0c\u80fd\u591f\u81ea\u52a8\u5206\u6790\u3001\u5206\u7c7b\u548c\u4fee\u590d\u9759\u6001\u5206\u6790\u8b66\u544a\uff0c\u65e0\u9700\u9884\u5b9a\u4e49\u7b97\u6cd5\uff0c\u901a\u8fc7\u8fed\u4ee3\u8c03\u7528\u5de5\u5177\u6536\u96c6\u4ee3\u7801\u5e93\u4fe1\u606f\u5e76\u7f16\u8f91\u4ee3\u7801\u6765\u89e3\u51b3\u95ee\u9898\u3002", "motivation": "\u4f20\u7edf\u4e0a\u5f00\u53d1\u8005\u9700\u8981\u624b\u52a8\u5904\u7406\u9759\u6001\u5206\u6790\u5de5\u5177\u4ea7\u751f\u7684\u8b66\u544a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7e41\u7410\u4e14\u5bb9\u6613\u5bfc\u81f4\u8b66\u544a\u79ef\u7d2f\u548c\u4ee3\u7801\u8d28\u91cf\u4e0b\u964d\uff0c\u56e0\u6b64\u9700\u8981\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528\u57fa\u4e8eLLM\u7684\u667a\u80fd\u4f53\u6846\u67b6\uff0c\u8fed\u4ee3\u8c03\u7528\u5de5\u5177\u6536\u96c6\u4ee3\u7801\u5e93\u4fe1\u606f\uff08\u5982\u4ee3\u7801\u641c\u7d22\uff09\uff0c\u7f16\u8f91\u4ee3\u7801\u5e93\u89e3\u51b3\u8b66\u544a\uff0c\u5e76\u4f7f\u7528\u4e09\u6b65\u542f\u53d1\u5f0f\u65b9\u6cd5\u9a8c\u8bc1\u8865\u4e01\uff1a\u6784\u5efa\u9879\u76ee\u3001\u9a8c\u8bc1\u8b66\u544a\u6d88\u5931\u4e14\u65e0\u65b0\u8b66\u544a\u3001\u8fd0\u884c\u6d4b\u8bd5\u5957\u4ef6\u3002", "result": "\u5728106\u4e2aJava\u9879\u76ee\u76841000\u4e2aSonarQube\u8b66\u544a\u4e0a\u8bc4\u4f30\uff0c\u4ea7\u751f96.8%\u7684\u5408\u7406\u4fee\u590d\uff0c\u6bd4\u6700\u5148\u8fdb\u57fa\u7ebf\u65b9\u6cd5\u5206\u522b\u9ad8\u51fa30.7%\u548c29.2%\uff0c\u6b63\u786e\u4fee\u590d\u7387\u8fbe\u523086.3%\uff0c\u6bcf\u4e2a\u8b66\u544a\u5904\u7406\u6210\u672c\u7ea62.9\u7f8e\u5206\uff0c\u5904\u7406\u65f6\u95f4\u7ea64\u5206\u949f\u3002", "conclusion": "CodeCureAgent\u80fd\u591f\u53ef\u9760\u5730\u4fee\u590d\u9759\u6001\u5206\u6790\u8b66\u544a\uff0c\u6709\u52a9\u4e8e\u6e05\u7406\u73b0\u6709\u4ee3\u7801\u5e93\u5e76\u96c6\u6210\u5230CI/CD\u7ba1\u9053\u4e2d\u9632\u6b62\u8b66\u544a\u79ef\u7d2f\u3002"}}
{"id": "2509.11937", "categories": ["cs.SE", "cs.AI", "D.2.0; E.m"], "pdf": "https://arxiv.org/pdf/2509.11937", "abs": "https://arxiv.org/abs/2509.11937", "authors": ["Alexandre Sallinen", "Stefan Krsteski", "Paul Teiletche", "Marc-Antoine Allard", "Baptiste Lecoeur", "Michael Zhang", "Fabrice Nemo", "David Kalajdzic", "Matthias Meyer", "Mary-Anne Hartley"], "title": "MMORE: Massive Multimodal Open RAG & Extraction", "comment": "This paper was originally submitted to the CODEML workshop for ICML\n  2025. 9 pages (including references and appendices)", "summary": "We introduce MMORE, an open-source pipeline for Massive Multimodal Open\nRetrievalAugmented Generation and Extraction, designed to ingest, transform,\nand retrieve knowledge from heterogeneous document formats at scale. MMORE\nsupports more than fifteen file types, including text, tables, images, emails,\naudio, and video, and processes them into a unified format to enable downstream\napplications for LLMs. The architecture offers modular, distributed processing,\nenabling scalable parallelization across CPUs and GPUs. On processing\nbenchmarks, MMORE demonstrates a 3.8-fold speedup over single-node baselines\nand 40% higher accuracy than Docling on scanned PDFs. The pipeline integrates\nhybrid dense-sparse retrieval and supports both interactive APIs and batch RAG\nendpoints. Evaluated on PubMedQA, MMORE-augmented medical LLMs improve\nbiomedical QA accuracy with increasing retrieval depth. MMORE provides a\nrobust, extensible foundation for deploying task-agnostic RAG systems on\ndiverse, real-world multimodal data. The codebase is available at\nhttps://github.com/swiss-ai/mmore.", "AI": {"tldr": "MMORE\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u591a\u6a21\u6001\u6587\u6863\u5904\u7406\u7ba1\u9053\uff0c\u652f\u630115+\u79cd\u6587\u4ef6\u683c\u5f0f\uff0c\u63d0\u4f9b\u7edf\u4e00\u7684\u6587\u6863\u5904\u7406\u3001\u6df7\u5408\u68c0\u7d22\u548cRAG\u529f\u80fd\uff0c\u5728\u901f\u5ea6\u548c\u51c6\u786e\u6027\u4e0a\u4f18\u4e8e\u57fa\u51c6\u65b9\u6cd5\u3002", "motivation": "\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u6587\u6863\u6570\u636e\u5177\u6709\u591a\u6a21\u6001\u548c\u5f02\u6784\u7279\u6027\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u591f\u7edf\u4e00\u5904\u7406\u5404\u79cd\u683c\u5f0f\u6587\u6863\u5e76\u652f\u6301\u5927\u89c4\u6a21\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u7684\u7cfb\u7edf\u3002", "method": "\u91c7\u7528\u6a21\u5757\u5316\u5206\u5e03\u5f0f\u67b6\u6784\uff0c\u652f\u6301CPU\u548cGPU\u5e76\u884c\u5904\u7406\uff0c\u5c06\u4e0d\u540c\u683c\u5f0f\u6587\u6863\u8f6c\u6362\u4e3a\u7edf\u4e00\u683c\u5f0f\uff0c\u96c6\u6210\u7a20\u5bc6-\u7a00\u758f\u6df7\u5408\u68c0\u7d22\u6280\u672f\uff0c\u63d0\u4f9bAPI\u548c\u6279\u91cfRAG\u7aef\u70b9\u3002", "result": "\u5728\u5904\u7406\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u6bd4\u5355\u8282\u70b9\u57fa\u7ebf\u5feb3.8\u500d\uff0c\u5728\u626b\u63cfPDF\u4e0a\u6bd4Docling\u51c6\u786e\u7387\u9ad840%\uff0c\u5728PubMedQA\u4e0a\u533b\u5b66LLM\u7684\u95ee\u7b54\u51c6\u786e\u6027\u968f\u68c0\u7d22\u6df1\u5ea6\u589e\u52a0\u800c\u63d0\u5347\u3002", "conclusion": "MMORE\u4e3a\u5728\u591a\u6a21\u6001\u771f\u5b9e\u4e16\u754c\u6570\u636e\u4e0a\u90e8\u7f72\u4efb\u52a1\u65e0\u5173\u7684RAG\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5f3a\u5927\u4e14\u53ef\u6269\u5c55\u7684\u57fa\u7840\u8bbe\u65bd\u3002"}}
{"id": "2509.11942", "categories": ["cs.SE", "cs.AI", "cs.HC"], "pdf": "https://arxiv.org/pdf/2509.11942", "abs": "https://arxiv.org/abs/2509.11942", "authors": ["Lu\u00eds F. Gomes", "Xin Zhou", "David Lo", "Rui Abreu"], "title": "VisDocSketcher: Towards Scalable Visual Documentation with Agentic Systems", "comment": null, "summary": "Visual documentation is an effective tool for reducing the cognitive barrier\ndevelopers face when understanding unfamiliar code, enabling more intuitive\ncomprehension. Compared to textual documentation, it provides a higher-level\nunderstanding of the system structure and data flow. Developers usually prefer\nvisual representations over lengthy textual descriptions for large software\nsystems. Visual documentation is both difficult to produce and challenging to\nevaluate. Manually creating it is time-consuming, and currently, no existing\napproach can automatically generate high-level visual documentation directly\nfrom code. Its evaluation is often subjective, making it difficult to\nstandardize and automate. To address these challenges, this paper presents the\nfirst exploration of using agentic LLM systems to automatically generate visual\ndocumentation. We introduce VisDocSketcher, the first agent-based approach that\ncombines static analysis with LLM agents to identify key elements in the code\nand produce corresponding visual representations. We propose a novel evaluation\nframework, AutoSketchEval, for assessing the quality of generated visual\ndocumentation using code-level metrics. The experimental results show that our\napproach can valid visual documentation for 74.4% of the samples. It shows an\nimprovement of 26.7-39.8% over a simple template-based baseline. Our evaluation\nframework can reliably distinguish high-quality (code-aligned) visual\ndocumentation from low-quality (non-aligned) ones, achieving an AUC exceeding\n0.87. Our work lays the foundation for future research on automated visual\ndocumentation by introducing practical tools that not only generate valid\nvisual representations but also reliably assess their quality.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86VisDocSketcher\uff0c\u9996\u4e2a\u57fa\u4e8eLLM\u4ee3\u7406\u7684\u7cfb\u7edf\uff0c\u901a\u8fc7\u7ed3\u5408\u9759\u6001\u5206\u6790\u548cLLM\u4ee3\u7406\u81ea\u52a8\u4ece\u4ee3\u7801\u751f\u6210\u53ef\u89c6\u5316\u6587\u6863\uff0c\u5e76\u5f00\u53d1\u4e86AutoSketchEval\u8bc4\u4f30\u6846\u67b6\u6765\u91cf\u5316\u8bc4\u4f30\u751f\u6210\u8d28\u91cf\u3002", "motivation": "\u53ef\u89c6\u5316\u6587\u6863\u80fd\u6709\u6548\u964d\u4f4e\u5f00\u53d1\u8005\u7406\u89e3\u964c\u751f\u4ee3\u7801\u7684\u8ba4\u77e5\u969c\u788d\uff0c\u4f46\u624b\u52a8\u521b\u5efa\u8017\u65f6\u4e14\u96be\u4ee5\u8bc4\u4f30\u3002\u76ee\u524d\u6ca1\u6709\u65b9\u6cd5\u80fd\u81ea\u52a8\u4ece\u4ee3\u7801\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u53ef\u89c6\u5316\u6587\u6863\uff0c\u8bc4\u4f30\u4e5f\u7f3a\u4e4f\u6807\u51c6\u5316\u65b9\u6cd5\u3002", "method": "\u7ed3\u5408\u9759\u6001\u5206\u6790\u4e0eLLM\u4ee3\u7406\u8bc6\u522b\u4ee3\u7801\u5173\u952e\u5143\u7d20\u5e76\u751f\u6210\u53ef\u89c6\u5316\u8868\u793a\uff0c\u63d0\u51faAutoSketchEval\u8bc4\u4f30\u6846\u67b6\u4f7f\u7528\u4ee3\u7801\u7ea7\u6307\u6807\u8bc4\u4f30\u751f\u6210\u8d28\u91cf\u3002", "result": "\u80fd\u4e3a74.4%\u7684\u6837\u672c\u751f\u6210\u6709\u6548\u53ef\u89c6\u5316\u6587\u6863\uff0c\u76f8\u6bd4\u57fa\u4e8e\u6a21\u677f\u7684\u57fa\u7ebf\u65b9\u6cd5\u63d0\u534726.7-39.8%\u3002\u8bc4\u4f30\u6846\u67b6\u80fd\u53ef\u9760\u533a\u5206\u9ad8\u8d28\u91cf\u548c\u4f4e\u8d28\u91cf\u6587\u6863\uff0cAUC\u8d85\u8fc70.87\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u4e3a\u81ea\u52a8\u5316\u53ef\u89c6\u5316\u6587\u6863\u7814\u7a76\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u63d0\u4f9b\u4e86\u65e2\u80fd\u751f\u6210\u6709\u6548\u53ef\u89c6\u5316\u8868\u793a\u53c8\u80fd\u53ef\u9760\u8bc4\u4f30\u8d28\u91cf\u7684\u5b9e\u7528\u5de5\u5177\u3002"}}
{"id": "2509.12021", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12021", "abs": "https://arxiv.org/abs/2509.12021", "authors": ["Benedikt Fein", "Florian Oberm\u00fcller", "Gordon Fraser"], "title": "LitterBox+: An Extensible Framework for LLM-enhanced Scratch Static Code Analysis", "comment": "ASE 2025 Tool Demonstration Track", "summary": "Large language models (LLMs) have become an essential tool to support\ndevelopers using traditional text-based programming languages, but the\ngraphical notation of the block-based Scratch programming environment inhibits\nthe use of LLMs. To overcome this limitation, we propose the LitterBox+\nframework that extends the Scratch static code analysis tool LitterBox with the\ngenerative abilities of LLMs. By converting block-based code to a textual\nrepresentation suitable for LLMs, LitterBox+ allows users to query LLMs about\ntheir programs, about quality issues reported by LitterBox, and it allows\ngenerating code fixes. Besides offering a programmatic API for these\nfunctionalities, LitterBox+ also extends the Scratch user interface to make\nthese functionalities available directly in the environment familiar to\nlearners. The framework is designed to be easily extensible with other prompts,\nLLM providers, and new features combining the program analysis capabilities of\nLitterBox with the generative features of LLMs. We provide a screencast\ndemonstrating the tool at https://youtu.be/RZ6E0xgrIgQ.", "AI": {"tldr": "LitterBox+\u6846\u67b6\u5c06Scratch\u79ef\u6728\u7f16\u7a0b\u8f6c\u6362\u4e3a\u6587\u672c\u8868\u793a\uff0c\u7ed3\u5408LLMs\u4e3a\u5b66\u4e60\u8005\u63d0\u4f9b\u4ee3\u7801\u67e5\u8be2\u3001\u8d28\u91cf\u95ee\u9898\u548c\u4fee\u590d\u5efa\u8bae\uff0c\u76f4\u63a5\u5728Scratch\u73af\u5883\u4e2d\u96c6\u6210AI\u8f85\u52a9\u529f\u80fd", "motivation": "\u89e3\u51b3\u79ef\u6728\u5f0f\u7f16\u7a0b\u73af\u5883Scratch\u4e2dLLMs\u65e0\u6cd5\u76f4\u63a5\u5904\u7406\u56fe\u5f62\u5316\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u4e3a\u5b66\u4e60\u8005\u63d0\u4f9bAI\u7f16\u7a0b\u8f85\u52a9\u652f\u6301", "method": "\u6269\u5c55LitterBox\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u5c06\u79ef\u6728\u4ee3\u7801\u8f6c\u6362\u4e3a\u9002\u5408LLMs\u7684\u6587\u672c\u8868\u793a\uff0c\u63d0\u4f9bAPI\u548c\u7528\u6237\u754c\u9762\u96c6\u6210\uff0c\u652f\u6301\u591a\u79cd\u63d0\u793a\u8bcd\u548cLLM\u63d0\u4f9b\u5546", "result": "\u5f00\u53d1\u51fa\u53ef\u76f4\u63a5\u5728Scratch\u73af\u5883\u4e2d\u4f7f\u7528\u7684LLM\u96c6\u6210\u6846\u67b6\uff0c\u652f\u6301\u7a0b\u5e8f\u67e5\u8be2\u3001\u8d28\u91cf\u95ee\u9898\u5206\u6790\u548c\u4ee3\u7801\u4fee\u590d\u751f\u6210", "conclusion": "LitterBox+\u6210\u529f\u514b\u670d\u4e86\u56fe\u5f62\u5316\u7f16\u7a0b\u73af\u5883\u4e2d\u4f7f\u7528LLMs\u7684\u6280\u672f\u969c\u788d\uff0c\u4e3a\u7f16\u7a0b\u6559\u80b2\u63d0\u4f9b\u4e86\u521b\u65b0\u7684AI\u8f85\u52a9\u5de5\u5177\uff0c\u6846\u67b6\u5177\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027"}}
{"id": "2509.12087", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.12087", "abs": "https://arxiv.org/abs/2509.12087", "authors": ["Pengyu Xue", "Kunwu Zheng", "Zhen Yang", "Yifei Pei", "Linhao Wu", "Jiahui Dong", "Xiapu Luo", "Yan Xiao", "Fei Liu", "Yuxuan Zhang", "Xiran Lyu", "Xianhang Li", "Xuanyu Zhu", "Chengyi Wang"], "title": "A New Benchmark for Evaluating Code Translation with Third-Party Libraries", "comment": null, "summary": "In recent years, Large Language Models (LLMs) have been widely studied in the\ncode translation field on the method, class, and even repository levels.\nHowever, most of these benchmarks are limited in terms of Third-Party Library\n(TPL) categories and scales, making TPL-related errors hard to expose and\nhindering the development of targeted solutions. Considering the high\ndependence (over 90%) on TPLs in practical programming, demystifying and\nanalyzing LLMs' code translation performance involving various TPLs becomes\nimperative. To address this gap, we construct TransLibEval, the first benchmark\ndedicated to library-centric code translation. It consists of 200 real-world\ntasks across Python, Java, and C++, each explicitly involving TPLs from diverse\ncategories such as data processing, machine learning, and web development, with\ncomprehensive dependency coverage and high-coverage test suites. We evaluate\nseven recent LLMs of commercial, general, and code-specialized families under\nsix translation strategies of three categories: Direct, IR-guided, and\nRetrieval-augmented. Experimental results show a dramatic performance drop\ncompared with library-free settings (average CA decline over 60%), while\ndiverse strategies demonstrate heterogeneous advantages. Furthermore, we\nanalyze 4,831 failed cases from GPT-4o, one of the State-of-the-Art (SOTA)\nLLMs, revealing numerous third-party reference errors that were obscured\npreviously. These findings highlight the unique challenges of library-centric\ntranslation and provide practical guidance for improving TPL-aware code\nintelligence.", "AI": {"tldr": "Error", "motivation": "Error", "method": "Error", "result": "Error", "conclusion": "Error"}}
{"id": "2509.12159", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.12159", "abs": "https://arxiv.org/abs/2509.12159", "authors": ["Jingyu Xiao", "Zhongyi Zhang", "Yuxuan Wan", "Yintong Huo", "Yang Liu", "Michael R. Lyu"], "title": "EfficientUICoder: Efficient MLLM-based UI Code Generation via Input and Output Token Compression", "comment": null, "summary": "Multimodal Large Language Models have demonstrated exceptional performance in\nUI2Code tasks, significantly enhancing website development efficiency. However,\nthese tasks incur substantially higher computational overhead than traditional\ncode generation due to the large number of input image tokens and extensive\noutput code tokens required. Our comprehensive study identifies significant\nredundancies in both image and code tokens that exacerbate computational\ncomplexity and hinder focus on key UI elements, resulting in excessively\nlengthy and often invalid HTML files. We propose EfficientUICoder, a\ncompression framework for efficient UI code generation with three key\ncomponents. First, Element and Layout-aware Token Compression preserves\nessential UI information by detecting element regions and constructing UI\nelement trees. Second, Region-aware Token Refinement leverages attention scores\nto discard low-attention tokens from selected regions while integrating\nhigh-attention tokens from unselected regions. Third, Adaptive Duplicate Token\nSuppression dynamically reduces repetitive generation by tracking HTML/CSS\nstructure frequencies and applying exponential penalties. Extensive experiments\nshow EfficientUICoderachieves a 55%-60% compression ratio without compromising\nwebpage quality and delivers superior efficiency improvements: reducing\ncomputational cost by 44.9%, generated tokens by 41.4%, prefill time by 46.6%,\nand inference time by 48.8% on 34B-level MLLMs. Code is available at\nhttps://github.com/WebPAI/EfficientUICoder.", "AI": {"tldr": "EfficientUICoder\u662f\u4e00\u4e2a\u7528\u4e8eUI\u4ee3\u7801\u751f\u6210\u7684\u9ad8\u6548\u538b\u7f29\u6846\u67b6\uff0c\u901a\u8fc7\u5143\u7d20\u611f\u77e5\u538b\u7f29\u3001\u533a\u57df\u611f\u77e5\u7ec6\u5316\u548c\u81ea\u9002\u5e94\u91cd\u590d\u6291\u5236\uff0c\u5728\u4fdd\u6301\u7f51\u9875\u8d28\u91cf\u7684\u540c\u65f6\u5b9e\u73b055%-60%\u7684\u538b\u7f29\u6bd4\uff0c\u663e\u8457\u964d\u4f4e\u8ba1\u7b97\u6210\u672c\u548c\u65f6\u95f4\u5f00\u9500\u3002", "motivation": "\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\u5728UI\u8f6c\u4ee3\u7801\u4efb\u52a1\u4e2d\u8ba1\u7b97\u5f00\u9500\u5de8\u5927\uff0c\u5b58\u5728\u5927\u91cf\u56fe\u50cf\u548c\u4ee3\u7801\u4ee4\u724c\u5197\u4f59\uff0c\u5bfc\u81f4\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8\u3001\u5173\u952eUI\u5143\u7d20\u5173\u6ce8\u4e0d\u8db3\uff0c\u751f\u6210\u5197\u957f\u4e14\u65e0\u6548\u7684HTML\u6587\u4ef6\u3002", "method": "\u63d0\u51fa\u4e09\u7ec4\u4ef6\u538b\u7f29\u6846\u67b6\uff1a1)\u5143\u7d20\u548c\u5e03\u5c40\u611f\u77e5\u4ee4\u724c\u538b\u7f29\uff0c\u68c0\u6d4b\u5143\u7d20\u533a\u57df\u5e76\u6784\u5efaUI\u5143\u7d20\u6811\uff1b2)\u533a\u57df\u611f\u77e5\u4ee4\u724c\u7ec6\u5316\uff0c\u5229\u7528\u6ce8\u610f\u529b\u5206\u6570\u7b5b\u9009\u91cd\u8981\u4ee4\u724c\uff1b3)\u81ea\u9002\u5e94\u91cd\u590d\u4ee4\u724c\u6291\u5236\uff0c\u52a8\u6001\u51cf\u5c11HTML/CSS\u7ed3\u6784\u91cd\u590d\u751f\u6210\u3002", "result": "\u5b9e\u73b055%-60%\u538b\u7f29\u6bd4\uff0c\u8ba1\u7b97\u6210\u672c\u964d\u4f4e44.9%\uff0c\u751f\u6210\u4ee4\u724c\u51cf\u5c1141.4%\uff0c\u9884\u586b\u5145\u65f6\u95f4\u51cf\u5c1146.6%\uff0c\u63a8\u7406\u65f6\u95f4\u51cf\u5c1148.8%\uff0c\u4e14\u4e0d\u635f\u5bb3\u7f51\u9875\u8d28\u91cf\u3002", "conclusion": "EfficientUICoder\u6709\u6548\u89e3\u51b3\u4e86UI\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u5197\u4f59\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\u5728UI2Code\u4efb\u52a1\u4e2d\u7684\u6548\u7387\uff0c\u4e3a\u9ad8\u6548\u7f51\u7ad9\u5f00\u53d1\u63d0\u4f9b\u4e86\u5b9e\u7528\u89e3\u51b3\u65b9\u6848\u3002"}}

{"id": "2507.19728", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.19728", "abs": "https://arxiv.org/abs/2507.19728", "authors": ["Lalita Na Nongkhai", "Jingyun Wang", "Takahiko Mendori"], "title": "Development and Evaluation of Adaptive LearningSupport System Based on Ontology of MultipleProgramming Languages", "comment": "This document provides corrections to the published article.\n  Corrections include clarifying figure legends and addressing grammatical\n  issues to enhance clarity. The authors state that the scientific conclusions\n  are unaffected", "summary": "This paper introduces an ontology-based approach within an adaptive learning\nsupport system for computer programming. This system (named ADVENTURE) is\ndesigned to deliver personalized programming exercises that are tailored to\nindividual learners' skill levels. ADVENTURE utilizes an ontology, named\nCONTINUOUS, which encompasses common concepts across multiple programming\nlanguages. The system leverages this ontology not only to visualize programming\nconcepts but also to provide hints during practice programming exercises and\nrecommend subsequent programming concepts. The adaptive mechanism is driven by\nthe Elo Rating System, applied in an educational context to dynamically\nestimate the most appropriate exercise difficulty for each learner. An\nexperimental study compared two instructional modes, adaptive and random, based\non six features derived from 1,186 code submissions across all the experimental\ngroups. The results indicate significant differences in four of six analyzed\nfeatures between these two modes. Notably, the adaptive mode demonstrates a\nsignificant difference over the random mode in two features, the submission of\ncorrect answers and the number of pass concepts. Therefore, these results\nunderscore that this adaptive learning support system may support learners in\npracticing programming exercises.", "AI": {"tldr": "\u8bba\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u57fa\u4e8e\u672c\u4f53\u7684\u81ea\u9002\u5e94\u5b66\u4e60\u652f\u6301\u7cfb\u7edfADVENTURE\uff0c\u7528\u4e8e\u4e2a\u6027\u5316\u7f16\u7a0b\u7ec3\u4e60\uff0c\u901a\u8fc7Elo\u8bc4\u5206\u7cfb\u7edf\u52a8\u6001\u8c03\u6574\u96be\u5ea6\uff0c\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\u81ea\u9002\u5e94\u6a21\u5f0f\u4f18\u4e8e\u968f\u673a\u6a21\u5f0f\u3002", "motivation": "\u4e3a\u7f16\u7a0b\u5b66\u4e60\u8005\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u7ec3\u4e60\u652f\u6301\uff0c\u901a\u8fc7\u81ea\u9002\u5e94\u673a\u5236\u63d0\u5347\u5b66\u4e60\u6548\u679c\u3002", "method": "\u5229\u7528\u672c\u4f53CONTINUOUS\u8de8\u8bed\u8a00\u6982\u5ff5\uff0c\u7ed3\u5408Elo\u8bc4\u5206\u7cfb\u7edf\u52a8\u6001\u8c03\u6574\u7ec3\u4e60\u96be\u5ea6\uff0c\u5b9e\u9a8c\u6bd4\u8f83\u81ea\u9002\u5e94\u4e0e\u968f\u673a\u6a21\u5f0f\u3002", "result": "\u81ea\u9002\u5e94\u6a21\u5f0f\u5728\u6b63\u786e\u63d0\u4ea4\u548c\u901a\u8fc7\u6982\u5ff5\u6570\u91cf\u4e0a\u663e\u8457\u4f18\u4e8e\u968f\u673a\u6a21\u5f0f\u3002", "conclusion": "ADVENTURE\u7cfb\u7edf\u80fd\u6709\u6548\u652f\u6301\u7f16\u7a0b\u5b66\u4e60\u8005\uff0c\u81ea\u9002\u5e94\u673a\u5236\u5177\u6709\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002"}}
{"id": "2507.19549", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19549", "abs": "https://arxiv.org/abs/2507.19549", "authors": ["Nadeen Fathallah", "Daniel Hern\u00e1ndez", "Steffen Staab"], "title": "AccessGuru: Leveraging LLMs to Detect and Correct Web Accessibility Violations in HTML Code", "comment": null, "summary": "The vast majority of Web pages fail to comply with established Web\naccessibility guidelines, excluding a range of users with diverse abilities\nfrom interacting with their content. Making Web pages accessible to all users\nrequires dedicated expertise and additional manual efforts from Web page\nproviders. To lower their efforts and promote inclusiveness, we aim to\nautomatically detect and correct Web accessibility violations in HTML code.\nWhile previous work has made progress in detecting certain types of\naccessibility violations, the problem of automatically detecting and correcting\naccessibility violations remains an open challenge that we address. We\nintroduce a novel taxonomy classifying Web accessibility violations into three\nkey categories - Syntactic, Semantic, and Layout. This taxonomy provides a\nstructured foundation for developing our detection and correction method and\nredefining evaluation metrics. We propose a novel method, AccessGuru, which\ncombines existing accessibility testing tools and Large Language Models (LLMs)\nto detect violations and applies taxonomy-driven prompting strategies to\ncorrect all three categories. To evaluate these capabilities, we develop a\nbenchmark of real-world Web accessibility violations. Our benchmark quantifies\nsyntactic and layout compliance and judges semantic accuracy through\ncomparative analysis with human expert corrections. Evaluation against our\nbenchmark shows that AccessGuru achieves up to 84% average violation score\ndecrease, significantly outperforming prior methods that achieve at most 50%.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u81ea\u52a8\u68c0\u6d4b\u548c\u7ea0\u6b63\u7f51\u9875\u53ef\u8bbf\u95ee\u6027\u8fdd\u89c4\u7684\u65b9\u6cd5AccessGuru\uff0c\u7ed3\u5408\u73b0\u6709\u5de5\u5177\u548c\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6548\u679c\u3002", "motivation": "\u5927\u591a\u6570\u7f51\u9875\u4e0d\u7b26\u5408\u53ef\u8bbf\u95ee\u6027\u6307\u5357\uff0c\u963b\u788d\u4e86\u591a\u6837\u7528\u6237\u7fa4\u4f53\u7684\u4f7f\u7528\uff0c\u9700\u964d\u4f4e\u624b\u52a8\u4fee\u590d\u6210\u672c\u3002", "method": "\u63d0\u51fa\u5206\u7c7b\u6cd5\u5c06\u8fdd\u89c4\u5206\u4e3a\u4e09\u7c7b\uff0c\u7ed3\u5408\u5de5\u5177\u548cLLMs\u68c0\u6d4b\u4e0e\u7ea0\u6b63\uff0c\u5e76\u5f00\u53d1\u57fa\u51c6\u8bc4\u4f30\u3002", "result": "AccessGuru\u5e73\u5747\u8fdd\u89c4\u5206\u6570\u964d\u4f4e84%\uff0c\u8fdc\u8d85\u4e4b\u524d\u65b9\u6cd5\u768450%\u3002", "conclusion": "AccessGuru\u6709\u6548\u89e3\u51b3\u4e86\u81ea\u52a8\u68c0\u6d4b\u548c\u7ea0\u6b63\u7f51\u9875\u53ef\u8bbf\u95ee\u6027\u8fdd\u89c4\u7684\u6311\u6218\u3002"}}
{"id": "2507.20251", "categories": ["cs.PL", "cs.CC", "cs.DB", "cs.LO"], "pdf": "https://arxiv.org/pdf/2507.20251", "abs": "https://arxiv.org/abs/2507.20251", "authors": ["Angelos Charalambidis", "Babis Kostopoulos", "Christos Nomikos", "Panos Rondogiannis"], "title": "The Power of Negation in Higher-Order Datalog", "comment": null, "summary": "We investigate the expressive power of Higher-Order Datalog$^\\neg$ under both\nthe well-founded and the stable model semantics, establishing tight connections\nwith complexity classes. We prove that under the well-founded semantics, for\nall $k\\geq 1$, $(k+1)$-Order Datalog$^\\neg$ captures k-EXP, a result that holds\nwithout explicit ordering of the input database. The proof of this fact can be\nperformed either by using the powerful existential predicate variables of the\nlanguage or by using partially applied relations and relation enumeration.\nFurthermore, we demonstrate that this expressive power is retained within a\nstratified fragment of the language. Under the stable model semantics, we show\nthat $(k+1)$-Order Datalog$^\\neg$ captures co-(k-NEXP) using cautious reasoning\nand k-NEXP using brave reasoning, again with analogous results for the\nstratified fragment augmented with choice rules. Our results establish a\nhierarchy of expressive power, highlighting an interesting trade-off between\norder and non-determinism in the context of higher-order logic programming:\nincreasing the order of programs under the well-founded semantics can surpass\nthe expressive power of lower-order programs under the stable model semantics.", "AI": {"tldr": "\u7814\u7a76\u4e86\u9ad8\u9636Datalog$^\\neg$\u5728\u826f\u57fa\u8bed\u4e49\u548c\u7a33\u5b9a\u6a21\u578b\u8bed\u4e49\u4e0b\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u53d1\u73b0\u5176\u4e0e\u590d\u6742\u6027\u7c7b\u6709\u7d27\u5bc6\u8054\u7cfb\u3002", "motivation": "\u63a2\u7d22\u9ad8\u9636\u903b\u8f91\u7f16\u7a0b\u4e2d\u9636\u6570\u4e0e\u975e\u786e\u5b9a\u6027\u4e4b\u95f4\u7684\u6743\u8861\u5173\u7cfb\u3002", "method": "\u4f7f\u7528\u826f\u57fa\u8bed\u4e49\u548c\u7a33\u5b9a\u6a21\u578b\u8bed\u4e49\u5206\u6790\u9ad8\u9636Datalog$^\\neg$\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5e76\u901a\u8fc7\u90e8\u5206\u5e94\u7528\u5173\u7cfb\u548c\u5173\u7cfb\u679a\u4e3e\u7b49\u65b9\u6cd5\u8bc1\u660e\u7ed3\u679c\u3002", "result": "\u5728\u826f\u57fa\u8bed\u4e49\u4e0b\uff0c$(k+1)$-\u9636Datalog$^\\neg$\u6355\u83b7k-EXP\uff1b\u5728\u7a33\u5b9a\u6a21\u578b\u8bed\u4e49\u4e0b\uff0c\u5206\u522b\u6355\u83b7co-(k-NEXP)\u548ck-NEXP\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86\u9ad8\u9636\u903b\u8f91\u7f16\u7a0b\u4e2d\u9636\u6570\u4e0e\u975e\u786e\u5b9a\u6027\u7684\u8868\u8fbe\u80fd\u529b\u5c42\u6b21\u7ed3\u6784\u3002"}}
{"id": "2507.19687", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.19687", "abs": "https://arxiv.org/abs/2507.19687", "authors": ["Joao Pedro Duarte", "Paulo Borba", "Guilherme Cavalcanti"], "title": "LastMerge: A language-agnostic structured tool for code integration", "comment": null, "summary": "Unstructured line-based merge tools are widely used in practice. Structured\nAST-based merge tools show significantly improved merge accuracy, but are\nrarely used in practice because they are language specific and costly,\nconsequently not being available for many programming languages. To improve\nmerge accuracy for a wide range of languages, we propose LastMerge, a generic\nstructured merge tool that can be configured through a thin interface that\nsignificantly reduces the effort of supporting structured merge. To understand\nthe impact that generic structured merge might have on merge accuracy and\nperformance, we run an experiment with four structured merge tools: two Java\nspecific tools, jDime and Spork, and their generic counterparts, respectively\nLastMerge and Mergiraf. Using each tool, we replay merge scenarios from a\nsignificant dataset, and collect data on runtime, behavioral divergences, and\nmerge accuracy. Our results show no evidence that generic structured merge\nsignificantly impacts merge accuracy. Although we observe a difference rate of\napproximately 10% between the Java specific tools and their generic\ncounterparts, most of the differences stem from implementation details and\ncould be avoided. We find that LastMerge reports 15% fewer false positives than\njDime while Mergiraf misses 42% fewer false negatives than Spork. Both generic\ntools exhibit comparable runtime performance to the state of the art language\nspecific implementations. These results suggest that generic structured merge\ntools can effectively replace language-specific ones, paving the way for\nbroader adoption of structured merge in industry.", "AI": {"tldr": "LastMerge\u662f\u4e00\u79cd\u901a\u7528\u7684\u7ed3\u6784\u5316\u5408\u5e76\u5de5\u5177\uff0c\u901a\u8fc7\u7b80\u5316\u914d\u7f6e\u63a5\u53e3\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u5b9e\u9a8c\u8868\u660e\u5176\u51c6\u786e\u6027\u4e0d\u900a\u4e8e\u8bed\u8a00\u7279\u5b9a\u5de5\u5177\u3002", "motivation": "\u89e3\u51b3\u7ed3\u6784\u5316\u5408\u5e76\u5de5\u5177\u56e0\u8bed\u8a00\u7279\u5b9a\u6027\u548c\u9ad8\u6210\u672c\u800c\u96be\u4ee5\u5e7f\u6cdb\u5e94\u7528\u7684\u95ee\u9898\u3002", "method": "\u63d0\u51faLastMerge\uff0c\u5e76\u901a\u8fc7\u5b9e\u9a8c\u6bd4\u8f83\u5176\u4e0e\u8bed\u8a00\u7279\u5b9a\u5de5\u5177\uff08jDime\u548cSpork\uff09\u53ca\u5176\u901a\u7528\u7248\u672c\uff08Mergiraf\uff09\u7684\u6027\u80fd\u548c\u51c6\u786e\u6027\u3002", "result": "\u901a\u7528\u5de5\u5177\u5728\u51c6\u786e\u6027\u4e0a\u4e0e\u8bed\u8a00\u7279\u5b9a\u5de5\u5177\u76f8\u5f53\uff0cLastMerge\u51cf\u5c1115%\u5047\u9633\u6027\uff0cMergiraf\u51cf\u5c1142%\u5047\u9634\u6027\uff0c\u4e14\u8fd0\u884c\u65f6\u6027\u80fd\u76f8\u8fd1\u3002", "conclusion": "\u901a\u7528\u7ed3\u6784\u5316\u5408\u5e76\u5de5\u5177\u53ef\u66ff\u4ee3\u8bed\u8a00\u7279\u5b9a\u5de5\u5177\uff0c\u63a8\u52a8\u5176\u5728\u5de5\u4e1a\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\u3002"}}
{"id": "2507.20674", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2507.20674", "abs": "https://arxiv.org/abs/2507.20674", "authors": ["Nima Karimipour", "Michael Pradel", "Martin Kellogg", "Manu Sridharan"], "title": "LLM-Based Repair of Static Nullability Errors", "comment": null, "summary": "Modern Java projects increasingly adopt static analysis tools that prevent\nnull-pointer exceptions by treating nullness as a type property. However,\nintegrating such tools into large, existing codebases remains a significant\nchallenge. While annotation inference can eliminate many errors automatically,\na subset of residual errors -- typically a mix of real bugs and false positives\n-- often persist and can only be resolved via code changes. Manually addressing\nthese errors is tedious and error-prone. Large language models (LLMs) offer a\npromising path toward automating these repairs, but naively-prompted LLMs often\ngenerate incorrect, contextually-inappropriate edits. Resolving a nullability\nerror demands a deep understanding of how a symbol is used across the codebase,\noften spanning methods, classes, and packages. We present NullRepair, a system\nthat integrates LLMs into a structured workflow for resolving the errors from a\nnullability checker. NullRepair's decision process follows a flowchart derived\nfrom manual analysis of 200 real-world errors. It leverages static analysis to\nidentify safe and unsafe usage regions of symbols, using error-free usage\nexamples to contextualize model prompts. Patches are generated through an\niterative interaction with the LLM that incorporates project-wide context and\ndecision logic. Our evaluation on 12 real-world Java projects shows that\nNullRepair resolves an average of 72% of the errors that remain after applying\na state-of-the-art annotation inference technique. Unlike a naively-prompted\nLLM, NullRepair also largely preserves program semantics, with all unit tests\npassing in 10/12 projects after applying every edit proposed by NullRepair, and\n98% or more tests passing in the remaining two projects.", "AI": {"tldr": "NullRepair\u662f\u4e00\u4e2a\u7ed3\u5408LLMs\u548c\u9759\u6001\u5206\u6790\u7684\u7cfb\u7edf\uff0c\u7528\u4e8e\u81ea\u52a8\u4fee\u590dJava\u4ee3\u7801\u4e2d\u7684nullability\u9519\u8bef\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u5de5\u5177\u65e0\u6cd5\u5b8c\u5168\u89e3\u51b3\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u9759\u6001\u5206\u6790\u5de5\u5177\u5728\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\u96be\u4ee5\u5b8c\u5168\u6d88\u9664nullability\u9519\u8bef\uff0c\u624b\u52a8\u4fee\u590d\u7e41\u7410\u4e14\u6613\u51fa\u9519\u3002", "method": "NullRepair\u901a\u8fc7\u6d41\u7a0b\u56fe\u51b3\u7b56\u3001\u9759\u6001\u5206\u6790\u8bc6\u522b\u7b26\u53f7\u4f7f\u7528\u533a\u57df\uff0c\u5e76\u5229\u7528LLMs\u8fed\u4ee3\u751f\u6210\u4fee\u590d\u8865\u4e01\u3002", "result": "\u572812\u4e2aJava\u9879\u76ee\u4e2d\uff0cNullRepair\u5e73\u5747\u4fee\u590d\u4e8672%\u7684\u5269\u4f59\u9519\u8bef\uff0c\u4e14\u4fdd\u6301\u4e86\u7a0b\u5e8f\u8bed\u4e49\u5b8c\u6574\u6027\u3002", "conclusion": "NullRepair\u6709\u6548\u89e3\u51b3\u4e86nullability\u9519\u8bef\u7684\u81ea\u52a8\u5316\u4fee\u590d\u95ee\u9898\uff0c\u4f18\u4e8e\u76f4\u63a5\u4f7f\u7528LLMs\u7684\u65b9\u6cd5\u3002"}}
{"id": "2507.19714", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.19714", "abs": "https://arxiv.org/abs/2507.19714", "authors": ["Feifei Niu", "Junqian Shao", "Christoph Mayr-Dorn", "Liguo Huang", "Wesley K. G. Assun\u00e7\u00e3o", "Chuanyi Li", "Jidong Ge", "Alexander Egyed"], "title": "Refactoring $\\neq$ Bug-Inducing: Improving Defect Prediction with Code Change Tactics Analysis", "comment": null, "summary": "Just-in-time defect prediction (JIT-DP) aims to predict the likelihood of\ncode changes resulting in software defects at an early stage. Although code\nchange metrics and semantic features have enhanced prediction accuracy, prior\nresearch has largely ignored code refactoring during both the evaluation and\nmethodology phases, despite its prevalence. Refactoring and its propagation\noften tangle with bug-fixing and bug-inducing changes within the same commit\nand statement. Neglecting refactoring can introduce bias into the learning and\nevaluation of JIT-DP models. To address this gap, we investigate the impact of\nrefactoring and its propagation on six state-of-the-art JIT-DP approaches. We\npropose Code chAnge Tactics (CAT) analysis to categorize code refactoring and\nits propagation, which improves labeling accuracy in the JIT-Defects4J dataset\nby 13.7%. Our experiments reveal that failing to consider refactoring\ninformation in the dataset can diminish the performance of models, particularly\nsemantic-based models, by 18.6% and 37.3% in F1-score. Additionally, we propose\nintegrating refactoring information to enhance six baseline approaches,\nresulting in overall improvements in recall and F1-score, with increases of up\nto 43.2% and 32.5%, respectively. Our research underscores the importance of\nincorporating refactoring information in the methodology and evaluation of\nJIT-DP. Furthermore, our CAT has broad applicability in analyzing refactoring\nand its propagation for software maintenance.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u4ee3\u7801\u91cd\u6784\u53ca\u5176\u4f20\u64ad\u5bf9\u5373\u65f6\u7f3a\u9677\u9884\u6d4b\uff08JIT-DP\uff09\u7684\u5f71\u54cd\uff0c\u63d0\u51faCAT\u5206\u6790\u65b9\u6cd5\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6a21\u578b\u6027\u80fd\u3002", "motivation": "\u73b0\u6709JIT-DP\u7814\u7a76\u5ffd\u89c6\u4e86\u4ee3\u7801\u91cd\u6784\u7684\u5f71\u54cd\uff0c\u5bfc\u81f4\u6a21\u578b\u5b66\u4e60\u548c\u8bc4\u4f30\u5b58\u5728\u504f\u5dee\u3002", "method": "\u63d0\u51faCode chAnge Tactics (CAT)\u5206\u6790\u65b9\u6cd5\uff0c\u7528\u4e8e\u5206\u7c7b\u4ee3\u7801\u91cd\u6784\u53ca\u5176\u4f20\u64ad\uff0c\u5e76\u6574\u5408\u91cd\u6784\u4fe1\u606f\u6539\u8fdb\u57fa\u7ebf\u6a21\u578b\u3002", "result": "CAT\u65b9\u6cd5\u5728JIT-Defects4J\u6570\u636e\u96c6\u4e0a\u63d0\u5347\u6807\u7b7e\u51c6\u786e\u738713.7%\uff0c\u5ffd\u7565\u91cd\u6784\u4fe1\u606f\u4f1a\u964d\u4f4e\u6a21\u578b\u6027\u80fd\uff08F1-score\u4e0b\u964d18.6%-37.3%\uff09\u3002\u6574\u5408\u91cd\u6784\u4fe1\u606f\u540e\uff0c\u57fa\u7ebf\u6a21\u578b\u7684\u53ec\u56de\u7387\u548cF1-score\u5206\u522b\u63d0\u534743.2%\u548c32.5%\u3002", "conclusion": "\u7814\u7a76\u5f3a\u8c03\u4e86\u5728JIT-DP\u65b9\u6cd5\u548c\u8bc4\u4f30\u4e2d\u7eb3\u5165\u91cd\u6784\u4fe1\u606f\u7684\u91cd\u8981\u6027\uff0cCAT\u65b9\u6cd5\u5728\u8f6f\u4ef6\u7ef4\u62a4\u4e2d\u5177\u6709\u5e7f\u6cdb\u5e94\u7528\u6f5c\u529b\u3002"}}
{"id": "2507.19721", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.19721", "abs": "https://arxiv.org/abs/2507.19721", "authors": ["Dapeng Yan", "Wenjie Yang", "Kui Liu", "Zhiming Liu", "Zhikuang Cai"], "title": "Clean Code In Practice: Challenges and Opportunities", "comment": null, "summary": "Reliability prediction is crucial for ensuring the safety and security of\nsoftware systems, especially in the context of industry practices. While\nvarious metrics and measurements are employed to assess software reliability,\nthe complexity of modern systems necessitates a deeper understanding of how\nthese metrics interact with security and safety concerns. This paper explores\nthe interplay between software reliability, safety, and security, offering a\ncomprehensive analysis of key metrics and measurement techniques used in the\nindustry for reliability prediction. We identify critical threats to software\nreliability and provide a threat estimation framework that incorporates both\nsafety and security aspects. Our findings suggest that integrating reliability\nmetrics with safety and security considerations can enhance the robustness of\nsoftware systems. Furthermore, we propose a set of actionable guidelines for\npractitioners to improve their reliability prediction models while\nsimultaneously addressing the security and safety challenges of contemporary\nsoftware applications.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u8f6f\u4ef6\u53ef\u9760\u6027\u3001\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2a\u7ed3\u5408\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u8003\u8651\u7684\u53ef\u9760\u6027\u9884\u6d4b\u6846\u67b6\uff0c\u5e76\u63d0\u4f9b\u4e86\u6539\u8fdb\u6a21\u578b\u7684\u5b9e\u7528\u6307\u5357\u3002", "motivation": "\u73b0\u4ee3\u8f6f\u4ef6\u7cfb\u7edf\u7684\u590d\u6742\u6027\u8981\u6c42\u66f4\u6df1\u5165\u5730\u7406\u89e3\u53ef\u9760\u6027\u6307\u6807\u4e0e\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u95ee\u9898\u7684\u5173\u7cfb\uff0c\u4ee5\u786e\u4fdd\u7cfb\u7edf\u7684\u7a33\u5065\u6027\u3002", "method": "\u5206\u6790\u4e86\u884c\u4e1a\u4e2d\u7684\u5173\u952e\u6307\u6807\u548c\u6d4b\u91cf\u6280\u672f\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2a\u5a01\u80c1\u4f30\u8ba1\u6846\u67b6\uff0c\u5e76\u7ed3\u5408\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u8003\u8651\u3002", "result": "\u7814\u7a76\u53d1\u73b0\uff0c\u5c06\u53ef\u9760\u6027\u6307\u6807\u4e0e\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u8003\u8651\u7ed3\u5408\u53ef\u4ee5\u589e\u5f3a\u8f6f\u4ef6\u7cfb\u7edf\u7684\u7a33\u5065\u6027\u3002", "conclusion": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u5957\u5b9e\u7528\u6307\u5357\uff0c\u5e2e\u52a9\u4ece\u4e1a\u8005\u5728\u6539\u8fdb\u53ef\u9760\u6027\u9884\u6d4b\u6a21\u578b\u7684\u540c\u65f6\u89e3\u51b3\u5b89\u5168\u6027\u548c\u5b89\u5168\u6027\u6311\u6218\u3002"}}
{"id": "2507.19717", "categories": ["cs.FL", "cs.DM", "math.CO"], "pdf": "https://arxiv.org/pdf/2507.19717", "abs": "https://arxiv.org/abs/2507.19717", "authors": ["Mazen Khodier", "Luke Schaeffer", "Jeffrey Shallit"], "title": "Self-Verifying Predicates in B\u00fcchi Arithmetic", "comment": null, "summary": "We discuss a technique, based on Angluin's algorithm, for automatically\ngenerating finite automata for various kinds of useful first-order logic\nformulas in B\\\"uchi arithmetic. Construction in this way can be faster and use\nmuch less space than more direct methods. We discuss the theory and we present\nsome empirical data for the free software Walnut.", "AI": {"tldr": "\u57fa\u4e8eAngluin\u7b97\u6cd5\uff0c\u63d0\u51fa\u4e00\u79cd\u81ea\u52a8\u751f\u6210\u6709\u9650\u81ea\u52a8\u673a\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u5904\u7406B\u00fcchi\u7b97\u672f\u4e2d\u7684\u4e00\u9636\u903b\u8f91\u516c\u5f0f\uff0c\u6bd4\u76f4\u63a5\u65b9\u6cd5\u66f4\u5feb\u4e14\u8282\u7701\u7a7a\u95f4\u3002", "motivation": "\u76f4\u63a5\u65b9\u6cd5\u5728\u5904\u7406B\u00fcchi\u7b97\u672f\u4e2d\u7684\u4e00\u9636\u903b\u8f91\u516c\u5f0f\u65f6\u6548\u7387\u4f4e\u4e14\u5360\u7528\u7a7a\u95f4\u5927\uff0c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u5229\u7528Angluin\u7b97\u6cd5\u81ea\u52a8\u751f\u6210\u6709\u9650\u81ea\u52a8\u673a\uff0c\u5e76\u901a\u8fc7\u514d\u8d39\u8f6f\u4ef6Walnut\u8fdb\u884c\u5b9e\u73b0\u3002", "result": "\u5b9e\u9a8c\u6570\u636e\u663e\u793a\uff0c\u8be5\u65b9\u6cd5\u6bd4\u76f4\u63a5\u65b9\u6cd5\u66f4\u5feb\u4e14\u5360\u7528\u7a7a\u95f4\u66f4\u5c11\u3002", "conclusion": "\u57fa\u4e8eAngluin\u7b97\u6cd5\u7684\u81ea\u52a8\u751f\u6210\u65b9\u6cd5\u5728\u5904\u7406B\u00fcchi\u7b97\u672f\u4e2d\u7684\u4e00\u9636\u903b\u8f91\u516c\u5f0f\u65f6\u5177\u6709\u663e\u8457\u4f18\u52bf\u3002"}}
{"id": "2507.19743", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19743", "abs": "https://arxiv.org/abs/2507.19743", "authors": ["Zhuolin Xu", "Chenglin Li", "Qiushi Li", "Shin Hwei Tan"], "title": "Defining ethically sourced code generation", "comment": null, "summary": "Several code generation models have been proposed to help reduce time and\neffort in solving software-related tasks. To ensure responsible AI, there are\ngrowing interests over various ethical issues (e.g., unclear licensing,\nprivacy, fairness, and environment impact). These studies have the overarching\ngoal of ensuring ethically sourced generation, which has gained growing\nattentions in speech synthesis and image generation. In this paper, we\nintroduce the novel notion of Ethically Sourced Code Generation (ES-CodeGen) to\nrefer to managing all processes involved in code generation model development\nfrom data collection to post-deployment via ethical and sustainable practices.\nTo build a taxonomy of ES-CodeGen, we perform a two-phase literature review\nwhere we read 803 papers across various domains and specific to AI-based code\ngeneration. We identified 71 relevant papers with 10 initial dimensions of\nES-CodeGen. To refine our dimensions and gain insights on consequences of\nES-CodeGen, we surveyed 32 practitioners, which include six developers who\nsubmitted GitHub issues to opt-out from the Stack dataset (these impacted users\nhave real-world experience of ethically sourcing issues in code generation\nmodels). The results lead to 11 dimensions of ES-CodeGen with a new dimension\non code quality as practitioners have noted its importance. We also identified\nconsequences, artifacts, and stages relevant to ES-CodeGen. Our post-survey\nreflection showed that most practitioners tend to ignore social-related\ndimensions despite their importance. Most practitioners either agreed or\nstrongly agreed that our survey help improve their understanding of ES-CodeGen.\nOur study calls for attentions of various ethical issues towards ES-CodeGen.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u6982\u5ff5\u2014\u2014Ethically Sourced Code Generation\uff08ES-CodeGen\uff09\uff0c\u65e8\u5728\u901a\u8fc7\u4f26\u7406\u548c\u53ef\u6301\u7eed\u7684\u5b9e\u8df5\u7ba1\u7406\u4ee3\u7801\u751f\u6210\u6a21\u578b\u7684\u5f00\u53d1\u8fc7\u7a0b\u3002\u901a\u8fc7\u6587\u732e\u7efc\u8ff0\u548c\u4ece\u4e1a\u8005\u8c03\u67e5\uff0c\u786e\u5b9a\u4e8611\u4e2aES-CodeGen\u7684\u7ef4\u5ea6\u53ca\u5176\u76f8\u5173\u540e\u679c\u3001\u5de5\u4ef6\u548c\u9636\u6bb5\u3002", "motivation": "\u968f\u7740\u4ee3\u7801\u751f\u6210\u6a21\u578b\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u786e\u4fdd\u5176\u5f00\u53d1\u8fc7\u7a0b\u7b26\u5408\u4f26\u7406\u548c\u53ef\u6301\u7eed\u6027\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002\u7814\u7a76\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u9886\u57df\u7684\u7a7a\u767d\uff0c\u63a8\u52a8\u4f26\u7406\u4ee3\u7801\u751f\u6210\u7684\u5b9e\u8df5\u3002", "method": "\u91c7\u7528\u4e24\u9636\u6bb5\u6587\u732e\u7efc\u8ff0\uff08803\u7bc7\u8bba\u6587\uff09\u548c\u4ece\u4e1a\u8005\u8c03\u67e5\uff0832\u4eba\uff09\uff0c\u8bc6\u522b\u5e76\u63d0\u70bcES-CodeGen\u7684\u7ef4\u5ea6\u548c\u540e\u679c\u3002", "result": "\u786e\u5b9a\u4e8611\u4e2aES-CodeGen\u7ef4\u5ea6\uff0c\u5305\u62ec\u65b0\u589e\u7684\u4ee3\u7801\u8d28\u91cf\u7ef4\u5ea6\uff0c\u5e76\u63ed\u793a\u4e86\u76f8\u5173\u540e\u679c\u548c\u9636\u6bb5\u3002\u8c03\u67e5\u663e\u793a\u4ece\u4e1a\u8005\u5bf9\u793e\u4ea4\u76f8\u5173\u7ef4\u5ea6\u5173\u6ce8\u4e0d\u8db3\u3002", "conclusion": "\u7814\u7a76\u547c\u5401\u5173\u6ce8\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u4f26\u7406\u95ee\u9898\uff0c\u5e76\u63d0\u4f9b\u4e86ES-CodeGen\u7684\u6846\u67b6\uff0c\u5e2e\u52a9\u4ece\u4e1a\u8005\u66f4\u597d\u5730\u7406\u89e3\u548c\u5b9e\u8df5\u4f26\u7406\u4ee3\u7801\u751f\u6210\u3002"}}
{"id": "2507.19630", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.19630", "abs": "https://arxiv.org/abs/2507.19630", "authors": ["Mauricio Ayala-Rinc\u00f3n", "Thaynara Arielly de Lima", "Georg Ehling", "Temur Kutsia"], "title": "Graded Quantitative Narrowing", "comment": "24 pages, 2 figures", "summary": "The recently introduced framework of Graded Quantitative Rewriting is an\ninnovative extension of traditional rewriting systems, in which rules are\nannotated with degrees drawn from a quantale. This framework provides a robust\nfoundation for equational reasoning that incorporates metric aspects, such as\nthe proximity between terms and the complexity of rewriting-based computations.\nQuantitative narrowing, introduced in this paper, generalizes quantitative\nrewriting by replacing matching with unification in reduction steps, enabling\nthe reduction of terms even when they contain variables, through simultaneous\ninstantiation and rewriting. In the standard (non-quantitative) setting,\nnarrowing has been successfully applied in various domains, including\nfunctional logic programming, theorem proving, and equational unification.\nHere, we focus on quantitative narrowing to solve unification problems in\nquantitative equational theories over Lawverean quantales. We establish its\nsoundness and discuss conditions under which completeness can be ensured. This\napproach allows us to solve quantitative equations in richer theories than\nthose addressed by previous methods.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u5b9a\u91cf\u7a84\u5316\uff08quantitative narrowing\uff09\u65b9\u6cd5\uff0c\u6269\u5c55\u4e86\u4f20\u7edf\u7a84\u5316\u6280\u672f\uff0c\u7528\u4e8e\u89e3\u51b3Lawverean quantales\u4e0a\u7684\u5b9a\u91cf\u65b9\u7a0b\u95ee\u9898\u3002", "motivation": "\u4f20\u7edf\u7a84\u5316\u6280\u672f\u5728\u975e\u5b9a\u91cf\u73af\u5883\u4e2d\u5e94\u7528\u5e7f\u6cdb\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u5b9a\u91cf\u65b9\u7a0b\u7684\u652f\u6301\u3002\u672c\u6587\u65e8\u5728\u5c06\u7a84\u5316\u6280\u672f\u6269\u5c55\u5230\u5b9a\u91cf\u6846\u67b6\u4e2d\uff0c\u4ee5\u89e3\u51b3\u66f4\u4e30\u5bcc\u7684\u5b9a\u91cf\u65b9\u7a0b\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u5c06\u5339\u914d\u66ff\u6362\u4e3a\u7edf\u4e00\u5316\uff0c\u5f15\u5165\u5b9a\u91cf\u7a84\u5316\u65b9\u6cd5\uff0c\u7ed3\u5408\u540c\u65f6\u5b9e\u4f8b\u5316\u548c\u91cd\u5199\u6b65\u9aa4\uff0c\u5904\u7406\u542b\u53d8\u91cf\u7684\u9879\u3002", "result": "\u8bc1\u660e\u4e86\u5b9a\u91cf\u7a84\u5316\u7684\u6b63\u786e\u6027\uff0c\u5e76\u8ba8\u8bba\u4e86\u786e\u4fdd\u5b8c\u5907\u6027\u7684\u6761\u4ef6\uff0c\u80fd\u591f\u89e3\u51b3\u66f4\u590d\u6742\u7684\u5b9a\u91cf\u65b9\u7a0b\u95ee\u9898\u3002", "conclusion": "\u5b9a\u91cf\u7a84\u5316\u4e3a\u5b9a\u91cf\u65b9\u7a0b\u6c42\u89e3\u63d0\u4f9b\u4e86\u66f4\u901a\u7528\u7684\u65b9\u6cd5\uff0c\u6269\u5c55\u4e86\u4f20\u7edf\u7a84\u5316\u6280\u672f\u7684\u5e94\u7528\u8303\u56f4\u3002"}}
{"id": "2507.19806", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19806", "abs": "https://arxiv.org/abs/2507.19806", "authors": ["Xinlong Zhao", "Tong Jia", "Minghua He", "Yihan Wu", "Ying Li", "Gang Huang"], "title": "From Few-Label to Zero-Label: An Approach for Cross-System Log-Based Anomaly Detection with Meta-Learning", "comment": "5 pages, 1 figures, FSE 2025", "summary": "Log anomaly detection plays a critical role in ensuring the stability and\nreliability of software systems. However, existing approaches rely on large\namounts of labeled log data, which poses significant challenges in real-world\napplications. To address this issue, cross-system transfer has been identified\nas a key research direction. State-of-the-art cross-system approaches achieve\npromising performance with only a few labels from the target system. However,\ntheir reliance on labeled target logs makes them susceptible to the cold-start\nproblem when labeled logs are insufficient. To overcome this limitation, we\nexplore a novel yet underexplored setting: zero-label cross-system log anomaly\ndetection, where the target system logs are entirely unlabeled. To this end, we\npropose FreeLog, a system-agnostic representation meta-learning method that\neliminates the need for labeled target system logs, enabling cross-system log\nanomaly detection under zero-label conditions. Experimental results on three\npublic log datasets demonstrate that FreeLog achieves performance comparable to\nstate-of-the-art methods that rely on a small amount of labeled data from the\ntarget system.", "AI": {"tldr": "FreeLog\u63d0\u51fa\u4e86\u4e00\u79cd\u96f6\u6807\u7b7e\u8de8\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u65b9\u6cd5\uff0c\u65e0\u9700\u76ee\u6807\u7cfb\u7edf\u7684\u6807\u8bb0\u65e5\u5fd7\uff0c\u89e3\u51b3\u4e86\u51b7\u542f\u52a8\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u8de8\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u65b9\u6cd5\u4f9d\u8d56\u5c11\u91cf\u76ee\u6807\u7cfb\u7edf\u6807\u8bb0\u65e5\u5fd7\uff0c\u96be\u4ee5\u5e94\u5bf9\u51b7\u542f\u52a8\u95ee\u9898\u3002", "method": "\u91c7\u7528\u7cfb\u7edf\u65e0\u5173\u7684\u8868\u793a\u5143\u5b66\u4e60\u65b9\u6cd5FreeLog\uff0c\u65e0\u9700\u76ee\u6807\u7cfb\u7edf\u6807\u8bb0\u6570\u636e\u3002", "result": "\u5728\u4e09\u4e2a\u516c\u5171\u65e5\u5fd7\u6570\u636e\u96c6\u4e0a\uff0cFreeLog\u6027\u80fd\u5ab2\u7f8e\u4f9d\u8d56\u5c11\u91cf\u6807\u8bb0\u6570\u636e\u7684\u6700\u5148\u8fdb\u65b9\u6cd5\u3002", "conclusion": "FreeLog\u4e3a\u96f6\u6807\u7b7e\u8de8\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38\u68c0\u6d4b\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.19689", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2507.19689", "abs": "https://arxiv.org/abs/2507.19689", "authors": ["Pablo Donato"], "title": "Scroll nets", "comment": "20 pages, 9 figures, submitted to CSL 2026", "summary": "We introduce a new formalism for representing proofs in propositional logic\ncalled \"scroll nets\". Its fundamental construct is the \"scroll\", a topological\nnotation for implication proposed by C. S. Peirce at the end of the 19th\ncentury as the basis for his diagrammatic system of existential graphs (EGs).\nScroll nets are derived from EGs by following the Curry-Howard methodology of\ninternalizing inference rules inside judgments, just as terms in type theory\ninternalize natural deduction rules. We focus on the intuitionistic implicative\nfragment of EGs, starting from a natural diagrammatic representation of scroll\nnets, and then distilling their combinatorial essence into a purely\ngraph-theoretic definition. We also identify a notion of detour, that we use to\nsketch a detour-elimination procedure akin to cut-elimination. We illustrate\nhow to simulate normalization in the simply typed $\\lambda$-calculus,\ndemonstrating both the logical and computational expressivity of our framework.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a\u201cscroll nets\u201d\u7684\u65b0\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u8868\u793a\u547d\u9898\u903b\u8f91\u4e2d\u7684\u8bc1\u660e\uff0c\u57fa\u4e8ePeirce\u7684\u201cscroll\u201d\u6982\u5ff5\uff0c\u5e76\u7ed3\u5408Curry-Howard\u65b9\u6cd5\u3002", "motivation": "\u65e8\u5728\u901a\u8fc7\u62d3\u6251\u548c\u56fe\u5f62\u5316\u7684\u65b9\u5f0f\u6539\u8fdb\u547d\u9898\u903b\u8f91\u7684\u8bc1\u660e\u8868\u793a\uff0c\u540c\u65f6\u7ed3\u5408\u8ba1\u7b97\u8868\u8fbe\u6027\u3002", "method": "\u4ecePeirce\u7684existential graphs\u51fa\u53d1\uff0c\u901a\u8fc7Curry-Howard\u65b9\u6cd5\u5185\u5316\u63a8\u7406\u89c4\u5219\uff0c\u5b9a\u4e49scroll nets\u7684\u56fe\u8bba\u672c\u8d28\uff0c\u5e76\u63d0\u51fadetour-elimination\u8fc7\u7a0b\u3002", "result": "\u5c55\u793a\u4e86scroll nets\u5728\u903b\u8f91\u548c\u8ba1\u7b97\u8868\u8fbe\u6027\u4e0a\u7684\u80fd\u529b\uff0c\u80fd\u591f\u6a21\u62df\u7b80\u5355\u7c7b\u578b\u03bb\u6f14\u7b97\u7684\u5f52\u4e00\u5316\u3002", "conclusion": "scroll nets\u4e3a\u547d\u9898\u903b\u8f91\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u9896\u4e14\u8868\u8fbe\u529b\u5f3a\u7684\u8bc1\u660e\u8868\u793a\u65b9\u6cd5\uff0c\u517c\u5177\u903b\u8f91\u548c\u8ba1\u7b97\u7279\u6027\u3002"}}
{"id": "2507.19842", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19842", "abs": "https://arxiv.org/abs/2507.19842", "authors": ["Mohammad Azarijafari", "Luisa Mich", "Michele Missikoff", "Oleg Missikoff"], "title": "A Cooperative Approach for Knowledge-based Business Process Design in a Public Authority", "comment": null, "summary": "Enterprises are currently undergoing profound transformations due to the\nunpostponable digital transformation. Then, to remain competitive, enterprises\nmust adapt their organisational structures and operations. This organisational\nshift is also important for small and medium-sized enterprises. A key\ninnovation frontier is the adoption of process-oriented production models. This\npaper presents a knowledge-based method to support business experts in\ndesigning business processes. The method requires no prior expertise in\nKnowledge Engineering and guides designers through a structured sequence of\nsteps to produce a diagrammatic workflow of the target process. The\nconstruction of the knowledge base starts from simple, text-based, knowledge\nartefacts and then progresses towards more structured, formal representations.\nThe approach has been conceived to allow a shared approach for all stakeholders\nand actors who participate in the BP design.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u77e5\u8bc6\u7684\u65b9\u6cd5\uff0c\u5e2e\u52a9\u4e1a\u52a1\u4e13\u5bb6\u8bbe\u8ba1\u4e1a\u52a1\u6d41\u7a0b\uff0c\u65e0\u9700\u77e5\u8bc6\u5de5\u7a0b\u80cc\u666f\uff0c\u901a\u8fc7\u7ed3\u6784\u5316\u6b65\u9aa4\u751f\u6210\u6d41\u7a0b\u56fe\u3002", "motivation": "\u4f01\u4e1a\u6570\u5b57\u5316\u8f6c\u578b\u8feb\u5728\u7709\u776b\uff0c\u4e2d\u5c0f\u578b\u4f01\u4e1a\u9700\u8c03\u6574\u7ec4\u7ec7\u7ed3\u6784\u4ee5\u4fdd\u6301\u7ade\u4e89\u529b\uff0c\u6d41\u7a0b\u5bfc\u5411\u7684\u751f\u4ea7\u6a21\u5f0f\u662f\u5173\u952e\u521b\u65b0\u9886\u57df\u3002", "method": "\u4ece\u7b80\u5355\u7684\u6587\u672c\u77e5\u8bc6\u9010\u6b65\u6784\u5efa\u7ed3\u6784\u5316\u77e5\u8bc6\u5e93\uff0c\u901a\u8fc7\u7ed3\u6784\u5316\u6b65\u9aa4\u751f\u6210\u76ee\u6807\u6d41\u7a0b\u7684\u6d41\u7a0b\u56fe\u3002", "result": "\u65b9\u6cd5\u652f\u6301\u6240\u6709\u5229\u76ca\u76f8\u5173\u8005\u5171\u540c\u53c2\u4e0e\u4e1a\u52a1\u6d41\u7a0b\u8bbe\u8ba1\uff0c\u65e0\u9700\u4e13\u4e1a\u77e5\u8bc6\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u4e1a\u52a1\u6d41\u7a0b\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u4e00\u79cd\u5171\u4eab\u4e14\u6613\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.19827", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.19827", "abs": "https://arxiv.org/abs/2507.19827", "authors": ["M\u00e1rton Hajdu", "Petra Hozzov\u00e1", "Laura Kov\u00e1cs", "Andrei Voronkov", "Eva Maria Wagner", "Richard Steven \u017dilin\u010d\u00edk"], "title": "Synthesis Benchmarks for Automated Reasoning", "comment": "This is an extended pre-print of a paper accepted to CICM 2025", "summary": "Program synthesis is the task of constructing a program conforming to a given\nspecification. We focus on deductive synthesis, and in particular on synthesis\nproblems with specifications given as $\\forall\\exists$-formulas, expressing the\nexistence of an output corresponding to any input. So far there has been no\ncanonical benchmark set for deductive synthesis using the\n$\\forall\\exists$-format and supporting the so-called uncomputable symbol\nrestriction. This work presents such a data set, composed by complementing\nexisting benchmarks by new ones. Our data set is dynamically growing and should\nmotivate future developments in the theory and practice of automating\nsynthesis.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u52a8\u6001\u589e\u957f\u7684\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u7528\u4e8e\u652f\u6301\u57fa\u4e8e\u2200\u2203\u516c\u5f0f\u7684\u6f14\u7ece\u7a0b\u5e8f\u5408\u6210\uff0c\u586b\u8865\u4e86\u8be5\u9886\u57df\u7f3a\u4e4f\u6807\u51c6\u6d4b\u8bd5\u96c6\u7684\u7a7a\u767d\u3002", "motivation": "\u76ee\u524d\u7f3a\u4e4f\u652f\u6301\u2200\u2203\u683c\u5f0f\u548c\u4e0d\u53ef\u8ba1\u7b97\u7b26\u53f7\u9650\u5236\u7684\u6f14\u7ece\u5408\u6210\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u963b\u788d\u4e86\u7406\u8bba\u7814\u7a76\u548c\u5b9e\u8df5\u53d1\u5c55\u3002", "method": "\u901a\u8fc7\u8865\u5145\u73b0\u6709\u57fa\u51c6\u548c\u65b0\u8bbe\u8ba1\u7684\u6570\u636e\u96c6\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u52a8\u6001\u589e\u957f\u7684\u6570\u636e\u96c6\u3002", "result": "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u652f\u6301\u672a\u6765\u81ea\u52a8\u5316\u5408\u6210\u7684\u7814\u7a76\u548c\u5b9e\u8df5\u3002", "conclusion": "\u8be5\u6570\u636e\u96c6\u5c06\u63a8\u52a8\u6f14\u7ece\u7a0b\u5e8f\u5408\u6210\u7684\u7406\u8bba\u548c\u5b9e\u8df5\u53d1\u5c55\u3002"}}
{"id": "2507.19902", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19902", "abs": "https://arxiv.org/abs/2507.19902", "authors": ["Sourena Khanzadeh"], "title": "AgentMesh: A Cooperative Multi-Agent Generative AI Framework for Software Development Automation", "comment": null, "summary": "Software development is a complex, multi-phase process traditionally\nrequiring collaboration among individuals with diverse expertise. We propose\nAgentMesh, a Python-based framework that uses multiple cooperating LLM-powered\nagents to automate software development tasks. In AgentMesh, specialized agents\n- a Planner, Coder, Debugger, and Reviewer - work in concert to transform a\nhigh-level requirement into fully realized code. The Planner agent first\ndecomposes user requests into concrete subtasks; the Coder agent implements\neach subtask in code; the Debugger agent tests and fixes the code; and the\nReviewer agent validates the final output for correctness and quality. We\ndescribe the architecture and design of these agents and their communication,\nand provide implementation details including prompt strategies and workflow\norchestration. A case study illustrates AgentMesh handling a non-trivial\ndevelopment request via sequential task planning, code generation, iterative\ndebugging, and final code review. We discuss how dividing responsibilities\namong cooperative agents leverages the strengths of large language models while\nmitigating single-agent limitations. Finally, we examine current limitations -\nsuch as error propagation and context scaling - and outline future work toward\nmore robust, scalable multi-agent AI systems for software engineering\nautomation.", "AI": {"tldr": "AgentMesh\u662f\u4e00\u4e2a\u57fa\u4e8ePython\u7684\u6846\u67b6\uff0c\u5229\u7528\u591a\u4e2a\u5408\u4f5c\u7684LLM\u9a71\u52a8\u4ee3\u7406\u81ea\u52a8\u5316\u8f6f\u4ef6\u5f00\u53d1\u4efb\u52a1\u3002", "motivation": "\u4f20\u7edf\u8f6f\u4ef6\u5f00\u53d1\u9700\u8981\u591a\u9886\u57df\u4e13\u5bb6\u534f\u4f5c\uff0c\u590d\u6742\u4e14\u8017\u65f6\uff0cAgentMesh\u65e8\u5728\u901a\u8fc7\u591a\u4ee3\u7406\u534f\u4f5c\u81ea\u52a8\u5316\u8fd9\u4e00\u8fc7\u7a0b\u3002", "method": "\u6846\u67b6\u5305\u542bPlanner\u3001Coder\u3001Debugger\u548cReviewer\u56db\u4e2a\u4ee3\u7406\uff0c\u5206\u522b\u8d1f\u8d23\u4efb\u52a1\u5206\u89e3\u3001\u4ee3\u7801\u5b9e\u73b0\u3001\u8c03\u8bd5\u548c\u4ee3\u7801\u5ba1\u67e5\u3002", "result": "\u6848\u4f8b\u7814\u7a76\u8868\u660e\uff0cAgentMesh\u80fd\u901a\u8fc7\u591a\u4ee3\u7406\u534f\u4f5c\u5904\u7406\u590d\u6742\u5f00\u53d1\u8bf7\u6c42\uff0c\u751f\u6210\u9ad8\u8d28\u91cf\u4ee3\u7801\u3002", "conclusion": "\u591a\u4ee3\u7406\u534f\u4f5c\u80fd\u53d1\u6325LLM\u4f18\u52bf\u5e76\u7f13\u89e3\u5355\u4ee3\u7406\u9650\u5236\uff0c\u4f46\u9700\u89e3\u51b3\u9519\u8bef\u4f20\u64ad\u548c\u4e0a\u4e0b\u6587\u6269\u5c55\u7b49\u95ee\u9898\u3002"}}
{"id": "2507.19886", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.19886", "abs": "https://arxiv.org/abs/2507.19886", "authors": ["Weijun Chen", "Yuxi Fu", "Huan Long", "Hao Wu"], "title": "A Model-Independent Theory of Probabilistic Testing", "comment": null, "summary": "Probabilistic concurrent systems are foundational models for modern mobile\ncomputing. In this paper, a general model-independent approach to probabilistic\ntesting is proposed. With the help of a new distribution-based semantics for\nprobabilistic models and a probabilistic testing framework with respect to\nprocess predicates, the model-independent characterization and the external\ncharacterization for testing equivalences are studied. The latter\ncharacterization can be viewed as the generalization of the classical\nfair/should equivalence and may equivalence. These equivalences are shown to be\ncongruent. A thorough comparison between these equivalences and probabilistic\nbisimilarities is carried out. The techniques introduced in this paper can be\neasily extended to other probabilistic concurrent models.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u72ec\u7acb\u4e8e\u6a21\u578b\u7684\u6982\u7387\u6d4b\u8bd5\u65b9\u6cd5\uff0c\u7814\u7a76\u4e86\u6d4b\u8bd5\u7b49\u4ef7\u6027\u7684\u6a21\u578b\u72ec\u7acb\u548c\u5916\u90e8\u8868\u5f81\uff0c\u5e76\u6bd4\u8f83\u4e86\u8fd9\u4e9b\u7b49\u4ef7\u6027\u4e0e\u6982\u7387\u53cc\u76f8\u4f3c\u6027\u3002", "motivation": "\u6982\u7387\u5e76\u53d1\u7cfb\u7edf\u662f\u73b0\u4ee3\u79fb\u52a8\u8ba1\u7b97\u7684\u57fa\u7840\u6a21\u578b\uff0c\u9700\u8981\u4e00\u79cd\u901a\u7528\u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002", "method": "\u57fa\u4e8e\u65b0\u7684\u5206\u5e03\u8bed\u4e49\u548c\u6982\u7387\u6d4b\u8bd5\u6846\u67b6\uff0c\u7814\u7a76\u6d4b\u8bd5\u7b49\u4ef7\u6027\u7684\u8868\u5f81\u3002", "result": "\u8bc1\u660e\u4e86\u8fd9\u4e9b\u7b49\u4ef7\u6027\u662f\u540c\u4f59\u7684\uff0c\u5e76\u4e0e\u6982\u7387\u53cc\u76f8\u4f3c\u6027\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002", "conclusion": "\u6240\u63d0\u51fa\u7684\u6280\u672f\u53ef\u6269\u5c55\u5230\u5176\u4ed6\u6982\u7387\u5e76\u53d1\u6a21\u578b\u3002"}}
{"id": "2507.19904", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.19904", "abs": "https://arxiv.org/abs/2507.19904", "authors": ["Zhanhang Xiong", "Dongxia Wang", "Yuekang Li", "Xinyuan An", "Wenhai Wang"], "title": "CrossPL: Evaluating Large Language Models on Cross Programming Language Code Generation", "comment": null, "summary": "As large language models (LLMs) become increasingly embedded in software\nengineering workflows, a critical capability remains underexplored: generating\ncorrect code that enables cross-programming-language (CPL) interoperability.\nThis skill is essential for building complex systems that integrate components\nwritten in multiple languages via mechanisms like inter-process communication\n(IPC). To bridge this gap, we present CrossPL, the first benchmark designed to\nsystematically evaluate LLMs' ability to generate CPL-interoperating code.\nCrossPL comprises 1,982 tasks centered around IPC, covering six widely-used\nprogramming languages and seven representative CPL techniques. We construct\nthis benchmark by (i) analyzing 19,169 multi-language GitHub repositories using\n156 hand-crafted finite state machines (FSMs), and (ii) developing an LLM-based\npipeline that automatically extracts CPL code snippets, generates task\ninstructions, and validates functional correctness. We evaluate 14\nstate-of-the-art general-purpose LLMs and 6 code-oriented LLMs released in the\npast three years on CrossPL via FSM-based validation. Results reveal that even\nthe best-performing models struggle with CPL scenarios, underscoring the need\nfor more targeted research in this space. Our benchmark and code are available\nat: https://anonymous.4open.science/r/crosspl-2814.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51faCrossPL\u57fa\u51c6\uff0c\u9996\u6b21\u7cfb\u7edf\u8bc4\u4f30\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u751f\u6210\u8de8\u7f16\u7a0b\u8bed\u8a00\uff08CPL\uff09\u4e92\u64cd\u4f5c\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u53d1\u73b0\u73b0\u6709\u6a21\u578b\u8868\u73b0\u4e0d\u4f73\u3002", "motivation": "\u968f\u7740LLM\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u5e94\u7528\u589e\u591a\uff0c\u751f\u6210\u8de8\u8bed\u8a00\u4e92\u64cd\u4f5c\u4ee3\u7801\u7684\u80fd\u529b\u5c1a\u672a\u5145\u5206\u63a2\u7d22\uff0c\u8fd9\u5bf9\u6784\u5efa\u590d\u6742\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002", "method": "\u901a\u8fc7\u5206\u6790GitHub\u591a\u8bed\u8a00\u4ed3\u5e93\uff0c\u8bbe\u8ba1156\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff08FSM\uff09\uff0c\u6784\u5efa\u5305\u542b1,982\u4e2a\u4efb\u52a1\u7684CrossPL\u57fa\u51c6\uff0c\u5e76\u5f00\u53d1LLM\u81ea\u52a8\u63d0\u53d6\u548c\u9a8c\u8bc1\u4ee3\u7801\u7684\u6d41\u7a0b\u3002", "result": "\u8bc4\u4f3014\u4e2a\u901a\u7528LLM\u548c6\u4e2a\u4ee3\u7801\u4e13\u7528LLM\uff0c\u53d1\u73b0\u5373\u4f7f\u6700\u4f73\u6a21\u578b\u5728CPL\u573a\u666f\u4e2d\u8868\u73b0\u4ecd\u4e0d\u7406\u60f3\u3002", "conclusion": "CrossPL\u586b\u8865\u4e86\u8bc4\u4f30LLM\u8de8\u8bed\u8a00\u4e92\u64cd\u4f5c\u80fd\u529b\u7684\u7a7a\u767d\uff0c\u547c\u5401\u66f4\u591a\u9488\u5bf9\u6027\u7814\u7a76\u3002"}}
{"id": "2507.20615", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.20615", "abs": "https://arxiv.org/abs/2507.20615", "authors": ["Jan Baumeister", "Bernd Finkbeiner", "Frederik Scheerer"], "title": "Active Monitoring with RTLola: A Specification-Guided Scheduling Approach", "comment": null, "summary": "Stream-based monitoring is a well-established runtime verification approach\nwhich relates input streams, representing sensor readings from the monitored\nsystem, with output streams that capture filtered or aggregated results. In\nsuch approaches, the monitor is a passive external component that continuously\nreceives sensor data from the system under observation. This setup assumes that\nthe system dictates what data is sent and when, regardless of the monitor's\ncurrent needs. However, in many applications -- particularly in\nresource-constrained environments like autonomous aircraft, where energy, size,\nor weight are limited -- this can lead to inefficient use of communication\nresources. We propose making the monitor an active component that decides,\nbased on its current internal state, which sensors to query and how often. This\nbehavior is driven by scheduling annotations in the specification, which guide\nthe dynamic allocation of bandwidth towards the most relevant data, thereby\nimproving monitoring efficiency. We demonstrate our approach using the\nstream-based specification language RTLola and assess the performance by\nmonitoring a specification from the aerospace domain. With equal bandwidth\nusage, our approach detects specification violations significantly sooner than\nmonitors sampling all inputs at a fixed frequency.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u4e3b\u52a8\u76d1\u63a7\u65b9\u6cd5\uff0c\u901a\u8fc7\u52a8\u6001\u8c03\u5ea6\u4f20\u611f\u5668\u67e5\u8be2\u4ee5\u63d0\u9ad8\u8d44\u6e90\u53d7\u9650\u73af\u5883\u4e0b\u7684\u76d1\u63a7\u6548\u7387\u3002", "motivation": "\u4f20\u7edf\u6d41\u76d1\u63a7\u65b9\u6cd5\u4e2d\uff0c\u76d1\u63a7\u5668\u662f\u88ab\u52a8\u7684\uff0c\u7531\u7cfb\u7edf\u51b3\u5b9a\u6570\u636e\u4f20\u8f93\uff0c\u53ef\u80fd\u5bfc\u81f4\u8d44\u6e90\u6d6a\u8d39\u3002\u5728\u8d44\u6e90\u53d7\u9650\u73af\u5883\u4e2d\uff08\u5982\u81ea\u4e3b\u98de\u884c\u5668\uff09\uff0c\u8fd9\u79cd\u4f4e\u6548\u5c24\u4e3a\u7a81\u51fa\u3002", "method": "\u5c06\u76d1\u63a7\u5668\u8bbe\u8ba1\u4e3a\u4e3b\u52a8\u7ec4\u4ef6\uff0c\u6839\u636e\u5185\u90e8\u72b6\u6001\u52a8\u6001\u51b3\u5b9a\u67e5\u8be2\u54ea\u4e9b\u4f20\u611f\u5668\u53ca\u9891\u7387\uff0c\u901a\u8fc7\u89c4\u8303\u4e2d\u7684\u8c03\u5ea6\u6ce8\u91ca\u6307\u5bfc\u5e26\u5bbd\u5206\u914d\u3002", "result": "\u5728\u76f8\u540c\u5e26\u5bbd\u4e0b\uff0c\u8be5\u65b9\u6cd5\u6bd4\u56fa\u5b9a\u9891\u7387\u91c7\u6837\u66f4\u5feb\u68c0\u6d4b\u5230\u89c4\u8303\u8fdd\u89c4\u3002", "conclusion": "\u4e3b\u52a8\u76d1\u63a7\u65b9\u6cd5\u663e\u8457\u63d0\u9ad8\u4e86\u76d1\u63a7\u6548\u7387\uff0c\u9002\u7528\u4e8e\u8d44\u6e90\u53d7\u9650\u73af\u5883\u3002"}}
{"id": "2507.19909", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.19909", "abs": "https://arxiv.org/abs/2507.19909", "authors": ["Roman Mach\u00e1\u010dek", "Anastasiia Grishina", "Max Hort", "Leon Moonen"], "title": "The Impact of Fine-tuning Large Language Models on Automated Program Repair", "comment": "Accepted for publication in the research track of the 41th\n  International Conference on Software Maintenance and Evolution (ICSME 2025)", "summary": "Automated Program Repair (APR) uses various tools and techniques to help\ndevelopers achieve functional and error-free code faster. In recent years,\nLarge Language Models (LLMs) have gained popularity as components in APR tool\nchains because of their performance and flexibility. However, training such\nmodels requires a significant amount of resources. Fine-tuning techniques have\nbeen developed to adapt pre-trained LLMs to specific tasks, such as APR, and\nenhance their performance at far lower computational costs than training from\nscratch. In this study, we empirically investigate the impact of various\nfine-tuning techniques on the performance of LLMs used for APR. Our experiments\nprovide insights into the performance of a selection of state-of-the-art LLMs\npre-trained on code. The evaluation is done on three popular APR benchmarks\n(i.e., QuixBugs, Defects4J and HumanEval-Java) and considers six different LLMs\nwith varying parameter sizes (resp. CodeGen, CodeT5, StarCoder, DeepSeekCoder,\nBloom, and CodeLlama-2). We consider three training regimens: no fine-tuning,\nfull fine-tuning, and parameter-efficient fine-tuning (PEFT) using LoRA and\nIA3. We observe that full fine-tuning techniques decrease the benchmarking\nperformance of various models due to different data distributions and\noverfitting. By using parameter-efficient fine-tuning methods, we restrict\nmodels in the amount of trainable parameters and achieve better results.\n  Keywords: large language models, automated program repair,\nparameter-efficient fine-tuning, AI4Code, AI4SE, ML4SE.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u4e0d\u540c\u5fae\u8c03\u6280\u672f\u5bf9\u7528\u4e8e\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\uff08APR\uff09\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u6027\u80fd\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09\u65b9\u6cd5\u4f18\u4e8e\u5b8c\u5168\u5fae\u8c03\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\uff08APR\uff09\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u8bad\u7ec3\u6210\u672c\u9ad8\u3002\u7814\u7a76\u65e8\u5728\u901a\u8fc7\u5fae\u8c03\u6280\u672f\u63d0\u5347\u6027\u80fd\u5e76\u964d\u4f4e\u6210\u672c\u3002", "method": "\u5b9e\u9a8c\u8bc4\u4f30\u4e86\u516d\u79cd\u9884\u8bad\u7ec3LLMs\uff08\u5982CodeGen\u3001CodeT5\u7b49\uff09\u5728\u4e09\u79cd\u5fae\u8c03\u65b9\u6848\uff08\u65e0\u5fae\u8c03\u3001\u5b8c\u5168\u5fae\u8c03\u3001\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff09\u4e0b\u7684\u8868\u73b0\uff0c\u4f7f\u7528\u4e09\u4e2aAPR\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "\u5b8c\u5168\u5fae\u8c03\u56e0\u6570\u636e\u5206\u5e03\u5dee\u5f02\u548c\u8fc7\u62df\u5408\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u800c\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08\u5982LoRA\u548cIA3\uff09\u901a\u8fc7\u9650\u5236\u53ef\u8bad\u7ec3\u53c2\u6570\u53d6\u5f97\u4e86\u66f4\u597d\u7ed3\u679c\u3002", "conclusion": "\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\u662f\u63d0\u5347LLMs\u5728APR\u4efb\u52a1\u4e2d\u6027\u80fd\u7684\u6709\u6548\u65b9\u6cd5\uff0c\u540c\u65f6\u964d\u4f4e\u4e86\u8ba1\u7b97\u6210\u672c\u3002"}}
{"id": "2507.20726", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.20726", "abs": "https://arxiv.org/abs/2507.20726", "authors": ["Hiroyuki Katsura", "Naoki Kobayashi", "Ken Sakayori", "Ryosuke Sato"], "title": "Automated Catamorphism Synthesis for Solving Constrained Horn Clauses over Algebraic Data Types", "comment": null, "summary": "We propose a novel approach to satisfiability checking of Constrained Horn\nClauses (CHCs) over Algebraic Data Types (ADTs). CHC-based automated\nverification has gained considerable attention in recent years, leading to the\ndevelopment of various CHC solvers. However, existing solvers for CHCs over\nADTs are not fully satisfactory, due to their limited ability to find and\nexpress models involving inductively defined functions/predicates (e.g., those\nabout the sum of list elements). To address this limitation, we consider\ncatamorphisms (generalized fold functions), and present a framework for\nautomatically discovering appropriate catamorphisms on demand and using them to\nexpress a model of given CHCs. We have implemented a new CHC solver called\nCatalia based on the proposed method. Our experimental results for the CHC-COMP\n2024 benchmark show that Catalia outperforms state-of-the-art solvers in\nsolving satisfiable CHCs over ADTs. Catalia was also used as a core part of the\ntool called ChocoCatalia, which won the ADT-LIA category of CHC-COMP 2025.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eCatamorphisms\u7684\u65b0\u65b9\u6cd5\uff0c\u7528\u4e8e\u89e3\u51b3ADTs\u4e0a\u7684CHC\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff0c\u5e76\u5f00\u53d1\u4e86Catalia\u6c42\u89e3\u5668\uff0c\u6027\u80fd\u4f18\u4e8e\u73b0\u6709\u5de5\u5177\u3002", "motivation": "\u73b0\u6709ADTs\u4e0a\u7684CHC\u6c42\u89e3\u5668\u5728\u8868\u8fbe\u5f52\u7eb3\u5b9a\u4e49\u7684\u51fd\u6570/\u8c13\u8bcd\u6a21\u578b\u65f6\u80fd\u529b\u6709\u9650\uff0c\u9700\u8981\u6539\u8fdb\u3002", "method": "\u5229\u7528Catamorphisms\uff08\u5e7f\u4e49\u6298\u53e0\u51fd\u6570\uff09\u81ea\u52a8\u53d1\u73b0\u5e76\u8868\u8fbeCHC\u6a21\u578b\u3002", "result": "Catalia\u5728CHC-COMP 2024\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8868\u73b0\u4f18\u4e8e\u73b0\u6709\u6c42\u89e3\u5668\uff0c\u5e76\u5728CHC-COMP 2025\u4e2d\u83b7\u5956\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86ADTs\u4e0aCHC\u6c42\u89e3\u7684\u80fd\u529b\uff0cCatalia\u6210\u4e3a\u9ad8\u6548\u5de5\u5177\u3002"}}
{"id": "2507.19942", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.19942", "abs": "https://arxiv.org/abs/2507.19942", "authors": ["Zimin Chen", "Yue Pan", "Siyu Lu", "Jiayi Xu", "Claire Le Goues", "Martin Monperrus", "He Ye"], "title": "Prometheus: Unified Knowledge Graphs for Issue Resolution in Multilingual Codebases", "comment": null, "summary": "Language model (LM) agents, such as SWE-agent and OpenHands, have made\nprogress toward automated issue resolution. However, existing approaches are\noften limited to Python-only issues and rely on pre-constructed containers in\nSWE-bench with reproduced issues, restricting their applicability to real-world\nand work for multi-language repositories. We present Prometheus, designed to\nresolve real-world issues beyond benchmark settings. Prometheus is a\nmulti-agent system that transforms an entire code repository into a unified\nknowledge graph to guide context retrieval for issue resolution. Prometheus\nencodes files, abstract syntax trees, and natural language text into a graph of\ntyped nodes and five general edge types to support multiple programming\nlanguages. Prometheus uses Neo4j for graph persistence, enabling scalable and\nstructured reasoning over large codebases. Integrated by the DeepSeek-V3 model,\nPrometheus resolves 28.67% and 13.7% of issues on SWE-bench Lite and SWE-bench\nMultilingual, respectively, with an average API cost of $0.23 and $0.38 per\nissue. Prometheus resolves 10 unique issues not addressed by prior work and is\nthe first to demonstrate effectiveness across seven programming languages.\nMoreover, it shows the ability to resolve real-world GitHub issues in the\nLangChain and OpenHands repositories. We have open-sourced Prometheus at:\nhttps://github.com/Pantheon-temple/Prometheus", "AI": {"tldr": "Prometheus\u662f\u4e00\u4e2a\u591a\u4ee3\u7406\u7cfb\u7edf\uff0c\u901a\u8fc7\u5c06\u4ee3\u7801\u5e93\u8f6c\u6362\u4e3a\u77e5\u8bc6\u56fe\u8c31\u6765\u89e3\u51b3\u591a\u8bed\u8a00\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u95ee\u9898\u89e3\u51b3\u7387\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u5c40\u9650\u4e8ePython\u95ee\u9898\u548c\u9884\u6784\u5efa\u5bb9\u5668\uff0cPrometheus\u65e8\u5728\u89e3\u51b3\u771f\u5b9e\u4e16\u754c\u548c\u591a\u8bed\u8a00\u4ed3\u5e93\u7684\u95ee\u9898\u3002", "method": "\u5c06\u4ee3\u7801\u5e93\u8f6c\u6362\u4e3a\u7edf\u4e00\u77e5\u8bc6\u56fe\u8c31\uff0c\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f7f\u7528Neo4j\u5b58\u50a8\u56fe\u8c31\uff0c\u96c6\u6210DeepSeek-V3\u6a21\u578b\u3002", "result": "\u5728SWE-bench Lite\u548cMultilingual\u4e0a\u5206\u522b\u89e3\u51b328.67%\u548c13.7%\u7684\u95ee\u9898\uff0c\u6210\u672c\u4f4e\uff0c\u4e14\u9996\u6b21\u652f\u6301\u4e03\u79cd\u8bed\u8a00\u3002", "conclusion": "Prometheus\u5728\u591a\u8bed\u8a00\u95ee\u9898\u89e3\u51b3\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u5e76\u6210\u529f\u5e94\u7528\u4e8e\u771f\u5b9e\u4e16\u754c\u95ee\u9898\u3002"}}
{"id": "2507.19951", "categories": ["cs.SE", "D.2"], "pdf": "https://arxiv.org/pdf/2507.19951", "abs": "https://arxiv.org/abs/2507.19951", "authors": ["Shengcheng Duan", "Yihua Xu", "Sheng Zhang", "Shen Wang", "Yue Duan"], "title": "PDLogger: Automated Logging Framework for Practical Software Development", "comment": "10 pages, 10 figures", "summary": "Logging is indispensable for maintaining the reliability and diagnosability\nof modern software, yet developers still struggle to decide where and how to\nlog effectively. Existing automated logging techniques focus on isolated\nsub-tasks - predicting a single log position, level, or message - and therefore\ncannot produce complete, high-quality log statements that reflect real-world\npractice in which multiple logs often appear inside one method. They also\nneglect deeper semantic dependencies among methods and consider only a narrow\nset of candidate variables, leading to superficial or incomplete logs. In this\npaper, we present PDLogger, the first end-to-end log generation technique\nexpressly designed for practical, multi-log scenarios. PDLogger operates in\nthree phases. (1) Log position prediction: block-type-aware structured prompts\nguide a large language model (LLM) to suggest candidate positions across all\ncontrol-flow blocks of a method. (2) Log generation: backward program slicing\nsupplies precise inter-procedural control and data-dependency context, while an\nexpanded variable extractor captures both member and external function\nexpressions; the enriched prompt enables the LLM to emit a full log statement\n(position, level, message, variables). (3) Log refinement: level correction and\ncontext-sensitive deduplication prune false positives and redundant logs. We\nevaluate PDLogger on 3,113 log statements drawn from two widely used Java\nprojects. Compared with the strongest prior systems, PDLogger improves\nlog-position precision by 139.0 percent, F1 by 69.2 percent, level accuracy by\n82.3 percent, variable precision by 131.8 percent, and message quality\n(BERTScore) by 65.7 percent. The framework consistently performs well with\ndifferent mainstream LLMs, demonstrating robustness and generality. PDLogger's\nimplementation is available as open source to foster future research and\nadoption.", "AI": {"tldr": "PDLogger\u662f\u4e00\u79cd\u7aef\u5230\u7aef\u7684\u65e5\u5fd7\u751f\u6210\u6280\u672f\uff0c\u9488\u5bf9\u591a\u65e5\u5fd7\u573a\u666f\u8bbe\u8ba1\uff0c\u901a\u8fc7\u4e09\u9636\u6bb5\u6d41\u7a0b\uff08\u4f4d\u7f6e\u9884\u6d4b\u3001\u65e5\u5fd7\u751f\u6210\u3001\u65e5\u5fd7\u4f18\u5316\uff09\u663e\u8457\u63d0\u5347\u65e5\u5fd7\u8d28\u91cf\u3002", "motivation": "\u73b0\u6709\u81ea\u52a8\u5316\u65e5\u5fd7\u6280\u672f\u4ec5\u5173\u6ce8\u5355\u4e00\u5b50\u4efb\u52a1\uff08\u5982\u65e5\u5fd7\u4f4d\u7f6e\u3001\u7ea7\u522b\u6216\u6d88\u606f\uff09\uff0c\u65e0\u6cd5\u751f\u6210\u5b8c\u6574\u9ad8\u8d28\u91cf\u7684\u65e5\u5fd7\uff0c\u4e14\u5ffd\u7565\u8bed\u4e49\u4f9d\u8d56\u548c\u53d8\u91cf\u591a\u6837\u6027\u3002", "method": "PDLogger\u5206\u4e09\u9636\u6bb5\uff1a1) \u65e5\u5fd7\u4f4d\u7f6e\u9884\u6d4b\uff1b2) \u65e5\u5fd7\u751f\u6210\uff08\u5229\u7528\u7a0b\u5e8f\u5207\u7247\u548c\u53d8\u91cf\u63d0\u53d6\uff09\uff1b3) \u65e5\u5fd7\u4f18\u5316\uff08\u7ea7\u522b\u6821\u6b63\u548c\u53bb\u91cd\uff09\u3002", "result": "\u57283113\u6761\u65e5\u5fd7\u4e0a\u6d4b\u8bd5\uff0cPDLogger\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u7cfb\u7edf\uff0c\u4f4d\u7f6e\u7cbe\u5ea6\u63d0\u5347139.0%\uff0cF1\u63d0\u534769.2%\uff0c\u6d88\u606f\u8d28\u91cf\u63d0\u534765.7%\u3002", "conclusion": "PDLogger\u662f\u4e00\u79cd\u9ad8\u6548\u3001\u901a\u7528\u7684\u65e5\u5fd7\u751f\u6210\u6846\u67b6\uff0c\u652f\u6301\u4e3b\u6d41LLM\uff0c\u5f00\u6e90\u4ee5\u4fc3\u8fdb\u7814\u7a76\u548c\u5e94\u7528\u3002"}}
{"id": "2507.20081", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20081", "abs": "https://arxiv.org/abs/2507.20081", "authors": ["Matheus Barbosa", "Paulo Borba", "Rodrigo Bonif\u00e1cio", "Victor Lira", "Galileu Santos"], "title": "The Effect of Pointer Analysis on Semantic Conflict Detection", "comment": null, "summary": "Current merge tools don't detect semantic conflicts, which occur when changes\nfrom different developers are textually integrated but semantically interfere\nwith each other. Although researchers have proposed static analyses for\ndetecting semantic conflicts, these analyses suffer from significant false\npositive rates. To understand whether such false positives could be reduced by\nusing pointer analysis in the implementation of semantic conflict static\nanalyses, we conduct an empirical study. We implement the same analysis with\nand without pointer analysis, run them on two datasets, observe how often they\ndiffer, and compare their accuracy and computational performance. Although\npointer analysis is known to improve precision in static analysis, we find that\nits effect on semantic conflict detection can be drastic: we observe a\nsignificant reduction in timeouts and false positives, but also a significant\nincrease in false negatives, with prohibitive drops in recall and F1-score.\nThese results suggest that, in the context of semantic conflict detection, we\nshould explore hybrid analysis techniques, combining aspects of both\nimplementations we compare in our study.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5f53\u524d\u5408\u5e76\u5de5\u5177\u65e0\u6cd5\u68c0\u6d4b\u8bed\u4e49\u51b2\u7a81\u7684\u95ee\u9898\uff0c\u5e76\u901a\u8fc7\u5b9e\u8bc1\u7814\u7a76\u6bd4\u8f83\u4e86\u4f7f\u7528\u6307\u9488\u5206\u6790\u4e0e\u5426\u5bf9\u9759\u6001\u5206\u6790\u68c0\u6d4b\u8bed\u4e49\u51b2\u7a81\u7684\u5f71\u54cd\u3002", "motivation": "\u73b0\u6709\u9759\u6001\u5206\u6790\u5728\u68c0\u6d4b\u8bed\u4e49\u51b2\u7a81\u65f6\u5b58\u5728\u9ad8\u8bef\u62a5\u7387\uff0c\u7814\u7a76\u65e8\u5728\u9a8c\u8bc1\u6307\u9488\u5206\u6790\u662f\u5426\u80fd\u51cf\u5c11\u8fd9\u4e9b\u8bef\u62a5\u3002", "method": "\u5b9e\u73b0\u4e24\u79cd\u5206\u6790\uff08\u5e26\u6307\u9488\u5206\u6790\u548c\u4e0d\u5e26\u6307\u9488\u5206\u6790\uff09\uff0c\u5728\u4e24\u7ec4\u6570\u636e\u96c6\u4e0a\u8fd0\u884c\uff0c\u6bd4\u8f83\u5176\u51c6\u786e\u6027\u3001\u8ba1\u7b97\u6027\u80fd\u53ca\u5dee\u5f02\u9891\u7387\u3002", "result": "\u6307\u9488\u5206\u6790\u663e\u8457\u51cf\u5c11\u4e86\u8d85\u65f6\u548c\u8bef\u62a5\uff0c\u4f46\u4e5f\u5927\u5e45\u589e\u52a0\u4e86\u6f0f\u62a5\uff0c\u5bfc\u81f4\u53ec\u56de\u7387\u548cF1\u5206\u6570\u4e0b\u964d\u3002", "conclusion": "\u5efa\u8bae\u5728\u8bed\u4e49\u51b2\u7a81\u68c0\u6d4b\u4e2d\u63a2\u7d22\u7ed3\u5408\u4e24\u79cd\u5206\u6790\u4f18\u70b9\u7684\u6df7\u5408\u5206\u6790\u6280\u672f\u3002"}}
{"id": "2507.20095", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20095", "abs": "https://arxiv.org/abs/2507.20095", "authors": ["Nitika Chopra", "Taher A. Ghaleb"], "title": "From First Use to Final Commit: Studying the Evolution of Multi-CI Service Adoption", "comment": "Accepted at the 41st IEEE International Conference on Software\n  Maintenance and Evolution 2025 (ICSME'25)", "summary": "Continuous Integration (CI) services, such as GitHub Actions and Travis CI,\nare widely adopted in open-source development to automate testing and\ndeployment. Though existing research often examines individual services in\nisolation, it remains unclear how projects adopt and transition between\nmultiple services over time. To understand how CI adoption is evolving across\nservices, we present a preliminary study analyzing the historical CI adoption\nof 18,924 Java projects hosted on GitHub between January 2008 and December\n2024, adopting at least one of eight CI services, namely Travis CI, AppVeyor,\nCircleCI, Azure Pipelines, GitHub Actions, Bitbucket, GitLab CI, and Cirrus CI.\nSpecifically, we investigate: (1) how frequently CI services are co-adopted or\nreplaced, and (2) how maintenance activity varies across different services.\nOur analysis shows that the use of multiple CI services within the same project\nis a recurring pattern observed in nearly one in five projects, often\nreflecting migration across CI services. Our study is among the first to\nexamine multi-CI adoption in practice, offering new insights for future\nresearch and highlighting the need for strategies and tools to support service\nselection, coordination, and migration in evolving CI environments.", "AI": {"tldr": "\u7814\u7a76\u5206\u6790\u4e8618,924\u4e2aJava\u9879\u76ee\u57282008\u5e74\u81f32024\u5e74\u95f4\u5bf98\u79cdCI\u670d\u52a1\u7684\u91c7\u7528\u60c5\u51b5\uff0c\u53d1\u73b0\u591a\u670d\u52a1\u5171\u7528\u5728\u9879\u76ee\u4e2d\u5f88\u5e38\u89c1\uff0c\u4e14\u5e38\u4f34\u968f\u8fc1\u79fb\u884c\u4e3a\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u591a\u5173\u6ce8\u5355\u4e00CI\u670d\u52a1\uff0c\u7f3a\u4e4f\u5bf9\u591a\u670d\u52a1\u91c7\u7528\u53ca\u8fc1\u79fb\u884c\u4e3a\u7684\u7406\u89e3\u3002", "method": "\u901a\u8fc7\u5206\u6790GitHub\u4e0aJava\u9879\u76ee\u7684CI\u670d\u52a1\u5386\u53f2\u6570\u636e\uff0c\u7814\u7a76\u591a\u670d\u52a1\u5171\u7528\u7684\u9891\u7387\u53ca\u7ef4\u62a4\u6d3b\u52a8\u7684\u5dee\u5f02\u3002", "result": "\u8fd1\u4e94\u5206\u4e4b\u4e00\u9879\u76ee\u91c7\u7528\u591aCI\u670d\u52a1\uff0c\u4e14\u5e38\u8868\u73b0\u4e3a\u670d\u52a1\u95f4\u7684\u8fc1\u79fb\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86\u591aCI\u670d\u52a1\u91c7\u7528\u7684\u5b9e\u8df5\u6a21\u5f0f\uff0c\u4e3a\u672a\u6765\u7814\u7a76\u53ca\u5de5\u5177\u5f00\u53d1\u63d0\u4f9b\u4e86\u65b0\u65b9\u5411\u3002"}}
{"id": "2507.20109", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.20109", "abs": "https://arxiv.org/abs/2507.20109", "authors": ["Xin Yin", "Chao Ni", "Liushan Chen", "Xiaohu Yang"], "title": "Learning to Align Human Code Preferences", "comment": null, "summary": "Large Language Models (LLMs) have demonstrated remarkable potential in\nautomating software development tasks. While recent advances leverage\nSupervised Fine-Tuning (SFT) and Direct Preference Optimization (DPO) to align\nmodels with human preferences, the optimal training strategy remains unclear\nacross diverse code preference scenarios. This paper systematically\ninvestigates the roles of SFT and DPO in aligning LLMs with different code\npreferences. Through both theoretical analysis and empirical observation, we\nhypothesize that SFT excels in scenarios with objectively verifiable optimal\nsolutions, while applying SFT followed by DPO (S&D) enables models to explore\nsuperior solutions in scenarios without objectively verifiable optimal\nsolutions. Based on the analysis and experimental evidence, we propose Adaptive\nPreference Optimization (APO), a dynamic integration approach that adaptively\namplifies preferred responses, suppresses dispreferred ones, and encourages\nexploration of potentially superior solutions during training. Extensive\nexperiments across six representative code preference tasks validate our\ntheoretical hypotheses and demonstrate that APO consistently matches or\nsurpasses the performance of existing SFT and S&D strategies. Our work provides\nboth theoretical foundations and practical guidance for selecting appropriate\ntraining strategies in different code preference alignment scenarios.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86SFT\u548cDPO\u5728\u4ee3\u7801\u504f\u597d\u5bf9\u9f50\u4e2d\u7684\u4f5c\u7528\uff0c\u63d0\u51fa\u81ea\u9002\u5e94\u504f\u597d\u4f18\u5316\uff08APO\uff09\uff0c\u5728\u516d\u9879\u4efb\u52a1\u4e2d\u9a8c\u8bc1\u5176\u4f18\u4e8e\u73b0\u6709\u7b56\u7565\u3002", "motivation": "\u63a2\u7d22SFT\u548cDPO\u5728\u4e0d\u540c\u4ee3\u7801\u504f\u597d\u573a\u666f\u4e2d\u7684\u6700\u4f73\u8bad\u7ec3\u7b56\u7565\uff0c\u586b\u8865\u7406\u8bba\u4e0e\u5b9e\u8df5\u7684\u7a7a\u767d\u3002", "method": "\u901a\u8fc7\u7406\u8bba\u5206\u6790\u548c\u5b9e\u9a8c\u9a8c\u8bc1\uff0c\u63d0\u51faAPO\u65b9\u6cd5\uff0c\u52a8\u6001\u6574\u5408SFT\u548cDPO\u3002", "result": "APO\u5728\u516d\u9879\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8e\u6216\u5339\u914d\u73b0\u6709\u7b56\u7565\u3002", "conclusion": "APO\u4e3a\u4e0d\u540c\u4ee3\u7801\u504f\u597d\u5bf9\u9f50\u573a\u666f\u63d0\u4f9b\u4e86\u7406\u8bba\u548c\u5b9e\u8df5\u6307\u5bfc\u3002"}}
{"id": "2507.20122", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20122", "abs": "https://arxiv.org/abs/2507.20122", "authors": ["Khairul Alam", "Banani Roy"], "title": "From Prompt to Pipeline: Large Language Models for Scientific Workflow Development in Bioinformatics", "comment": "36 pages", "summary": "The increasing complexity of bioinformatics data analysis has made Scientific\nWorkflow Systems (SWSs) like Galaxy and Nextflow essential for enabling\nscalable, reproducible, and automated workflows. However, creating and\nunderstanding these workflows remains challenging, particularly for domain\nexperts without programming expertise. This study investigates whether modern\nLarge Language Models (LLMs), GPT-4o, Gemini 2.5 Flash, and DeepSeek-V3, can\nsupport the generation of accurate, complete, and usable bioinformatics\nworkflows, and examines which prompting strategies most effectively guide this\nprocess. We evaluate these models using diverse tasks such as SNP analysis,\nRNA-seq, DNA methylation, and data retrieval, spanning both graphical (Galaxy)\nand script-based (Nextflow) platforms. Expert reviewers assess the generated\nworkflows against community-curated baselines from the Galaxy Training Network\nand nf-core repositories. The results show that Gemini 2.5 Flash excels in\ngenerating Galaxy workflows, while DeepSeek-V3 performs strongly in Nextflow.\nPrompting strategies significantly impact quality, with role-based and\nchain-of-thought prompts improving completeness and correctness. While GPT-4o\nbenefits from structured inputs, DeepSeek-V3 offers rich technical detail,\nalbeit with some verbosity. Overall, the findings highlight the potential of\nLLMs to lower the barrier for workflow development, improve reproducibility,\nand democratize access to computational tools in bioinformatics, especially\nwhen combined with thoughtful prompt engineering.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08\u5982GPT-4o\u3001Gemini 2.5 Flash\u548cDeepSeek-V3\uff09\u5728\u751f\u6210\u751f\u7269\u4fe1\u606f\u5b66\u5de5\u4f5c\u6d41\u4e2d\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u4e0d\u540c\u6a21\u578b\u5728\u4e0d\u540c\u5e73\u53f0\uff08\u5982Galaxy\u548cNextflow\uff09\u4e0a\u8868\u73b0\u5404\u5f02\uff0c\u63d0\u793a\u7b56\u7565\u5bf9\u7ed3\u679c\u8d28\u91cf\u6709\u663e\u8457\u5f71\u54cd\u3002", "motivation": "\u751f\u7269\u4fe1\u606f\u5b66\u6570\u636e\u5206\u6790\u7684\u590d\u6742\u6027\u4f7f\u5f97\u79d1\u5b66\u5de5\u4f5c\u6d41\u7cfb\u7edf\uff08SWSs\uff09\u5982Galaxy\u548cNextflow\u53d8\u5f97\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u521b\u5efa\u548c\u7406\u89e3\u8fd9\u4e9b\u5de5\u4f5c\u6d41\u5bf9\u975e\u7f16\u7a0b\u4e13\u5bb6\u4ecd\u5177\u6311\u6218\u6027\u3002", "method": "\u7814\u7a76\u8bc4\u4f30\u4e86GPT-4o\u3001Gemini 2.5 Flash\u548cDeepSeek-V3\u5728\u751f\u6210\u751f\u7269\u4fe1\u606f\u5b66\u5de5\u4f5c\u6d41\u4e2d\u7684\u8868\u73b0\uff0c\u6db5\u76d6\u4e86SNP\u5206\u6790\u3001RNA-seq\u3001DNA\u7532\u57fa\u5316\u548c\u6570\u636e\u68c0\u7d22\u7b49\u4efb\u52a1\uff0c\u5e76\u5bf9\u6bd4\u4e86\u793e\u533a\u57fa\u51c6\u3002", "result": "Gemini 2.5 Flash\u5728Galaxy\u5de5\u4f5c\u6d41\u751f\u6210\u4e2d\u8868\u73b0\u6700\u4f73\uff0cDeepSeek-V3\u5728Nextflow\u4e2d\u8868\u73b0\u7a81\u51fa\u3002\u63d0\u793a\u7b56\u7565\uff08\u5982\u89d2\u8272\u626e\u6f14\u548c\u601d\u7ef4\u94fe\uff09\u663e\u8457\u63d0\u9ad8\u4e86\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027\u3002", "conclusion": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u6709\u671b\u964d\u4f4e\u5de5\u4f5c\u6d41\u5f00\u53d1\u95e8\u69db\uff0c\u63d0\u9ad8\u53ef\u91cd\u590d\u6027\uff0c\u5e76\u901a\u8fc7\u63d0\u793a\u5de5\u7a0b\u4fc3\u8fdb\u751f\u7269\u4fe1\u606f\u5b66\u5de5\u5177\u7684\u666e\u53ca\u3002"}}
{"id": "2507.20135", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20135", "abs": "https://arxiv.org/abs/2507.20135", "authors": ["Ganesh Pai"], "title": "Relating System Safety and Machine Learnt Model Performance", "comment": "17 pages, 4 figures, Expanded version of the paper: G. Pai, \"Deriving\n  Safety-related Performance Requirements for Machine Learnt Aeronautical\n  Applications\", Proceedings of the 44th AIAA DATC/IEEE Digital Avionics\n  Systems Conference (DASC 2025)", "summary": "The prediction quality of machine learnt models and the functionality they\nultimately enable (e.g., object detection), is typically evaluated using a\nvariety of quantitative metrics that are specified in the associated model\nperformance requirements. When integrating such models into aeronautical\napplications, a top-down safety assessment process must influence both the\nmodel performance metrics selected, and their acceptable range of values.\nOften, however, the relationship of system safety objectives to model\nperformance requirements and the associated metrics is unclear. Using an\nexample of an aircraft emergency braking system containing a machine learnt\ncomponent (MLC) responsible for object detection and alerting, this paper first\ndescribes a simple abstraction of the required MLC behavior. Then, based on\nthat abstraction, an initial method is given to derive the minimum\nsafety-related performance requirements, the associated metrics, and their\ntargets for the both MLC and its underlying deep neural network, such that they\nmeet the quantitative safety objectives obtained from the safety assessment\nprocess. We give rationale as to why the proposed method should be considered\nvalid, also clarifying the assumptions made, the constraints on applicability,\nand the implications for verification.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5728\u822a\u7a7a\u5e94\u7528\u4e2d\u5982\u4f55\u5c06\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u6027\u80fd\u6307\u6807\u4e0e\u7cfb\u7edf\u5b89\u5168\u76ee\u6807\u5173\u8054\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u4ece\u5b89\u5168\u8bc4\u4f30\u4e2d\u63a8\u5bfc\u6700\u5c0f\u6027\u80fd\u8981\u6c42\u7684\u65b9\u6cd5\u3002", "motivation": "\u5728\u822a\u7a7a\u5e94\u7528\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u6027\u80fd\u6307\u6807\u4e0e\u7cfb\u7edf\u5b89\u5168\u76ee\u6807\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u660e\u786e\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u786e\u4fdd\u6a21\u578b\u6ee1\u8db3\u5b89\u5168\u8981\u6c42\u3002", "method": "\u901a\u8fc7\u62bd\u8c61\u673a\u5668\u5b66\u4e60\u7ec4\u4ef6\u7684\u884c\u4e3a\uff0c\u63d0\u51fa\u4e00\u79cd\u65b9\u6cd5\u63a8\u5bfc\u6700\u5c0f\u5b89\u5168\u76f8\u5173\u6027\u80fd\u8981\u6c42\u53ca\u5176\u6307\u6807\uff0c\u5e76\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "result": "\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u5b89\u5168\u76ee\u6807\u63a8\u5bfc\u6027\u80fd\u8981\u6c42\u7684\u65b9\u6cd5\uff0c\u660e\u786e\u4e86\u5047\u8bbe\u3001\u9002\u7528\u7ea6\u675f\u548c\u9a8c\u8bc1\u610f\u4e49\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u822a\u7a7a\u5e94\u7528\u4e2d\u673a\u5668\u5b66\u4e60\u7ec4\u4ef6\u7684\u5b89\u5168\u6027\u80fd\u8981\u6c42\u63d0\u4f9b\u4e86\u521d\u6b65\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.20218", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20218", "abs": "https://arxiv.org/abs/2507.20218", "authors": ["Muhammad Azeem Akbar", "Arif Ali Khan", "Saima Rafi", "Damian Kedziora", "Sami Hyrynsalmi"], "title": "Strategic Motivators for Ethical AI System Development: An Empirical and Holistic Model", "comment": null, "summary": "Artificial Intelligence (AI) presents transformative opportunities for\nindustries and society, but its responsible development is essential to prevent\nunintended consequences. Ethically sound AI systems demand strategic planning,\nstrong governance, and an understanding of the key drivers that promote\nresponsible practices. This study aims to identify and prioritize the\nmotivators that drive the ethical development of AI systems. A Multivocal\nLiterature Review (MLR) and a questionnaire-based survey were conducted to\ncapture current practices in ethical AI. We applied Interpretive Structure\nModeling (ISM) to explore the relationships between motivator categories,\nfollowed by MICMAC analysis to classify them by their driving and dependence\npower. Fuzzy TOPSIS was used to rank these motivators by importance. Twenty key\nmotivators were identified and grouped into eight categories: Human Resource,\nKnowledge Integration, Coordination, Project Administration, Standards,\nTechnology Factor, Stakeholders, and Strategy & Matrices. ISM results showed\nthat 'Human Resource' and 'Coordination' heavily influence other factors.\nMICMAC analysis placed categories like Human Resource (CA1), Coordination\n(CA3), Stakeholders (CA7), and Strategy & Matrices (CA8) in the independent\ncluster, indicating high driving but low dependence power. Fuzzy TOPSIS ranked\nmotivators such as promoting team diversity, establishing AI governance bodies,\nappointing oversight leaders, and ensuring data privacy as most critical. To\nsupport ethical AI adoption, organizations should align their strategies with\nthese motivators and integrate them into their policies, governance models, and\ndevelopment frameworks.", "AI": {"tldr": "\u8be5\u7814\u7a76\u901a\u8fc7\u591a\u6e90\u6587\u732e\u7efc\u8ff0\u548c\u95ee\u5377\u8c03\u67e5\uff0c\u8bc6\u522b\u5e76\u4f18\u5148\u6392\u5e8f\u4e86\u63a8\u52a8AI\u4f26\u7406\u53d1\u5c55\u768420\u4e2a\u5173\u952e\u52a8\u673a\u56e0\u7d20\uff0c\u5206\u4e3a8\u7c7b\u3002ISM\u548cMICMAC\u5206\u6790\u63ed\u793a\u4e86\u2018\u4eba\u529b\u8d44\u6e90\u2019\u548c\u2018\u534f\u8c03\u2019\u5bf9\u5176\u4ed6\u56e0\u7d20\u7684\u91cd\u8981\u5f71\u54cd\uff0c\u800cFuzzy TOPSIS\u5219\u786e\u5b9a\u4e86\u56e2\u961f\u591a\u6837\u6027\u3001AI\u6cbb\u7406\u673a\u6784\u7b49\u4e3a\u6700\u5173\u952e\u7684\u52a8\u673a\u3002", "motivation": "\u7814\u7a76\u65e8\u5728\u8bc6\u522b\u548c\u4f18\u5148\u6392\u5e8f\u63a8\u52a8AI\u4f26\u7406\u53d1\u5c55\u7684\u5173\u952e\u52a8\u673a\uff0c\u4ee5\u652f\u6301\u8d1f\u8d23\u4efbAI\u7684\u5f00\u53d1\u3002", "method": "\u91c7\u7528\u591a\u6e90\u6587\u732e\u7efc\u8ff0\uff08MLR\uff09\u3001\u95ee\u5377\u8c03\u67e5\u3001\u89e3\u91ca\u6027\u7ed3\u6784\u5efa\u6a21\uff08ISM\uff09\u3001MICMAC\u5206\u6790\u548c\u6a21\u7ccaTOPSIS\u65b9\u6cd5\u3002", "result": "\u8bc6\u522b\u51fa20\u4e2a\u5173\u952e\u52a8\u673a\u56e0\u7d20\uff0c\u5206\u4e3a8\u7c7b\uff1bISM\u663e\u793a\u2018\u4eba\u529b\u8d44\u6e90\u2019\u548c\u2018\u534f\u8c03\u2019\u5f71\u54cd\u663e\u8457\uff1bMICMAC\u5206\u6790\u5c06\u90e8\u5206\u7c7b\u522b\u5f52\u4e3a\u72ec\u7acb\u96c6\u7fa4\uff1bFuzzy TOPSIS\u786e\u5b9a\u4e86\u6700\u5173\u952e\u7684\u52a8\u673a\u3002", "conclusion": "\u7ec4\u7ec7\u5e94\u5c06\u8fd9\u4e9b\u52a8\u673a\u56e0\u7d20\u7eb3\u5165\u653f\u7b56\u3001\u6cbb\u7406\u6a21\u578b\u548c\u5f00\u53d1\u6846\u67b6\uff0c\u4ee5\u652f\u6301\u4f26\u7406AI\u7684\u91c7\u7528\u3002"}}
{"id": "2507.20358", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20358", "abs": "https://arxiv.org/abs/2507.20358", "authors": ["Tanni Dev", "Sayma Sultana", "Amiangshu Bosu"], "title": "Beyond Binary Moderation: Identifying Fine-Grained Sexist and Misogynistic Behavior on GitHub with Large Language Models", "comment": "The 19th ACM/IEEE International Symposium on Empirical Software\n  Engineering and Measurement", "summary": "Background: Sexist and misogynistic behavior significantly hinders inclusion\nin technical communities like GitHub, causing developers, especially\nminorities, to leave due to subtle biases and microaggressions. Current\nmoderation tools primarily rely on keyword filtering or binary classifiers,\nlimiting their ability to detect nuanced harm effectively.\n  Aims: This study introduces a fine-grained, multi-class classification\nframework that leverages instruction-tuned Large Language Models (LLMs) to\nidentify twelve distinct categories of sexist and misogynistic comments on\nGitHub.\n  Method: We utilized an instruction-tuned LLM-based framework with systematic\nprompt refinement across 20 iterations, evaluated on 1,440 labeled GitHub\ncomments across twelve sexism/misogyny categories. Model performances were\nrigorously compared using precision, recall, F1-score, and the Matthews\nCorrelation Coefficient (MCC).\n  Results: Our optimized approach (GPT-4o with Prompt 19) achieved an MCC of\n0.501, significantly outperforming baseline approaches. While this model had\nlow false positives, it struggled to interpret nuanced, context-dependent\nsexism and misogyny reliably.\n  Conclusion: Well-designed prompts with clear definitions and structured\noutputs significantly improve the accuracy and interpretability of sexism\ndetection, enabling precise and practical moderation on developer platforms\nlike GitHub.", "AI": {"tldr": "\u7814\u7a76\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u6307\u4ee4\u8c03\u4f18\u5927\u8bed\u8a00\u6a21\u578b\u7684\u591a\u7c7b\u522b\u5206\u7c7b\u6846\u67b6\uff0c\u7528\u4e8e\u68c0\u6d4bGitHub\u4e0a\u7684\u6027\u522b\u6b67\u89c6\u548c\u538c\u5973\u8a00\u8bba\uff0c\u663e\u8457\u4f18\u4e8e\u57fa\u7ebf\u65b9\u6cd5\uff0c\u4f46\u5728\u5904\u7406\u5fae\u5999\u8bed\u5883\u65f6\u4ecd\u6709\u5c40\u9650\u3002", "motivation": "\u6280\u672f\u793e\u533a\uff08\u5982GitHub\uff09\u4e2d\u7684\u6027\u522b\u6b67\u89c6\u548c\u538c\u5973\u884c\u4e3a\u963b\u788d\u4e86\u5305\u5bb9\u6027\uff0c\u73b0\u6709\u5de5\u5177\u96be\u4ee5\u6709\u6548\u68c0\u6d4b\u8fd9\u4e9b\u5fae\u5999\u4f24\u5bb3\u3002", "method": "\u91c7\u7528\u6307\u4ee4\u8c03\u4f18\u7684\u5927\u8bed\u8a00\u6a21\u578b\u6846\u67b6\uff0c\u901a\u8fc720\u6b21\u8fed\u4ee3\u4f18\u5316\u63d0\u793a\uff0c\u8bc4\u4f30\u4e861,440\u6761\u6807\u8bb0\u8bc4\u8bba\uff0c\u4f7f\u7528\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u3001F1\u5206\u6570\u548cMCC\u8fdb\u884c\u6027\u80fd\u6bd4\u8f83\u3002", "result": "\u4f18\u5316\u540e\u7684\u65b9\u6cd5\uff08GPT-4o\u4e0ePrompt 19\uff09MCC\u4e3a0.501\uff0c\u663e\u8457\u4f18\u4e8e\u57fa\u7ebf\uff0c\u4f46\u5bf9\u5fae\u5999\u8bed\u5883\u7684\u7406\u89e3\u4ecd\u6709\u4e0d\u8db3\u3002", "conclusion": "\u8bbe\u8ba1\u826f\u597d\u7684\u63d0\u793a\u80fd\u663e\u8457\u63d0\u5347\u6027\u522b\u6b67\u89c6\u68c0\u6d4b\u7684\u51c6\u786e\u6027\u548c\u53ef\u89e3\u91ca\u6027\uff0c\u4e3a\u5f00\u53d1\u8005\u5e73\u53f0\u63d0\u4f9b\u5b9e\u7528\u5de5\u5177\u3002"}}
{"id": "2507.20402", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20402", "abs": "https://arxiv.org/abs/2507.20402", "authors": ["Md Nazmul Hossain", "Taher A. Ghaleb"], "title": "CIgrate: Automating CI Service Migration with Large Language Models", "comment": "Registered Report Accepted at the 41st IEEE International Conference\n  on Software Maintenance and Evolution 2025 (ICSME'25)", "summary": "Continuous Integration (CI) configurations often need to be migrated between\nservices (e.g., Travis CI to GitHub Actions) as projects evolve, due to changes\nin service capabilities, usage limits, or service deprecation. Previous studies\nreported that migration across CI services is a recurring need in open-source\ndevelopment. However, manual migration can be time-consuming and error-prone.\nThe state-of-the-art approach, CIMig, addresses this challenge by analyzing\npast migration examples to create service-specific rules and produce equivalent\nconfigurations across CI services. However, its relatively low accuracy raises\nconcerns about the overall feasibility of automated CI migration using\nrule-based techniques alone. Meanwhile, Large Language Models (LLMs) have\ndemonstrated strong capabilities in code generation and transformation tasks,\nsuggesting potential to improve the automation, usability, and generalizability\nof CI configuration migration. This registered report presents a study in which\nwe aim to assess whether CI migration can be improved using LLMs. To this end,\nwe propose CIgrate, an LLM-based framework for automatically migrating CI\nconfigurations. We plan to evaluate the performance of CIgrate compared to\nCIMig as a baseline, in different setups (a) zero-shot/few-shot prompting of\nLLMs for configuration migration and (b) fine-tuning an LLM on a dataset of\nalready established CI service migrations. We will also seek developer feedback\non the quality and usability of the generated configurations. We formulate\nresearch questions focusing on the accuracy of LLM-generated migrations versus\nground truth and the output of CIMig. The expected contributions include the\nfirst LLM-powered approach for CI service migration, a comparative evaluation\nof its effectiveness compared to rule-based approaches, and insight into\nleveraging LLMs to support software configuration evolution.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51faCIgrate\uff0c\u4e00\u4e2a\u57fa\u4e8eLLM\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u8fc1\u79fbCI\u914d\u7f6e\uff0c\u65e8\u5728\u63d0\u9ad8\u51c6\u786e\u6027\u548c\u53ef\u7528\u6027\uff0c\u5e76\u4e0e\u73b0\u6709\u89c4\u5219\u65b9\u6cd5CIMig\u8fdb\u884c\u6bd4\u8f83\u3002", "motivation": "CI\u914d\u7f6e\u8fc1\u79fb\u5728\u5f00\u6e90\u9879\u76ee\u4e2d\u9700\u6c42\u9891\u7e41\uff0c\u4f46\u624b\u52a8\u8fc1\u79fb\u8017\u65f6\u4e14\u6613\u9519\uff0c\u73b0\u6709\u89c4\u5219\u65b9\u6cd5CIMig\u51c6\u786e\u6027\u4e0d\u8db3\uff0cLLM\u5728\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u53ef\u80fd\u63d0\u5347\u8fc1\u79fb\u6548\u679c\u3002", "method": "\u63d0\u51faCIgrate\u6846\u67b6\uff0c\u901a\u8fc7\u96f6\u6837\u672c/\u5c11\u6837\u672c\u63d0\u793a\u6216\u5fae\u8c03LLM\u5b9e\u73b0CI\u914d\u7f6e\u8fc1\u79fb\uff0c\u5e76\u4e0eCIMig\u5bf9\u6bd4\uff0c\u8bc4\u4f30\u51c6\u786e\u6027\u548c\u5f00\u53d1\u8005\u53cd\u9988\u3002", "result": "\u9884\u671f\u8d21\u732e\u5305\u62ec\u9996\u4e2aLLM\u9a71\u52a8\u7684CI\u8fc1\u79fb\u65b9\u6cd5\u3001\u4e0e\u89c4\u5219\u65b9\u6cd5\u7684\u6bd4\u8f83\u8bc4\u4f30\uff0c\u4ee5\u53caLLM\u5728\u8f6f\u4ef6\u914d\u7f6e\u6f14\u5316\u4e2d\u7684\u5e94\u7528\u6d1e\u5bdf\u3002", "conclusion": "LLM\u6709\u671b\u63d0\u5347CI\u914d\u7f6e\u8fc1\u79fb\u7684\u81ea\u52a8\u5316\u6c34\u5e73\u548c\u51c6\u786e\u6027\uff0c\u4e3a\u8f6f\u4ef6\u914d\u7f6e\u7ba1\u7406\u63d0\u4f9b\u65b0\u601d\u8def\u3002"}}
{"id": "2507.20407", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20407", "abs": "https://arxiv.org/abs/2507.20407", "authors": ["Davi Gama Hardman", "Cesar Fran\u00e7a", "Brody Stuart-Verner", "Ronnie de Souza Santos"], "title": "Testing Is Not Boring: Characterizing Challenge in Software Testing Tasks", "comment": null, "summary": "As software systems continue to grow in complexity, testing has become a\nfundamental part of ensuring the quality and reliability of software products.\nYet, software testing is still often perceived, both in industry and academia,\nas a repetitive, low-skill activity. This perception fails to recognize the\ncreativity, problem-solving, and adaptability required in testing work. Tasks\nsuch as designing complex test cases, automating testing processes, and\nhandling shifting requirements illustrate the challenges testing professionals\nregularly face. To better understand these experiences, we conducted a study\nwith software testing professionals to explore the nature of challenging tasks\nin software testing and how they affect these professionals. Our findings show\nthat tasks involving creativity, ongoing learning, and time pressure are often\nseen as motivating and rewarding. On the other hand, a lack of challenge or\noverwhelming demands can lead to frustration and disengagement. These findings\ndemonstrate the importance of balancing task complexity to sustain motivation\nand present software testing as a dynamic and intellectually engaging field.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u8f6f\u4ef6\u6d4b\u8bd5\u7684\u590d\u6742\u6027\u548c\u6311\u6218\u6027\uff0c\u53cd\u9a73\u4e86\u5176\u88ab\u89c6\u4e3a\u4f4e\u6280\u80fd\u6d3b\u52a8\u7684\u89c2\u70b9\uff0c\u5e76\u901a\u8fc7\u7814\u7a76\u53d1\u73b0\u521b\u9020\u6027\u3001\u5b66\u4e60\u6027\u548c\u65f6\u95f4\u538b\u529b\u7684\u4efb\u52a1\u5bf9\u6d4b\u8bd5\u4eba\u5458\u5177\u6709\u6fc0\u52b1\u4f5c\u7528\u3002", "motivation": "\u8f6f\u4ef6\u6d4b\u8bd5\u5e38\u88ab\u89c6\u4e3a\u91cd\u590d\u6027\u4f4e\u6280\u80fd\u5de5\u4f5c\uff0c\u4f46\u5b9e\u9645\u9700\u8981\u521b\u9020\u529b\u3001\u95ee\u9898\u89e3\u51b3\u80fd\u529b\u548c\u9002\u5e94\u6027\u3002\u7814\u7a76\u65e8\u5728\u63ed\u793a\u6d4b\u8bd5\u5de5\u4f5c\u7684\u771f\u5b9e\u6311\u6218\u53ca\u5176\u5bf9\u4e13\u4e1a\u4eba\u5458\u7684\u5f71\u54cd\u3002", "method": "\u5bf9\u8f6f\u4ef6\u6d4b\u8bd5\u4e13\u4e1a\u4eba\u5458\u8fdb\u884c\u4e86\u7814\u7a76\uff0c\u5206\u6790\u4ed6\u4eec\u5728\u6d4b\u8bd5\u4efb\u52a1\u4e2d\u7684\u4f53\u9a8c\u548c\u6311\u6218\u3002", "result": "\u7814\u7a76\u53d1\u73b0\uff0c\u6d89\u53ca\u521b\u9020\u529b\u3001\u6301\u7eed\u5b66\u4e60\u548c\u65f6\u95f4\u538b\u529b\u7684\u4efb\u52a1\u80fd\u6fc0\u52b1\u6d4b\u8bd5\u4eba\u5458\uff0c\u800c\u7f3a\u4e4f\u6311\u6218\u6216\u8fc7\u5ea6\u8981\u6c42\u5219\u4f1a\u5bfc\u81f4\u632b\u8d25\u611f\u3002", "conclusion": "\u7814\u7a76\u5f3a\u8c03\u4e86\u5e73\u8861\u4efb\u52a1\u590d\u6742\u6027\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u7ef4\u6301\u6d4b\u8bd5\u4eba\u5458\u7684\u52a8\u529b\uff0c\u5e76\u5c06\u8f6f\u4ef6\u6d4b\u8bd5\u89c6\u4e3a\u4e00\u4e2a\u52a8\u6001\u4e14\u667a\u529b\u4e0a\u5bcc\u6709\u5438\u5f15\u529b\u7684\u9886\u57df\u3002"}}
{"id": "2507.20439", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.20439", "abs": "https://arxiv.org/abs/2507.20439", "authors": ["Maya Larbi", "Amal Akli", "Mike Papadakis", "Rihab Bouyousfi", "Maxime Cordy", "Federica Sarro", "Yves Le Traon"], "title": "When Prompts Go Wrong: Evaluating Code Model Robustness to Ambiguous, Contradictory, and Incomplete Task Descriptions", "comment": null, "summary": "Large Language Models (LLMs) have demonstrated impressive performance in code\ngeneration tasks under idealized conditions, where task descriptions are clear\nand precise. However, in practice, task descriptions frequently exhibit\nambiguity, incompleteness, or internal contradictions. In this paper, we\npresent the first empirical study examining the robustness of state-of-the-art\ncode generation models when faced with such unclear task descriptions. We\nextend the HumanEval and MBPP benchmarks by systematically introducing\nrealistic task descriptions flaws through guided mutation strategies, producing\na dataset that mirrors the messiness of informal developer instructions. We\nevaluate multiple LLMs of varying sizes and architectures, analyzing their\nfunctional correctness and failure modes across task descriptions categories.\nOur findings reveal that even minor imperfections in task description phrasing\ncan cause significant performance degradation, with contradictory task\ndescriptions resulting in numerous logical errors. Moreover, while larger\nmodels tend to be more resilient than smaller variants, they are not immune to\nthe challenges posed by unclear requirements. We further analyze semantic error\npatterns and identify correlations between description clarity, model behavior,\nand error types. Our results underscore the critical need for developing LLMs\nthat are not only powerful but also robust to the imperfections inherent in\nnatural user tasks, highlighting important considerations for improving model\ntraining strategies, designing more realistic evaluation benchmarks, and\nensuring reliable deployment in practical software development environments.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e2d\u9762\u5bf9\u6a21\u7cca\u3001\u4e0d\u5b8c\u6574\u6216\u77db\u76fe\u7684\u4efb\u52a1\u63cf\u8ff0\u65f6\u7684\u9c81\u68d2\u6027\uff0c\u53d1\u73b0\u5373\u4f7f\u662f\u5c0f\u7684\u95ee\u9898\u4e5f\u4f1a\u663e\u8457\u964d\u4f4e\u6027\u80fd\u3002", "motivation": "\u5b9e\u9645\u5f00\u53d1\u4e2d\u4efb\u52a1\u63cf\u8ff0\u5e38\u4e0d\u6e05\u6670\uff0c\u800c\u73b0\u6709\u7814\u7a76\u591a\u57fa\u4e8e\u7406\u60f3\u6761\u4ef6\uff0c\u56e0\u6b64\u9700\u8bc4\u4f30LLMs\u5728\u975e\u7406\u60f3\u6761\u4ef6\u4e0b\u7684\u8868\u73b0\u3002", "method": "\u6269\u5c55HumanEval\u548cMBPP\u57fa\u51c6\uff0c\u901a\u8fc7\u7cfb\u7edf\u5f15\u5165\u4efb\u52a1\u63cf\u8ff0\u7f3a\u9677\uff0c\u8bc4\u4f30\u4e0d\u540c\u89c4\u6a21\u548c\u67b6\u6784\u7684LLMs\u3002", "result": "\u4efb\u52a1\u63cf\u8ff0\u7684\u5c0f\u95ee\u9898\u4f1a\u5bfc\u81f4\u6027\u80fd\u663e\u8457\u4e0b\u964d\uff0c\u77db\u76fe\u63cf\u8ff0\u6613\u5f15\u53d1\u903b\u8f91\u9519\u8bef\uff1b\u5927\u6a21\u578b\u66f4\u7a33\u5065\u4f46\u4ecd\u53d7\u5f71\u54cd\u3002", "conclusion": "\u9700\u5f00\u53d1\u66f4\u9c81\u68d2\u7684LLMs\uff0c\u6539\u8fdb\u8bad\u7ec3\u7b56\u7565\u548c\u8bc4\u4f30\u57fa\u51c6\uff0c\u4ee5\u5e94\u5bf9\u5b9e\u9645\u5f00\u53d1\u4e2d\u7684\u4e0d\u6e05\u6670\u9700\u6c42\u3002"}}
{"id": "2507.20475", "categories": ["cs.SE", "quant-ph"], "pdf": "https://arxiv.org/pdf/2507.20475", "abs": "https://arxiv.org/abs/2507.20475", "authors": ["Ahmik Virani", "Devraj", "Anirudh Suresh", "Lei Zhang", "M V Panduranga Rao"], "title": "Distinguishing Quantum Software Bugs from Hardware Noise: A Statistical Approach", "comment": "12 pages, 30 figures, accepted by the IEEE International Conference\n  on Quantum Computing and Engineering (QCE), IEEE Quantum Week, 2025", "summary": "Quantum computing in the Noisy Intermediate-Scale Quantum (NISQ) era presents\nsignificant challenges in differentiating quantum software bugs from hardware\nnoise. Traditional debugging techniques from classical software engineering\ncannot directly resolve this issue due to the inherently stochastic nature of\nquantum computation mixed with noises from NISQ computers. To address this gap,\nwe propose a statistical approach leveraging probabilistic metrics to\ndifferentiate between quantum software bugs and hardware noise. We evaluate our\nmethodology empirically using well-known quantum algorithms, including Grover's\nalgorithm, Deutsch-Jozsa algorithm, and Simon's algorithm. Experimental results\ndemonstrate the efficacy and practical applicability of our approach, providing\nquantum software developers with a reliable analytical tool to identify and\nclassify unexpected behavior in quantum programs.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7edf\u8ba1\u65b9\u6cd5\uff0c\u901a\u8fc7\u6982\u7387\u6307\u6807\u533a\u5206\u91cf\u5b50\u8f6f\u4ef6\u9519\u8bef\u548c\u786c\u4ef6\u566a\u58f0\uff0c\u5e76\u5728\u5b9e\u9a8c\u4e2d\u9a8c\u8bc1\u4e86\u5176\u6709\u6548\u6027\u3002", "motivation": "NISQ\u65f6\u4ee3\u7684\u91cf\u5b50\u8ba1\u7b97\u4e2d\uff0c\u91cf\u5b50\u8f6f\u4ef6\u9519\u8bef\u4e0e\u786c\u4ef6\u566a\u58f0\u96be\u4ee5\u533a\u5206\uff0c\u4f20\u7edf\u8c03\u8bd5\u65b9\u6cd5\u65e0\u6cd5\u76f4\u63a5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u91c7\u7528\u7edf\u8ba1\u65b9\u6cd5\uff0c\u5229\u7528\u6982\u7387\u6307\u6807\u533a\u5206\u8f6f\u4ef6\u9519\u8bef\u548c\u786c\u4ef6\u566a\u58f0\uff0c\u5e76\u5728Grover\u3001Deutsch-Jozsa\u548cSimon\u7b97\u6cd5\u4e2d\u8fdb\u884c\u4e86\u5b9e\u9a8c\u9a8c\u8bc1\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\u8be5\u65b9\u6cd5\u6709\u6548\u4e14\u5b9e\u7528\uff0c\u4e3a\u91cf\u5b50\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u5206\u6790\u5de5\u5177\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u80fd\u6709\u6548\u5e2e\u52a9\u5f00\u53d1\u8005\u8bc6\u522b\u548c\u5206\u7c7b\u91cf\u5b50\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\u884c\u4e3a\u3002"}}
{"id": "2507.20502", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2507.20502", "abs": "https://arxiv.org/abs/2507.20502", "authors": ["Howell Xia", "Jonah Gluck", "Sevval Simsek", "David Sastre Medina", "David Starobinski"], "title": "VDGraph: A Graph-Theoretic Approach to Unlock Insights from SBOM and SCA Data", "comment": null, "summary": "The high complexity of modern software supply chains necessitates tools such\nas Software Bill of Materials (SBOMs) to manage component dependencies, and\nSoftware Composition Analysis (SCA) tools to identify vulnerabilities. While\nthere exists limited integration between SBOMs and SCA tools, a unified view of\ncomplex dependency-vulnerability relationships remains elusive. In this paper,\nwe introduce VDGraph, a novel knowledge graph-based methodology for integrating\nvulnerability and dependency data into a holistic view. VDGraph consolidates\nSBOM and SCA outputs into a graph representation of software projects'\ndependencies and vulnerabilities. We provide a formal description and analysis\nof the theoretical properties of VDGraph and present solutions to manage\npossible conflicts between the SBOM and SCA data. We further introduce and\nevaluate a practical, proof-of-concept implementation of VDGraph using two\npopular SBOM and SCA tools, namely CycloneDX Maven plugin and Google's\nOSV-Scanner. We apply VDGraph on 21 popular Java projects. Through the\nformulation of appropriate queries on the graphs, we uncover the existence of\nconcentrated risk points (i.e., vulnerable components of high severity\nreachable through numerous dependency paths). We further show that\nvulnerabilities predominantly emerge at a depth of three dependency levels or\nhigher, indicating that direct or secondary dependencies exhibit lower\nvulnerability density and tend to be more secure. Thus, VDGraph contributes a\ngraph-theoretic methodology that improves visibility into how vulnerabilities\npropagate through complex, transitive dependencies. Moreover, our\nimplementation, which combines open SBOM and SCA standards with Neo4j, lays a\nfoundation for scalable and automated analysis across real-world projects.", "AI": {"tldr": "VDGraph\u662f\u4e00\u79cd\u57fa\u4e8e\u77e5\u8bc6\u56fe\u8c31\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u6574\u5408SBOM\u548cSCA\u5de5\u5177\u7684\u6570\u636e\uff0c\u63d0\u4f9b\u4f9d\u8d56\u548c\u6f0f\u6d1e\u7684\u7edf\u4e00\u89c6\u56fe\uff0c\u5e76\u901a\u8fc7\u5b9e\u9645\u9879\u76ee\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "motivation": "\u73b0\u4ee3\u8f6f\u4ef6\u4f9b\u5e94\u94fe\u7684\u590d\u6742\u6027\u9700\u8981\u5de5\u5177\uff08\u5982SBOM\u548cSCA\uff09\u6765\u7ba1\u7406\u4f9d\u8d56\u548c\u6f0f\u6d1e\uff0c\u4f46\u76ee\u524d\u7f3a\u4e4f\u7edf\u4e00\u7684\u89c6\u56fe\u6765\u6574\u5408\u8fd9\u4e9b\u6570\u636e\u3002", "method": "\u63d0\u51faVDGraph\uff0c\u5c06SBOM\u548cSCA\u8f93\u51fa\u6574\u5408\u4e3a\u4f9d\u8d56\u548c\u6f0f\u6d1e\u7684\u56fe\u8c31\u8868\u793a\uff0c\u5e76\u89e3\u51b3\u6570\u636e\u51b2\u7a81\u95ee\u9898\u3002\u901a\u8fc7\u5b9e\u9645\u5de5\u5177\uff08CycloneDX Maven\u63d2\u4ef6\u548cOSV-Scanner\uff09\u5b9e\u73b0\u6982\u5ff5\u9a8c\u8bc1\u3002", "result": "\u572821\u4e2aJava\u9879\u76ee\u4e2d\u5e94\u7528VDGraph\uff0c\u53d1\u73b0\u9ad8\u98ce\u9669\u6f0f\u6d1e\u96c6\u4e2d\u5728\u6df1\u5c42\u4f9d\u8d56\u8def\u5f84\u4e2d\uff0c\u4e14\u6f0f\u6d1e\u591a\u51fa\u73b0\u5728\u4e09\u5c42\u6216\u66f4\u6df1\u4f9d\u8d56\u5c42\u7ea7\u3002", "conclusion": "VDGraph\u901a\u8fc7\u56fe\u8c31\u7406\u8bba\u65b9\u6cd5\u63d0\u5347\u4e86\u6f0f\u6d1e\u4f20\u64ad\u7684\u53ef\u89c1\u6027\uff0c\u7ed3\u5408\u5f00\u6e90\u5de5\u5177\u548cNeo4j\u4e3a\u5b9e\u9645\u9879\u76ee\u63d0\u4f9b\u4e86\u53ef\u6269\u5c55\u7684\u81ea\u52a8\u5316\u5206\u6790\u57fa\u7840\u3002"}}
{"id": "2507.20553", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20553", "abs": "https://arxiv.org/abs/2507.20553", "authors": ["Guanyu Chen", "Haoyue Jiao", "Shuyang Hou", "Ziqi Liu", "Lutong Xie", "Shaowen Wu", "Huayi Wu", "Xuefeng Guan", "Zhipeng Gui"], "title": "GeoJSEval: An Automated Evaluation Framework for Large Language Models on JavaScript-Based Geospatial Computation and Visualization Code Generation", "comment": null, "summary": "With the widespread adoption of large language models (LLMs) in code\ngeneration tasks, geospatial code generation has emerged as a critical frontier\nin the integration of artificial intelligence and geoscientific analysis. This\ntrend underscores the urgent need for systematic evaluation methodologies to\nassess LLMs generation capabilities in geospatial contexts. In particular,\ngeospatial computation and visualization tasks in JavaScript environments rely\nheavily on orchestrating diverse frontend libraries and ecosystems, placing\nelevated demands on a model's semantic understanding and code synthesis\nabilities. To address this challenge, we propose GeoJSEval--the first\nmultimodal, function-level automatic evaluation framework for LLMs in\nJavaScript-based geospatial code generation. GeoJSEval comprises three core\ncomponents: a standardized test suite (GeoJSEval-Bench), a code submission\nengine, and an evaluation module. It includes 432 function-level tasks and\n2,071 structured test cases spanning five widely used JavaScript geospatial\nlibraries and 25 mainstream geospatial data types. GeoJSEval enables\nmultidimensional quantitative evaluation across metrics such as accuracy,\noutput stability, execution efficiency, resource consumption, and error type\ndistribution, and integrates boundary testing mechanisms to enhance robustness\nand coverage. We conduct a comprehensive evaluation of 18 state-of-the-art LLMs\nusing GeoJSEval, revealing significant performance disparities and bottlenecks\nin spatial semantic understanding, code reliability, and function invocation\naccuracy. GeoJSEval provides a foundational methodology, evaluation resource,\nand practical toolkit for the standardized assessment and optimization of\ngeospatial code generation models, with strong extensibility and applicability\nin real-world scenarios.", "AI": {"tldr": "GeoJSEval\u662f\u4e00\u4e2a\u591a\u6a21\u6001\u3001\u51fd\u6570\u7ea7\u7684\u81ea\u52a8\u8bc4\u4f30\u6846\u67b6\uff0c\u7528\u4e8e\u8bc4\u4f30\u5927\u8bed\u8a00\u6a21\u578b\u5728JavaScript\u5730\u7406\u7a7a\u95f4\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u8868\u73b0\uff0c\u6db5\u76d6432\u4e2a\u4efb\u52a1\u548c2071\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u5730\u7406\u7a7a\u95f4\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u4e9f\u9700\u7cfb\u7edf\u5316\u7684\u8bc4\u4f30\u65b9\u6cd5\u6765\u8861\u91cf\u5176\u80fd\u529b\uff0c\u5c24\u5176\u662f\u5728JavaScript\u73af\u5883\u4e2d\u5bf9\u5730\u7406\u7a7a\u95f4\u8ba1\u7b97\u548c\u53ef\u89c6\u5316\u7684\u652f\u6301\u3002", "method": "\u63d0\u51faGeoJSEval\u6846\u67b6\uff0c\u5305\u62ec\u6807\u51c6\u5316\u6d4b\u8bd5\u5957\u4ef6\uff08GeoJSEval-Bench\uff09\u3001\u4ee3\u7801\u63d0\u4ea4\u5f15\u64ce\u548c\u8bc4\u4f30\u6a21\u5757\uff0c\u652f\u6301\u591a\u7ef4\u5ea6\u7684\u5b9a\u91cf\u8bc4\u4f30\u3002", "result": "\u5bf918\u4e2a\u5148\u8fdb\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8bc4\u4f30\u63ed\u793a\u4e86\u5176\u5728\u7a7a\u95f4\u8bed\u4e49\u7406\u89e3\u3001\u4ee3\u7801\u53ef\u9760\u6027\u548c\u51fd\u6570\u8c03\u7528\u51c6\u786e\u6027\u65b9\u9762\u7684\u663e\u8457\u6027\u80fd\u5dee\u5f02\u3002", "conclusion": "GeoJSEval\u4e3a\u5730\u7406\u7a7a\u95f4\u4ee3\u7801\u751f\u6210\u6a21\u578b\u7684\u6807\u51c6\u5316\u8bc4\u4f30\u548c\u4f18\u5316\u63d0\u4f9b\u4e86\u65b9\u6cd5\u8bba\u3001\u8d44\u6e90\u548c\u5de5\u5177\uff0c\u5177\u6709\u5f3a\u6269\u5c55\u6027\u548c\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002"}}
{"id": "2507.20619", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20619", "abs": "https://arxiv.org/abs/2507.20619", "authors": ["Binhang Qi", "Yun Lin", "Xinyi Weng", "Yuhuan Huang", "Chenyan Liu", "Hailong Sun", "Jin Song Dong"], "title": "Intention-Driven Generation of Project-Specific Test Cases", "comment": null, "summary": "Test cases are valuable assets for maintaining software quality. While\nnumerous automated techniques have been proposed for generating tests (either\nby maximizing code coverage or by translating focal code into test code),\npractical tests are seldom driven by coverage alone. In real projects, each\ntest reflects a developer's validation intention for a specific behaviour and\nembodies rich, project-specific knowledge: which specific APIs to call and what\nassertions truly matter. Without considering such knowledge, tests can hardly\npass code review and be integrated into the software product.\n  In this work, we propose IntentionTest, which generates project-specific\ntests with validation intention as a structured description. Our design is\nmotivated by two insights: (1) a description of validation intention, compared\nto coverage and focal code, carries more crucial information about what to\ntest; and (2) practical tests exhibit high code duplication, indicating that\ndomain knowledge is highly reusable for writing new tests. Given a focal code\nand a description of validation intention (in the form of either an informal\ncomment or a formal test plan), IntentionTest retrieves a referable test in the\nproject to guide test generation. Moreover, IntentionTest reduces the test\ngeneration problem into an editing problem on the test code regarding the\nvalidation intention. It generates a test including both test prefix and\noracle, which aims to be executable and semantically correct.\n  We evaluate IntentionTest against state-of-the-art baselines on 4,146 test\ncases from 13 open-source projects. Specifically, compared to ChatTester,\nIntentionTest can (1) generate significantly more semantically correct tests,\nimproving common mutation scores by 39.03% and coverage overlap with\nground-truth tests by 40.14%; (2) generate 21.30% more successful passing\ntests.", "AI": {"tldr": "IntentionTest \u662f\u4e00\u79cd\u751f\u6210\u9879\u76ee\u7279\u5b9a\u6d4b\u8bd5\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u7ed3\u6784\u5316\u63cf\u8ff0\u9a8c\u8bc1\u610f\u56fe\uff0c\u663e\u8457\u63d0\u5347\u6d4b\u8bd5\u7684\u8bed\u4e49\u6b63\u786e\u6027\u548c\u901a\u8fc7\u7387\u3002", "motivation": "\u73b0\u6709\u6d4b\u8bd5\u751f\u6210\u6280\u672f\u591a\u57fa\u4e8e\u4ee3\u7801\u8986\u76d6\u7387\uff0c\u4f46\u5b9e\u9645\u9879\u76ee\u4e2d\u6d4b\u8bd5\u9700\u4f53\u73b0\u5f00\u53d1\u8005\u5bf9\u7279\u5b9a\u884c\u4e3a\u7684\u9a8c\u8bc1\u610f\u56fe\u548c\u9879\u76ee\u77e5\u8bc6\u3002", "method": "IntentionTest \u5229\u7528\u9a8c\u8bc1\u610f\u56fe\u63cf\u8ff0\u548c\u9879\u76ee\u5185\u53ef\u91cd\u7528\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5c06\u6d4b\u8bd5\u751f\u6210\u95ee\u9898\u8f6c\u5316\u4e3a\u4ee3\u7801\u7f16\u8f91\u95ee\u9898\u3002", "result": "\u5728 4,146 \u4e2a\u6d4b\u8bd5\u6848\u4f8b\u4e2d\uff0cIntentionTest \u751f\u6210\u7684\u6d4b\u8bd5\u8bed\u4e49\u6b63\u786e\u6027\u63d0\u9ad8 39.03%\uff0c\u901a\u8fc7\u7387\u63d0\u9ad8 21.30%\u3002", "conclusion": "IntentionTest \u901a\u8fc7\u7ed3\u5408\u9a8c\u8bc1\u610f\u56fe\u548c\u9879\u76ee\u77e5\u8bc6\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6d4b\u8bd5\u751f\u6210\u7684\u8d28\u91cf\u548c\u5b9e\u7528\u6027\u3002"}}
{"id": "2507.20814", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.20814", "abs": "https://arxiv.org/abs/2507.20814", "authors": ["Gustave Monce", "Thomas Degueule", "Jean-R\u00e9my Falleri", "Romain Robbes"], "title": "Client--Library Compatibility Testing with API Interaction Snapshots", "comment": null, "summary": "Modern software development heavily relies on third-party libraries to speed\nup development and enhance quality. As libraries evolve, they may break the\ntacit contract established with their clients by introducing behavioral\nbreaking changes (BBCs) that alter run-time behavior and silently break client\napplications without being detected at compile time. Traditional regression\ntests on the client side often fail to detect such BBCs, either due to limited\nlibrary coverage or weak assertions that do not sufficiently exercise the\nlibrary's expected behavior. To address this issue, we propose a novel approach\nto client--library compatibility testing that leverages existing client tests\nin a novel way. Instead of relying on developer-written assertions, we propose\nrecording the actual interactions at the API boundary during the execution of\nclient tests (protocol, input and output values, exceptions, etc.). These\nsequences of API interactions are stored as snapshots which capture the exact\ncontract expected by a client at a specific point in time. As the library\nevolves, we compare the original and new snapshots to identify perturbations in\nthe contract, flag potential BBCs, and notify clients. We implement this\ntechnique in our prototype tool Gilesi, a Java framework that automatically\ninstruments library APIs, records snapshots, and compares them. Through a\npreliminary case study on several client--library pairs with artificially\nseeded BBCs, we show that Gilesi reliably detects BBCs missed by client test\nsuites.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u65b9\u6cd5Gilesi\uff0c\u901a\u8fc7\u8bb0\u5f55\u5ba2\u6237\u7aef\u6d4b\u8bd5\u4e2d\u7684API\u4ea4\u4e92\u5feb\u7167\u6765\u68c0\u6d4b\u5e93\u7684\u884c\u4e3a\u7834\u574f\u6027\u53d8\u66f4\uff08BBCs\uff09\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u56de\u5f52\u6d4b\u8bd5\u96be\u4ee5\u53d1\u73b0BBCs\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u4ee3\u8f6f\u4ef6\u5f00\u53d1\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f46\u5e93\u7684\u66f4\u65b0\u53ef\u80fd\u5f15\u5165\u884c\u4e3a\u7834\u574f\u6027\u53d8\u66f4\uff08BBCs\uff09\uff0c\u4f20\u7edf\u5ba2\u6237\u7aef\u6d4b\u8bd5\u96be\u4ee5\u68c0\u6d4b\u3002", "method": "\u8bb0\u5f55\u5ba2\u6237\u7aef\u6d4b\u8bd5\u4e2d\u7684API\u4ea4\u4e92\u5feb\u7167\uff08\u534f\u8bae\u3001\u8f93\u5165\u8f93\u51fa\u503c\u3001\u5f02\u5e38\u7b49\uff09\uff0c\u901a\u8fc7\u6bd4\u8f83\u5feb\u7167\u53d8\u5316\u8bc6\u522bBBCs\u3002", "result": "\u539f\u578b\u5de5\u5177Gilesi\u5728\u5b9e\u9a8c\u4e2d\u53ef\u9760\u5730\u68c0\u6d4b\u5230\u4e86\u4f20\u7edf\u6d4b\u8bd5\u9057\u6f0f\u7684BBCs\u3002", "conclusion": "Gilesi\u65b9\u6cd5\u6709\u6548\u89e3\u51b3\u4e86BBCs\u68c0\u6d4b\u95ee\u9898\uff0c\u4e3a\u5ba2\u6237\u7aef-\u5e93\u517c\u5bb9\u6027\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u65b0\u601d\u8def\u3002"}}
{"id": "2507.20848", "categories": ["cs.SE", "cs.DB"], "pdf": "https://arxiv.org/pdf/2507.20848", "abs": "https://arxiv.org/abs/2507.20848", "authors": ["Hernan Ghianni", "Man Zhang", "Juan P. Galeotti", "Andrea Arcuri"], "title": "Search-Based Fuzzing For RESTful APIs That Use MongoDB", "comment": null, "summary": "In RESTful APIs, interactions with a database are a common and crucial\naspect. When generating whitebox tests, it is essential to consider the\ndatabase's state (i.e., the data contained in the database) to achieve higher\ncode coverage and uncover more hidden faults. This article presents novel\ntechniques to enhance search-based software test generation for RESTful APIs\ninteracting with NoSQL databases. Specifically, we target the popular MongoDB\ndatabase, by dynamically analyzing (via automated code instrumentation) the\nstate of the database during the test generation process. Additionally, to\nachieve better results, our novel approach allows inserting NoSQL data directly\nfrom test cases. This is particularly beneficial when generating the correct\nsequence of events to set the NoSQL database in an appropriate state is\nchallenging or time-consuming. This method is also advantageous for testing\nread-only microservices. Our novel techniques are implemented as an extension\nof EvoMaster, the only open-source tool for white-box fuzzing RESTful APIs.\nExperiments conducted on six RESTful APIs demonstrated significant improvements\nin code coverage, with increases of up to 18% compared to existing white-box\napproaches. To better highlight the improvements of our novel techniques,\ncomparisons are also carried out with four state-of-the-art black-box fuzzers.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u6280\u672f\uff0c\u901a\u8fc7\u52a8\u6001\u5206\u6790NoSQL\u6570\u636e\u5e93\u72b6\u6001\u548c\u76f4\u63a5\u4ece\u6d4b\u8bd5\u7528\u4f8b\u63d2\u5165\u6570\u636e\uff0c\u63d0\u5347\u4e86RESTful API\u7684\u767d\u76d2\u6d4b\u8bd5\u751f\u6210\u6548\u679c\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u4ee3\u7801\u8986\u76d6\u7387\u3002", "motivation": "\u5728RESTful API\u6d4b\u8bd5\u4e2d\uff0c\u6570\u636e\u5e93\u72b6\u6001\u5bf9\u63d0\u9ad8\u4ee3\u7801\u8986\u76d6\u7387\u548c\u53d1\u73b0\u9690\u85cf\u6545\u969c\u81f3\u5173\u91cd\u8981\u3002\u73b0\u6709\u65b9\u6cd5\u5728\u751f\u6210\u6d4b\u8bd5\u65f6\u672a\u5145\u5206\u8003\u8651\u6570\u636e\u5e93\u72b6\u6001\uff0c\u5c24\u5176\u662f\u5728NoSQL\u6570\u636e\u5e93\uff08\u5982MongoDB\uff09\u4e2d\u3002", "method": "\u901a\u8fc7\u81ea\u52a8\u5316\u4ee3\u7801\u63d2\u6869\u52a8\u6001\u5206\u6790\u6570\u636e\u5e93\u72b6\u6001\uff0c\u5e76\u76f4\u63a5\u4ece\u6d4b\u8bd5\u7528\u4f8b\u63d2\u5165NoSQL\u6570\u636e\uff0c\u4f18\u5316\u6d4b\u8bd5\u751f\u6210\u8fc7\u7a0b\u3002\u8be5\u65b9\u6cd5\u4f5c\u4e3aEvoMaster\u5de5\u5177\u7684\u6269\u5c55\u5b9e\u73b0\u3002", "result": "\u5728\u516d\u4e2aRESTful API\u4e0a\u7684\u5b9e\u9a8c\u663e\u793a\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u63d0\u9ad8\u4e8618%\uff0c\u4f18\u4e8e\u73b0\u6709\u767d\u76d2\u65b9\u6cd5\u548c\u56db\u79cd\u9ed1\u76d2\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86RESTful API\u6d4b\u8bd5\u7684\u6548\u679c\uff0c\u5c24\u5176\u5728\u5904\u7406NoSQL\u6570\u636e\u5e93\u72b6\u6001\u65f6\u8868\u73b0\u51fa\u8272\uff0c\u9002\u7528\u4e8e\u6d4b\u8bd5\u53ea\u8bfb\u5fae\u670d\u52a1\u3002"}}
{"id": "2507.20888", "categories": ["cs.SE", "cs.CL"], "pdf": "https://arxiv.org/pdf/2507.20888", "abs": "https://arxiv.org/abs/2507.20888", "authors": ["Le Deng", "Xiaoxue Ren", "Chao Ni", "Ming Liang", "David Lo", "Zhongxin Liu"], "title": "Enhancing Project-Specific Code Completion by Inferring Internal API Information", "comment": null, "summary": "Project-specific code completion is a critical task that leverages context\nfrom a project to generate accurate code. State-of-the-art methods use\nretrieval-augmented generation (RAG) with large language models (LLMs) and\nproject information for code completion. However, they often struggle to\nincorporate internal API information, which is crucial for accuracy, especially\nwhen APIs are not explicitly imported in the file.\n  To address this, we propose a method to infer internal API information\nwithout relying on imports. Our method extends the representation of APIs by\nconstructing usage examples and semantic descriptions, building a knowledge\nbase for LLMs to generate relevant completions. We also introduce ProjBench, a\nbenchmark that avoids leaked imports and consists of large-scale real-world\nprojects.\n  Experiments on ProjBench and CrossCodeEval show that our approach\nsignificantly outperforms existing methods, improving code exact match by\n22.72% and identifier exact match by 18.31%. Additionally, integrating our\nmethod with existing baselines boosts code match by 47.80% and identifier match\nby 35.55%.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65e0\u9700\u4f9d\u8d56\u5bfc\u5165\u5373\u53ef\u63a8\u65ad\u5185\u90e8API\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u5efaAPI\u4f7f\u7528\u793a\u4f8b\u548c\u8bed\u4e49\u63cf\u8ff0\u6269\u5c55\u8868\u793a\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u8865\u5168\u7684\u51c6\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u5728\u4ee3\u7801\u8865\u5168\u4e2d\u96be\u4ee5\u6709\u6548\u5229\u7528\u672a\u663e\u5f0f\u5bfc\u5165\u7684\u5185\u90e8API\u4fe1\u606f\uff0c\u5f71\u54cd\u4e86\u51c6\u786e\u6027\u3002", "method": "\u6784\u5efaAPI\u4f7f\u7528\u793a\u4f8b\u548c\u8bed\u4e49\u63cf\u8ff0\uff0c\u5f62\u6210\u77e5\u8bc6\u5e93\u4f9bLLMs\u751f\u6210\u8865\u5168\uff0c\u5e76\u5f15\u5165ProjBench\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "\u5728ProjBench\u548cCrossCodeEval\u4e0a\uff0c\u4ee3\u7801\u7cbe\u786e\u5339\u914d\u63d0\u534722.72%\uff0c\u6807\u8bc6\u7b26\u5339\u914d\u63d0\u534718.31%\uff1b\u4e0e\u73b0\u6709\u57fa\u7ebf\u7ed3\u5408\u540e\uff0c\u4ee3\u7801\u5339\u914d\u63d0\u534747.80%\uff0c\u6807\u8bc6\u7b26\u5339\u914d\u63d0\u534735.55%\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u8865\u5168\u7684\u51c6\u786e\u6027\uff0c\u5c24\u5176\u5728\u5904\u7406\u672a\u663e\u5f0f\u5bfc\u5165\u7684API\u65f6\u8868\u73b0\u4f18\u5f02\u3002"}}
{"id": "2507.20977", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.20977", "abs": "https://arxiv.org/abs/2507.20977", "authors": ["Maria Camporese", "Fabio Massacci"], "title": "Repairing vulnerabilities without invisible hands. A differentiated replication study on LLMs", "comment": null, "summary": "Background: Automated Vulnerability Repair (AVR) is a fast-growing branch of\nprogram repair. Recent studies show that large language models (LLMs)\noutperform traditional techniques, extending their success beyond code\ngeneration and fault detection.\n  Hypothesis: These gains may be driven by hidden factors -- \"invisible hands\"\nsuch as training-data leakage or perfect fault localization -- that let an LLM\nreproduce human-authored fixes for the same code.\n  Objective: We replicate prior AVR studies under controlled conditions by\ndeliberately adding errors to the reported vulnerability location in the\nprompt. If LLMs merely regurgitate memorized fixes, both small and large\nlocalization errors should yield the same number of correct patches, because\nany offset should divert the model from the original fix.\n  Method: Our pipeline repairs vulnerabilities from the Vul4J and VJTrans\nbenchmarks after shifting the fault location by n lines from the ground truth.\nA first LLM generates a patch, a second LLM reviews it, and we validate the\nresult with regression and proof-of-vulnerability tests. Finally, we manually\naudit a sample of patches and estimate the error rate with the\nAgresti-Coull-Wilson method.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u81ea\u52a8\u6f0f\u6d1e\u4fee\u590d\uff08AVR\uff09\u4e2d\u7684\u8868\u73b0\uff0c\u8d28\u7591\u5176\u4f18\u52bf\u662f\u5426\u6e90\u4e8e\u8bad\u7ec3\u6570\u636e\u6cc4\u6f0f\u6216\u5b8c\u7f8e\u6545\u969c\u5b9a\u4f4d\u7b49\u9690\u85cf\u56e0\u7d20\u3002\u901a\u8fc7\u6545\u610f\u504f\u79fb\u6f0f\u6d1e\u4f4d\u7f6e\u8fdb\u884c\u5b9e\u9a8c\uff0c\u9a8c\u8bc1LLMs\u662f\u5426\u4ec5\u8bb0\u5fc6\u4fee\u590d\u65b9\u6848\u3002", "motivation": "\u9a8c\u8bc1LLMs\u5728AVR\u4e2d\u7684\u4f18\u52bf\u662f\u5426\u7531\u9690\u85cf\u56e0\u7d20\uff08\u5982\u6570\u636e\u6cc4\u6f0f\u6216\u5b8c\u7f8e\u5b9a\u4f4d\uff09\u9a71\u52a8\uff0c\u800c\u975e\u5176\u5b9e\u9645\u80fd\u529b\u3002", "method": "\u5728Vul4J\u548cVJTrans\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u6545\u610f\u504f\u79fb\u6f0f\u6d1e\u4f4d\u7f6en\u884c\uff0c\u4f7f\u7528LLM\u751f\u6210\u8865\u4e01\u5e76\u7531\u53e6\u4e00LLM\u5ba1\u6838\uff0c\u6700\u540e\u901a\u8fc7\u56de\u5f52\u548c\u6f0f\u6d1e\u6d4b\u8bd5\u9a8c\u8bc1\u3002", "result": "\u901a\u8fc7\u5b9e\u9a8c\u5206\u6790LLMs\u5728\u4e0d\u540c\u504f\u79fb\u91cf\u4e0b\u7684\u4fee\u590d\u8868\u73b0\uff0c\u5224\u65ad\u5176\u662f\u5426\u4f9d\u8d56\u8bb0\u5fc6\u3002", "conclusion": "\u7814\u7a76\u65e8\u5728\u63ed\u793aLLMs\u5728AVR\u4e2d\u7684\u771f\u5b9e\u80fd\u529b\uff0c\u907f\u514d\u9ad8\u4f30\u5176\u6027\u80fd\u3002"}}

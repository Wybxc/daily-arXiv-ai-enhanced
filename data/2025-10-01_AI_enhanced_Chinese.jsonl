{"id": "2509.25879", "categories": ["cs.LO", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25879", "abs": "https://arxiv.org/abs/2509.25879", "authors": ["Michele De Pascalis", "Tarmo Uustalu", "Niccol\u00f2 Veltr\u00ec"], "title": "Monoid Structures on Indexed Containers", "comment": "In Proceedings LSFA 2025, arXiv:2509.23739", "summary": "Containers represent a wide class of type constructions relevant for\nfunctional programming and (co)inductive reasoning. Indexed containers\ngeneralize this notion to better fit the scope of dependently typed\nprogramming. When interpreting types to be sets, a container describes an\nendofunctor on the category of sets while an I-indexed container describes an\nendofunctor on the category Set^I of I-indexed families of sets.\n  We consider the monoidal structure on the category of I-indexed containers\nwhose tensor product of containers describes the composition of the respective\ninduced endofunctors. We then give a combinatorial characterization of monoids\nin this monoidal category, and we show how these monoids correspond precisely\nto monads on the induced endofunctors on Set^I. Lastly, we conclude by\npresenting some examples of monads on Set^I that fall under our\ncharacterization, including the product of two monads, indexed variants of the\nstate and the writer monads and an example of a free monad. The technical\nresults of this work are accompanied by a formalization in the proof assistant\nCubical Agda.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u7d22\u5f15\u5bb9\u5668\u7684\u5e7a\u534a\u7fa4\u7ed3\u6784\uff0c\u7ed9\u51fa\u4e86\u8be5\u5e7a\u534a\u8303\u7574\u4e2d\u5e7a\u534a\u5143\u7684\u7ec4\u5408\u7279\u5f81\uff0c\u5e76\u8bc1\u660e\u4e86\u8fd9\u4e9b\u5e7a\u534a\u5143\u4e0eSet^I\u4e0a\u7684\u5355\u5b50\u4e00\u4e00\u5bf9\u5e94\u3002", "motivation": "\u7d22\u5f15\u5bb9\u5668\u662f\u4f9d\u8d56\u7c7b\u578b\u7f16\u7a0b\u4e2d\u7684\u91cd\u8981\u6784\u9020\uff0c\u672c\u6587\u65e8\u5728\u7814\u7a76\u5176\u5e7a\u534a\u7fa4\u7ed3\u6784\u53ca\u5176\u4e0e\u5355\u5b50\u7684\u5bf9\u5e94\u5173\u7cfb\u3002", "method": "\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u5bb9\u5668\u7684\u5e7a\u534a\u8303\u7574\u7ed3\u6784\uff0c\u7ed9\u51fa\u5e7a\u534a\u5143\u7684\u7ec4\u5408\u7279\u5f81\uff0c\u5e76\u5efa\u7acb\u4e0eSet^I\u4e0a\u5355\u5b50\u7684\u5bf9\u5e94\u5173\u7cfb\u3002", "result": "\u6210\u529f\u523b\u753b\u4e86\u7d22\u5f15\u5bb9\u5668\u5e7a\u534a\u8303\u7574\u4e2d\u7684\u5e7a\u534a\u5143\uff0c\u8bc1\u660e\u4e86\u5b83\u4eec\u4e0eSet^I\u4e0a\u5355\u5b50\u7684\u7b49\u4ef7\u6027\uff0c\u5e76\u63d0\u4f9b\u4e86\u591a\u4e2a\u5b9e\u4f8b\u3002", "conclusion": "\u7d22\u5f15\u5bb9\u5668\u7684\u5e7a\u534a\u7fa4\u7ed3\u6784\u4e3a\u7406\u89e3\u5355\u5b50\u63d0\u4f9b\u4e86\u65b0\u7684\u7ec4\u5408\u89c6\u89d2\uff0c\u8be5\u7ed3\u679c\u5df2\u5728Cubical Agda\u4e2d\u5f62\u5f0f\u5316\u9a8c\u8bc1\u3002"}}
{"id": "2509.25880", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.25880", "abs": "https://arxiv.org/abs/2509.25880", "authors": ["Luke Bayzid", "Alexandre Madeira", "Manuel A. Martins"], "title": "A Function-Set Framework: General Properties and Applications to Modal Logic", "comment": "In Proceedings LSFA 2025, arXiv:2509.23739", "summary": "Representations are essential to mathematically model phenomena, but there\nare many options available. While each of those options provides useful\nproperties with which to solve problems related to the phenomena in study,\ncomparing results between these representations can be non-trivial, as\ndifferent frameworks are used for different contexts. We present a general\nstructure based on set-theoretic concepts that accommodates many situations\nrelated to logical and semantic frameworks. We show the versatility of this\napproach by presenting alternative constructions of modal logic; in particular,\nall modal logics can be represented within the framework.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u57fa\u4e8e\u96c6\u5408\u8bba\u6982\u5ff5\u7684\u901a\u7528\u7ed3\u6784\uff0c\u7528\u4e8e\u5bb9\u7eb3\u903b\u8f91\u548c\u8bed\u4e49\u6846\u67b6\u4e2d\u7684\u591a\u79cd\u60c5\u5883\uff0c\u7279\u522b\u5c55\u793a\u4e86\u6a21\u6001\u903b\u8f91\u7684\u66ff\u4ee3\u6784\u9020\u65b9\u6cd5\u3002", "motivation": "\u4e0d\u540c\u8868\u793a\u65b9\u6cd5\u5404\u6709\u4f18\u52bf\uff0c\u4f46\u5728\u4e0d\u540c\u6846\u67b6\u95f4\u6bd4\u8f83\u7ed3\u679c\u5f80\u5f80\u5f88\u56f0\u96be\uff0c\u9700\u8981\u4e00\u79cd\u901a\u7528\u7ed3\u6784\u6765\u7edf\u4e00\u5904\u7406\u5404\u79cd\u903b\u8f91\u548c\u8bed\u4e49\u6846\u67b6\u3002", "method": "\u57fa\u4e8e\u96c6\u5408\u8bba\u6982\u5ff5\u6784\u5efa\u901a\u7528\u7ed3\u6784\uff0c\u80fd\u591f\u5bb9\u7eb3\u591a\u79cd\u903b\u8f91\u548c\u8bed\u4e49\u6846\u67b6\uff0c\u7279\u522b\u5c55\u793a\u4e86\u6a21\u6001\u903b\u8f91\u5728\u8be5\u6846\u67b6\u4e2d\u7684\u66ff\u4ee3\u6784\u9020\u65b9\u6cd5\u3002", "result": "\u6240\u6709\u6a21\u6001\u903b\u8f91\u90fd\u53ef\u4ee5\u5728\u8be5\u6846\u67b6\u4e2d\u8868\u793a\uff0c\u8bc1\u660e\u4e86\u8be5\u65b9\u6cd5\u7684\u901a\u7528\u6027\u548c\u7075\u6d3b\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u96c6\u5408\u8bba\u57fa\u7840\u7ed3\u6784\u4e3a\u6bd4\u8f83\u4e0d\u540c\u8868\u793a\u65b9\u6cd5\u63d0\u4f9b\u4e86\u7edf\u4e00\u6846\u67b6\uff0c\u7279\u522b\u9002\u7528\u4e8e\u903b\u8f91\u548c\u8bed\u4e49\u6846\u67b6\u7684\u7814\u7a76\u3002"}}
{"id": "2509.25882", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2509.25882", "abs": "https://arxiv.org/abs/2509.25882", "authors": ["Alfredo R. Freire", "Manuel A. Martins"], "title": "Characterization of Lattice Properties Within Modal Extensions", "comment": "In Proceedings LSFA 2025, arXiv:2509.23739", "summary": "This paper investigates the extension of lattice-based logics into modal\nlanguages. We observe that such extensions admit multiple approaches, as the\ninterpretation of the necessity operator is not uniquely determined by the\nunderlying lattice structure. The most natural interpretation defines necessity\nas the meet of the truth values of a formula across all accessible worlds -- an\napproach we refer to as the \\textitnormal interpretation. We examine the\nlogical properties that emerge under this and other interpretations, including\nthe conditions under which the resulting modal logic satisfies the axiom K and\nother common modal validities. Furthermore, we consider cases in which\nnecessity is attributed exclusively to formulas that hold in all accessible\nworlds.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u5c06\u57fa\u4e8e\u683c\u7684\u903b\u8f91\u6269\u5c55\u5230\u6a21\u6001\u8bed\u8a00\u7684\u65b9\u6cd5\uff0c\u63a2\u8ba8\u4e86\u5fc5\u7136\u7b97\u5b50\u7684\u591a\u79cd\u89e3\u91ca\u65b9\u5f0f\u53ca\u5176\u903b\u8f91\u6027\u8d28\u3002", "motivation": "\u7531\u4e8e\u57fa\u4e8e\u683c\u7684\u903b\u8f91\u5728\u6269\u5c55\u5230\u6a21\u6001\u8bed\u8a00\u65f6\uff0c\u5fc5\u7136\u7b97\u5b50\u7684\u89e3\u91ca\u4e0d\u662f\u7531\u5e95\u5c42\u683c\u7ed3\u6784\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u9700\u8981\u7814\u7a76\u4e0d\u540c\u7684\u89e3\u91ca\u65b9\u5f0f\u53ca\u5176\u903b\u8f91\u540e\u679c\u3002", "method": "\u4e3b\u8981\u8003\u5bdf\u4e86\u4e24\u79cd\u89e3\u91ca\uff1a\u81ea\u7136\u89e3\u91ca\uff08\u5c06\u5fc5\u7136\u6027\u5b9a\u4e49\u4e3a\u516c\u5f0f\u5728\u6240\u6709\u53ef\u8fbe\u4e16\u754c\u4e2d\u771f\u503c\u7684\u4ea4\uff09\u4ee5\u53ca\u4ec5\u5f53\u516c\u5f0f\u5728\u6240\u6709\u53ef\u8fbe\u4e16\u754c\u4e2d\u6210\u7acb\u65f6\u624d\u8d4b\u4e88\u5fc5\u7136\u6027\u7684\u60c5\u51b5\u3002", "result": "\u5206\u6790\u4e86\u5728\u8fd9\u4e9b\u4e0d\u540c\u89e3\u91ca\u4e0b\u4ea7\u751f\u7684\u903b\u8f91\u6027\u8d28\uff0c\u5305\u62ec\u6ee1\u8db3\u516c\u7406K\u548c\u5176\u4ed6\u5e38\u89c1\u6a21\u6001\u6709\u6548\u6027\u7684\u6761\u4ef6\u3002", "conclusion": "\u57fa\u4e8e\u683c\u7684\u6a21\u6001\u903b\u8f91\u6269\u5c55\u5b58\u5728\u591a\u79cd\u5408\u7406\u7684\u89e3\u91ca\u65b9\u5f0f\uff0c\u6bcf\u79cd\u65b9\u5f0f\u90fd\u4ea7\u751f\u4e0d\u540c\u7684\u903b\u8f91\u6027\u8d28\uff0c\u9700\u8981\u6839\u636e\u5177\u4f53\u5e94\u7528\u573a\u666f\u9009\u62e9\u9002\u5f53\u7684\u89e3\u91ca\u3002"}}
{"id": "2509.25883", "categories": ["cs.LO", "F.3; F.4"], "pdf": "https://arxiv.org/pdf/2509.25883", "abs": "https://arxiv.org/abs/2509.25883", "authors": ["Fabr\u00edcio Sanches Paranhos", "Daniel Ventura"], "title": "Nominal Sets in Rocq", "comment": "In Proceedings LSFA 2025, arXiv:2509.23739", "summary": "Nominal techniques have been praised for their ability to formalize grammars\nwith binding structures closer to their informal developments. At its core,\nthere lies the definition of nominal sets, which capture the notion of name\n(in)dependence through a simple, and uniform, metatheory based on name\npermutations. We present a formal constructive development of nominal sets in\nRocq (formerly known as Coq), with its main design and project decisions.\nFurthermore, we formalize the concepts of freshness, nominal alpha-equivalence,\nname abstraction, and finitely supported functions. Our implementation relies\non a type class hierarchy which, combined with Rocq generalized rewriting\nmechanism, achieves concise definitions and proofs, whilst easing the\nwell-known \"setoid hell\" scenario. We conclude with a discussion on how to\nobtain the constructive alpha-structural recursion and induction combinators,\ntowards a nominal framework.", "AI": {"tldr": "\u5728Rocq\u4e2d\u5f62\u5f0f\u5316\u6784\u9020\u540d\u4e49\u96c6\u5408\uff0c\u5305\u62ec\u65b0\u9c9c\u5ea6\u3001\u03b1\u7b49\u4ef7\u3001\u540d\u79f0\u62bd\u8c61\u7b49\u6982\u5ff5\uff0c\u901a\u8fc7\u7c7b\u578b\u7c7b\u5c42\u6b21\u7ed3\u6784\u7b80\u5316\u5b9a\u4e49\u548c\u8bc1\u660e\u3002", "motivation": "\u540d\u4e49\u6280\u672f\u80fd\u591f\u66f4\u63a5\u8fd1\u975e\u6b63\u5f0f\u5f00\u53d1\u7684\u65b9\u5f0f\u5f62\u5f0f\u5316\u5e26\u7ed1\u5b9a\u7ed3\u6784\u7684\u8bed\u6cd5\uff0c\u4f46\u5176\u6838\u5fc3\u6982\u5ff5\u540d\u4e49\u96c6\u5408\u9700\u8981\u5f62\u5f0f\u5316\u6784\u9020\u5b9e\u73b0\u3002", "method": "\u4f7f\u7528Rocq\u7684\u7c7b\u578b\u7c7b\u5c42\u6b21\u7ed3\u6784\u548c\u5e7f\u4e49\u91cd\u5199\u673a\u5236\uff0c\u5f62\u5f0f\u5316\u540d\u4e49\u96c6\u5408\u3001\u65b0\u9c9c\u5ea6\u3001\u03b1\u7b49\u4ef7\u3001\u540d\u79f0\u62bd\u8c61\u548c\u6709\u9650\u652f\u6301\u51fd\u6570\u7b49\u6982\u5ff5\u3002", "result": "\u5b9e\u73b0\u4e86\u7b80\u6d01\u7684\u5b9a\u4e49\u548c\u8bc1\u660e\uff0c\u7f13\u89e3\u4e86\"setoid hell\"\u95ee\u9898\uff0c\u5e76\u83b7\u5f97\u4e86\u6784\u9020\u6027\u7684\u03b1\u7ed3\u6784\u9012\u5f52\u548c\u5f52\u7eb3\u7ec4\u5408\u5b50\u3002", "conclusion": "\u4e3a\u540d\u4e49\u6846\u67b6\u63d0\u4f9b\u4e86\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u5c55\u793a\u4e86\u7c7b\u578b\u7c7b\u5c42\u6b21\u7ed3\u6784\u5728\u540d\u4e49\u96c6\u5408\u5f62\u5f0f\u5316\u4e2d\u7684\u6709\u6548\u6027\u3002"}}
{"id": "2509.26616", "categories": ["cs.SE", "cs.FL", "cs.PL", "68Q42, 68Q45 (Primary), 68T50 (Secondary)", "D.2.5; F.4.2"], "pdf": "https://arxiv.org/pdf/2509.26616", "abs": "https://arxiv.org/abs/2509.26616", "authors": ["Mohammad Rifat Arefin", "Shanto Rahman", "Christoph Csallner"], "title": "Black-box Context-free Grammar Inference for Readable & Natural Grammars", "comment": "20 pages", "summary": "Black-box context-free grammar inference is crucial for program analysis,\nreverse engineering, and security, yet existing tools such as Arvada, TreeVada,\nand Kedavra struggle with scalability, readability, and accuracy on large,\ncomplex languages. We present NatGI, a novel LLM-guided grammar inference\nframework that extends TreeVada's parse tree recovery with three key\ninnovations: bracket-guided bubble exploration, LLM-driven bubble generation\nand non-terminal labeling, and hierarchical delta debugging (HDD) for\nsystematic tree simplification. Bracket-guided exploration leverages syntactic\ncues such as parentheses to propose well-structured grammar fragments, while\nLLM guidance produces meaningful non-terminal names and selects more promising\nmerges. Finally, HDD incrementally reduces unnecessary rules, which makes the\ngrammars both compact and interpretable. In our experiments, we evaluate NatGI\non a comprehensive benchmark suite ranging from small languages to larger ones\nsuch as lua, c, and mysql. Our results show that NatGI consistently outperforms\nstrong baselines in terms of F1 score. On average, NatGI achieves an F1 score\nof 0.57, which is 25pp (percentage points) higher than the best-performing\nbaseline, TreeVada. In the case of interpretability, our generated grammars\nperform significantly better than those produced by existing approaches.\nLeveraging LLM-based node renaming and bubble exploration, NatGI produces rules\nwith meaningful non-terminal names and compact structures that align more\nclosely with human intuition. As a result, developers and researchers can\nachieve higher accuracy while still being able to easily inspect, verify, and\nreason about the structure and semantics of the induced grammars.", "AI": {"tldr": "NatGI\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u5f15\u5bfc\u7684\u9ed1\u76d2\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u63a8\u65ad\u6846\u67b6\uff0c\u901a\u8fc7\u62ec\u53f7\u5f15\u5bfc\u7684\u63a2\u7d22\u3001LLM\u9a71\u52a8\u7684\u751f\u6210\u548c\u975e\u7ec8\u7aef\u6807\u8bb0\u4ee5\u53ca\u5206\u5c42\u589e\u91cf\u8c03\u8bd5\uff0c\u663e\u8457\u63d0\u5347\u4e86\u8bed\u6cd5\u63a8\u65ad\u7684\u51c6\u786e\u6027\u3001\u53ef\u6269\u5c55\u6027\u548c\u53ef\u8bfb\u6027\u3002", "motivation": "\u73b0\u6709\u7684\u8bed\u6cd5\u63a8\u65ad\u5de5\u5177\uff08\u5982Arvada\u3001TreeVada\u3001Kedavra\uff09\u5728\u5904\u7406\u5927\u578b\u590d\u6742\u8bed\u8a00\u65f6\u5b58\u5728\u53ef\u6269\u5c55\u6027\u3001\u53ef\u8bfb\u6027\u548c\u51c6\u786e\u6027\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "1) \u62ec\u53f7\u5f15\u5bfc\u7684\u6c14\u6ce1\u63a2\u7d22\uff1a\u5229\u7528\u62ec\u53f7\u7b49\u8bed\u6cd5\u7ebf\u7d22\u63d0\u51fa\u7ed3\u6784\u826f\u597d\u7684\u8bed\u6cd5\u7247\u6bb5\uff1b2) LLM\u9a71\u52a8\u7684\u6c14\u6ce1\u751f\u6210\u548c\u975e\u7ec8\u7aef\u6807\u8bb0\uff1a\u751f\u6210\u6709\u610f\u4e49\u7684\u975e\u7ec8\u7aef\u540d\u79f0\u5e76\u9009\u62e9\u66f4\u6709\u524d\u666f\u7684\u5408\u5e76\uff1b3) \u5206\u5c42\u589e\u91cf\u8c03\u8bd5\uff1a\u7cfb\u7edf\u6027\u5730\u7b80\u5316\u8bed\u6cd5\u6811\uff0c\u4f7f\u8bed\u6cd5\u66f4\u7d27\u51d1\u548c\u53ef\u89e3\u91ca\u3002", "result": "\u5728\u4ece\u5c0f\u578b\u8bed\u8a00\u5230\u5927\u578b\u8bed\u8a00\uff08\u5982lua\u3001c\u3001mysql\uff09\u7684\u7efc\u5408\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cNatGI\u5e73\u5747F1\u5206\u6570\u8fbe\u52300.57\uff0c\u6bd4\u6700\u4f73\u57fa\u7ebfTreeVada\u9ad8\u51fa25\u4e2a\u767e\u5206\u70b9\uff0c\u5728\u53ef\u89e3\u91ca\u6027\u65b9\u9762\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "conclusion": "NatGI\u901a\u8fc7LLM\u5f15\u5bfc\u7684\u65b9\u6cd5\u5728\u8bed\u6cd5\u63a8\u65ad\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e86\u66f4\u9ad8\u7684\u51c6\u786e\u6027\u548c\u53ef\u89e3\u91ca\u6027\uff0c\u751f\u6210\u7684\u8bed\u6cd5\u5177\u6709\u6709\u610f\u4e49\u7684\u975e\u7ec8\u7aef\u540d\u79f0\u548c\u7d27\u51d1\u7ed3\u6784\uff0c\u4fbf\u4e8e\u5f00\u53d1\u8005\u548c\u7814\u7a76\u4eba\u5458\u68c0\u67e5\u3001\u9a8c\u8bc1\u548c\u63a8\u7406\u3002"}}
{"id": "2509.25196", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25196", "abs": "https://arxiv.org/abs/2509.25196", "authors": ["Hua Zhong", "Shan Jiang", "Sarfraz Khurshid"], "title": "APRIL: API Synthesis with Automatic Prompt Optimization and Reinforcement Learning", "comment": null, "summary": "APIs are central to modern software development, yet composing new APIs from\nlarge libraries is difficult due to the exponential search space; traditional\ncomponent-based synthesis relies on costly exploration and hand-crafted\nspecifications. While large language models (LLMs) can generate implementations\nfrom natural language, hallucinations and limited access to up-to-date\ncontextual information often yield incorrect code. In this paper, we present\nAPRIL, an approach that combines LLM-based synthesis with Automatic Prompt\nOptimization (APO) and Reinforcement Learning from Verifiable Rewards (RLVR):\nAPO iteratively refines prompts for a frozen model, while RLVR fine-tunes the\npolicy toward functional correctness, producing an efficient synthesis\npipeline. Evaluated on 81 real-world APIs from widely used scientific Python\nlibraries and benchmarked against instruction-tuned but unfine-tuned LLMs\nguided by expert prompts, APRIL achieves substantial improvements. These\nresults indicate that integrating APO and RLVR provides a robust, scalable path\nfor component-based API synthesis in large libraries.", "AI": {"tldr": "APRIL\u7ed3\u5408LLM\u5408\u6210\u3001\u81ea\u52a8\u63d0\u793a\u4f18\u5316(APO)\u548c\u57fa\u4e8e\u53ef\u9a8c\u8bc1\u5956\u52b1\u7684\u5f3a\u5316\u5b66\u4e60(RLVR)\uff0c\u663e\u8457\u63d0\u5347\u4e86\u5927\u578b\u5e93\u4e2dAPI\u5408\u6210\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002", "motivation": "\u4f20\u7edf\u7ec4\u4ef6\u5408\u6210\u65b9\u6cd5\u641c\u7d22\u7a7a\u95f4\u5927\u3001\u6210\u672c\u9ad8\uff0c\u800cLLM\u751f\u6210\u7684\u4ee3\u7801\u5b58\u5728\u5e7b\u89c9\u95ee\u9898\u4e14\u7f3a\u4e4f\u6700\u65b0\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u9700\u8981\u66f4\u53ef\u9760\u7684API\u5408\u6210\u65b9\u6848\u3002", "method": "\u4f7f\u7528APO\u8fed\u4ee3\u4f18\u5316\u63d0\u793a\u8bcd\uff0c\u540c\u65f6\u901a\u8fc7RLVR\u5bf9\u7b56\u7565\u8fdb\u884c\u5fae\u8c03\u4ee5\u5b9e\u73b0\u529f\u80fd\u6b63\u786e\u6027\uff0c\u6784\u5efa\u9ad8\u6548\u7684\u5408\u6210\u6d41\u6c34\u7ebf\u3002", "result": "\u572881\u4e2a\u771f\u5b9e\u4e16\u754c\u79d1\u5b66Python\u5e93API\u4e0a\u8bc4\u4f30\uff0c\u76f8\u6bd4\u4e13\u5bb6\u63d0\u793a\u6307\u5bfc\u7684\u6307\u4ee4\u8c03\u4f18LLM\uff0cAPRIL\u53d6\u5f97\u663e\u8457\u6539\u8fdb\u3002", "conclusion": "APO\u548cRLVR\u7684\u96c6\u6210\u4e3a\u5927\u578b\u5e93\u4e2d\u7684\u7ec4\u4ef6\u5f0fAPI\u5408\u6210\u63d0\u4f9b\u4e86\u7a33\u5065\u3001\u53ef\u6269\u5c55\u7684\u8def\u5f84\u3002"}}
{"id": "2509.25192", "categories": ["cs.SE", "68T07"], "pdf": "https://arxiv.org/pdf/2509.25192", "abs": "https://arxiv.org/abs/2509.25192", "authors": ["Anderson de Lima Luiz"], "title": "WARP -- Web-Augmented Real-time Program Repairer: A Real-Time Compilation Error Resolution using LLMs and Web-Augmented Synthesis", "comment": "5 pages, 2 figures", "summary": "Compilation errors represent a significant bottleneck in software development\nproductivity. This paper introduces WARP (Web-Augmented Real-time Program\nRepairer), a novel system that leverages Large Language Models (LLMs) and\ndynamic web-augmented synthesis for real-time resolution of these errors. WARP\nactively monitors developer terminals, intelligently detects compilation\nerrors, and synergistically combines the understanding of a fine-tuned Code-LLM\nwith relevant solutions, explanations, and code snippets retrieved from\nup-to-date web sources like developer forums and official documentation.\nExperimental results on our curated benchmark, CGP (featuring C/C++, Python,\nand Go errors), demonstrate WARP achieves a superior fix rate (72.5 % Compiles\ncorrectly) and higher semantic correctness compared to baseline LLM-only\napproaches and traditional IDE quick-fixes. Key technical challenges in\nachieving high-accuracy synthesis from noisy web data.", "AI": {"tldr": "WARP\u662f\u4e00\u4e2a\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\u548c\u52a8\u6001\u7f51\u7edc\u589e\u5f3a\u5408\u6210\u6280\u672f\u5b9e\u65f6\u4fee\u590d\u7f16\u8bd1\u9519\u8bef\u7684\u7cfb\u7edf\uff0c\u901a\u8fc7\u76d1\u63a7\u5f00\u53d1\u8005\u7ec8\u7aef\u3001\u667a\u80fd\u68c0\u6d4b\u9519\u8bef\uff0c\u5e76\u7ed3\u5408\u5fae\u8c03\u4ee3\u7801LLM\u4e0e\u7f51\u7edc\u8d44\u6e90\u6765\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u3002", "motivation": "\u7f16\u8bd1\u9519\u8bef\u4e25\u91cd\u5f71\u54cd\u4e86\u8f6f\u4ef6\u5f00\u53d1\u6548\u7387\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u591f\u5b9e\u65f6\u81ea\u52a8\u4fee\u590d\u8fd9\u4e9b\u9519\u8bef\u7684\u7cfb\u7edf\u6765\u63d0\u9ad8\u5f00\u53d1\u751f\u4ea7\u529b\u3002", "method": "WARP\u7cfb\u7edf\u4e3b\u52a8\u76d1\u63a7\u5f00\u53d1\u8005\u7ec8\u7aef\uff0c\u667a\u80fd\u68c0\u6d4b\u7f16\u8bd1\u9519\u8bef\uff0c\u5e76\u5c06\u5fae\u8c03\u7684\u4ee3\u7801LLM\u7684\u7406\u89e3\u4e0e\u4ece\u5f00\u53d1\u8005\u8bba\u575b\u548c\u5b98\u65b9\u6587\u6863\u7b49\u6700\u65b0\u7f51\u7edc\u8d44\u6e90\u68c0\u7d22\u5230\u7684\u76f8\u5173\u89e3\u51b3\u65b9\u6848\u3001\u89e3\u91ca\u548c\u4ee3\u7801\u7247\u6bb5\u76f8\u7ed3\u5408\u3002", "result": "\u5728CGP\u57fa\u51c6\u6d4b\u8bd5\uff08\u5305\u542bC/C++\u3001Python\u548cGo\u9519\u8bef\uff09\u4e0a\uff0cWARP\u5b9e\u73b0\u4e8672.5%\u7684\u6b63\u786e\u7f16\u8bd1\u4fee\u590d\u7387\uff0c\u5728\u8bed\u4e49\u6b63\u786e\u6027\u65b9\u9762\u4f18\u4e8e\u57fa\u7ebfLLM\u65b9\u6cd5\u548c\u4f20\u7edfIDE\u5feb\u901f\u4fee\u590d\u3002", "conclusion": "WARP\u901a\u8fc7\u7ed3\u5408LLM\u548c\u52a8\u6001\u7f51\u7edc\u589e\u5f3a\u5408\u6210\u6280\u672f\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u7f16\u8bd1\u9519\u8bef\u4fee\u590d\u95ee\u9898\uff0c\u4f46\u5904\u7406\u566a\u58f0\u7f51\u7edc\u6570\u636e\u4ee5\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u5408\u6210\u4ecd\u9762\u4e34\u6280\u672f\u6311\u6218\u3002"}}
{"id": "2509.26197", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.26197", "abs": "https://arxiv.org/abs/2509.26197", "authors": ["Fabian Lenke", "Nico Wittrock", "Stefan Milius", "Henning Urbat"], "title": "Demystifying Codensity Monads via Duality", "comment": null, "summary": "Codensity monads provide a universal method to generate complex monads from\nsimple functors. Recently, a wide range of important monads in logic,\ndenotational semantics, and probabilistic computation, such as several\nincarnations of the ultrafilter monad, the Vietoris monad, and the Giry monad,\nhave been presented as codensity monads, using complex arguments. We propose a\nunifying categorical approach to codensity presentations of monads, based on\nthe idea of relating the presenting functor to a dense functor via a suitable\nduality between categories. We prove a general presentation result applying to\nevery such situation and demonstrate that most codensity presentations known in\nthe literature emerge from this strikingly simple duality-based setup,\ndrastically alleviating the complexity of their proofs and in many cases\ncompletely reducing them to standard duality results. Additionally, we derive a\nnumber of novel codensity presentations using our framework, including the\nfirst non-trivial codensity presentations for the filter monads on sets and\ntopological spaces, the lower Vietoris monad on topological spaces, and the\nexpectation monad on sets.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5bf9\u5076\u6027\u7684\u7edf\u4e00\u65b9\u6cd5\u6765\u751f\u6210\u5bc6\u5ea6\u5355\u5b50\uff0c\u7b80\u5316\u4e86\u73b0\u6709\u8bc1\u660e\u5e76\u63a8\u5bfc\u51fa\u65b0\u7684\u5bc6\u5ea6\u5355\u5b50\u8868\u793a\u3002", "motivation": "\u5bc6\u5ea6\u5355\u5b50\u4e3a\u4ece\u7b80\u5355\u51fd\u5b50\u751f\u6210\u590d\u6742\u5355\u5b50\u63d0\u4f9b\u4e86\u901a\u7528\u65b9\u6cd5\uff0c\u4f46\u73b0\u6709\u8bc1\u660e\u590d\u6742\u4e14\u7f3a\u4e4f\u7edf\u4e00\u6846\u67b6\u3002", "method": "\u57fa\u4e8e\u8303\u7574\u5bf9\u5076\u601d\u60f3\uff0c\u901a\u8fc7\u5c06\u8868\u793a\u51fd\u5b50\u4e0e\u7a20\u5bc6\u51fd\u5b50\u76f8\u5173\u8054\uff0c\u5efa\u7acb\u901a\u7528\u7684\u5bc6\u5ea6\u8868\u793a\u7ed3\u679c\u3002", "result": "\u8bc1\u660e\u4e86\u5927\u591a\u6570\u6587\u732e\u4e2d\u7684\u5bc6\u5ea6\u8868\u793a\u90fd\u6e90\u4e8e\u8fd9\u79cd\u5bf9\u5076\u8bbe\u7f6e\uff0c\u7b80\u5316\u4e86\u8bc1\u660e\u8fc7\u7a0b\uff0c\u5e76\u63a8\u5bfc\u51fa\u6ee4\u6ce2\u5668\u5355\u5b50\u3001\u4e0bVietoris\u5355\u5b50\u7b49\u65b0\u8868\u793a\u3002", "conclusion": "\u57fa\u4e8e\u5bf9\u5076\u6027\u7684\u65b9\u6cd5\u4e3a\u5bc6\u5ea6\u5355\u5b50\u8868\u793a\u63d0\u4f9b\u4e86\u7edf\u4e00\u6846\u67b6\uff0c\u663e\u8457\u7b80\u5316\u8bc1\u660e\u5e76\u6269\u5c55\u4e86\u5e94\u7528\u8303\u56f4\u3002"}}
{"id": "2509.25197", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25197", "abs": "https://arxiv.org/abs/2509.25197", "authors": ["Si Cheng Zhong", "Xujie Si"], "title": "Towards Repository-Level Program Verification with Large Language Models", "comment": "Accepted to LMPL 2025", "summary": "Recent advancements in large language models (LLMs) suggest great promises in\ncode and proof generations. However, scaling automated formal verification to\nreal-world projects requires resolving cross-module dependencies and global\ncontexts, which are crucial challenges overlooked by existing LLM-based methods\nwith a special focus on targeting isolated, function-level verification tasks.\nTo systematically explore and address the significant challenges of verifying\nentire software repositories, we introduce RVBench, the first verification\nbenchmark explicitly designed for repository-level evaluation, constructed from\nfour diverse and complex open-source Verus projects.\n  We further introduce RagVerus, an extensible framework that synergizes\nretrieval-augmented generation with context-aware prompting to automate proof\nsynthesis for multi-module repositories. RagVerus triples proof pass rates on\nexisting benchmarks under constrained model inference budgets, and achieves a\n27% relative improvement on the more challenging RVBench benchmark,\ndemonstrating a scalable and sample-efficient verification solution.", "AI": {"tldr": "RVBench\u662f\u9996\u4e2a\u4e13\u95e8\u4e3a\u4ed3\u5e93\u7ea7\u9a8c\u8bc1\u8bbe\u8ba1\u7684\u57fa\u51c6\uff0cRagVerus\u6846\u67b6\u7ed3\u5408\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u548c\u4e0a\u4e0b\u6587\u611f\u77e5\u63d0\u793a\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u591a\u6a21\u5757\u4ed3\u5e93\u7684\u8bc1\u660e\u5408\u6210\u80fd\u529b\u3002", "motivation": "\u73b0\u6709LLM\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u5b64\u7acb\u7684\u51fd\u6570\u7ea7\u9a8c\u8bc1\u4efb\u52a1\uff0c\u5ffd\u7565\u4e86\u8de8\u6a21\u5757\u4f9d\u8d56\u548c\u5168\u5c40\u4e0a\u4e0b\u6587\u7b49\u5173\u952e\u6311\u6218\uff0c\u96be\u4ee5\u6269\u5c55\u5230\u771f\u5b9e\u9879\u76ee\u3002", "method": "\u5f15\u5165RVBench\u57fa\u51c6\uff0c\u5e76\u5f00\u53d1RagVerus\u6846\u67b6\uff0c\u7ed3\u5408\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u548c\u4e0a\u4e0b\u6587\u611f\u77e5\u63d0\u793a\u6765\u81ea\u52a8\u5316\u591a\u6a21\u5757\u4ed3\u5e93\u7684\u8bc1\u660e\u5408\u6210\u3002", "result": "RagVerus\u5728\u73b0\u6709\u57fa\u51c6\u4e0a\u5c06\u8bc1\u660e\u901a\u8fc7\u7387\u63d0\u9ad8\u4e86\u4e09\u500d\uff0c\u5728\u66f4\u96be\u7684RVBench\u57fa\u51c6\u4e0a\u5b9e\u73b0\u4e8627%\u7684\u76f8\u5bf9\u6539\u8fdb\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u4e14\u6837\u672c\u9ad8\u6548\u7684\u9a8c\u8bc1\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u5904\u7406\u6574\u4e2a\u8f6f\u4ef6\u4ed3\u5e93\u7684\u9a8c\u8bc1\u6311\u6218\u3002"}}
{"id": "2509.25193", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25193", "abs": "https://arxiv.org/abs/2509.25193", "authors": ["Abhinav Rastogi", "Adam Yang", "Albert Q. Jiang", "Alexander H. Liu", "Alexandre Sablayrolles", "Am\u00e9lie H\u00e9liou", "Am\u00e9lie Martin", "Anmol Agarwal", "Andy Ehrenberg", "Andy Lo", "Antoine Roux", "Arthur Darcet", "Arthur Mensch", "Baptiste Bout", "Baptiste Rozi\u00e8re", "Baudouin De Monicault", "Chris Bamford", "Christian Wallenwein", "Christophe Renaudin", "Cl\u00e9mence Lanfranchi", "Cl\u00e9ment Denoix", "Corentin Barreau", "Darius Dabert Devon Mizelle", "Diego de las Casas", "Elliot Chane-Sane", "Emilien Fugier", "Emma Bou Hanna", "Gabrielle Berrada", "Gauthier Delerce", "Gauthier Guinet", "Georgii Novikov", "Graham Neubig", "Guillaume Lample", "Guillaume Martin", "Himanshu Jaju", "Jan Ludziejewski", "Jason Rute", "Jean-Malo Delignon", "JeanHadrien Chabran", "Joachim Studnia", "Joep Barmentlo", "Jonas Amar", "Josselin Somerville Roberts", "Julien Denize", "Karan Saxena", "Karmesh Yadav", "Kartik Khandelwal", "Khyathi Raghavi Chandu", "Kush Jain", "L\u00e9lio Renard Lavaud", "L\u00e9onard Blier", "Lingxiao Zhao", "Louis Martin", "Lucile Saulnier", "Luyu Gao", "Marie Pellat", "Mathilde Guillaumin", "Mathis Felardos", "Matthieu Dinot", "Maxime Darrin", "Maximilian Augustin", "Micka\u00ebl Seznec", "Neha Gupta", "Nikhil Raghuraman", "Olivier Duchenne", "Patricia Wang", "Patrick von Platen", "Patryk Saffer", "Paul Jacob", "Paul Wambergue", "Paula Kurylowicz", "Philom\u00e8ne Chagniot", "Pierre Stock", "Pravesh Agrawal", "R\u00e9mi Delacourt", "Roman Soletskyi", "Romain Sauvestre", "Sagar Vaze", "Sanchit Gandhi", "Sandeep Subramanian", "Shashwat Dalal", "Siddharth Gandhi", "Soham Ghosh", "Srijan Mishra", "Sumukh Aithal", "Szymon Antoniak", "Teven Le Scao", "Thibaut Lavril", "Thibault Schueller", "Thomas Foubert", "Thomas Robert", "Thomas Wang", "Timoth\u00e9e Lacroix", "Tom Bewley", "Valeriia Nemychnikova", "Victor Paltz", "Virgile Richard", "Wen-Ding Li", "William Marshall", "Xingyao Wang", "Xuanyu Zhang", "Yihan Wan", "Yunhao Tang"], "title": "Devstral: Fine-tuning Language Models for Coding Agent Applications", "comment": null, "summary": "We introduce Devstral-Small, a lightweight open source model for code agents\nwith the best performance among models below 100B size. In this technical\nreport, we give an overview of how we design and develop a model and craft\nspecializations in agentic software development. The resulting model,\nDevstral-Small is a small 24B model, fast and easy to serve. Despite its size,\nDevstral-Small still attains competitive performance compared to models more\nthan an order of magnitude larger.", "AI": {"tldr": "Devstral-Small\u662f\u4e00\u4e2a24B\u53c2\u6570\u7684\u8f7b\u91cf\u7ea7\u5f00\u6e90\u4ee3\u7801\u4ee3\u7406\u6a21\u578b\uff0c\u5728100B\u4ee5\u4e0b\u6a21\u578b\u4e2d\u6027\u80fd\u6700\u4f73\uff0c\u5177\u6709\u5feb\u901f\u90e8\u7f72\u548c\u7ade\u4e89\u529b\u7684\u6027\u80fd\u8868\u73b0\u3002", "motivation": "\u5f00\u53d1\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u4f46\u6027\u80fd\u4f18\u5f02\u7684\u4ee3\u7801\u4ee3\u7406\u6a21\u578b\uff0c\u89e3\u51b3\u5927\u6a21\u578b\u90e8\u7f72\u56f0\u96be\u548c\u670d\u52a1\u6210\u672c\u9ad8\u7684\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u4e13\u95e8\u7684\u8bbe\u8ba1\u548c\u5f00\u53d1\u65b9\u6cd5\uff0c\u4e13\u6ce8\u4e8e\u667a\u80fd\u8f6f\u4ef6\u4ee3\u7406\u7684\u4e13\u4e1a\u5316\u80fd\u529b\u6784\u5efa\u3002", "result": "Devstral-Small\u5728\u4fdd\u630124B\u5c0f\u89c4\u6a21\u7684\u540c\u65f6\uff0c\u6027\u80fd\u53ef\u4e0e\u5927\u4e00\u4e2a\u6570\u91cf\u7ea7\u7684\u5927\u578b\u6a21\u578b\u76f8\u5ab2\u7f8e\u3002", "conclusion": "Devstral-Small\u8bc1\u660e\u4e86\u8f7b\u91cf\u7ea7\u6a21\u578b\u5728\u4ee3\u7801\u4ee3\u7406\u4efb\u52a1\u4e2d\u4e5f\u80fd\u8fbe\u5230\u51fa\u8272\u7684\u6027\u80fd\uff0c\u4e3a\u5b9e\u9645\u90e8\u7f72\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.26214", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2509.26214", "abs": "https://arxiv.org/abs/2509.26214", "authors": ["Timon Barlag", "Nicolas Fr\u00f6hlich", "Teemu Hankala", "Miika Hannula", "Minna Hirvonen", "Vivian Holzapfel", "Juha Kontinen", "Arne Meier", "Laura Strieker"], "title": "Logical Approaches to Non-deterministic Polynomial Time over Semirings", "comment": null, "summary": "We provide a logical characterization of non-deterministic polynomial time\ndefined by BSS machines over semirings via existential second-order logic\ninterpreted in the semiring semantics developed by Gr\\\"adel and Tannen.\nFurthermore, we show that, similarly to the classical setting, the\nsatisfiability problem of propositional logic in the semiring semantics is the\ncanonical complete problem for this version of NP. Eventually, we prove that\nthe true existential first-order theory of the semiring is a complete problem\nfor the so-called Boolean part of this version of NP.", "AI": {"tldr": "\u8be5\u8bba\u6587\u4e3aBSS\u673a\u5668\u5728\u534a\u73af\u4e0a\u5b9a\u4e49\u7684\u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\u63d0\u4f9b\u4e86\u903b\u8f91\u7279\u5f81\u5316\uff0c\u901a\u8fc7Gr\"adel\u548cTannen\u5f00\u53d1\u7684\u534a\u73af\u8bed\u4e49\u4e2d\u7684\u5b58\u5728\u4e8c\u9636\u903b\u8f91\u3002\u8bc1\u660e\u4e86\u547d\u9898\u903b\u8f91\u5728\u534a\u73af\u8bed\u4e49\u4e2d\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u662f\u8be5NP\u7248\u672c\u7684\u5178\u578b\u5b8c\u5168\u95ee\u9898\uff0c\u5e76\u4e14\u534a\u73af\u7684\u771f\u5b58\u5728\u4e00\u9636\u7406\u8bba\u662f\u8be5NP\u7248\u672c\u5e03\u5c14\u90e8\u5206\u7684\u5b8c\u5168\u95ee\u9898\u3002", "motivation": "\u7814\u7a76BSS\u673a\u5668\u5728\u534a\u73af\u4e0a\u5b9a\u4e49\u7684\u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u903b\u8f91\u7279\u5f81\u5316\uff0c\u7c7b\u4f3c\u4e8e\u7ecf\u5178\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u4e2d\u7684NP\u7c7b\u903b\u8f91\u7279\u5f81\u5316\uff0c\u4ee5\u5efa\u7acb\u534a\u73af\u8bed\u4e49\u4e0b\u7684\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u6846\u67b6\u3002", "method": "\u4f7f\u7528Gr\"adel\u548cTannen\u5f00\u53d1\u7684\u534a\u73af\u8bed\u4e49\uff0c\u901a\u8fc7\u5b58\u5728\u4e8c\u9636\u903b\u8f91\u6765\u7279\u5f81\u5316BSS\u673a\u5668\u5728\u534a\u73af\u4e0a\u5b9a\u4e49\u7684\u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\uff0c\u5e76\u5206\u6790\u547d\u9898\u903b\u8f91\u5728\u534a\u73af\u8bed\u4e49\u4e2d\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u3002", "result": "\u6210\u529f\u5efa\u7acb\u4e86BSS\u673a\u5668\u5728\u534a\u73af\u4e0a\u5b9a\u4e49\u7684\u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u903b\u8f91\u7279\u5f81\u5316\uff0c\u8bc1\u660e\u4e86\u547d\u9898\u903b\u8f91\u5728\u534a\u73af\u8bed\u4e49\u4e2d\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u662f\u8be5NP\u7248\u672c\u7684\u5178\u578b\u5b8c\u5168\u95ee\u9898\uff0c\u534a\u73af\u7684\u771f\u5b58\u5728\u4e00\u9636\u7406\u8bba\u662f\u8be5NP\u7248\u672c\u5e03\u5c14\u90e8\u5206\u7684\u5b8c\u5168\u95ee\u9898\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u534a\u73af\u8bed\u4e49\u4e0b\u7684\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u63d0\u4f9b\u4e86\u91cd\u8981\u7684\u903b\u8f91\u57fa\u7840\uff0c\u5c06\u7ecf\u5178NP\u7c7b\u7684\u903b\u8f91\u7279\u5f81\u5316\u63a8\u5e7f\u5230\u534a\u73af\u8bed\u4e49\u4e2d\uff0c\u5efa\u7acb\u4e86\u76f8\u5e94\u7684\u5b8c\u5168\u95ee\u9898\u7406\u8bba\u3002"}}
{"id": "2509.25248", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2509.25248", "abs": "https://arxiv.org/abs/2509.25248", "authors": ["Zehua Zhang", "Ati Priya Bajaj", "Divij Handa", "Siyu Liu", "Arvind S Raj", "Hongkai Chen", "Hulin Wang", "Yibo Liu", "Zion Leonahenahe Basque", "Souradip Nath", "Vishal Juneja", "Nikhil Chapre", "Yan Shoshitaishvili", "Adam Doup\u00e9", "Chitta Baral", "Ruoyu Wang"], "title": "BuildBench: Benchmarking LLM Agents on Compiling Real-World Open-Source Software", "comment": null, "summary": "Automatically compiling open-source software (OSS) projects is a vital,\nlabor-intensive, and complex task, which makes it a good challenge for LLM\nAgents. Existing methods rely on manually curated rules and workflows, which\ncannot adapt to OSS that requires customized configuration or environment\nsetup. Recent attempts using Large Language Models (LLMs) used selective\nevaluation on a subset of highly rated OSS, a practice that underestimates the\nrealistic challenges of OSS compilation. In practice, compilation instructions\nare often absent, dependencies are undocumented, and successful builds may even\nrequire patching source files or modifying build scripts. We propose a more\nchallenging and realistic benchmark, BUILD-BENCH, comprising OSS that are more\ndiverse in quality, scale, and characteristics. Furthermore, we propose a\nstrong baseline LLM-based agent, OSS-BUILD-AGENT, an effective system with\nenhanced build instruction retrieval module that achieves state-of-the-art\nperformance on BUILD-BENCH and is adaptable to heterogeneous OSS\ncharacteristics. We also provide detailed analysis regarding different\ncompilation method design choices and their influence to the whole task,\noffering insights to guide future advances. We believe performance on\nBUILD-BENCH can faithfully reflect an agent's ability to tackle compilation as\na complex software engineering tasks, and, as such, our benchmark will spur\ninnovation with a significant impact on downstream applications in the fields\nof software development and software security.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u66f4\u6311\u6218\u6027\u7684\u57fa\u51c6BUILD-BENCH\u548c\u5f3a\u57fa\u7ebfLLM\u667a\u80fd\u4f53OSS-BUILD-AGENT\uff0c\u7528\u4e8e\u81ea\u52a8\u7f16\u8bd1\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u3002", "motivation": "\u73b0\u6709\u7684\u65b9\u6cd5\u4f9d\u8d56\u624b\u52a8\u5236\u5b9a\u7684\u89c4\u5219\u548c\u5de5\u4f5c\u6d41\uff0c\u65e0\u6cd5\u9002\u5e94\u9700\u8981\u5b9a\u5236\u914d\u7f6e\u6216\u73af\u5883\u8bbe\u7f6e\u7684\u5f00\u6e90\u8f6f\u4ef6\u3002\u6700\u8fd1\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\u7684\u5c1d\u8bd5\u53ea\u8bc4\u4f30\u4e86\u9ad8\u5ea6\u8bc4\u4ef7\u7684\u5f00\u6e90\u8f6f\u4ef6\u5b50\u96c6\uff0c\u4f4e\u4f30\u4e86\u5f00\u6e90\u8f6f\u4ef6\u7f16\u8bd1\u7684\u73b0\u5b9e\u6311\u6218\u3002", "method": "\u63d0\u51fa\u4e86OSS-BUILD-AGENT\uff0c\u4e00\u4e2a\u5177\u6709\u589e\u5f3a\u6784\u5efa\u6307\u4ee4\u68c0\u7d22\u6a21\u5757\u7684\u6709\u6548\u7cfb\u7edf\uff0c\u5728BUILD-BENCH\u4e0a\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\uff0c\u5e76\u80fd\u9002\u5e94\u5f02\u6784\u7684\u5f00\u6e90\u8f6f\u4ef6\u7279\u6027\u3002", "result": "OSS-BUILD-AGENT\u5728BUILD-BENCH\u57fa\u51c6\u4e0a\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\uff0c\u8be5\u57fa\u51c6\u5305\u542b\u4e86\u8d28\u91cf\u3001\u89c4\u6a21\u548c\u7279\u6027\u66f4\u52a0\u591a\u6837\u5316\u7684\u5f00\u6e90\u8f6f\u4ef6\u3002", "conclusion": "BUILD-BENCH\u7684\u6027\u80fd\u80fd\u591f\u771f\u5b9e\u53cd\u6620\u667a\u80fd\u4f53\u5904\u7406\u7f16\u8bd1\u8fd9\u4e00\u590d\u6742\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u7684\u80fd\u529b\uff0c\u8be5\u57fa\u51c6\u5c06\u63a8\u52a8\u521b\u65b0\uff0c\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u548c\u8f6f\u4ef6\u5b89\u5168\u9886\u57df\u7684\u4e0b\u6e38\u5e94\u7528\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u3002"}}
{"id": "2509.25194", "categories": ["cs.SE", "physics.comp-ph"], "pdf": "https://arxiv.org/pdf/2509.25194", "abs": "https://arxiv.org/abs/2509.25194", "authors": ["Haoyang Wu", "Xinxin Zhang", "Lailai Zhu"], "title": "Automated Code Development for PDE Solvers Using Large Language Models", "comment": null, "summary": "Foundation models -- large language models (LLMs) in particular -- have\nbecome ubiquitous, shaping daily life and driving breakthroughs across science,\nengineering, and technology. Harnessing their broad cross-domain knowledge,\ntext-processing, and reasoning abilities for software development, e.g.,\nnumerical libraries for solving partial differential equations (PDEs), is\ntherefore attracting growing interest. Yet existing studies mainly automate\ncase setup and execution for end users. We introduce LLM-PDEveloper, a\nzero-shot, multi-agent LLM framework that automates code development for PDE\nlibraries, specifically targeting secondary developers. By translating\nmathematical and algorithmic descriptions directly into source code,\nLLM-PDEveloper generates new solvers/modules and adapts existing ones. This\nend-to-end math-to-code approach enables a self-augmenting pipeline that\ncontinuously expands the codebase of a library, extends its capacities, and\nbroadens its scope. We demonstrate LLM-PDEveloper on three tasks: 1) build a\nsolver for a new PDE, 2) implement new BCs for a given PDE, and 3) modify an\nexisting solver to incorporate additional terms, achieving moderate success\nrates. Failures due to syntactic errors made by LLMs are analyzed and we\npropose effective fixes. We also identify the mechanisms underlying certain\nsemantic errors, guiding future research.", "AI": {"tldr": "LLM-PDEveloper\u662f\u4e00\u4e2a\u96f6\u6837\u672c\u591a\u667a\u80fd\u4f53LLM\u6846\u67b6\uff0c\u4e13\u95e8\u4e3a\u504f\u5fae\u5206\u65b9\u7a0b(PDE)\u5e93\u7684\u4e8c\u6b21\u5f00\u53d1\u8005\u81ea\u52a8\u5316\u4ee3\u7801\u5f00\u53d1\uff0c\u80fd\u591f\u5c06\u6570\u5b66\u548c\u7b97\u6cd5\u63cf\u8ff0\u76f4\u63a5\u8f6c\u6362\u4e3a\u6e90\u4ee3\u7801\u3002", "motivation": "\u5229\u7528\u57fa\u7840\u6a21\u578b\uff08\u7279\u522b\u662f\u5927\u8bed\u8a00\u6a21\u578b\uff09\u7684\u8de8\u9886\u57df\u77e5\u8bc6\u3001\u6587\u672c\u5904\u7406\u548c\u63a8\u7406\u80fd\u529b\uff0c\u4e3a\u8f6f\u4ef6\u5f00\u53d1\uff08\u5982\u504f\u5fae\u5206\u65b9\u7a0b\u6570\u503c\u5e93\uff09\u63d0\u4f9b\u652f\u6301\uff0c\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u9762\u5411\u7ec8\u7aef\u7528\u6237\u81ea\u52a8\u5316\u6848\u4f8b\u8bbe\u7f6e\u548c\u6267\u884c\uff0c\u800c\u672c\u7814\u7a76\u9488\u5bf9\u4e8c\u6b21\u5f00\u53d1\u8005\u3002", "method": "\u91c7\u7528\u96f6\u6837\u672c\u591a\u667a\u80fd\u4f53LLM\u6846\u67b6\uff0c\u901a\u8fc7\u7aef\u5230\u7aef\u7684\u6570\u5b66\u5230\u4ee3\u7801\u65b9\u6cd5\uff0c\u751f\u6210\u65b0\u7684\u6c42\u89e3\u5668/\u6a21\u5757\u5e76\u9002\u914d\u73b0\u6709\u7ec4\u4ef6\uff0c\u5b9e\u73b0\u81ea\u589e\u5f3a\u7684\u4ee3\u7801\u5e93\u6269\u5c55\u7ba1\u9053\u3002", "result": "\u5728\u4e09\u4e2a\u4efb\u52a1\u4e0a\u5c55\u793a\u4e86\u6709\u6548\u6027\uff1a1)\u4e3a\u65b0PDE\u6784\u5efa\u6c42\u89e3\u5668\uff0c2)\u4e3a\u7ed9\u5b9aPDE\u5b9e\u73b0\u65b0\u8fb9\u754c\u6761\u4ef6\uff0c3)\u4fee\u6539\u73b0\u6709\u6c42\u89e3\u5668\u4ee5\u5305\u542b\u9644\u52a0\u9879\uff0c\u53d6\u5f97\u4e86\u4e2d\u7b49\u6210\u529f\u7387\u3002\u5206\u6790\u4e86LLM\u4ea7\u751f\u7684\u8bed\u6cd5\u9519\u8bef\u5e76\u63d0\u51fa\u6709\u6548\u4fee\u590d\u65b9\u6cd5\u3002", "conclusion": "LLM-PDEveloper\u80fd\u591f\u6301\u7eed\u6269\u5c55PDE\u5e93\u7684\u4ee3\u7801\u5e93\u3001\u589e\u5f3a\u5176\u80fd\u529b\u5e76\u62d3\u5bbd\u5e94\u7528\u8303\u56f4\uff0c\u540c\u65f6\u8bc6\u522b\u4e86\u67d0\u4e9b\u8bed\u4e49\u9519\u8bef\u7684\u673a\u5236\uff0c\u4e3a\u672a\u6765\u7814\u7a76\u63d0\u4f9b\u6307\u5bfc\u3002"}}
{"id": "2509.26362", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2509.26362", "abs": "https://arxiv.org/abs/2509.26362", "authors": ["Chase Johnson", "Gopalan Nadathur"], "title": "Transporting Theorems about Typeability in LF Across Schematically Defined Contexts", "comment": "In Proceedings PPDP 2025", "summary": "The dependently-typed lambda calculus LF is often used as a vehicle for\nformalizing rule-based descriptions of object systems. Proving properties of\nobject systems encoded in this fashion requires reasoning about formulas over\nLF typing judgements. An important characteristic of LF is that it supports a\nhigher-order abstract syntax representation of binding structure. When such an\nencoding is used, the typing judgements include contexts that assign types to\nbound variables and formulas must therefore allow for quantification over\ncontexts. The possible instantiations of such quantifiers are usually governed\nby schematic descriptions that must also be made explicit for effectiveness in\nreasoning. In practical reasoning tasks, it is often necessary to transport\ntheorems involving universal quantification over contexts satisfying one\nschematic description to those satisfying another description. We provide here\na logical justification for this ability. Towards this end, we utilize the\nlogic $\\mathcal{L}_{LF}$, which has previously been designed for formalizing\nproperties of LF specifications. We develop a transportation proof rule and\nshow it to be sound relative to the semantics of $\\mathcal{L}_{LF}$. Key to\nthis proof rule is a notion of context schema subsumption that uses the\nsubordination relation between types as a means for determining the equivalence\nof contexts relative to individual LF typing judgements. We discuss the\nincorporation of this rule into the Adelfa proof assistant and its use in\nactual reasoning examples.", "AI": {"tldr": "\u672c\u6587\u4e3a\u5728\u4f9d\u8d56\u7c7b\u578blambda\u6f14\u7b97LF\u4e2d\uff0c\u5c06\u6d89\u53ca\u4e0a\u4e0b\u6587\u91cf\u5316\u5b9a\u7406\u4ece\u4e00\u4e2a\u6a21\u5f0f\u63cf\u8ff0\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6a21\u5f0f\u63cf\u8ff0\u63d0\u4f9b\u4e86\u903b\u8f91\u8bc1\u660e\uff0c\u5f00\u53d1\u4e86\u57fa\u4e8e\u7c7b\u578b\u4ece\u5c5e\u5173\u7cfb\u7684\u4e0a\u4e0b\u6587\u6a21\u5f0f\u8574\u542b\u6982\u5ff5\u548c\u4f20\u8f93\u8bc1\u660e\u89c4\u5219\u3002", "motivation": "\u5728LF\u7f16\u7801\u7684\u5bf9\u8c61\u7cfb\u7edf\u8bc1\u660e\u4e2d\uff0c\u9700\u8981\u5904\u7406\u6d89\u53ca\u4e0a\u4e0b\u6587\u91cf\u5316\u7684\u516c\u5f0f\uff0c\u4f46\u5b9e\u9645\u63a8\u7406\u4e2d\u7ecf\u5e38\u9700\u8981\u5c06\u5b9a\u7406\u4ece\u4e00\u4e2a\u4e0a\u4e0b\u6587\u6a21\u5f0f\u63cf\u8ff0\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6a21\u5f0f\u63cf\u8ff0\uff0c\u8fd9\u9700\u8981\u903b\u8f91\u4e0a\u7684\u6b63\u5f53\u6027\u8bc1\u660e\u3002", "method": "\u5229\u7528\u903b\u8f91$\\mathcal{L}_{LF}$\uff0c\u5f00\u53d1\u57fa\u4e8e\u7c7b\u578b\u4ece\u5c5e\u5173\u7cfb\u7684\u4e0a\u4e0b\u6587\u6a21\u5f0f\u8574\u542b\u6982\u5ff5\uff0c\u6784\u5efa\u4f20\u8f93\u8bc1\u660e\u89c4\u5219\uff0c\u5e76\u5728Adelfa\u8bc1\u660e\u52a9\u624b\u4e2d\u5b9e\u73b0\u8be5\u89c4\u5219\u3002", "result": "\u8bc1\u660e\u4e86\u4f20\u8f93\u8bc1\u660e\u89c4\u5219\u76f8\u5bf9\u4e8e$\\mathcal{L}_{LF}$\u8bed\u4e49\u7684\u53ef\u9760\u6027\uff0c\u5e76\u5728\u5b9e\u9645\u63a8\u7406\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u4e86\u5176\u6709\u6548\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u4e0a\u4e0b\u6587\u6a21\u5f0f\u8574\u542b\u548c\u4f20\u8f93\u8bc1\u660e\u89c4\u5219\u4e3a\u5728LF\u89c4\u8303\u4e2d\u5904\u7406\u4e0a\u4e0b\u6587\u91cf\u5316\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\uff0c\u589e\u5f3a\u4e86\u5f62\u5f0f\u5316\u63a8\u7406\u7684\u80fd\u529b\u3002"}}
{"id": "2509.25195", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25195", "abs": "https://arxiv.org/abs/2509.25195", "authors": ["Hira Naveed", "John Grundy", "Chetan Arora", "Hourieh Khalajzadeh", "Omar Haggag"], "title": "Understanding Practitioners Perspectives on Monitoring Machine Learning Systems", "comment": null, "summary": "Given the inherent non-deterministic nature of machine learning (ML) systems,\ntheir behavior in production environments can lead to unforeseen and\npotentially dangerous outcomes. For a timely detection of unwanted behavior and\nto prevent organizations from financial and reputational damage, monitoring\nthese systems is essential. This paper explores the strategies, challenges, and\nimprovement opportunities for monitoring ML systems from the practitioners\nperspective. We conducted a global survey of 91 ML practitioners to collect\ndiverse insights into current monitoring practices for ML systems. We aim to\ncomplement existing research through our qualitative and quantitative analyses,\nfocusing on prevalent runtime issues, industrial monitoring and mitigation\npractices, key challenges, and desired enhancements in future monitoring tools.\nOur findings reveal that practitioners frequently struggle with runtime issues\nrelated to declining model performance, exceeding latency, and security\nviolations. While most prefer automated monitoring for its increased\nefficiency, many still rely on manual approaches due to the complexity or lack\nof appropriate automation solutions. Practitioners report that the initial\nsetup and configuration of monitoring tools is often complicated and\nchallenging, particularly when integrating with ML systems and setting alert\nthresholds. Moreover, practitioners find that monitoring adds extra workload,\nstrains resources, and causes alert fatigue. The desired improvements from the\npractitioners perspective are: automated generation and deployment of monitors,\nimproved support for performance and fairness monitoring, and recommendations\nfor resolving runtime issues. These insights offer valuable guidance for the\nfuture development of ML monitoring tools that are better aligned with\npractitioners needs.", "AI": {"tldr": "\u8be5\u8bba\u6587\u901a\u8fc7\u8c03\u67e591\u540dML\u4ece\u4e1a\u8005\uff0c\u63a2\u8ba8\u4e86\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u76d1\u63a7\u7684\u7b56\u7565\u3001\u6311\u6218\u548c\u6539\u8fdb\u673a\u4f1a\uff0c\u53d1\u73b0\u4ece\u4e1a\u8005\u9762\u4e34\u6a21\u578b\u6027\u80fd\u4e0b\u964d\u3001\u5ef6\u8fdf\u8d85\u65f6\u548c\u5b89\u5168\u8fdd\u89c4\u7b49\u8fd0\u884c\u65f6\u95ee\u9898\uff0c\u671f\u671b\u672a\u6765\u76d1\u63a7\u5de5\u5177\u80fd\u63d0\u4f9b\u81ea\u52a8\u5316\u76d1\u63a7\u751f\u6210\u3001\u6027\u80fd\u516c\u5e73\u6027\u76d1\u63a7\u652f\u6301\u4ee5\u53ca\u95ee\u9898\u89e3\u51b3\u5efa\u8bae\u3002", "motivation": "\u7531\u4e8e\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u7684\u975e\u786e\u5b9a\u6027\u7279\u6027\uff0c\u5176\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u7684\u884c\u4e3a\u53ef\u80fd\u5bfc\u81f4\u4e0d\u53ef\u9884\u89c1\u4e14\u5371\u9669\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u53ca\u65f6\u68c0\u6d4b\u4e0d\u826f\u884c\u4e3a\u5e76\u9632\u6b62\u7ec4\u7ec7\u906d\u53d7\u8d22\u52a1\u548c\u58f0\u8a89\u635f\u5931\uff0c\u76d1\u63a7\u8fd9\u4e9b\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002", "method": "\u901a\u8fc7\u5168\u7403\u8c03\u67e591\u540dML\u4ece\u4e1a\u8005\uff0c\u6536\u96c6\u5173\u4e8e\u5f53\u524dML\u7cfb\u7edf\u76d1\u63a7\u5b9e\u8df5\u7684\u591a\u6837\u5316\u89c1\u89e3\uff0c\u8fdb\u884c\u5b9a\u6027\u548c\u5b9a\u91cf\u5206\u6790\uff0c\u91cd\u70b9\u5173\u6ce8\u8fd0\u884c\u65f6\u95ee\u9898\u3001\u5de5\u4e1a\u76d1\u63a7\u548c\u7f13\u89e3\u5b9e\u8df5\u3001\u5173\u952e\u6311\u6218\u4ee5\u53ca\u672a\u6765\u76d1\u63a7\u5de5\u5177\u7684\u671f\u671b\u6539\u8fdb\u3002", "result": "\u4ece\u4e1a\u8005\u7ecf\u5e38\u9762\u4e34\u6a21\u578b\u6027\u80fd\u4e0b\u964d\u3001\u5ef6\u8fdf\u8d85\u65f6\u548c\u5b89\u5168\u8fdd\u89c4\u7b49\u8fd0\u884c\u65f6\u95ee\u9898\u3002\u867d\u7136\u5927\u591a\u6570\u504f\u597d\u81ea\u52a8\u5316\u76d1\u63a7\u4ee5\u63d0\u9ad8\u6548\u7387\uff0c\u4f46\u7531\u4e8e\u590d\u6742\u6027\u6216\u7f3a\u4e4f\u5408\u9002\u7684\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u8bb8\u591a\u4eba\u4ecd\u4f9d\u8d56\u624b\u52a8\u65b9\u6cd5\u3002\u76d1\u63a7\u5de5\u5177\u7684\u521d\u59cb\u8bbe\u7f6e\u548c\u914d\u7f6e\u901a\u5e38\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\uff0c\u76d1\u63a7\u589e\u52a0\u4e86\u989d\u5916\u5de5\u4f5c\u8d1f\u62c5\u3001\u6d88\u8017\u8d44\u6e90\u5e76\u5bfc\u81f4\u8b66\u62a5\u75b2\u52b3\u3002", "conclusion": "\u4ece\u4e1a\u8005\u671f\u671b\u7684\u6539\u8fdb\u5305\u62ec\uff1a\u76d1\u63a7\u5668\u7684\u81ea\u52a8\u751f\u6210\u548c\u90e8\u7f72\u3001\u6539\u8fdb\u7684\u6027\u80fd\u548c\u516c\u5e73\u6027\u76d1\u63a7\u652f\u6301\u3001\u4ee5\u53ca\u89e3\u51b3\u8fd0\u884c\u65f6\u95ee\u9898\u7684\u5efa\u8bae\u3002\u8fd9\u4e9b\u89c1\u89e3\u4e3a\u672a\u6765\u5f00\u53d1\u66f4\u7b26\u5408\u4ece\u4e1a\u8005\u9700\u6c42\u7684ML\u76d1\u63a7\u5de5\u5177\u63d0\u4f9b\u4e86\u5b9d\u8d35\u6307\u5bfc\u3002"}}
{"id": "2509.25199", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25199", "abs": "https://arxiv.org/abs/2509.25199", "authors": ["Mushahid Khan", "Prashant J. Nair", "Olivia Di Matteo"], "title": "CircInspect: Integrating Visual Circuit Analysis, Abstraction, and Real-Time Development in Quantum Debugging", "comment": null, "summary": "Software bugs typically result from errors in specifications or code\ntranslation. While classical software engineering has evolved with various\ntools and methodologies to tackle such bugs, the emergence of quantum computing\npresents unique challenges. Quantum software development introduces\ncomplexities due to the probabilistic nature of quantum computing, distinct\nalgorithmic primitives, and potential hardware noise. In this paper, we\nintroduce CircInspect, an interactive tool tailored for debugging quantum\nprograms in Python and PennyLane. By leveraging breakpoints and real-time\nsoftware development features, \\toolname~empowers users to analyze isolated\nquantum circuit components, monitor program output, visualize structural\nchanges, and abstract information to enhance comprehension.", "AI": {"tldr": "CircInspect\u662f\u4e00\u4e2a\u7528\u4e8e\u8c03\u8bd5Python\u548cPennyLane\u4e2d\u91cf\u5b50\u7a0b\u5e8f\u7684\u4ea4\u4e92\u5f0f\u5de5\u5177\uff0c\u901a\u8fc7\u65ad\u70b9\u548c\u5b9e\u65f6\u5f00\u53d1\u529f\u80fd\u5e2e\u52a9\u7528\u6237\u5206\u6790\u91cf\u5b50\u7535\u8def\u7ec4\u4ef6\u3001\u76d1\u63a7\u8f93\u51fa\u3001\u53ef\u89c6\u5316\u7ed3\u6784\u53d8\u5316\u3002", "motivation": "\u91cf\u5b50\u8f6f\u4ef6\u5f00\u53d1\u9762\u4e34\u72ec\u7279\u6311\u6218\uff0c\u5305\u62ec\u91cf\u5b50\u8ba1\u7b97\u7684\u6982\u7387\u6027\u8d28\u3001\u4e0d\u540c\u7684\u7b97\u6cd5\u539f\u8bed\u548c\u786c\u4ef6\u566a\u58f0\uff0c\u9700\u8981\u4e13\u95e8\u7684\u8c03\u8bd5\u5de5\u5177\u6765\u5e94\u5bf9\u8fd9\u4e9b\u590d\u6742\u6027\u3002", "method": "\u5f00\u53d1\u4e86CircInspect\u5de5\u5177\uff0c\u5229\u7528\u65ad\u70b9\u548c\u5b9e\u65f6\u8f6f\u4ef6\u5f00\u53d1\u529f\u80fd\uff0c\u652f\u6301\u5206\u6790\u9694\u79bb\u7684\u91cf\u5b50\u7535\u8def\u7ec4\u4ef6\u3001\u76d1\u63a7\u7a0b\u5e8f\u8f93\u51fa\u3001\u53ef\u89c6\u5316\u7ed3\u6784\u53d8\u5316\u548c\u4fe1\u606f\u62bd\u8c61\u3002", "result": "CircInspect\u4e3a\u91cf\u5b50\u7a0b\u5e8f\u8c03\u8bd5\u63d0\u4f9b\u4e86\u4e13\u95e8\u7684\u4ea4\u4e92\u5f0f\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u589e\u5f3a\u7528\u6237\u5bf9\u91cf\u5b50\u7a0b\u5e8f\u7684\u7406\u89e3\u3002", "conclusion": "CircInspect\u662f\u9488\u5bf9\u91cf\u5b50\u8f6f\u4ef6\u5f00\u53d1\u6311\u6218\u7684\u6709\u6548\u8c03\u8bd5\u5de5\u5177\uff0c\u901a\u8fc7\u5176\u4ea4\u4e92\u5f0f\u7279\u6027\u63d0\u5347\u4e86\u91cf\u5b50\u7a0b\u5e8f\u7684\u5206\u6790\u548c\u8c03\u8bd5\u80fd\u529b\u3002"}}
{"id": "2509.25203", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25203", "abs": "https://arxiv.org/abs/2509.25203", "authors": ["Zekai Zhang", "Mingwei Liu", "Zhenxi Chen", "Linxi Liang", "Yuxuan Chen", "Guangsheng Ou", "Yanlin Wang", "Dan Li", "Xin Peng", "Zibin Zheng"], "title": "Generating High-Quality Datasets for Code Editing via Open-Source Language Models", "comment": "23 pages, 8 figures", "summary": "Code editing plays a vital role in software engineering, requiring developers\nto adjust existing code according to natural language instructions while\nkeeping functionality intact and avoiding unnecessary modifications. However,\ncommit-based datasets commonly used for this task are often noisy, lack\ndiversity, and fail to reflect the style of real-world edit instructions. To\naddress this, we introduce CanItEdit, an open-source pipeline that leverages\nmultiple LLMs to synthesize realistic code-edit triplets. The pipeline produces\nboth concise \"lazy\" instructions and more detailed \"descriptive\" ones, and\napplies filtering based on diffs and topics to guarantee data quality and\nvariety. Using this process, we construct OCEDataFT, a curated dataset of 20K\nsamples. Fine-tuning three advanced base models on OCEDataFT leads to\nsignificant performance boosts on the CanItEdit benchmark, with relative pass@1\nimprovements ranging from 4.50% to 20.79%. Notably, the resulting models\nachieve performance close to closed-source systems, narrowing the gap to GPT-4\nto just 3.54%, without relying on proprietary resources or manual annotation.", "AI": {"tldr": "\u63d0\u51fa\u4e86CanItEdit\u5f00\u6e90\u6d41\u6c34\u7ebf\uff0c\u4f7f\u7528\u591a\u4e2aLLM\u5408\u6210\u771f\u5b9e\u7684\u4ee3\u7801\u7f16\u8f91\u4e09\u5143\u7ec4\uff0c\u6784\u5efa\u4e86OCEDataFT\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u5fae\u8c03\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u7f16\u8f91\u6027\u80fd\uff0c\u63a5\u8fd1\u95ed\u6e90\u7cfb\u7edf\u8868\u73b0\u3002", "motivation": "\u73b0\u6709\u7684\u57fa\u4e8e\u63d0\u4ea4\u7684\u6570\u636e\u96c6\u5b58\u5728\u566a\u58f0\u5927\u3001\u591a\u6837\u6027\u4e0d\u8db3\u3001\u65e0\u6cd5\u53cd\u6620\u771f\u5b9e\u7f16\u8f91\u6307\u4ee4\u98ce\u683c\u7684\u95ee\u9898\uff0c\u9700\u8981\u66f4\u597d\u7684\u6570\u636e\u96c6\u6765\u652f\u6301\u4ee3\u7801\u7f16\u8f91\u4efb\u52a1\u3002", "method": "\u5f00\u53d1CanItEdit\u6d41\u6c34\u7ebf\uff0c\u5229\u7528\u591a\u4e2aLLM\u5408\u6210\u4ee3\u7801\u7f16\u8f91\u4e09\u5143\u7ec4\uff0c\u751f\u6210\u7b80\u6d01\u548c\u8be6\u7ec6\u4e24\u79cd\u6307\u4ee4\uff0c\u901a\u8fc7\u5dee\u5f02\u548c\u4e3b\u9898\u8fc7\u6ee4\u4fdd\u8bc1\u6570\u636e\u8d28\u91cf\u548c\u591a\u6837\u6027\uff0c\u6784\u5efaOCEDataFT\u6570\u636e\u96c6\u5e76\u5fae\u8c03\u57fa\u7840\u6a21\u578b\u3002", "result": "\u5728CanItEdit\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u5fae\u8c03\u540e\u7684\u6a21\u578bpass@1\u76f8\u5bf9\u63d0\u53474.50%-20.79%\uff0c\u6027\u80fd\u63a5\u8fd1\u95ed\u6e90\u7cfb\u7edf\uff0c\u4e0eGPT-4\u7684\u5dee\u8ddd\u7f29\u5c0f\u5230\u4ec53.54%\u3002", "conclusion": "CanItEdit\u6d41\u6c34\u7ebf\u80fd\u591f\u6709\u6548\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\u7f16\u8f91\u6570\u636e\u96c6\uff0c\u901a\u8fc7\u5fae\u8c03\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff0c\u65e0\u9700\u4f9d\u8d56\u4e13\u6709\u8d44\u6e90\u6216\u4eba\u5de5\u6807\u6ce8\u5c31\u80fd\u8fbe\u5230\u63a5\u8fd1\u9876\u7ea7\u95ed\u6e90\u7cfb\u7edf\u7684\u6548\u679c\u3002"}}
{"id": "2509.25242", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25242", "abs": "https://arxiv.org/abs/2509.25242", "authors": ["Zejun Zhang", "Jian Wang", "Qingyun Yang", "Yifan Pan", "Yi Tang", "Yi Li", "Zhenchang Xing", "Tian Zhang", "Xuandong Li", "Guoan Zhang"], "title": "A Benchmark for Localizing Code and Non-Code Issues in Software Projects", "comment": null, "summary": "Accurate project localization (e.g., files and functions) for issue\nresolution is a critical first step in software maintenance. However, existing\nbenchmarks for issue localization, such as SWE-Bench and LocBench, are limited.\nThey focus predominantly on pull-request issues and code locations, ignoring\nother evidence and non-code files such as commits, comments, configurations,\nand documentation. To address this gap, we introduce MULocBench, a\ncomprehensive dataset of 1,100 issues from 46 popular GitHub Python projects.\nComparing with existing benchmarks, MULocBench offers greater diversity in\nissue types, root causes, location scopes, and file types, providing a more\nrealistic testbed for evaluation. Using this benchmark, we assess the\nperformance of state-of-the-art localization methods and five LLM-based\nprompting strategies. Our results reveal significant limitations in current\ntechniques: even at the file level, performance metrics (Acc@5, F1) remain\nbelow 40%. This underscores the challenge of generalizing to realistic,\nmulti-faceted issue resolution. To enable future research on project\nlocalization for issue resolution, we publicly release MULocBench at\nhttps://huggingface.co/datasets/somethingone/MULocBench.", "AI": {"tldr": "\u63d0\u51fa\u4e86MULocBench\u6570\u636e\u96c6\uff0c\u5305\u542b1100\u4e2a\u6765\u81ea46\u4e2aPython\u9879\u76ee\u7684issue\uff0c\u7528\u4e8e\u8bc4\u4f30\u8f6f\u4ef6\u7ef4\u62a4\u4e2d\u7684\u9879\u76ee\u5b9a\u4f4d\u95ee\u9898\uff0c\u76f8\u6bd4\u73b0\u6709\u57fa\u51c6\u66f4\u5177\u591a\u6837\u6027\u3002", "motivation": "\u73b0\u6709issue\u5b9a\u4f4d\u57fa\u51c6\u5982SWE-Bench\u548cLocBench\u4e3b\u8981\u5173\u6ce8pull-request\u95ee\u9898\u548c\u4ee3\u7801\u4f4d\u7f6e\uff0c\u5ffd\u7565\u4e86\u5176\u4ed6\u8bc1\u636e\u548c\u975e\u4ee3\u7801\u6587\u4ef6\uff0c\u9700\u8981\u66f4\u5168\u9762\u7684\u8bc4\u4f30\u57fa\u51c6\u3002", "method": "\u6784\u5efa\u5305\u542b1100\u4e2aissue\u7684MULocBench\u6570\u636e\u96c6\uff0c\u6db5\u76d6\u591a\u79cdissue\u7c7b\u578b\u3001\u6839\u672c\u539f\u56e0\u3001\u5b9a\u4f4d\u8303\u56f4\u548c\u6587\u4ef6\u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u8be5\u57fa\u51c6\u8bc4\u4f30\u6700\u5148\u8fdb\u7684\u5b9a\u4f4d\u65b9\u6cd5\u548c5\u79cd\u57fa\u4e8eLLM\u7684\u63d0\u793a\u7b56\u7565\u3002", "result": "\u5f53\u524d\u6280\u672f\u5b58\u5728\u663e\u8457\u5c40\u9650\u6027\uff1a\u5373\u4f7f\u5728\u6587\u4ef6\u7ea7\u522b\uff0c\u6027\u80fd\u6307\u6807\uff08Acc@5, F1\uff09\u4ecd\u4f4e\u4e8e40%\uff0c\u8868\u660e\u5728\u73b0\u5b9e\u591a\u5c42\u9762\u95ee\u9898\u89e3\u51b3\u4e2d\u6cdb\u5316\u80fd\u529b\u4e0d\u8db3\u3002", "conclusion": "MULocBench\u4e3aissue\u89e3\u51b3\u4e2d\u7684\u9879\u76ee\u5b9a\u4f4d\u7814\u7a76\u63d0\u4f9b\u4e86\u66f4\u73b0\u5b9e\u7684\u6d4b\u8bd5\u5e73\u53f0\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u6280\u672f\u7684\u6311\u6218\uff0c\u5e76\u516c\u5f00\u4e86\u6570\u636e\u96c6\u4ee5\u4fc3\u8fdb\u672a\u6765\u7814\u7a76\u3002"}}
{"id": "2509.25243", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25243", "abs": "https://arxiv.org/abs/2509.25243", "authors": ["Xunzhu Tang", "Iyiola Emmanuel Olatunji", "Tiezhu Sun", "Jacques Klein", "Tegawende F. Bissyande"], "title": "Reinforcement Learning-Guided Chain-of-Draft for Token-Efficient Code Generation", "comment": null, "summary": "LLMs demonstrate surface-level fluency in code generation but struggle with\nstructured reasoning tasks requiring correctness and semantic alignment. While\nChain-of-Thought (CoT) prompting enhances reasoning through intermediate steps,\nit suffers from verbosity and inefficiency. Chain-of-Draft (CoD) prompting\noffers more concise reasoning, but the stochastic nature of LLMs produces\nvarying solution quality, making optimal selection challenging. We propose\n\\multicod, a reinforcement learning framework that learns to select the most\npromising candidate from CoD-generated solutions. Our approach uses\nstrategy-guided prompting to encourage diverse reasoning styles and models\nsolution selection as a contextual bandit problem. The framework optimizes\ninterpretable features including code complexity, reasoning structure, and\nstrategic metadata through a reward function balancing correctness, efficiency,\nand clarity. Experiments on MBPP, BigCodeBench, SWE-bench Verified, and\nDefects4J show \\multicod~outperforms and in some cases, on par with standard\nprompting, CoT, and CoD baselines while achieving cost and token efficiency\nfrom the user's perspective through a multi-candidate design that charges only\nfor the selected output, reducing user billing by over 50\\% and improving LLM\nresponse quality, making \\multicod~more sustainable and scalable for real-world\ndeployment. Our code is available: https://anonymous.4open.science/r/MultiCoD.", "AI": {"tldr": "MultiCoD\u662f\u4e00\u4e2a\u5f3a\u5316\u5b66\u4e60\u6846\u67b6\uff0c\u901a\u8fc7\u4eceChain-of-Draft\u751f\u6210\u7684\u591a\u4e2a\u5019\u9009\u89e3\u51b3\u65b9\u6848\u4e2d\u9009\u62e9\u6700\u4f18\u89e3\uff0c\u5728\u4fdd\u6301\u4ee3\u7801\u751f\u6210\u8d28\u91cf\u7684\u540c\u65f6\u663e\u8457\u964d\u4f4e\u7528\u6237\u6210\u672c\u3002", "motivation": "\u73b0\u6709LLMs\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u867d\u7136\u8868\u9762\u6d41\u7545\uff0c\u4f46\u5728\u9700\u8981\u6b63\u786e\u6027\u548c\u8bed\u4e49\u5bf9\u9f50\u7684\u7ed3\u6784\u5316\u63a8\u7406\u4efb\u52a1\u4e2d\u8868\u73b0\u4e0d\u4f73\u3002Chain-of-Thought\u63d0\u793a\u5b58\u5728\u5197\u957f\u548c\u6548\u7387\u4f4e\u7684\u95ee\u9898\uff0c\u800cChain-of-Draft\u7684\u968f\u673a\u6027\u5bfc\u81f4\u89e3\u51b3\u65b9\u6848\u8d28\u91cf\u4e0d\u7a33\u5b9a\uff0c\u96be\u4ee5\u9009\u62e9\u6700\u4f18\u89e3\u3002", "method": "\u63d0\u51faMultiCoD\u5f3a\u5316\u5b66\u4e60\u6846\u67b6\uff0c\u4f7f\u7528\u7b56\u7565\u5f15\u5bfc\u63d0\u793a\u9f13\u52b1\u591a\u6837\u5316\u63a8\u7406\u98ce\u683c\uff0c\u5c06\u89e3\u51b3\u65b9\u6848\u9009\u62e9\u5efa\u6a21\u4e3a\u4e0a\u4e0b\u6587\u591a\u81c2\u8001\u864e\u673a\u95ee\u9898\u3002\u901a\u8fc7\u5956\u52b1\u51fd\u6570\u4f18\u5316\u4ee3\u7801\u590d\u6742\u5ea6\u3001\u63a8\u7406\u7ed3\u6784\u548c\u6218\u7565\u5143\u6570\u636e\u7b49\u53ef\u89e3\u91ca\u7279\u5f81\u3002", "result": "\u5728MBPP\u3001BigCodeBench\u3001SWE-bench Verified\u548cDefects4J\u7b49\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cMultiCoD\u4f18\u4e8e\u6216\u4e0e\u6807\u51c6\u63d0\u793a\u3001CoT\u548cCoD\u57fa\u7ebf\u76f8\u5f53\uff0c\u540c\u65f6\u901a\u8fc7\u591a\u5019\u9009\u8bbe\u8ba1\u5c06\u7528\u6237\u8d26\u5355\u51cf\u5c1150%\u4ee5\u4e0a\uff0c\u63d0\u9ad8\u4e86LLM\u54cd\u5e94\u8d28\u91cf\u3002", "conclusion": "MultiCoD\u901a\u8fc7\u6709\u6548\u7684\u5019\u9009\u9009\u62e9\u548c\u6210\u672c\u4f18\u5316\uff0c\u4e3a\u73b0\u5b9e\u4e16\u754c\u90e8\u7f72\u63d0\u4f9b\u4e86\u66f4\u53ef\u6301\u7eed\u548c\u53ef\u6269\u5c55\u7684\u4ee3\u7801\u751f\u6210\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.25247", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25247", "abs": "https://arxiv.org/abs/2509.25247", "authors": ["Krishna Vamshi Bodla", "Haizhao Yang"], "title": "Protocode: Prototype-Driven Interpretability for Code Generation in LLMs", "comment": null, "summary": "Since the introduction of Large Language Models (LLMs), they have been widely\nadopted for various tasks such as text summarization, question answering,\nspeech-to-text translation, and more. In recent times, the use of LLMs for code\ngeneration has gained significant attention, with tools such as Cursor and\nWindsurf demonstrating the ability to analyze massive code repositories and\nrecommend relevant changes. Big tech companies have also acknowledged the\ngrowing reliance on LLMs for code generation within their codebases. Although\nthese advances significantly improve developer productivity, increasing\nreliance on automated code generation can proportionally increase the risk of\nsuboptimal solutions and insecure code. Our work focuses on automatically\nsampling In-Context Learning (ICL) demonstrations which can improve model\nperformance and enhance the interpretability of the generated code. Using\nAST-based analysis on outputs from the MBPP test set, we identify regions of\ncode most influenced by the chosen demonstrations. In our experiments, we show\nthat high-quality ICL demonstrations not only make outputs easier to interpret\nbut also yield a positive performance improvement on the pass@10 metric.\nConversely, poorly chosen ICL demonstrations affected the LLM performance on\nthe pass@10 metric negatively compared to the base model. Overall, our approach\nhighlights the importance of efficient sampling strategies for ICL, which can\naffect the performance of the model on any given task.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u81ea\u52a8\u91c7\u6837\u4e0a\u4e0b\u6587\u5b66\u4e60(ICL)\u6f14\u793a\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7AST\u5206\u6790\u8bc6\u522b\u4ee3\u7801\u4e2d\u53d7\u6f14\u793a\u5f71\u54cd\u6700\u5927\u7684\u533a\u57df\uff0c\u4ee5\u63d0\u9ad8\u5927\u8bed\u8a00\u6a21\u578b\u4ee3\u7801\u751f\u6210\u7684\u6027\u80fd\u548c\u53ef\u89e3\u91ca\u6027\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u867d\u7136\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u6b21\u4f18\u89e3\u51b3\u65b9\u6848\u548c\u4e0d\u5b89\u5168\u4ee3\u7801\u7684\u98ce\u9669\u589e\u52a0\u3002\u672c\u6587\u65e8\u5728\u901a\u8fc7\u4f18\u5316ICL\u6f14\u793a\u9009\u62e9\u6765\u6539\u5584\u6a21\u578b\u6027\u80fd\u548c\u4ee3\u7801\u53ef\u89e3\u91ca\u6027\u3002", "method": "\u57fa\u4e8eMBPP\u6d4b\u8bd5\u96c6\u7684\u8f93\u51fa\u8fdb\u884cAST\u5206\u6790\uff0c\u8bc6\u522b\u4ee3\u7801\u4e2d\u53d7\u6f14\u793a\u5f71\u54cd\u6700\u5927\u7684\u533a\u57df\uff0c\u81ea\u52a8\u91c7\u6837\u9ad8\u8d28\u91cf\u7684ICL\u6f14\u793a\u3002", "result": "\u9ad8\u8d28\u91cfICL\u6f14\u793a\u4e0d\u4ec5\u4f7f\u8f93\u51fa\u66f4\u6613\u89e3\u91ca\uff0c\u8fd8\u5728pass@10\u6307\u6807\u4e0a\u5e26\u6765\u6b63\u5411\u6027\u80fd\u63d0\u5347\uff1b\u800c\u4f4e\u8d28\u91cf\u6f14\u793a\u5219\u4f1a\u5bf9\u6a21\u578b\u6027\u80fd\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002", "conclusion": "\u9ad8\u6548\u7684ICL\u91c7\u6837\u7b56\u7565\u5bf9\u6a21\u578b\u6027\u80fd\u81f3\u5173\u91cd\u8981\uff0c\u5408\u9002\u7684\u6f14\u793a\u9009\u62e9\u80fd\u663e\u8457\u5f71\u54cd\u6a21\u578b\u5728\u7279\u5b9a\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002"}}
{"id": "2509.25257", "categories": ["cs.SE", "cs.IR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25257", "abs": "https://arxiv.org/abs/2509.25257", "authors": ["Pratik Shah", "Rajat Ghosh", "Aryan Singhal", "Debojyoti Dutta"], "title": "RANGER -- Repository-Level Agent for Graph-Enhanced Retrieval", "comment": "24 pages, 4 figures", "summary": "General-purpose automated software engineering (ASE) includes tasks such as\ncode completion, retrieval, repair, QA, and summarization. These tasks require\na code retrieval system that can handle specific queries about code entities,\nor code entity queries (for example, locating a specific class or retrieving\nthe dependencies of a function), as well as general queries without explicit\ncode entities, or natural language queries (for example, describing a task and\nretrieving the corresponding code). We present RANGER, a repository-level code\nretrieval agent designed to address both query types, filling a gap in recent\nworks that have focused primarily on code-entity queries. We first present a\ntool that constructs a comprehensive knowledge graph of the entire repository,\ncapturing hierarchical and cross-file dependencies down to the variable level,\nand augments graph nodes with textual descriptions and embeddings to bridge the\ngap between code and natural language. RANGER then operates on this graph\nthrough a dual-stage retrieval pipeline. Entity-based queries are answered\nthrough fast Cypher lookups, while natural language queries are handled by\nMCTS-guided graph exploration. We evaluate RANGER across four diverse\nbenchmarks that represent core ASE tasks including code search, question\nanswering, cross-file dependency retrieval, and repository-level code\ncompletion. On CodeSearchNet and RepoQA it outperforms retrieval baselines that\nuse embeddings from strong models such as Qwen3-8B. On RepoBench, it achieves\nsuperior cross-file dependency retrieval over baselines, and on CrossCodeEval,\npairing RANGER with BM25 delivers the highest exact match rate in code\ncompletion compared to other RAG methods.", "AI": {"tldr": "RANGER\u662f\u4e00\u4e2a\u4ed3\u5e93\u7ea7\u4ee3\u7801\u68c0\u7d22\u4ee3\u7406\uff0c\u80fd\u591f\u5904\u7406\u4ee3\u7801\u5b9e\u4f53\u67e5\u8be2\u548c\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\uff0c\u901a\u8fc7\u6784\u5efa\u77e5\u8bc6\u56fe\u8c31\u548c\u53cc\u9636\u6bb5\u68c0\u7d22\u6d41\u7a0b\uff0c\u5728\u591a\u4e2a\u4ee3\u7801\u68c0\u7d22\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8e\u73b0\u6709\u57fa\u7ebf\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u7684\u4ee3\u7801\u68c0\u7d22\u7cfb\u7edf\u4e3b\u8981\u5173\u6ce8\u4ee3\u7801\u5b9e\u4f53\u67e5\u8be2\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u7684\u652f\u6301\u3002\u9700\u8981\u4e00\u79cd\u80fd\u591f\u540c\u65f6\u5904\u7406\u4e24\u79cd\u67e5\u8be2\u7c7b\u578b\u7684\u901a\u7528\u4ee3\u7801\u68c0\u7d22\u7cfb\u7edf\u6765\u652f\u6301\u81ea\u52a8\u5316\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u3002", "method": "\u9996\u5148\u6784\u5efa\u5305\u542b\u5c42\u6b21\u7ed3\u6784\u548c\u8de8\u6587\u4ef6\u4f9d\u8d56\u5173\u7cfb\u7684\u77e5\u8bc6\u56fe\u8c31\uff0c\u8282\u70b9\u5305\u542b\u6587\u672c\u63cf\u8ff0\u548c\u5d4c\u5165\u8868\u793a\u3002\u7136\u540e\u91c7\u7528\u53cc\u9636\u6bb5\u68c0\u7d22\u6d41\u7a0b\uff1a\u4ee3\u7801\u5b9e\u4f53\u67e5\u8be2\u4f7f\u7528Cypher\u67e5\u8be2\uff0c\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u4f7f\u7528MCTS\u5f15\u5bfc\u7684\u56fe\u63a2\u7d22\u3002", "result": "\u5728CodeSearchNet\u548cRepoQA\u4e0a\u4f18\u4e8e\u4f7f\u7528Qwen3-8B\u7b49\u5f3a\u5927\u6a21\u578b\u5d4c\u5165\u7684\u68c0\u7d22\u57fa\u7ebf\uff1b\u5728RepoBench\u4e0a\u5b9e\u73b0\u66f4\u597d\u7684\u8de8\u6587\u4ef6\u4f9d\u8d56\u68c0\u7d22\uff1b\u5728CrossCodeEval\u4e0a\u4e0eBM25\u7ed3\u5408\u83b7\u5f97\u6700\u9ad8\u7684\u4ee3\u7801\u8865\u5168\u7cbe\u786e\u5339\u914d\u7387\u3002", "conclusion": "RANGER\u901a\u8fc7\u7ed3\u5408\u77e5\u8bc6\u56fe\u8c31\u548c\u53cc\u9636\u6bb5\u68c0\u7d22\u7b56\u7565\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u4ed3\u5e93\u7ea7\u4ee3\u7801\u68c0\u7d22\u95ee\u9898\uff0c\u5728\u591a\u79cd\u81ea\u52a8\u5316\u8f6f\u4ef6\u5de5\u7a0b\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u586b\u8865\u4e86\u73b0\u6709\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u4ee3\u7801\u5b9e\u4f53\u67e5\u8be2\u7684\u7a7a\u767d\u3002"}}
{"id": "2509.25297", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25297", "abs": "https://arxiv.org/abs/2509.25297", "authors": ["Yuxuan Wan", "Tingshuo Liang", "Jiakai Xu", "Jingyu Xiao", "Yintong Huo", "Michael R. Lyu"], "title": "Automatically Generating Web Applications from Requirements Via Multi-Agent Test-Driven Development", "comment": null, "summary": "Developing full-stack web applications is complex and time-intensive,\ndemanding proficiency across diverse technologies and frameworks. Although\nrecent advances in multimodal large language models (MLLMs) enable automated\nwebpage generation from visual inputs, current solutions remain limited to\nfront-end tasks and fail to deliver fully functional applications. In this\nwork, we introduce TDDev, the first test-driven development (TDD)-enabled\nLLM-agent framework for end-to-end full-stack web application generation. Given\na natural language description or design image, TDDev automatically derives\nexecutable test cases, generates front-end and back-end code, simulates user\ninteractions, and iteratively refines the implementation until all requirements\nare satisfied. Our framework addresses key challenges in full-stack automation,\nincluding underspecified user requirements, complex interdependencies among\nmultiple files, and the need for both functional correctness and visual\nfidelity. Through extensive experiments on diverse application scenarios, TDDev\nachieves a 14.4% improvement on overall accuracy compared to state-of-the-art\nbaselines, demonstrating its effectiveness in producing reliable, high-quality\nweb applications without requiring manual intervention.", "AI": {"tldr": "TDDev\u662f\u9996\u4e2a\u57fa\u4e8e\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD)\u7684LLM\u4ee3\u7406\u6846\u67b6\uff0c\u80fd\u591f\u4ece\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u6216\u8bbe\u8ba1\u56fe\u50cf\u81ea\u52a8\u751f\u6210\u7aef\u5230\u7aef\u7684\u5168\u6808Web\u5e94\u7528\uff0c\u901a\u8fc7\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7528\u4f8b\u3001\u524d\u540e\u7aef\u4ee3\u7801\u548c\u8fed\u4ee3\u4f18\u5316\u6765\u5b9e\u73b0\u529f\u80fd\u5b8c\u6574\u7684\u9ad8\u8d28\u91cf\u5e94\u7528\u3002", "motivation": "\u5f53\u524d\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\u867d\u7136\u80fd\u4ece\u89c6\u89c9\u8f93\u5165\u751f\u6210\u7f51\u9875\uff0c\u4f46\u4ec5\u9650\u4e8e\u524d\u7aef\u4efb\u52a1\uff0c\u65e0\u6cd5\u4ea4\u4ed8\u529f\u80fd\u5b8c\u6574\u7684\u5168\u6808\u5e94\u7528\u3002\u5168\u6808\u5f00\u53d1\u590d\u6742\u5ea6\u9ad8\uff0c\u9700\u8981\u8de8\u591a\u79cd\u6280\u672f\u6808\u7684\u719f\u7ec3\u6280\u80fd\u3002", "method": "\u91c7\u7528\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD)\u65b9\u6cd5\uff0c\u81ea\u52a8\u751f\u6210\u53ef\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u751f\u6210\u524d\u540e\u7aef\u4ee3\u7801\uff0c\u6a21\u62df\u7528\u6237\u4ea4\u4e92\uff0c\u5e76\u901a\u8fc7\u8fed\u4ee3\u4f18\u5316\u76f4\u5230\u6ee1\u8db3\u6240\u6709\u9700\u6c42\u3002\u89e3\u51b3\u4e86\u7528\u6237\u9700\u6c42\u4e0d\u660e\u786e\u3001\u591a\u6587\u4ef6\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\u7b49\u5173\u952e\u6311\u6218\u3002", "result": "\u5728\u591a\u6837\u5316\u5e94\u7528\u573a\u666f\u7684\u5e7f\u6cdb\u5b9e\u9a8c\u4e2d\uff0cTDDev\u76f8\u6bd4\u6700\u5148\u8fdb\u57fa\u7ebf\u65b9\u6cd5\u5728\u6574\u4f53\u51c6\u786e\u7387\u4e0a\u63d0\u5347\u4e8614.4%\uff0c\u80fd\u591f\u65e0\u9700\u4eba\u5de5\u5e72\u9884\u751f\u6210\u53ef\u9760\u3001\u9ad8\u8d28\u91cf\u7684Web\u5e94\u7528\u3002", "conclusion": "TDDev\u6846\u67b6\u6709\u6548\u89e3\u51b3\u4e86\u5168\u6808Web\u5e94\u7528\u81ea\u52a8\u5316\u7684\u5173\u952e\u6311\u6218\uff0c\u80fd\u591f\u751f\u6210\u529f\u80fd\u6b63\u786e\u4e14\u89c6\u89c9\u4fdd\u771f\u7684\u5b8c\u6574\u5e94\u7528\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002"}}
{"id": "2509.25378", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25378", "abs": "https://arxiv.org/abs/2509.25378", "authors": ["Akalanka Galappaththi", "Francisco Ribeiro", "Sarah Nadi"], "title": "Detecting and Fixing API Misuses of Data Science Libraries Using Large Language Models", "comment": "10 pages, 3 figures, accepted in CASCON 25", "summary": "Data science libraries, such as scikit-learn and pandas, specialize in\nprocessing and manipulating data. The data-centric nature of these libraries\nmakes the detection of API misuse in them more challenging. This paper\nintroduces DSCHECKER, an LLM-based approach designed for detecting and fixing\nAPI misuses of data science libraries. We identify two key pieces of\ninformation, API directives and data information, that may be beneficial for\nAPI misuse detection and fixing. Using three LLMs and misuses from five data\nscience libraries, we experiment with various prompts. We find that\nincorporating API directives and data-specific details enhances Dschecker's\nability to detect and fix API misuses, with the best-performing model achieving\na detection F1-score of 61.18 percent and fixing 51.28 percent of the misuses.\nBuilding on these results, we implement Dschecker agent which includes an\nadaptive function calling mechanism to access information on demand, simulating\na real-world setting where information about the misuse is unknown in advance.\nWe find that Dschecker agent achieves 48.65 percent detection F1-score and\nfixes 39.47 percent of the misuses, demonstrating the promise of LLM-based API\nmisuse detection and fixing in real-world scenarios.", "AI": {"tldr": "DSCHECKER\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u68c0\u6d4b\u548c\u4fee\u590d\u6570\u636e\u79d1\u5b66\u5e93\u4e2d\u7684API\u8bef\u7528\u3002\u901a\u8fc7\u6574\u5408API\u6307\u4ee4\u548c\u6570\u636e\u4fe1\u606f\uff0c\u8be5\u65b9\u6cd5\u5728\u68c0\u6d4b\u548c\u4fee\u590dAPI\u8bef\u7528\u65b9\u9762\u8868\u73b0\u826f\u597d\uff0c\u6700\u4f73\u6a21\u578b\u68c0\u6d4bF1\u5206\u6570\u8fbe61.18%\uff0c\u4fee\u590d\u7387\u8fbe51.28%\u3002", "motivation": "\u6570\u636e\u79d1\u5b66\u5e93\uff08\u5982scikit-learn\u548cpandas\uff09\u7684\u6570\u636e\u4e2d\u5fc3\u7279\u6027\u4f7f\u5f97API\u8bef\u7528\u68c0\u6d4b\u66f4\u5177\u6311\u6218\u6027\uff0c\u9700\u8981\u4e13\u95e8\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u63d0\u51faDSCHECKER\u65b9\u6cd5\uff0c\u8bc6\u522bAPI\u6307\u4ee4\u548c\u6570\u636e\u4fe1\u606f\u4e24\u4e2a\u5173\u952e\u4fe1\u606f\uff0c\u4f7f\u7528\u4e09\u4e2aLLM\u548c\u4e94\u79cd\u6570\u636e\u79d1\u5b66\u5e93\u7684\u8bef\u7528\u8fdb\u884c\u5b9e\u9a8c\uff0c\u5e76\u5b9e\u73b0\u5177\u6709\u81ea\u9002\u5e94\u51fd\u6570\u8c03\u7528\u673a\u5236\u7684DSCHECKER\u4ee3\u7406\u3002", "result": "\u6700\u4f73\u6a21\u578b\u68c0\u6d4bF1\u5206\u6570\u4e3a61.18%\uff0c\u4fee\u590d\u7387\u4e3a51.28%\uff1bDSCHECKER\u4ee3\u7406\u68c0\u6d4bF1\u5206\u6570\u4e3a48.65%\uff0c\u4fee\u590d\u7387\u4e3a39.47%\u3002", "conclusion": "\u57fa\u4e8eLLM\u7684API\u8bef\u7528\u68c0\u6d4b\u548c\u4fee\u590d\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u5177\u6709\u6f5c\u529b\uff0c\u6574\u5408API\u6307\u4ee4\u548c\u6570\u636e\u7279\u5b9a\u7ec6\u8282\u80fd\u663e\u8457\u63d0\u5347\u6027\u80fd\u3002"}}
{"id": "2509.25397", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25397", "abs": "https://arxiv.org/abs/2509.25397", "authors": ["Johan Lin\u00e5ker", "Cailean Osborne", "Jennifer Ding", "Ben Burtenshaw"], "title": "A Cartography of Open Collaboration in Open Source AI: Mapping Practices, Motivations, and Governance in 14 Open Large Language Model Projects", "comment": "In submission", "summary": "The proliferation of open large language models (LLMs) is fostering a vibrant\necosystem of research and innovation in artificial intelligence (AI). However,\nthe methods of collaboration used to develop open LLMs both before and after\ntheir public release have not yet been comprehensively studied, limiting our\nunderstanding of how open LLM projects are initiated, organized, and governed\nas well as what opportunities there are to foster this ecosystem even further.\nWe address this gap through an exploratory analysis of open collaboration\nthroughout the development and reuse lifecycle of open LLMs, drawing on\nsemi-structured interviews with the developers of 14 open LLMs from grassroots\nprojects, research institutes, startups, and Big Tech companies in North\nAmerica, Europe, Africa, and Asia. We make three key contributions to research\nand practice. First, collaboration in open LLM projects extends far beyond the\nLLMs themselves, encompassing datasets, benchmarks, open source frameworks,\nleaderboards, knowledge sharing and discussion forums, and compute\npartnerships, among others. Second, open LLM developers have a variety of\nsocial, economic, and technological motivations, from democratizing AI access\nand promoting open science to building regional ecosystems and expanding\nlanguage representation. Third, the sampled open LLM projects exhibit five\ndistinct organizational models, ranging from single company projects to\nnon-profit-sponsored grassroots projects, which vary in their centralization of\ncontrol and community engagement strategies used throughout the open LLM\nlifecycle. We conclude with practical recommendations for stakeholders seeking\nto support the global community building a more open future for AI.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u8bbf\u8c0814\u4e2a\u5f00\u6e90\u5927\u8bed\u8a00\u6a21\u578b\u9879\u76ee\u7684\u5f00\u53d1\u8005\uff0c\u7cfb\u7edf\u5206\u6790\u4e86\u5f00\u6e90LLM\u9879\u76ee\u5728\u5f00\u53d1\u548c\u91cd\u7528\u751f\u547d\u5468\u671f\u4e2d\u7684\u534f\u4f5c\u6a21\u5f0f\u3001\u52a8\u673a\u548c\u7ec4\u7ec7\u7ed3\u6784\u3002", "motivation": "\u76ee\u524d\u5bf9\u5f00\u6e90LLM\u9879\u76ee\u5728\u53d1\u5e03\u524d\u540e\u7684\u534f\u4f5c\u65b9\u5f0f\u7f3a\u4e4f\u5168\u9762\u7814\u7a76\uff0c\u9650\u5236\u4e86\u6211\u4eec\u5bf9\u8fd9\u4e9b\u9879\u76ee\u5982\u4f55\u542f\u52a8\u3001\u7ec4\u7ec7\u548c\u6cbb\u7406\u7684\u7406\u89e3\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u4e00\u6b65\u4fc3\u8fdb\u8fd9\u4e2a\u751f\u6001\u7cfb\u7edf\u7684\u53d1\u5c55\u3002", "method": "\u91c7\u7528\u63a2\u7d22\u6027\u5206\u6790\u65b9\u6cd5\uff0c\u901a\u8fc7\u5bf9\u6765\u81ea\u8349\u6839\u9879\u76ee\u3001\u7814\u7a76\u673a\u6784\u3001\u521d\u521b\u516c\u53f8\u548c\u5927\u578b\u79d1\u6280\u516c\u53f8\u768414\u4e2a\u5f00\u6e90LLM\u9879\u76ee\u5f00\u53d1\u8005\u8fdb\u884c\u534a\u7ed3\u6784\u5316\u8bbf\u8c08\u3002", "result": "\u53d1\u73b0\u5f00\u6e90LLM\u534f\u4f5c\u4e0d\u4ec5\u9650\u4e8e\u6a21\u578b\u672c\u8eab\uff0c\u8fd8\u5305\u62ec\u6570\u636e\u96c6\u3001\u57fa\u51c6\u6d4b\u8bd5\u3001\u5f00\u6e90\u6846\u67b6\u7b49\u591a\u4e2a\u65b9\u9762\uff1b\u5f00\u53d1\u8005\u5177\u6709\u591a\u6837\u5316\u7684\u793e\u4f1a\u3001\u7ecf\u6d4e\u548c\u6280\u672f\u52a8\u673a\uff1b\u9879\u76ee\u5448\u73b0\u4e94\u79cd\u4e0d\u540c\u7684\u7ec4\u7ec7\u6a21\u5f0f\uff0c\u5728\u63a7\u5236\u96c6\u4e2d\u5ea6\u548c\u793e\u533a\u53c2\u4e0e\u7b56\u7565\u4e0a\u5b58\u5728\u5dee\u5f02\u3002", "conclusion": "\u4e3a\u5bfb\u6c42\u652f\u6301\u5168\u7403\u793e\u533a\u6784\u5efa\u66f4\u5f00\u653eAI\u672a\u6765\u7684\u5229\u76ca\u76f8\u5173\u8005\u63d0\u4f9b\u4e86\u5b9e\u7528\u5efa\u8bae\u3002"}}
{"id": "2509.25455", "categories": ["cs.SE", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25455", "abs": "https://arxiv.org/abs/2509.25455", "authors": ["Alexander Kovrigin", "Aleksandra Eliseeva", "Konstantin Grotov", "Egor Bogomolov", "Yaroslav Zharov"], "title": "PIPer: On-Device Environment Setup via Online Reinforcement Learning", "comment": "Under review", "summary": "Environment setup-the process of configuring the system to work with a\nspecific software project-represents a persistent challenge in Software\nEngineering (SE). Automated environment setup methods could assist developers\nby providing fully configured environments for arbitrary repositories without\nmanual effort. This also helps SE researchers to scale execution-based\nbenchmarks. However, recent studies reveal that even state-of-the-art Large\nLanguage Models (LLMs) achieve limited success in automating this task. To\naddress this limitation, we tune a specialized model for environment setup. We\ncombine supervised fine-tuning for generating correct Bash scripts and\nReinforcement Learning with Verifiable Rewards (RLVR) to adapt it to the task\nof environment setup. On EnvBench-Python, our method enables Qwen3-8B (a model\nrunnable on consumer hardware) to perform on par with larger models-Qwen3-32B\nand GPT-4o. The training code and model checkpoints are available online:\nhttps://github.com/JetBrains-Research/PIPer.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408\u76d1\u7763\u5fae\u8c03\u548c\u5f3a\u5316\u5b66\u4e60\u7684\u4e13\u95e8\u6a21\u578b\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u8f6f\u4ef6\u73af\u5883\u8bbe\u7f6e\u4efb\u52a1\uff0c\u4f7f\u8f83\u5c0f\u7684\u6a21\u578b\u5728\u6027\u80fd\u4e0a\u80fd\u4e0e\u5927\u578b\u6a21\u578b\u76f8\u5ab2\u7f8e\u3002", "motivation": "\u8f6f\u4ef6\u73af\u5883\u8bbe\u7f6e\u662f\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\u7684\u6301\u7eed\u6311\u6218\uff0c\u73b0\u6709\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5728\u6b64\u4efb\u52a1\u4e0a\u8868\u73b0\u6709\u9650\uff0c\u9700\u8981\u4e13\u95e8\u7684\u65b9\u6cd5\u6765\u63d0\u9ad8\u81ea\u52a8\u5316\u73af\u5883\u914d\u7f6e\u7684\u6210\u529f\u7387\u3002", "method": "\u7ed3\u5408\u76d1\u7763\u5fae\u8c03\u751f\u6210\u6b63\u786e\u7684Bash\u811a\u672c\uff0c\u5e76\u4f7f\u7528\u5e26\u53ef\u9a8c\u8bc1\u5956\u52b1\u7684\u5f3a\u5316\u5b66\u4e60\u6765\u9002\u5e94\u73af\u5883\u8bbe\u7f6e\u4efb\u52a1\u3002", "result": "\u5728EnvBench-Python\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u8be5\u65b9\u6cd5\u4f7fQwen3-8B\u6a21\u578b\u7684\u8868\u73b0\u4e0eQwen3-32B\u548cGPT-4o\u7b49\u5927\u578b\u6a21\u578b\u76f8\u5f53\u3002", "conclusion": "\u901a\u8fc7\u4e13\u95e8\u7684\u4efb\u52a1\u8c03\u4f18\uff0c\u8f83\u5c0f\u7684\u6a21\u578b\u4e5f\u80fd\u5728\u73af\u5883\u8bbe\u7f6e\u4efb\u52a1\u4e0a\u8fbe\u5230\u4e0e\u5927\u578b\u6a21\u578b\u76f8\u5f53\u7684\u6027\u80fd\uff0c\u4e3a\u8f6f\u4ef6\u5de5\u7a0b\u81ea\u52a8\u5316\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2509.25465", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25465", "abs": "https://arxiv.org/abs/2509.25465", "authors": ["Yinghang Ma", "Jiho Shin", "Leuson Da Silva", "Zhen Ming", "Jiang", "Song Wang", "Foutse Khomh", "Shin Hwei Tan"], "title": "BloomAPR: A Bloom's Taxonomy-based Framework for Assessing the Capabilities of LLM-Powered APR Solutions", "comment": "22 pages, 7 figures, Manuscript submitted to ACM Transactions on\n  Software Engineering and Methodology", "summary": "Recent advances in large language models (LLMs) have accelerated the\ndevelopment of AI-driven automated program repair (APR) solutions. However,\nthese solutions are typically evaluated using static benchmarks such as\nDefects4J and SWE-bench, which suffer from two key limitations: (1) the risk of\ndata contamination, potentially inflating evaluation results due to overlap\nwith LLM training data, and (2) limited ability to assess the APR capabilities\nin dynamic and diverse contexts. In this paper, we introduced BloomAPR, a novel\ndynamic evaluation framework grounded in Bloom's Taxonomy. Our framework offers\na structured approach to assess the cognitive capabilities of LLM-powered APR\nsolutions across progressively complex reasoning levels. Using Defects4J as a\ncase study, we evaluated two state-of-the-art LLM-powered APR solutions,\nChatRepair and CigaR, under three different LLMs: GPT-3.5-Turbo, Llama-3.1, and\nStarCoder-2. Our findings show that while these solutions exhibit basic\nreasoning skills and effectively memorize bug-fixing patterns (fixing up to\n81.57% of bugs at the Remember layer), their performance increases with\nsynthetically generated bugs (up to 60.66% increase at the Understand layer).\nHowever, they perform worse on minor syntactic changes (fixing up to 43.32% at\nthe Apply layer), and they struggle to repair similar bugs when injected into\nreal-world projects (solving only 13.46% to 41.34% bugs at the Analyze layer).\nThese results underscore the urgent need for evolving benchmarks and provide a\nfoundation for more trustworthy evaluation of LLM-powered software engineering\nsolutions.", "AI": {"tldr": "\u63d0\u51fa\u4e86BloomAPR\u8bc4\u4f30\u6846\u67b6\uff0c\u57fa\u4e8e\u5e03\u9c81\u59c6\u5206\u7c7b\u6cd5\u52a8\u6001\u8bc4\u4f30LLM\u9a71\u52a8\u7684\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u80fd\u529b\uff0c\u53d1\u73b0\u73b0\u6709\u65b9\u6cd5\u5728\u8bb0\u5fc6\u5c42\u9762\u8868\u73b0\u826f\u597d\u4f46\u9ad8\u7ea7\u63a8\u7406\u80fd\u529b\u4e0d\u8db3\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u9759\u6001\u57fa\u51c6\u7684\u8bc4\u4f30\u5b58\u5728\u6570\u636e\u6c61\u67d3\u98ce\u9669\uff0c\u4e14\u65e0\u6cd5\u8bc4\u4f30LLM\u5728\u52a8\u6001\u591a\u6837\u5316\u73af\u5883\u4e2d\u7684\u7a0b\u5e8f\u4fee\u590d\u80fd\u529b\u3002", "method": "\u57fa\u4e8e\u5e03\u9c81\u59c6\u5206\u7c7b\u6cd5\u6784\u5efa\u52a8\u6001\u8bc4\u4f30\u6846\u67b6\uff0c\u4f7f\u7528Defects4J\u4f5c\u4e3a\u6848\u4f8b\u7814\u7a76\uff0c\u8bc4\u4f30\u4e09\u79cdLLM\u5728\u4e24\u4e2a\u6700\u5148\u8fdbAPR\u89e3\u51b3\u65b9\u6848\u4e0a\u7684\u8868\u73b0\u3002", "result": "LLM\u9a71\u52a8\u7684APR\u89e3\u51b3\u65b9\u6848\u5728\u8bb0\u5fc6\u5c42\u9762\u4fee\u590d\u4e8681.57%\u7684bug\uff0c\u4f46\u5728\u5e94\u7528\u5c42\u9762\u4ec5\u4fee\u590d43.32%\uff0c\u5728\u5206\u6790\u5c42\u9762\u4ec5\u4fee\u590d13.46%-41.34%\u7684bug\u3002", "conclusion": "\u9700\u8981\u53d1\u5c55\u66f4\u5148\u8fdb\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u4e3aLLM\u9a71\u52a8\u7684\u8f6f\u4ef6\u5de5\u7a0b\u89e3\u51b3\u65b9\u6848\u63d0\u4f9b\u66f4\u53ef\u9760\u7684\u8bc4\u4f30\u57fa\u7840\u3002"}}
{"id": "2509.25514", "categories": ["cs.SE", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.25514", "abs": "https://arxiv.org/abs/2509.25514", "authors": ["Yonatan Gizachew Achamyeleh", "Tongtao Zhang", "Joshua Hyunki Kim", "Gabriel Garcia", "Shih-Yuan Yu", "Anton Kocheturov", "Mohammad Abdullah Al Faruque"], "title": "AGNOMIN -- Architecture Agnostic Multi-Label Function Name Prediction", "comment": null, "summary": "Function name prediction is crucial for understanding stripped binaries in\nsoftware reverse engineering, a key step for \\textbf{enabling subsequent\nvulnerability analysis and patching}. However, existing approaches often\nstruggle with architecture-specific limitations, data scarcity, and diverse\nnaming conventions. We present AGNOMIN, a novel architecture-agnostic approach\nfor multi-label function name prediction in stripped binaries. AGNOMIN builds\nFeature-Enriched Hierarchical Graphs (FEHGs), combining Control Flow Graphs,\nFunction Call Graphs, and dynamically learned \\texttt{PCode} features. A\nhierarchical graph neural network processes this enriched structure to generate\nconsistent function representations across architectures, vital for\n\\textbf{scalable security assessments}. For function name prediction, AGNOMIN\nemploys a Ren\\'ee-inspired decoder, enhanced with an attention-based head layer\nand algorithmic improvements.\n  We evaluate AGNOMIN on a comprehensive dataset of 9,000 ELF executable\nbinaries across three architectures, demonstrating its superior performance\ncompared to state-of-the-art approaches, with improvements of up to 27.17\\% in\nprecision and 55.86\\% in recall across the testing dataset. Moreover, AGNOMIN\ngeneralizes well to unseen architectures, achieving 5.89\\% higher recall than\nthe closest baseline. AGNOMIN's practical utility has been validated through\nsecurity hackathons, where it successfully aided reverse engineers in analyzing\nand patching vulnerable binaries across different architectures.", "AI": {"tldr": "AGNOMIN\u662f\u4e00\u79cd\u67b6\u6784\u65e0\u5173\u7684\u591a\u6807\u7b7e\u51fd\u6570\u540d\u9884\u6d4b\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u5efa\u7279\u5f81\u589e\u5f3a\u5c42\u6b21\u56fe\u548c\u4f7f\u7528\u5c42\u6b21\u56fe\u795e\u7ecf\u7f51\u7edc\uff0c\u5728\u5265\u79bb\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5b9e\u73b0\u8de8\u67b6\u6784\u7684\u51fd\u6570\u540d\u9884\u6d4b\uff0c\u663e\u8457\u63d0\u5347\u5b89\u5168\u8bc4\u4f30\u6548\u7387\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u5728\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u4e2d\u9762\u4e34\u67b6\u6784\u7279\u5b9a\u9650\u5236\u3001\u6570\u636e\u7a00\u7f3a\u548c\u547d\u540d\u89c4\u8303\u591a\u6837\u7684\u95ee\u9898\uff0c\u800c\u51fd\u6570\u540d\u9884\u6d4b\u5bf9\u4e8e\u540e\u7eed\u6f0f\u6d1e\u5206\u6790\u548c\u8865\u4e01\u81f3\u5173\u91cd\u8981\u3002", "method": "\u6784\u5efa\u7279\u5f81\u589e\u5f3a\u5c42\u6b21\u56fe\uff08FEHGs\uff09\uff0c\u7ed3\u5408\u63a7\u5236\u6d41\u56fe\u3001\u51fd\u6570\u8c03\u7528\u56fe\u548c\u52a8\u6001\u5b66\u4e60\u7684PCode\u7279\u5f81\uff0c\u4f7f\u7528\u5c42\u6b21\u56fe\u795e\u7ecf\u7f51\u7edc\u751f\u6210\u8de8\u67b6\u6784\u4e00\u81f4\u7684\u51fd\u6570\u8868\u793a\uff0c\u5e76\u91c7\u7528Ren\u00e9e\u542f\u53d1\u5f0f\u89e3\u7801\u5668\u8fdb\u884c\u51fd\u6570\u540d\u9884\u6d4b\u3002", "result": "\u57289,000\u4e2aELF\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0a\u8bc4\u4f30\uff0c\u76f8\u6bd4\u6700\u5148\u8fdb\u65b9\u6cd5\uff0c\u7cbe\u786e\u5ea6\u63d0\u5347\u9ad8\u8fbe27.17%\uff0c\u53ec\u56de\u7387\u63d0\u534755.86%\uff0c\u5728\u672a\u89c1\u67b6\u6784\u4e0a\u53ec\u56de\u7387\u6bd4\u6700\u63a5\u8fd1\u57fa\u7ebf\u9ad85.89%\u3002", "conclusion": "AGNOMIN\u5728\u5b89\u5168\u9ed1\u5ba2\u9a6c\u62c9\u677e\u4e2d\u9a8c\u8bc1\u4e86\u5176\u5b9e\u9645\u6548\u7528\uff0c\u6210\u529f\u5e2e\u52a9\u9006\u5411\u5de5\u7a0b\u5e08\u5206\u6790\u548c\u4fee\u8865\u4e0d\u540c\u67b6\u6784\u7684\u6613\u53d7\u653b\u51fb\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c55\u793a\u4e86\u826f\u597d\u7684\u6cdb\u5316\u80fd\u529b\u548c\u5b9e\u7528\u6027\u3002"}}
{"id": "2509.25625", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25625", "abs": "https://arxiv.org/abs/2509.25625", "authors": ["Luiza Martins de Freitas Cintra", "Philipp Zech", "Mohamad Kassab", "Eliomar Ara\u00fajo Lima", "Sofia Larissa da Costa Paiva", "Valdemar Vicente Graciano Neto"], "title": "M&SCheck: Towards a Checklist to Support Software Engineering Newcomers to the Modeling and Simulation Area", "comment": null, "summary": "The advent of increasingly complex and dynamic ecosystems, such as digital\ntwins (DT), smart cities and Industry 4.0 and 5.0, has made evident the need to\ninclude modeling and simulation (M&S) in the software development life cycle.\nSuch disruptive systems include simulation models in their own architecture\n(such as DT) or require the use of simulation models to represent the high\ndegree of movement and the multiplicity of interactions that occur between the\ninvolved systems. However, when software engineers (particularly the newcomers)\nneed to use M&S in their projects, they often pose themselves an important\nquestion: which formalism should I use? In this direction, the main\ncontribution of this paper is the establishment of a preliminary checklist with\nquestions to assist beginners in M&S in choosing the most appropriate paradigm\nto solve their problems. The checklist is based on three main formalisms: DEVS,\nSystem Dynamics and Agent-Based Simulation. A pilot study was carried out and\nan expert was consulted. The preliminary results show (i) conformance between\nthe suggestion given by the checklist and the formalism selected in the\noriginal studies used as input for evaluating the checklist, and (ii) a\npositive feedback from the expert.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u521d\u6b65\u68c0\u67e5\u6e05\u5355\uff0c\u5e2e\u52a9\u521d\u5b66\u8005\u5728\u5efa\u6a21\u4e0e\u4eff\u771f\u4e2d\u9009\u62e9\u6700\u5408\u9002\u7684\u8303\u5f0f\uff08DEVS\u3001\u7cfb\u7edf\u52a8\u529b\u5b66\u548c\u57fa\u4e8e\u4ee3\u7406\u7684\u4eff\u771f\uff09\uff0c\u4ee5\u89e3\u51b3\u590d\u6742\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u95ee\u9898\u3002", "motivation": "\u968f\u7740\u6570\u5b57\u5b6a\u751f\u3001\u667a\u6167\u57ce\u5e02\u548c\u5de5\u4e1a4.0/5.0\u7b49\u590d\u6742\u52a8\u6001\u751f\u6001\u7cfb\u7edf\u7684\u51fa\u73b0\uff0c\u9700\u8981\u5728\u8f6f\u4ef6\u5f00\u53d1\u5468\u671f\u4e2d\u878d\u5165\u5efa\u6a21\u4e0e\u4eff\u771f\u3002\u4f46\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7279\u522b\u662f\u65b0\u624b\u5728\u9009\u62e9\u5408\u9002\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\u65f6\u9762\u4e34\u56f0\u96be\u3002", "method": "\u57fa\u4e8eDEVS\u3001\u7cfb\u7edf\u52a8\u529b\u5b66\u548c\u57fa\u4e8e\u4ee3\u7406\u4eff\u771f\u4e09\u79cd\u4e3b\u8981\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u5efa\u7acb\u4e86\u4e00\u4e2a\u521d\u6b65\u68c0\u67e5\u6e05\u5355\uff0c\u5e76\u901a\u8fc7\u8bd5\u70b9\u7814\u7a76\u548c\u4e13\u5bb6\u54a8\u8be2\u8fdb\u884c\u8bc4\u4f30\u3002", "result": "\u521d\u6b65\u7ed3\u679c\u663e\u793a\uff1a(i) \u68c0\u67e5\u6e05\u5355\u7684\u5efa\u8bae\u4e0e\u539f\u59cb\u7814\u7a76\u4e2d\u9009\u7528\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\u4e00\u81f4\uff1b(ii) \u4e13\u5bb6\u53cd\u9988\u79ef\u6781\u3002", "conclusion": "\u8be5\u68c0\u67e5\u6e05\u5355\u4e3a\u5efa\u6a21\u4e0e\u4eff\u771f\u521d\u5b66\u8005\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u6307\u5bfc\u5de5\u5177\uff0c\u6709\u52a9\u4e8e\u9009\u62e9\u5408\u9002\u7684\u4eff\u771f\u8303\u5f0f\u6765\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u3002"}}
{"id": "2509.25676", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25676", "abs": "https://arxiv.org/abs/2509.25676", "authors": ["Fang Liu", "Tianze Wang", "Li Zhang", "Zheyu Yang", "Jing Jiang", "Zian Sun"], "title": "Explainable Fault Localization for Programming Assignments via LLM-Guided Annotation", "comment": "Accepted by ASE'2025", "summary": "Providing timely and personalized guidance for students' programming\nassignments, offers significant practical value for helping students complete\nassignments and enhance their learning. In recent years, various automated\nFault Localization (FL) techniques have demonstrated promising results in\nidentifying errors in programs. However, existing FL techniques face challenges\nwhen applied to educational contexts. Most approaches operate at the method\nlevel without explanatory feedback, resulting in granularity too coarse for\nstudents who need actionable insights to identify and fix their errors. While\nsome approaches attempt line-level fault localization, they often depend on\npredicting line numbers directly in numerical form, which is ill-suited to\nLLMs. To address these challenges, we propose FLAME, a fine-grained,\nexplainable Fault Localization method tailored for programming assignments via\nLLM-guided Annotation and Model Ensemble. FLAME leverages rich contextual\ninformation specific to programming assignments to guide LLMs in identifying\nfaulty code lines. Instead of directly predicting line numbers, we prompt the\nLLM to annotate faulty code lines with detailed explanations, enhancing both\nlocalization accuracy and educational value. To further improve reliability, we\nintroduce a weighted multi-model voting strategy that aggregates results from\nmultiple LLMs to determine the suspiciousness of each code line. Extensive\nexperimental results demonstrate that FLAME outperforms state-of-the-art fault\nlocalization baselines on programming assignments, successfully localizing 207\nmore faults at top-1 over the best-performing baseline. Beyond educational\ncontexts, FLAME also generalizes effectively to general-purpose software\ncodebases, outperforming all baselines on the Defects4J benchmark.", "AI": {"tldr": "FLAME\u662f\u4e00\u4e2a\u9488\u5bf9\u7f16\u7a0b\u4f5c\u4e1a\u7684\u7ec6\u7c92\u5ea6\u3001\u53ef\u89e3\u91ca\u7684\u6545\u969c\u5b9a\u4f4d\u65b9\u6cd5\uff0c\u901a\u8fc7LLM\u5f15\u5bfc\u7684\u6807\u6ce8\u548c\u6a21\u578b\u96c6\u6210\u6765\u63d0\u9ad8\u6545\u969c\u5b9a\u4f4d\u7684\u51c6\u786e\u6027\u548c\u6559\u80b2\u4ef7\u503c\u3002", "motivation": "\u73b0\u6709\u6545\u969c\u5b9a\u4f4d\u6280\u672f\u5728\u6559\u80b2\u73af\u5883\u4e2d\u9762\u4e34\u6311\u6218\uff1a\u5927\u591a\u6570\u65b9\u6cd5\u5728\u65b9\u6cd5\u7ea7\u522b\u64cd\u4f5c\u4e14\u7f3a\u4e4f\u89e3\u91ca\u6027\u53cd\u9988\uff0c\u7c92\u5ea6\u592a\u7c97\uff1b\u800c\u4e00\u4e9b\u884c\u7ea7\u65b9\u6cd5\u76f4\u63a5\u9884\u6d4b\u884c\u53f7\uff0c\u4e0d\u9002\u5408LLM\u3002\u9700\u8981\u4e3a\u7f16\u7a0b\u4f5c\u4e1a\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u3001\u53ef\u89e3\u91ca\u7684\u6545\u969c\u5b9a\u4f4d\u3002", "method": "FLAME\u5229\u7528\u7f16\u7a0b\u4f5c\u4e1a\u7684\u4e30\u5bcc\u4e0a\u4e0b\u6587\u4fe1\u606f\u5f15\u5bfcLLM\u8bc6\u522b\u9519\u8bef\u4ee3\u7801\u884c\uff0c\u901a\u8fc7\u6807\u6ce8\u800c\u975e\u76f4\u63a5\u9884\u6d4b\u884c\u53f7\u7684\u65b9\u5f0f\uff0c\u7ed3\u5408\u8be6\u7ec6\u89e3\u91ca\u3002\u91c7\u7528\u52a0\u6743\u591a\u6a21\u578b\u6295\u7968\u7b56\u7565\u805a\u5408\u591a\u4e2aLLM\u7684\u7ed3\u679c\u6765\u786e\u5b9a\u6bcf\u884c\u4ee3\u7801\u7684\u53ef\u7591\u5ea6\u3002", "result": "\u5728\u7f16\u7a0b\u4f5c\u4e1a\u4e0a\uff0cFLAME\u4f18\u4e8e\u6700\u5148\u8fdb\u7684\u6545\u969c\u5b9a\u4f4d\u57fa\u7ebf\u65b9\u6cd5\uff0c\u5728top-1\u4f4d\u7f6e\u6210\u529f\u5b9a\u4f4d\u4e86\u6bd4\u6700\u4f73\u57fa\u7ebf\u591a207\u4e2a\u6545\u969c\u3002\u5728Defects4J\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u4e5f\u4f18\u4e8e\u6240\u6709\u57fa\u7ebf\u65b9\u6cd5\u3002", "conclusion": "FLAME\u4e3a\u7f16\u7a0b\u4f5c\u4e1a\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u7ec6\u7c92\u5ea6\u6545\u969c\u5b9a\u4f4d\uff0c\u4e0d\u4ec5\u5728\u6559\u80b2\u73af\u5883\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u8fd8\u80fd\u6709\u6548\u6cdb\u5316\u5230\u901a\u7528\u8f6f\u4ef6\u4ee3\u7801\u5e93\u3002"}}
{"id": "2509.25716", "categories": ["cs.SE", "cs.AI", "cs.IR"], "pdf": "https://arxiv.org/pdf/2509.25716", "abs": "https://arxiv.org/abs/2509.25716", "authors": ["Esakkivel Esakkiraja", "Denis Akhiyarov", "Aditya Shanmugham", "Chitra Ganapathy"], "title": "DeepCodeSeek: Real-Time API Retrieval for Context-Aware Code Generation", "comment": "Retrieval-Augmented Generation, API Prediction, Context-Aware Code\n  Generation, Enterprise Code Completion, Reinforcement Learning, ServiceNow,\n  Real-Time Code Search, Query Enhancement, Fine-Tuning, Embedding, Reranker", "summary": "Current search techniques are limited to standard RAG query-document\napplications. In this paper, we propose a novel technique to expand the code\nand index for predicting the required APIs, directly enabling high-quality,\nend-to-end code generation for auto-completion and agentic AI applications. We\naddress the problem of API leaks in current code-to-code benchmark datasets by\nintroducing a new dataset built from real-world ServiceNow Script Includes that\ncapture the challenge of unclear API usage intent in the code. Our evaluation\nmetrics show that this method achieves 87.86% top-40 retrieval accuracy,\nallowing the critical context with APIs needed for successful downstream code\ngeneration. To enable real-time predictions, we develop a comprehensive\npost-training pipeline that optimizes a compact 0.6B reranker through synthetic\ndataset generation, supervised fine-tuning, and reinforcement learning. This\napproach enables our compact reranker to outperform a much larger 8B model\nwhile maintaining 2.5x reduced latency, effectively addressing the nuances of\nenterprise-specific code without the computational overhead of larger models.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u4ee3\u7801\u751f\u6210\u6280\u672f\uff0c\u901a\u8fc7\u6269\u5c55\u4ee3\u7801\u7d22\u5f15\u6765\u9884\u6d4b\u6240\u9700API\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u4ee3\u7801\u57fa\u51c6\u6570\u636e\u96c6\u4e2d\u7684API\u6cc4\u9732\u95ee\u9898\uff0c\u5e76\u5f00\u53d1\u4e86\u9ad8\u6548\u76840.6B\u91cd\u6392\u5668\uff0c\u5728\u4fdd\u6301\u4f4e\u5ef6\u8fdf\u7684\u540c\u65f6\u8d85\u8d8a\u66f4\u5927\u6a21\u578b\u6027\u80fd\u3002", "motivation": "\u5f53\u524d\u641c\u7d22\u6280\u672f\u4ec5\u9650\u4e8e\u6807\u51c6RAG\u67e5\u8be2-\u6587\u6863\u5e94\u7528\uff0c\u65e0\u6cd5\u6709\u6548\u5904\u7406\u4ee3\u7801\u751f\u6210\u4e2dAPI\u4f7f\u7528\u610f\u56fe\u4e0d\u660e\u786e\u7684\u95ee\u9898\uff0c\u4e14\u73b0\u6709\u57fa\u51c6\u6570\u636e\u96c6\u5b58\u5728API\u6cc4\u9732\u95ee\u9898\u3002", "method": "\u5f15\u5165\u57fa\u4e8e\u771f\u5b9eServiceNow\u811a\u672c\u7684\u65b0\u6570\u636e\u96c6\uff0c\u5f00\u53d1\u5305\u542b\u5408\u6210\u6570\u636e\u96c6\u751f\u6210\u3001\u76d1\u7763\u5fae\u8c03\u548c\u5f3a\u5316\u5b66\u4e60\u7684\u5b8c\u6574\u540e\u8bad\u7ec3\u6d41\u7a0b\uff0c\u4f18\u5316\u7d27\u51d1\u76840.6B\u91cd\u6392\u5668\u3002", "result": "\u8fbe\u523087.86%\u7684top-40\u68c0\u7d22\u51c6\u786e\u7387\uff0c\u7d27\u51d1\u91cd\u6392\u5668\u6027\u80fd\u8d85\u8d8a8B\u6a21\u578b\uff0c\u540c\u65f6\u5ef6\u8fdf\u964d\u4f4e2.5\u500d\uff0c\u6709\u6548\u5904\u7406\u4f01\u4e1a\u7279\u5b9a\u4ee3\u7801\u7684\u7ec6\u5fae\u5dee\u522b\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6210\u529f\u89e3\u51b3\u4e86API\u4f7f\u7528\u610f\u56fe\u4e0d\u660e\u786e\u7684\u95ee\u9898\uff0c\u4e3a\u81ea\u52a8\u8865\u5168\u548c\u667a\u80fdAI\u5e94\u7528\u63d0\u4f9b\u4e86\u9ad8\u8d28\u91cf\u7684\u7aef\u5230\u7aef\u4ee3\u7801\u751f\u6210\u80fd\u529b\uff0c\u4e14\u8ba1\u7b97\u5f00\u9500\u663e\u8457\u964d\u4f4e\u3002"}}
{"id": "2509.25754", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25754", "abs": "https://arxiv.org/abs/2509.25754", "authors": ["Ajmain Inqiad Alam", "Palash Roy", "Farouq Al-omari", "Chanchal Roy", "Banani Roy", "Kevin Schneider"], "title": "Are Classical Clone Detectors Good Enough For the AI Era?", "comment": null, "summary": "The increasing adoption of AI-generated code has reshaped modern software\ndevelopment, introducing syntactic and semantic variations in cloned code.\nUnlike traditional human-written clones, AI-generated clones exhibit systematic\nsyntactic patterns and semantic differences learned from large-scale training\ndata. This shift presents new challenges for classical code clone detection\n(CCD) tools, which have historically been validated primarily on human-authored\ncodebases and optimized to detect syntactic (Type 1-3) and limited semantic\nclones. Given that AI-generated code can produce both syntactic and complex\nsemantic clones, it is essential to evaluate the effectiveness of classical CCD\ntools within this new paradigm. In this paper, we systematically evaluate nine\nwidely used CCD tools using GPTCloneBench, a benchmark containing\nGPT-3-generated clones. To contextualize and validate our results, we further\ntest these detectors on established human-authored benchmarks, BigCloneBench\nand SemanticCloneBench, to measure differences in performance between\ntraditional and AI-generated clones. Our analysis demonstrates that classical\nCCD tools, particularly those enhanced by effective normalization techniques,\nretain considerable effectiveness against AI-generated clones, while some\nexhibit notable performance variation compared to traditional benchmarks. This\npaper contributes by (1) evaluating classical CCD tools against AI-generated\nclones, providing critical insights into their current strengths and\nlimitations; (2) highlighting the role of normalization techniques in improving\ndetection accuracy; and (3) delivering detailed scalability and execution-time\nanalyses to support practical CCD tool selection.", "AI": {"tldr": "\u8bc4\u4f309\u79cd\u7ecf\u5178\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u5de5\u5177\u5728AI\u751f\u6210\u4ee3\u7801\u4e0a\u7684\u6709\u6548\u6027\uff0c\u53d1\u73b0\u7ecf\u8fc7\u6709\u6548\u89c4\u8303\u5316\u6280\u672f\u589e\u5f3a\u7684\u5de5\u5177\u4ecd\u80fd\u4fdd\u6301\u76f8\u5f53\u6548\u679c\uff0c\u4f46\u4e0e\u4f20\u7edf\u57fa\u51c6\u76f8\u6bd4\u5b58\u5728\u6027\u80fd\u5dee\u5f02\u3002", "motivation": "AI\u751f\u6210\u4ee3\u7801\u7684\u666e\u53ca\u5f15\u5165\u4e86\u8bed\u6cd5\u548c\u8bed\u4e49\u53d8\u4f53\uff0c\u5bf9\u4f20\u7edf\u4e3b\u8981\u9488\u5bf9\u4eba\u5de5\u7f16\u5199\u4ee3\u7801\u4f18\u5316\u7684\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u5de5\u5177\u63d0\u51fa\u4e86\u65b0\u6311\u6218\u3002", "method": "\u4f7f\u7528GPTCloneBench\u57fa\u51c6\u6d4b\u8bd59\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684CCD\u5de5\u5177\uff0c\u5e76\u5728BigCloneBench\u548cSemanticCloneBench\u7b49\u4f20\u7edf\u57fa\u51c6\u4e0a\u8fdb\u884c\u5bf9\u6bd4\u9a8c\u8bc1\u3002", "result": "\u7ecf\u5178CCD\u5de5\u5177\u7279\u522b\u662f\u7ecf\u8fc7\u89c4\u8303\u5316\u6280\u672f\u589e\u5f3a\u7684\u5de5\u5177\u5bf9AI\u751f\u6210\u514b\u9686\u4ecd\u4fdd\u6301\u76f8\u5f53\u6709\u6548\u6027\uff0c\u4f46\u4e0e\u4f20\u7edf\u57fa\u51c6\u76f8\u6bd4\u6027\u80fd\u5b58\u5728\u5dee\u5f02\u3002", "conclusion": "\u89c4\u8303\u5316\u6280\u672f\u5728\u63d0\u9ad8\u68c0\u6d4b\u51c6\u786e\u6027\u4e2d\u53d1\u6325\u91cd\u8981\u4f5c\u7528\uff0c\u7814\u7a76\u4e3a\u5b9e\u9645CCD\u5de5\u5177\u9009\u62e9\u63d0\u4f9b\u4e86\u8be6\u7ec6\u7684\u53ef\u6269\u5c55\u6027\u548c\u6267\u884c\u65f6\u95f4\u5206\u6790\u3002"}}
{"id": "2509.25874", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25874", "abs": "https://arxiv.org/abs/2509.25874", "authors": ["Zhihan Jiang", "Jinyang Liu", "Yichen Li", "Haiyu Huang", "Xiao He", "Tieying Zhang", "Jianjun Chen", "Yi Li", "Rui Shi", "Michael R. Lyu"], "title": "LogPilot: Intent-aware and Scalable Alert Diagnosis for Large-scale Online Service Systems", "comment": "Accepted by the 40th IEEE/ACM International Conference on Automated\n  Software Engineering (ASE 2025)", "summary": "Effective alert diagnosis is essential for ensuring the reliability of\nlarge-scale online service systems. However, on-call engineers are often\nburdened with manually inspecting massive volumes of logs to identify root\ncauses. While various automated tools have been proposed, they struggle in\npractice due to alert-agnostic log scoping and the inability to organize\ncomplex data effectively for reasoning. To overcome these limitations, we\nintroduce LogPilot, an intent-aware and scalable framework powered by Large\nLanguage Models (LLMs) for automated log-based alert diagnosis. LogPilot\nintroduces an intent-aware approach, interpreting the logic in alert\ndefinitions (e.g., PromQL) to precisely identify causally related logs and\nrequests. To achieve scalability, it reconstructs each request's execution into\na spatiotemporal log chain, clusters similar chains to identify recurring\nexecution patterns, and provides representative samples to the LLMs for\ndiagnosis. This clustering-based approach ensures the input is both rich in\ndiagnostic detail and compact enough to fit within the LLM's context window.\nEvaluated on real-world alerts from Volcano Engine Cloud, LogPilot improves the\nusefulness of root cause summarization by 50.34% and exact localization\naccuracy by 54.79% over state-of-the-art methods. With a diagnosis time under\none minute and a cost of only $0.074 per alert, LogPilot has been successfully\ndeployed in production, offering an automated and practical solution for\nservice alert diagnosis.", "AI": {"tldr": "LogPilot\u662f\u4e00\u4e2a\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u81ea\u52a8\u5316\u65e5\u5fd7\u8bca\u65ad\u6846\u67b6\uff0c\u901a\u8fc7\u610f\u56fe\u611f\u77e5\u548c\u53ef\u6269\u5c55\u7684\u65b9\u6cd5\u89e3\u51b3\u5927\u89c4\u6a21\u5728\u7ebf\u670d\u52a1\u7cfb\u7edf\u4e2d\u7684\u544a\u8b66\u8bca\u65ad\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6839\u56e0\u5b9a\u4f4d\u7684\u51c6\u786e\u6027\u548c\u5b9e\u7528\u6027\u3002", "motivation": "\u73b0\u6709\u7684\u81ea\u52a8\u5316\u5de5\u5177\u5728\u544a\u8b66\u8bca\u65ad\u4e2d\u5b58\u5728\u5c40\u9650\u6027\uff1a\u544a\u8b66\u65e0\u5173\u7684\u65e5\u5fd7\u8303\u56f4\u754c\u5b9a\u4e0d\u51c6\u786e\uff0c\u65e0\u6cd5\u6709\u6548\u7ec4\u7ec7\u590d\u6742\u6570\u636e\u4ee5\u652f\u6301\u63a8\u7406\u3002\u503c\u73ed\u5de5\u7a0b\u5e08\u9700\u8981\u624b\u52a8\u68c0\u67e5\u5927\u91cf\u65e5\u5fd7\u6765\u5b9a\u4f4d\u6839\u56e0\uff0c\u8d1f\u62c5\u6c89\u91cd\u3002", "method": "LogPilot\u91c7\u7528\u610f\u56fe\u611f\u77e5\u65b9\u6cd5\u89e3\u6790\u544a\u8b66\u5b9a\u4e49\u903b\u8f91\uff0c\u7cbe\u786e\u8bc6\u522b\u56e0\u679c\u76f8\u5173\u7684\u65e5\u5fd7\u548c\u8bf7\u6c42\u3002\u901a\u8fc7\u5c06\u8bf7\u6c42\u6267\u884c\u91cd\u6784\u4e3a\u65f6\u7a7a\u65e5\u5fd7\u94fe\uff0c\u805a\u7c7b\u76f8\u4f3c\u94fe\u4ee5\u8bc6\u522b\u91cd\u590d\u6267\u884c\u6a21\u5f0f\uff0c\u5e76\u4e3aLLM\u63d0\u4f9b\u4ee3\u8868\u6027\u6837\u672c\u8fdb\u884c\u8bca\u65ad\u3002", "result": "\u5728\u706b\u5c71\u5f15\u64ce\u4e91\u7684\u771f\u5b9e\u544a\u8b66\u8bc4\u4f30\u4e2d\uff0cLogPilot\u5c06\u6839\u56e0\u603b\u7ed3\u7684\u6709\u7528\u6027\u63d0\u5347\u4e8650.34%\uff0c\u7cbe\u786e\u5b9a\u4f4d\u51c6\u786e\u7387\u63d0\u5347\u4e8654.79%\u3002\u8bca\u65ad\u65f6\u95f4\u4f4e\u4e8e1\u5206\u949f\uff0c\u6bcf\u4e2a\u544a\u8b66\u6210\u672c\u4ec50.074\u7f8e\u5143\uff0c\u5df2\u6210\u529f\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u3002", "conclusion": "LogPilot\u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u5316\u4e14\u5b9e\u7528\u7684\u670d\u52a1\u544a\u8b66\u8bca\u65ad\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u805a\u7c7b\u65b9\u6cd5\u786e\u4fdd\u8f93\u5165\u65e2\u5305\u542b\u4e30\u5bcc\u7684\u8bca\u65ad\u7ec6\u8282\u53c8\u8db3\u591f\u7d27\u51d1\u4ee5\u9002\u5e94LLM\u7684\u4e0a\u4e0b\u6587\u7a97\u53e3\u3002"}}
{"id": "2509.25894", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.25894", "abs": "https://arxiv.org/abs/2509.25894", "authors": ["Simin Chen", "Yixin He", "Suman Jana", "Baishakhi Ray"], "title": "Red Teaming Program Repair Agents: When Correct Patches can Hide Vulnerabilities", "comment": null, "summary": "LLM-based agents are increasingly deployed for software maintenance tasks\nsuch as automated program repair (APR). APR agents automatically fetch GitHub\nissues and use backend LLMs to generate patches that fix the reported bugs.\nHowever, existing work primarily focuses on the functional correctness of\nAPR-generated patches, whether they pass hidden or regression tests, while\nlargely ignoring potential security risks. Given the openness of platforms like\nGitHub, where any user can raise issues and participate in discussions, an\nimportant question arises: Can an adversarial user submit a valid issue on\nGitHub that misleads an LLM-based agent into generating a functionally correct\nbut vulnerable patch? To answer this question, we propose SWExploit, which\ngenerates adversarial issue statements designed to make APR agents produce\npatches that are functionally correct yet vulnerable. SWExploit operates in\nthree main steps: (1) program analysis to identify potential injection points\nfor vulnerable payloads; (2) adversarial issue generation to provide misleading\nreproduction and error information while preserving the original issue\nsemantics; and (3) iterative refinement of the adversarial issue statements\nbased on the outputs of the APR agents. Empirical evaluation on three agent\npipelines and five backend LLMs shows that SWExploit can produce patches that\nare both functionally correct and vulnerable (the attack success rate on the\ncorrect patch could reach 0.91, whereas the baseline ASRs are all below 0.20).\nBased on our evaluation, we are the first to challenge the traditional\nassumption that a patch passing all tests is inherently reliable and secure,\nhighlighting critical limitations in the current evaluation paradigm for APR\nagents.", "AI": {"tldr": "SWExploit\u662f\u4e00\u79cd\u9488\u5bf9LLM\u9a71\u52a8\u7684\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u4ee3\u7406\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u901a\u8fc7\u751f\u6210\u5bf9\u6297\u6027\u95ee\u9898\u63cf\u8ff0\uff0c\u8bf1\u5bfc\u4ee3\u7406\u751f\u6210\u529f\u80fd\u6b63\u786e\u4f46\u5b58\u5728\u6f0f\u6d1e\u7684\u8865\u4e01\u3002", "motivation": "\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u5173\u6ce8\u81ea\u52a8\u7a0b\u5e8f\u4fee\u590d\u751f\u6210\u8865\u4e01\u7684\u529f\u80fd\u6b63\u786e\u6027\uff0c\u800c\u5ffd\u89c6\u4e86\u6f5c\u5728\u7684\u5b89\u5168\u98ce\u9669\u3002\u7531\u4e8eGitHub\u7b49\u5e73\u53f0\u7684\u5f00\u653e\u6027\uff0c\u6076\u610f\u7528\u6237\u53ef\u80fd\u63d0\u4ea4\u6709\u6548\u95ee\u9898\u8bef\u5bfcLLM\u4ee3\u7406\u751f\u6210\u529f\u80fd\u6b63\u786e\u4f46\u6613\u53d7\u653b\u51fb\u7684\u8865\u4e01\u3002", "method": "SWExploit\u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff1a\u7a0b\u5e8f\u5206\u6790\u8bc6\u522b\u6f0f\u6d1e\u6ce8\u5165\u70b9\uff1b\u5bf9\u6297\u6027\u95ee\u9898\u751f\u6210\uff0c\u5728\u4fdd\u6301\u539f\u59cb\u95ee\u9898\u8bed\u4e49\u7684\u540c\u65f6\u63d0\u4f9b\u8bef\u5bfc\u6027\u91cd\u73b0\u548c\u9519\u8bef\u4fe1\u606f\uff1b\u57fa\u4e8eAPR\u4ee3\u7406\u8f93\u51fa\u7684\u8fed\u4ee3\u4f18\u5316\u3002", "result": "\u5728\u4e09\u4e2a\u4ee3\u7406\u6d41\u6c34\u7ebf\u548c\u4e94\u4e2a\u540e\u7aefLLM\u4e0a\u7684\u5b9e\u8bc1\u8bc4\u4f30\u663e\u793a\uff0cSWExploit\u80fd\u751f\u6210\u529f\u80fd\u6b63\u786e\u4e14\u5b58\u5728\u6f0f\u6d1e\u7684\u8865\u4e01\uff0c\u653b\u51fb\u6210\u529f\u7387\u53ef\u8fbe0.91\uff0c\u800c\u57fa\u7ebf\u653b\u51fb\u6210\u529f\u7387\u5747\u4f4e\u4e8e0.20\u3002", "conclusion": "\u8be5\u7814\u7a76\u9996\u6b21\u6311\u6218\u4e86\u4f20\u7edf\u5047\u8bbe\u2014\u2014\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u7684\u8865\u4e01\u5929\u751f\u53ef\u9760\u5b89\u5168\uff0c\u7a81\u663e\u4e86\u5f53\u524dAPR\u4ee3\u7406\u8bc4\u4f30\u8303\u5f0f\u7684\u5173\u952e\u5c40\u9650\u6027\u3002"}}
{"id": "2509.25987", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.25987", "abs": "https://arxiv.org/abs/2509.25987", "authors": ["Yilun Liu", "Ziang Chen", "Song Xu", "Minggui He", "Shimin Tao", "Weibin Meng", "Yuming Xie", "Tao Han", "Chunguang Zhao", "Jingzhou Du", "Daimeng Wei", "Shenglin Zhang", "Yongqian Sun"], "title": "R-Log: Incentivizing Log Analysis Capability in LLMs via Reasoning-based Reinforcement Learning", "comment": null, "summary": "The growing complexity of log data in modern software systems has prompted\nthe use of Large Language Models (LLMs) for automated log analysis. Current\napproaches typically rely on direct supervised fine-tuning (SFT) on log-label\npairs. However, this exacerbates the domain discrepancy between general-purpose\nLLMs and specialized log data, causing overfitting. Furthermore, SFT's\nimbalanced loss computation often allows lengthy contexts to overwhelm\ncritical, concise details in model answers, leading to hallucinations. To\naddress these limitations, we propose R-Log, a novel reasoning-based paradigm\nthat mirrors the structured, step-by-step analytical process of human\nengineers. This approach enhances generalizability by learning the underlying\nrules behind conclusions. We further employ Reinforcement Learning (RL) to\noptimize the model within a simulated O&M environment, thereby reducing\nhallucinations by directly rewarding correct outcomes. R-Log is first\ncold-started on a curated dataset of 2k+ reasoning trajectories, guided by 13\nstrategies from manual O&M practices, to establish an initial reasoning\ncapability. This ability is then refined via RL using a joint reward function.\nEmpirical evaluations on real-world logs show that R-Log outperforms existing\nmethods across five log analysis tasks, particularly in unseen scenarios (by\n228.05%). We also designed R-Log-fast with 5x speedup while keeping 93% of the\nefficacy.", "AI": {"tldr": "R-Log\u662f\u4e00\u4e2a\u57fa\u4e8e\u63a8\u7406\u7684\u65e5\u5fd7\u5206\u6790\u65b0\u8303\u5f0f\uff0c\u901a\u8fc7\u6a21\u62df\u4eba\u7c7b\u5de5\u7a0b\u5e08\u7684\u7ed3\u6784\u5316\u5206\u6790\u8fc7\u7a0b\uff0c\u7ed3\u5408\u5f3a\u5316\u5b66\u4e60\u6765\u63d0\u5347\u6cdb\u5316\u80fd\u529b\u5e76\u51cf\u5c11\u5e7b\u89c9\u95ee\u9898\u3002", "motivation": "\u5f53\u524d\u57fa\u4e8e\u76d1\u7763\u5fae\u8c03\u7684\u65b9\u6cd5\u5b58\u5728\u9886\u57df\u5dee\u5f02\u5bfc\u81f4\u7684\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u4ee5\u53ca\u957f\u4e0a\u4e0b\u6587\u6df9\u6ca1\u5173\u952e\u7ec6\u8282\u9020\u6210\u7684\u5e7b\u89c9\u95ee\u9898\uff0c\u9700\u8981\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u63d0\u51faR-Log\u63a8\u7406\u8303\u5f0f\uff0c\u9996\u5148\u57282000+\u63a8\u7406\u8f68\u8ff9\u6570\u636e\u96c6\u4e0a\u51b7\u542f\u52a8\uff0c\u57fa\u4e8e13\u79cd\u8fd0\u7ef4\u7b56\u7565\u5efa\u7acb\u521d\u59cb\u63a8\u7406\u80fd\u529b\uff0c\u7136\u540e\u901a\u8fc7\u5f3a\u5316\u5b66\u4e60\u5728\u6a21\u62df\u8fd0\u7ef4\u73af\u5883\u4e2d\u4f18\u5316\u6a21\u578b\u3002", "result": "\u5728\u771f\u5b9e\u65e5\u5fd7\u4e0a\u7684\u5b9e\u8bc1\u8bc4\u4f30\u663e\u793a\uff0cR-Log\u5728\u4e94\u4e2a\u65e5\u5fd7\u5206\u6790\u4efb\u52a1\u4e2d\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\uff0c\u7279\u522b\u662f\u5728\u672a\u89c1\u573a\u666f\u4e0b\u6027\u80fd\u63d0\u5347228.05%\u3002R-Log-fast\u7248\u672c\u5b9e\u73b0\u4e865\u500d\u52a0\u901f\u540c\u65f6\u4fdd\u630193%\u6548\u80fd\u3002", "conclusion": "R-Log\u901a\u8fc7\u63a8\u7406\u5f0f\u5206\u6790\u548c\u5f3a\u5316\u5b66\u4e60\u6709\u6548\u89e3\u51b3\u4e86\u4f20\u7edf\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u5728\u65e5\u5fd7\u5206\u6790\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u4f18\u5f02\u7684\u6cdb\u5316\u6027\u80fd\u548c\u51c6\u786e\u6027\u3002"}}
{"id": "2509.26014", "categories": ["cs.SE", "cs.IR"], "pdf": "https://arxiv.org/pdf/2509.26014", "abs": "https://arxiv.org/abs/2509.26014", "authors": ["Joel Garcia-Escribano", "Arkaitz Carbajo", "Mikel Ega\u00f1a Aranguren", "Unai Lopez-Novoa"], "title": "Using GPT to build a Project Management assistant for Jira environments", "comment": null, "summary": "In the domain of Project Management, the sheer volume of data is a challenge\nthat project managers continually have to deal with. Effectively steering\nprojects from inception to completion requires handling of diverse information\nstreams, including timelines, budgetary considerations, and task dependencies.\nTo navigate this data-driven landscape with precision and agility, project\nmanagers must rely on efficient and sophisticated tools. These tools have\nbecome essential, as they enable project managers to streamline communication,\noptimize resource allocation, and make informed decisions in real-time.\nHowever, many of these tools have steep learning curves and require using\ncomplex programming languages to retrieve the exact data that project managers\nneed. In this work we present JiraGPT Next, a software that uses the GPT Large\nLanguage Model to ease the process by which project managers deal with large\namounts of data. It is conceived as an add-on for Jira, one of the most popular\nProject Management tools, and provides a natural language interface to retrieve\ninformation. This work presents the design decisions behind JiraGPT Next and an\nevaluation of the accuracy of GPT in this context, including the effects of\nproviding different prompts to complete a particular task.", "AI": {"tldr": "JiraGPT Next\u662f\u4e00\u4e2a\u57fa\u4e8eGPT\u5927\u8bed\u8a00\u6a21\u578b\u7684Jira\u63d2\u4ef6\uff0c\u4e3a\u9879\u76ee\u7ecf\u7406\u63d0\u4f9b\u81ea\u7136\u8bed\u8a00\u754c\u9762\u6765\u7b80\u5316\u6570\u636e\u68c0\u7d22\u8fc7\u7a0b\u3002", "motivation": "\u9879\u76ee\u7ba1\u7406\u5de5\u5177\u901a\u5e38\u5b66\u4e60\u66f2\u7ebf\u9661\u5ced\u4e14\u9700\u8981\u590d\u6742\u7f16\u7a0b\u8bed\u8a00\u6765\u83b7\u53d6\u6570\u636e\uff0c\u9879\u76ee\u7ecf\u7406\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\u9762\u4e34\u6311\u6218\u3002", "method": "\u5f00\u53d1Jira\u4f5c\u4e3a\u63d2\u4ef6\u7684\u8f6f\u4ef6\uff0c\u5229\u7528GPT\u5927\u8bed\u8a00\u6a21\u578b\u63d0\u4f9b\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u63a5\u53e3\uff0c\u8bc4\u4f30\u4e0d\u540c\u63d0\u793a\u5bf9\u4efb\u52a1\u5b8c\u6210\u51c6\u786e\u6027\u7684\u5f71\u54cd\u3002", "result": "\u8be5\u5de5\u5177\u80fd\u591f\u7b80\u5316\u9879\u76ee\u7ecf\u7406\u7684\u6570\u636e\u68c0\u7d22\u8fc7\u7a0b\uff0c\u901a\u8fc7\u81ea\u7136\u8bed\u8a00\u754c\u9762\u63d0\u9ad8\u6570\u636e\u8bbf\u95ee\u6548\u7387\u3002", "conclusion": "JiraGPT Next\u901a\u8fc7\u96c6\u6210GPT\u6a21\u578b\u4e3a\u9879\u76ee\u7ba1\u7406\u5de5\u5177\u63d0\u4f9b\u4e86\u66f4\u6613\u7528\u7684\u81ea\u7136\u8bed\u8a00\u4ea4\u4e92\u65b9\u5f0f\uff0c\u964d\u4f4e\u4e86\u6570\u636e\u68c0\u7d22\u7684\u6280\u672f\u95e8\u69db\u3002"}}
{"id": "2509.26031", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26031", "abs": "https://arxiv.org/abs/2509.26031", "authors": ["Hina Anwar", "Dietmar Pfahl", "Satish N. Srirama"], "title": "Evaluating the impact of code smell refactoring on the energy consumption of Android applications", "comment": null, "summary": "Energy consumption of mobile apps is a domain that is receiving a lot of\nattention from researchers. Recent studies indicate that the energy consumption\nof mobile devices could be improved by improving the quality of mobile apps.\nFrequent refactoring is one way of achieving this goal. In this paper, we\nexplore the performance and energy impact of several common code refactorings\nin Android apps. Experimental results indicate that some code smell\nrefactorings positively impact the energy consumption of Android apps.\nRefactoring of the code smells \"Duplicated code\" and \"Type checking\" reduce\nenergy consumption by up to 10.8%. Significant reduction in energy consumption,\nhowever, does not seem to be directly related to the increase or decrease of\nexecution time. In addition, the energy impact over permutations of code smell\nrefactorings in the selected Android apps was small. When analyzing the order\nin which refactorings were made across code smell types, it turned out that\nsome permutations resulted in a reduction and some in an increase of energy\nconsumption for the analyzed apps. More research needs to be done to\ninvestigate how factors like size and age of software apps, experience, and\nnumber of contributors to app development correlate with (a) the number and\ntype of code smells found and (b) the impact of energy consumption and\nperformance after refactoring.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86Android\u5e94\u7528\u4e2d\u5e38\u89c1\u4ee3\u7801\u91cd\u6784\u5bf9\u6027\u80fd\u548c\u80fd\u8017\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u91cd\u590d\u4ee3\u7801\u548c\u7c7b\u578b\u68c0\u67e5\u91cd\u6784\u53ef\u964d\u4f4e\u80fd\u8017\u8fbe10.8%\uff0c\u4f46\u80fd\u8017\u51cf\u5c11\u4e0e\u6267\u884c\u65f6\u95f4\u53d8\u5316\u65e0\u76f4\u63a5\u5173\u7cfb\u3002", "motivation": "\u79fb\u52a8\u5e94\u7528\u80fd\u8017\u95ee\u9898\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\uff0c\u7814\u7a76\u8868\u660e\u901a\u8fc7\u63d0\u9ad8\u5e94\u7528\u8d28\u91cf\u53ef\u6539\u5584\u79fb\u52a8\u8bbe\u5907\u80fd\u8017\uff0c\u9891\u7e41\u91cd\u6784\u662f\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002", "method": "\u901a\u8fc7\u5b9e\u9a8c\u5206\u6790Android\u5e94\u7528\u4e2d\u51e0\u79cd\u5e38\u89c1\u4ee3\u7801\u91cd\u6784\u7684\u6027\u80fd\u548c\u80fd\u8017\u5f71\u54cd\uff0c\u5305\u62ec\u91cd\u590d\u4ee3\u7801\u548c\u7c7b\u578b\u68c0\u67e5\u7b49\u4ee3\u7801\u574f\u5473\u91cd\u6784\u3002", "result": "\u67d0\u4e9b\u4ee3\u7801\u574f\u5473\u91cd\u6784\u5bf9Android\u5e94\u7528\u80fd\u8017\u6709\u79ef\u6781\u5f71\u54cd\uff0c\u91cd\u590d\u4ee3\u7801\u548c\u7c7b\u578b\u68c0\u67e5\u91cd\u6784\u53ef\u964d\u4f4e\u80fd\u8017\u8fbe10.8%\uff0c\u4f46\u80fd\u8017\u51cf\u5c11\u4e0e\u6267\u884c\u65f6\u95f4\u53d8\u5316\u65e0\u76f4\u63a5\u76f8\u5173\u6027\u3002", "conclusion": "\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u8f6f\u4ef6\u5e94\u7528\u5927\u5c0f\u3001\u5e74\u9f84\u3001\u5f00\u53d1\u8005\u7ecf\u9a8c\u548c\u8d21\u732e\u8005\u6570\u91cf\u7b49\u56e0\u7d20\u5982\u4f55\u4e0e\u4ee3\u7801\u574f\u5473\u6570\u91cf\u7c7b\u578b\u4ee5\u53ca\u91cd\u6784\u540e\u7684\u80fd\u8017\u6027\u80fd\u5f71\u54cd\u76f8\u5173\u8054\u3002"}}
{"id": "2509.26110", "categories": ["cs.SE", "astro-ph.IM"], "pdf": "https://arxiv.org/pdf/2509.26110", "abs": "https://arxiv.org/abs/2509.26110", "authors": ["Dmitriy Kostunin", "Vladimir Sotnikov", "Sergo Golovachev", "Abhay Mehta", "Tim Lukas Holch", "Elisa Jones"], "title": "Agent-based code generation for the Gammapy framework", "comment": "ICRC2025 proceedings PoS(ICRC2025)753", "summary": "Software code generation using Large Language Models (LLMs) is one of the\nmost successful applications of modern artificial intelligence. Foundational\nmodels are very effective for popular frameworks that benefit from\ndocumentation, examples, and strong community support. In contrast, specialized\nscientific libraries often lack these resources and may expose unstable APIs\nunder active development, making it difficult for models trained on limited or\noutdated data. We address these issues for the Gammapy library by developing an\nagent capable of writing, executing, and validating code in a controlled\nenvironment. We present a minimal web demo and an accompanying benchmarking\nsuite. This contribution summarizes the design, reports our current status, and\noutlines next steps.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u9488\u5bf9Gammapy\u79d1\u5b66\u5e93\u7684\u4ee3\u7801\u751f\u6210\u4ee3\u7406\uff0c\u80fd\u591f\u5728\u53d7\u63a7\u73af\u5883\u4e2d\u7f16\u5199\u3001\u6267\u884c\u548c\u9a8c\u8bc1\u4ee3\u7801\uff0c\u4ee5\u89e3\u51b3\u4e13\u4e1a\u79d1\u5b66\u5e93\u56e0\u7f3a\u4e4f\u8d44\u6e90\u548cAPI\u4e0d\u7a33\u5b9a\u5bfc\u81f4\u7684LLM\u4ee3\u7801\u751f\u6210\u56f0\u96be\u3002", "motivation": "\u4e13\u4e1a\u79d1\u5b66\u5e93\uff08\u5982Gammapy\uff09\u901a\u5e38\u7f3a\u4e4f\u6587\u6863\u3001\u793a\u4f8b\u548c\u793e\u533a\u652f\u6301\uff0c\u4e14API\u4e0d\u7a33\u5b9a\uff0c\u8fd9\u4f7f\u5f97\u57fa\u4e8e\u6709\u9650\u6216\u8fc7\u65f6\u6570\u636e\u8bad\u7ec3\u7684LLM\u96be\u4ee5\u6709\u6548\u751f\u6210\u4ee3\u7801\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u80fd\u591f\u7f16\u5199\u3001\u6267\u884c\u548c\u9a8c\u8bc1\u4ee3\u7801\u7684\u4ee3\u7406\u7cfb\u7edf\uff0c\u5728\u53d7\u63a7\u73af\u5883\u4e2d\u8fd0\u884c\uff0c\u5e76\u63d0\u4f9b\u4e86\u7f51\u9875\u6f14\u793a\u548c\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\u3002", "result": "\u6210\u529f\u6784\u5efa\u4e86\u9488\u5bf9Gammapy\u5e93\u7684\u4ee3\u7801\u751f\u6210\u4ee3\u7406\u7cfb\u7edf\uff0c\u80fd\u591f\u5904\u7406\u4e13\u4e1a\u79d1\u5b66\u5e93\u7279\u6709\u7684\u6311\u6218\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u5c55\u793a\u4e86\u9488\u5bf9\u4e13\u4e1a\u79d1\u5b66\u5e93\u7684\u4ee3\u7801\u751f\u6210\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u89c4\u5212\u4e86\u540e\u7eed\u53d1\u5c55\u6b65\u9aa4\u3002"}}
{"id": "2509.26111", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26111", "abs": "https://arxiv.org/abs/2509.26111", "authors": ["Shuai Wang", "Liang Ding", "Li Shen", "Yong Luo", "Han Hu", "Lefei Zhang", "Fu Lin"], "title": "A Multi-Language Object-Oriented Programming Benchmark for Large Language Models", "comment": "20 pages, 12 figures", "summary": "Establishing fair and robust benchmarks is essential for evaluating\nintelligent code generation by large language models (LLMs). Our survey of 35\nexisting benchmarks uncovers three major imbalances: 85.7% focus on a single\nprogramming language; 94.3% target only function-level or statement-level\ntasks; and over 80% include fewer than ten test cases on average. To address\nthese gaps, we propose MultiOOP, a multi-language object-oriented programming\nbenchmark covering six popular languages (Python, PHP, C++, C#, Java,\nJavaScript) with 267 tasks per language. We design a translator that extends an\nexisting single-language OOP benchmark and the pass@o metric to a multilingual\nsetting. Moreover, we propose an automated framework for augmenting test cases\nto ensure the reliability of the evaluation results. We evaluate 14 mainstream\nLLMs under zero-shot prompting and report three key findings: 1) Substantial\nperformance degradation: pass@1 scores on MultiOOP drop by up to 65.6\npercentage points compared to function-level tasks (e.g., HumanEval). 2)\nCross-language variability: GPT-4o mini achieves pass@1 of 48.06% in Python but\nonly 0.12%-15.26% in other languages, indicating limited multilingual\ngeneralization. 3) Conceptual gaps: pass@o scores are consistently 1.1-19.2\npoints lower than pass@k, demonstrating that LLMs often generate executable\ncode without fully capturing core OOP concepts. Our benchmark, metric\nextensions, and evaluation scripts will be publicly released to foster a more\nbalanced and comprehensive assessment of LLMs in object-oriented code\ngeneration. Our code and data will be released at\nhttps://github.com/alphadl/OOP-eval and\nhttps://huggingface.co/datasets/codeai-dteam/MultiOOP respectively.", "AI": {"tldr": "\u63d0\u51fa\u4e86MultiOOP\u57fa\u51c6\u6d4b\u8bd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u57fa\u51c6\uff0c\u8986\u76d66\u79cd\u6d41\u884c\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u542b267\u4e2a\u4efb\u52a1/\u8bed\u8a00\uff0c\u65e8\u5728\u89e3\u51b3\u73b0\u6709\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u7684\u8bed\u8a00\u5355\u4e00\u6027\u3001\u4efb\u52a1\u7c92\u5ea6\u4e0d\u8db3\u548c\u6d4b\u8bd5\u7528\u4f8b\u8fc7\u5c11\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u6d4b\u8bd5\u5b58\u5728\u4e09\u4e2a\u4e3b\u8981\u4e0d\u5e73\u8861\uff1a85.7%\u4e13\u6ce8\u4e8e\u5355\u4e00\u7f16\u7a0b\u8bed\u8a00\uff1b94.3%\u4ec5\u9488\u5bf9\u51fd\u6570\u7ea7\u6216\u8bed\u53e5\u7ea7\u4efb\u52a1\uff1b\u8d85\u8fc780%\u5e73\u5747\u5305\u542b\u5c11\u4e8e10\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u8fd9\u4e9b\u9650\u5236\u963b\u788d\u4e86\u5bf9LLM\u4ee3\u7801\u751f\u6210\u80fd\u529b\u7684\u5168\u9762\u8bc4\u4f30\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u7ffb\u8bd1\u5668\u5c06\u73b0\u6709\u7684\u5355\u8bed\u8a00OOP\u57fa\u51c6\u6269\u5c55\u5230\u591a\u8bed\u8a00\u73af\u5883\uff0c\u63d0\u51fa\u4e86pass@o\u6307\u6807\uff0c\u5e76\u5f00\u53d1\u4e86\u81ea\u52a8\u6d4b\u8bd5\u7528\u4f8b\u589e\u5f3a\u6846\u67b6\u4ee5\u786e\u4fdd\u8bc4\u4f30\u7ed3\u679c\u7684\u53ef\u9760\u6027\u3002", "result": "\u8bc4\u4f30\u4e8614\u4e2a\u4e3b\u6d41LLM\uff0c\u53d1\u73b0\uff1a1\uff09\u6027\u80fd\u663e\u8457\u4e0b\u964d\uff1a\u4e0e\u51fd\u6570\u7ea7\u4efb\u52a1\u76f8\u6bd4\uff0cMultiOOP\u4e0a\u7684pass@1\u5206\u6570\u4e0b\u964d\u9ad8\u8fbe65.6\u4e2a\u767e\u5206\u70b9\uff1b2\uff09\u8de8\u8bed\u8a00\u53d8\u5f02\u6027\uff1aGPT-4o mini\u5728Python\u4e2d\u8fbe\u523048.06%\u7684pass@1\uff0c\u4f46\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u4ec5\u4e3a0.12%-15.26%\uff1b3\uff09\u6982\u5ff5\u5dee\u8ddd\uff1apass@o\u5206\u6570\u59cb\u7ec8\u6bd4pass@k\u4f4e1.1-19.2\u5206\u3002", "conclusion": "MultiOOP\u57fa\u51c6\u6d4b\u8bd5\u3001\u6307\u6807\u6269\u5c55\u548c\u8bc4\u4f30\u811a\u672c\u5c06\u516c\u5f00\u53d1\u5e03\uff0c\u4ee5\u4fc3\u8fdb\u5bf9LLM\u5728\u9762\u5411\u5bf9\u8c61\u4ee3\u7801\u751f\u6210\u4e2d\u66f4\u5e73\u8861\u548c\u5168\u9762\u7684\u8bc4\u4f30\u3002"}}
{"id": "2509.26173", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26173", "abs": "https://arxiv.org/abs/2509.26173", "authors": ["Lisi Qarkaxhija", "Maximilian Carparo", "Stefan Menzel", "Bernhard Sendhoff", "Ingo Scholtes"], "title": "Understanding Collective Social Behavior in OSS Communities: A Co-editing Network Analysis of Activity Cascades", "comment": null, "summary": "Understanding the collective social behavior of software developers is\ncrucial to model and predict the long-term dynamics and sustainability of Open\nSource Software (OSS) communities. To this end, we analyze temporal activity\npatterns of developers, revealing an inherently ``bursty'' nature of commit\ncontributions. To investigate the social mechanisms behind this phenomenon, we\nadopt a network-based modelling framework that captures developer interactions\nthrough co-editing networks. Our framework models social interactions, where a\ndeveloper editing the code of other developers triggers accelerated activity\namong collaborators. Using a large data set on 50 major OSS communities, we\nfurther develop a method that identifies activity cascades, i.e. the\npropagation of developer activity in the underlying co-editing network. Our\nresults suggest that activity cascades are a statistically significant\nphenomenon in more than half of the studied projects. We further show that our\ninsights can be used to develop a simple yet practical churn prediction method\nthat forecasts which developers are likely to leave a project. Our work sheds\nlight on the emergent collective social dynamics in OSS communities and\nhighlights the importance of activity cascades to understand developer churn\nand retention in collaborative software projects.", "AI": {"tldr": "\u8be5\u8bba\u6587\u901a\u8fc7\u5206\u6790\u5f00\u6e90\u8f6f\u4ef6\u793e\u533a\u4e2d\u5f00\u53d1\u8005\u7684\u65f6\u95f4\u6d3b\u52a8\u6a21\u5f0f\uff0c\u63ed\u793a\u4e86\u63d0\u4ea4\u8d21\u732e\u7684\u7a81\u53d1\u6027\u7279\u5f81\uff0c\u5e76\u57fa\u4e8e\u5171\u540c\u7f16\u8f91\u7f51\u7edc\u5efa\u7acb\u4e86\u6d3b\u52a8\u7ea7\u8054\u6a21\u578b\u6765\u89e3\u91ca\u8fd9\u79cd\u73b0\u8c61\u3002\u7814\u7a76\u53d1\u73b0\u6d3b\u52a8\u7ea7\u8054\u5728\u8d85\u8fc7\u4e00\u534a\u7684\u9879\u76ee\u4e2d\u5177\u6709\u7edf\u8ba1\u663e\u8457\u6027\uff0c\u5e76\u5f00\u53d1\u4e86\u9884\u6d4b\u5f00\u53d1\u8005\u6d41\u5931\u7684\u5b9e\u7528\u65b9\u6cd5\u3002", "motivation": "\u7406\u89e3\u8f6f\u4ef6\u5f00\u53d1\u8005\u7684\u96c6\u4f53\u793e\u4f1a\u884c\u4e3a\u5bf9\u4e8e\u5efa\u6a21\u548c\u9884\u6d4b\u5f00\u6e90\u8f6f\u4ef6\u793e\u533a\u7684\u957f\u671f\u52a8\u6001\u548c\u53ef\u6301\u7eed\u6027\u81f3\u5173\u91cd\u8981\u3002\u7814\u7a76\u8005\u5e0c\u671b\u63ed\u793a\u63d0\u4ea4\u8d21\u732e\u7a81\u53d1\u6027\u73b0\u8c61\u80cc\u540e\u7684\u793e\u4f1a\u673a\u5236\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u7f51\u7edc\u7684\u5efa\u6a21\u6846\u67b6\uff0c\u901a\u8fc7\u5171\u540c\u7f16\u8f91\u7f51\u7edc\u6355\u6349\u5f00\u53d1\u8005\u4e92\u52a8\uff0c\u5efa\u7acb\u6d3b\u52a8\u7ea7\u8054\u6a21\u578b\u6765\u6a21\u62df\u5f00\u53d1\u8005\u6d3b\u52a8\u5728\u7f51\u7edc\u4e2d\u7684\u4f20\u64ad\u3002\u4f7f\u752850\u4e2a\u4e3b\u8981\u5f00\u6e90\u793e\u533a\u7684\u5927\u6570\u636e\u96c6\uff0c\u5f00\u53d1\u4e86\u8bc6\u522b\u6d3b\u52a8\u7ea7\u8054\u7684\u65b9\u6cd5\u3002", "result": "\u7814\u7a76\u7ed3\u679c\u663e\u793a\u6d3b\u52a8\u7ea7\u8054\u5728\u8d85\u8fc7\u4e00\u534a\u7684\u7814\u7a76\u9879\u76ee\u4e2d\u662f\u7edf\u8ba1\u663e\u8457\u73b0\u8c61\u3002\u57fa\u4e8e\u8fd9\u4e9b\u6d1e\u5bdf\u5f00\u53d1\u4e86\u4e00\u4e2a\u7b80\u5355\u5b9e\u7528\u7684\u6d41\u5931\u9884\u6d4b\u65b9\u6cd5\uff0c\u80fd\u591f\u9884\u6d4b\u54ea\u4e9b\u5f00\u53d1\u8005\u53ef\u80fd\u79bb\u5f00\u9879\u76ee\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u63ed\u793a\u4e86\u5f00\u6e90\u8f6f\u4ef6\u793e\u533a\u4e2d\u6d8c\u73b0\u7684\u96c6\u4f53\u793e\u4f1a\u52a8\u6001\uff0c\u5f3a\u8c03\u4e86\u6d3b\u52a8\u7ea7\u8054\u5bf9\u4e8e\u7406\u89e3\u534f\u4f5c\u8f6f\u4ef6\u9879\u76ee\u4e2d\u5f00\u53d1\u8005\u6d41\u5931\u548c\u4fdd\u7559\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2509.26204", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26204", "abs": "https://arxiv.org/abs/2509.26204", "authors": ["Rangeet Pan", "Tyler Stennett", "Raju Pavuluri", "Nate Levin", "Alessandro Orso", "Saurabh Sinha"], "title": "Hamster: A Large-Scale Study and Characterization of Developer-Written Tests", "comment": null, "summary": "Automated test generation (ATG), which aims to reduce the cost of manual test\nsuite development, has been investigated for decades and has produced countless\ntechniques based on a variety of approaches: symbolic analysis, search-based,\nrandom and adaptive-random, learning-based, and, most recently,\nlarge-language-model-based approaches. However, despite this large body of\nresearch, there is still a gap in our understanding of the characteristics of\ndeveloper-written tests and, consequently, in our assessment of how well ATG\ntechniques and tools can generate realistic and representative tests. To bridge\nthis gap, we conducted an extensive empirical study of developer-written tests\nfor Java applications, covering 1.7 million test cases from open-source\nrepositories. Our study is the first of its kind in studying aspects of\ndeveloper-written tests that are mostly neglected in the existing literature,\nsuch as test scope, test fixtures and assertions, types of inputs, and use of\nmocking. Based on the characterization, we then compare existing tests with\nthose generated by two state-of-the-art ATG tools. Our results highlight that a\nvast majority of developer-written tests exhibit characteristics that are\nbeyond the capabilities of current ATG tools. Finally, based on the insights\ngained from the study, we identify promising research directions that can help\nbridge the gap between current tool capabilities and more effective tool\nsupport for developer testing practices. We hope that this work can set the\nstage for new advances in the field and bring ATG tools closer to generating\nthe types of tests developers write.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u5206\u6790170\u4e07\u4e2aJava\u5f00\u53d1\u8005\u7f16\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u5de5\u5177\u4e0e\u5f00\u53d1\u8005\u5b9e\u9645\u6d4b\u8bd5\u5b9e\u8df5\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u5e76\u63d0\u51fa\u4e86\u6539\u8fdb\u65b9\u5411\u3002", "motivation": "\u5c3d\u7ba1\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u6280\u672f\u7814\u7a76\u5df2\u6709\u6570\u5341\u5e74\uff0c\u4f46\u5bf9\u5f00\u53d1\u8005\u5b9e\u9645\u7f16\u5199\u7684\u6d4b\u8bd5\u7279\u5f81\u7406\u89e3\u4ecd\u5b58\u5728\u7a7a\u767d\uff0c\u65e0\u6cd5\u51c6\u786e\u8bc4\u4f30ATG\u5de5\u5177\u751f\u6210\u6d4b\u8bd5\u7684\u8d28\u91cf\u548c\u4ee3\u8868\u6027\u3002", "method": "\u5bf9\u5f00\u6e90\u4ed3\u5e93\u4e2d\u7684170\u4e07\u4e2aJava\u6d4b\u8bd5\u7528\u4f8b\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u5206\u6790\u6d4b\u8bd5\u8303\u56f4\u3001\u6d4b\u8bd5\u88c5\u7f6e\u3001\u65ad\u8a00\u3001\u8f93\u5165\u7c7b\u578b\u548c\u6a21\u62df\u4f7f\u7528\u7b49\u88ab\u73b0\u6709\u6587\u732e\u5ffd\u89c6\u7684\u65b9\u9762\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u7edd\u5927\u591a\u6570\u5f00\u53d1\u8005\u7f16\u5199\u7684\u6d4b\u8bd5\u5177\u6709\u5f53\u524dATG\u5de5\u5177\u65e0\u6cd5\u590d\u73b0\u7684\u7279\u5f81\uff0c\u73b0\u6709\u5de5\u5177\u751f\u6210\u7684\u6d4b\u8bd5\u4e0e\u5f00\u53d1\u8005\u5b9e\u9645\u6d4b\u8bd5\u5b58\u5728\u663e\u8457\u5dee\u5f02\u3002", "conclusion": "\u57fa\u4e8e\u7814\u7a76\u6d1e\u5bdf\uff0c\u8bc6\u522b\u4e86\u6709\u524d\u666f\u7684\u7814\u7a76\u65b9\u5411\uff0c\u65e8\u5728\u7f29\u5c0f\u5de5\u5177\u80fd\u529b\u4e0e\u5f00\u53d1\u8005\u6d4b\u8bd5\u5b9e\u8df5\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u63a8\u52a8ATG\u5de5\u5177\u751f\u6210\u66f4\u63a5\u8fd1\u5f00\u53d1\u8005\u7f16\u5199\u7684\u6d4b\u8bd5\u7c7b\u578b\u3002"}}
{"id": "2509.26336", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26336", "abs": "https://arxiv.org/abs/2509.26336", "authors": ["Zhouruixing Zhu", "Zhihan Jiang", "Tianyi Yang", "Pinjia He"], "title": "UniSage: A Unified and Post-Analysis-Aware Sampling for Microservices", "comment": null, "summary": "Traces and logs are essential for observability and fault diagnosis in modern\ndistributed systems. However, their ever-growing volume introduces substantial\nstorage overhead and complicates troubleshooting. Existing approaches typically\nadopt a sample-before-analysis paradigm: even when guided by data heuristics,\nthey inevitably discard failure-related information and hinder transparency in\ndiagnosing system behavior. To address this, we introduce UniSage, the first\nunified framework to sample both traces and logs using a post-analysis-aware\nparadigm. Instead of discarding data upfront, UniSagefirst performs lightweight\nand multi-modal anomaly detection and root cause analysis (RCA) on the complete\ndata stream. This process yields fine-grained, service-level diagnostic\ninsights that guide a dual-pillar sampling strategy for handling both normal\nand anomalous scenarios: an analysis-guided sampler prioritizes data implicated\nby RCA, while an edge-case-based sampler ensures rare but critical behaviors\nare captured. Together, these pillars ensure comprehensive coverage of critical\nsignals without excessive redundancy. Extensive experiments demonstrate that\nUniSage significantly outperforms state-of-the-art baselines. At a 2.5%\nsampling rate, it captures 56.5% of critical traces and 96.25% of relevant\nlogs, while improving the accuracy (AC@1) of downstream root cause analysis by\n42.45%. Furthermore, its efficient pipeline processes 10 minutes of telemetry\ndata in under 5 seconds, demonstrating its practicality for production\nenvironments.", "AI": {"tldr": "UniSage\u662f\u9996\u4e2a\u7edf\u4e00\u6846\u67b6\uff0c\u91c7\u7528\u540e\u5206\u6790\u611f\u77e5\u8303\u5f0f\u5bf9\u8ffd\u8e2a\u548c\u65e5\u5fd7\u8fdb\u884c\u91c7\u6837\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u591a\u6a21\u6001\u5f02\u5e38\u68c0\u6d4b\u548c\u6839\u56e0\u5206\u6790\u6307\u5bfc\u53cc\u652f\u67f1\u91c7\u6837\u7b56\u7565\uff0c\u57282.5%\u91c7\u6837\u7387\u4e0b\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u8ffd\u8e2a\u548c\u65e5\u5fd7\u91c7\u6837\u65b9\u6cd5\u91c7\u7528\u5148\u91c7\u6837\u540e\u5206\u6790\u8303\u5f0f\uff0c\u4f1a\u4e0d\u53ef\u907f\u514d\u5730\u4e22\u5f03\u6545\u969c\u76f8\u5173\u4fe1\u606f\uff0c\u963b\u788d\u7cfb\u7edf\u884c\u4e3a\u8bca\u65ad\u7684\u900f\u660e\u5ea6\u3002", "method": "UniSage\u9996\u5148\u5bf9\u5b8c\u6574\u6570\u636e\u6d41\u6267\u884c\u8f7b\u91cf\u7ea7\u591a\u6a21\u6001\u5f02\u5e38\u68c0\u6d4b\u548c\u6839\u56e0\u5206\u6790\uff0c\u7136\u540e\u4f7f\u7528\u53cc\u652f\u67f1\u91c7\u6837\u7b56\u7565\uff1a\u5206\u6790\u5f15\u5bfc\u91c7\u6837\u5668\u4f18\u5148\u5904\u7406RCA\u6d89\u53ca\u7684\u6570\u636e\uff0c\u8fb9\u7f18\u6848\u4f8b\u91c7\u6837\u5668\u786e\u4fdd\u6355\u83b7\u7f55\u89c1\u4f46\u5173\u952e\u7684\u884c\u4e3a\u3002", "result": "\u57282.5%\u91c7\u6837\u7387\u4e0b\uff0cUniSage\u6355\u83b7\u4e8656.5%\u7684\u5173\u952e\u8ffd\u8e2a\u548c96.25%\u7684\u76f8\u5173\u65e5\u5fd7\uff0c\u4e0b\u6e38\u6839\u56e0\u5206\u6790\u51c6\u786e\u7387(AC@1)\u63d0\u9ad8\u4e8642.45%\uff0c\u5904\u740610\u5206\u949f\u9065\u6d4b\u6570\u636e\u4ec5\u9700\u4e0d\u52305\u79d2\u3002", "conclusion": "UniSage\u901a\u8fc7\u540e\u5206\u6790\u611f\u77e5\u91c7\u6837\u8303\u5f0f\uff0c\u5728\u4fdd\u6301\u9ad8\u6548\u5904\u7406\u7684\u540c\u65f6\u663e\u8457\u63d0\u5347\u4e86\u5173\u952e\u4fe1\u53f7\u7684\u8986\u76d6\u8303\u56f4\u548c\u4e0b\u6e38\u8bca\u65ad\u51c6\u786e\u6027\uff0c\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002"}}
{"id": "2509.26422", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2509.26422", "abs": "https://arxiv.org/abs/2509.26422", "authors": ["Michelle Barker", "Jeremy Cohen", "Pedro Hern\u00e1ndez Serrano", "Daniel S. Katz", "Kim Martin", "Dan Rudmann", "Hugh Shanahan"], "title": "Institutional Policy Pathways for Supporting Research Software: Global Trends and Local Practices", "comment": null, "summary": "As research software becomes increasingly central to modern science,\nresearch-performing organisations (RPOs) need to ensure that their investment\nin people, skills and infrastructure around research software produces\nsustainable and maintainable software that improves the research they perform,\nwhich in turn improves the overall institution and its reputation and funding,\nfor example, by competing with peers who lack this approach. However, research\ninstitution management and recognition of research software and its personnel\nhas mostly often developed in an ad hoc manner. RPO training infrastructures,\nrecognition and reward structures, have not developed at a sufficient rate to\nsupport and encourage both the widespread use of research software best\npractices and the long-term support for technical roles that is required. To\nbegin to address this fundamental problem for modern research environments,\nRPOs must implement and adopt robust policies to support research software\ndevelopment, use, and sustainability. Despite growing momentum from funders and\npublishers around FAIR and open science principles, research\ninstitutional-level policies specifically addressing research software remain\nlimited or lacking in breadth.\n  This article outlines the work of the Policies in Research Organisations for\nResearch Software (PRO4RS) Working Group (WG), a joint initiative of the\nResearch Software Alliance (ReSA) and the Research Data Alliance (RDA), which\nexamined and advanced research software policy development across institutions\nworldwide. After consideration of the rationale for institutional policies on\nresearch software, the PRO4RS WG outputs and analysis are utilised to highlight\ncritical policy gaps, particularly related to consideration of research\nsoftware personnel in policy work focused on reform of research assessment.", "AI": {"tldr": "\u7814\u7a76\u673a\u6784\u9700\u8981\u5236\u5b9a\u7a33\u5065\u7684\u653f\u7b56\u6765\u652f\u6301\u7814\u7a76\u8f6f\u4ef6\u7684\u5f00\u53d1\u3001\u4f7f\u7528\u548c\u53ef\u6301\u7eed\u6027\uff0c\u4ee5\u5e94\u5bf9\u73b0\u4ee3\u79d1\u7814\u73af\u5883\u4e2d\u7814\u7a76\u8f6f\u4ef6\u65e5\u76ca\u91cd\u8981\u4f46\u653f\u7b56\u652f\u6301\u4e0d\u8db3\u7684\u95ee\u9898\u3002", "motivation": "\u968f\u7740\u7814\u7a76\u8f6f\u4ef6\u5728\u73b0\u4ee3\u79d1\u5b66\u4e2d\u7684\u6838\u5fc3\u5730\u4f4d\u65e5\u76ca\u589e\u5f3a\uff0c\u7814\u7a76\u673a\u6784\u9700\u8981\u786e\u4fdd\u5bf9\u4eba\u5458\u3001\u6280\u80fd\u548c\u57fa\u7840\u8bbe\u65bd\u7684\u6295\u8d44\u80fd\u591f\u4ea7\u751f\u53ef\u6301\u7eed\u548c\u53ef\u7ef4\u62a4\u7684\u8f6f\u4ef6\uff0c\u4ece\u800c\u63d0\u5347\u7814\u7a76\u8d28\u91cf\u3001\u673a\u6784\u58f0\u8a89\u548c\u8d44\u91d1\u7ade\u4e89\u529b\u3002\u7136\u800c\uff0c\u76ee\u524d\u7814\u7a76\u673a\u6784\u5bf9\u7814\u7a76\u8f6f\u4ef6\u53ca\u5176\u4eba\u5458\u7684\u8ba4\u53ef\u548c\u652f\u6301\u5927\u591a\u5904\u4e8e\u4e34\u65f6\u72b6\u6001\uff0c\u7f3a\u4e4f\u7cfb\u7edf\u6027\u7684\u653f\u7b56\u652f\u6301\u3002", "method": "PRO4RS\u5de5\u4f5c\u7ec4\uff08ReSA\u548cRDA\u7684\u8054\u5408\u5021\u8bae\uff09\u901a\u8fc7\u5ba1\u67e5\u548c\u63a8\u8fdb\u5168\u7403\u673a\u6784\u7684\u7814\u7a76\u8f6f\u4ef6\u653f\u7b56\u53d1\u5c55\uff0c\u5206\u6790\u4e86\u7814\u7a76\u8f6f\u4ef6\u653f\u7b56\u5236\u5b9a\u7684\u7406\u8bba\u57fa\u7840\uff0c\u5e76\u5229\u7528\u5de5\u4f5c\u7ec4\u4ea7\u51fa\u548c\u5206\u6790\u6765\u7a81\u51fa\u5173\u952e\u653f\u7b56\u7f3a\u53e3\u3002", "result": "\u7814\u7a76\u53d1\u73b0\uff0c\u5c3d\u7ba1\u8d44\u52a9\u8005\u548c\u51fa\u7248\u5546\u5728FAIR\u548c\u5f00\u653e\u79d1\u5b66\u539f\u5219\u65b9\u9762\u52bf\u5934\u589e\u957f\uff0c\u4f46\u4e13\u95e8\u9488\u5bf9\u7814\u7a76\u8f6f\u4ef6\u7684\u673a\u6784\u5c42\u9762\u653f\u7b56\u4ecd\u7136\u6709\u9650\u6216\u7f3a\u4e4f\u5e7f\u5ea6\uff0c\u7279\u522b\u662f\u5728\u7814\u7a76\u8bc4\u4f30\u6539\u9769\u4e2d\u8003\u8651\u7814\u7a76\u8f6f\u4ef6\u4eba\u5458\u65b9\u9762\u5b58\u5728\u663e\u8457\u653f\u7b56\u7f3a\u53e3\u3002", "conclusion": "\u7814\u7a76\u673a\u6784\u5fc5\u987b\u5b9e\u65bd\u548c\u91c7\u7528\u7a33\u5065\u7684\u653f\u7b56\u6765\u652f\u6301\u7814\u7a76\u8f6f\u4ef6\u7684\u5f00\u53d1\u3001\u4f7f\u7528\u548c\u53ef\u6301\u7eed\u6027\uff0c\u4ee5\u89e3\u51b3\u73b0\u4ee3\u7814\u7a76\u73af\u5883\u4e2d\u7684\u8fd9\u4e00\u57fa\u672c\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u7814\u7a76\u8bc4\u4f30\u6539\u9769\u4e2d\u5e94\u5145\u5206\u8003\u8651\u7814\u7a76\u8f6f\u4ef6\u4eba\u5458\u7684\u4f5c\u7528\u3002"}}
{"id": "2509.26458", "categories": ["cs.SE", "68Q60, 03B70", "D.2.5"], "pdf": "https://arxiv.org/pdf/2509.26458", "abs": "https://arxiv.org/abs/2509.26458", "authors": ["Robin Lee", "Youngho Nam"], "title": "EQ-Robin: Generating Multiple Minimal Unique-Cause MC/DC Test Suites", "comment": "5 pages", "summary": "Modified Condition/Decision Coverage (MC/DC), particularly its strict\nUnique-Cause form, is a cornerstone of safety-critical software verification. A\nrecent algorithm, \"Robin's Rule,\" introduced a deterministic method to\nconstruct the theoretical minimum of N+1 test cases for Singular Boolean\nExpressions (SBEs). However, this approach yields only a single test suite,\nintroducing a critical risk: if a test case forming a required 'independence\npair' is an illegal input forbidden by system constraints, the suite fails to\nachieve 100% coverage. This paper proposes EQ-Robin, a lightweight pipeline\nthat systematically generates a family of minimal Unique-Cause MC/DC suites to\nmitigate this risk. We introduce a method for systematically generating\nsemantically equivalent SBEs by applying algebraic rearrangements to an\nAbstract Syntax Tree (AST) representation of the expression. By applying\nRobin's Rule to each structural variant, a diverse set of test suites can be\nproduced. This provides a resilient path to discovering a valid test suite that\npreserves the N+1 minimality guarantee while navigating real-world constraints.\nWe outline an evaluation plan on TCAS-II-derived SBEs to demonstrate how\nEQ-Robin offers a practical solution for ensuring robust MC/DC coverage.", "AI": {"tldr": "EQ-Robin\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7ba1\u9053\uff0c\u901a\u8fc7\u751f\u6210\u591a\u4e2a\u8bed\u4e49\u7b49\u4ef7\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u53d8\u4f53\uff0c\u4e3a\u6bcf\u4e2a\u53d8\u4f53\u5e94\u7528Robin's Rule\u7b97\u6cd5\uff0c\u4ece\u800c\u4ea7\u751f\u591a\u4e2a\u6700\u5c0fMC/DC\u6d4b\u8bd5\u5957\u4ef6\uff0c\u4ee5\u89e3\u51b3\u5355\u4e2a\u6d4b\u8bd5\u5957\u4ef6\u53ef\u80fd\u56e0\u7ea6\u675f\u6761\u4ef6\u800c\u65e0\u6cd5\u5b9e\u73b0100%\u8986\u76d6\u7387\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u7684Robin's Rule\u7b97\u6cd5\u867d\u7136\u80fd\u751f\u6210\u7406\u8bba\u6700\u5c0fN+1\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f46\u53ea\u4ea7\u751f\u5355\u4e00\u6d4b\u8bd5\u5957\u4ef6\u3002\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u5fc5\u9700\u7684'independence pair'\u6d4b\u8bd5\u7528\u4f8b\u8fdd\u53cd\u4e86\u7cfb\u7edf\u7ea6\u675f\uff0c\u6574\u4e2a\u5957\u4ef6\u5c31\u65e0\u6cd5\u5b9e\u73b0100%\u8986\u76d6\u7387\uff0c\u8fd9\u5728\u5b89\u5168\u5173\u952e\u8f6f\u4ef6\u9a8c\u8bc1\u4e2d\u5b58\u5728\u4e25\u91cd\u98ce\u9669\u3002", "method": "\u901a\u8fc7\u4ee3\u6570\u91cd\u6392\u5728\u62bd\u8c61\u8bed\u6cd5\u6811(AST)\u4e0a\u7cfb\u7edf\u751f\u6210\u8bed\u4e49\u7b49\u4ef7\u7684\u5947\u5f02\u5e03\u5c14\u8868\u8fbe\u5f0f(SBEs)\u53d8\u4f53\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7ed3\u6784\u53d8\u4f53\u5e94\u7528Robin's Rule\u7b97\u6cd5\uff0c\u4ea7\u751f\u591a\u6837\u5316\u7684\u6700\u5c0f\u6d4b\u8bd5\u5957\u4ef6\u96c6\u5408\u3002", "result": "\u8bba\u6587\u63d0\u51fa\u4e86EQ-Robin\u65b9\u6cd5\uff0c\u80fd\u591f\u751f\u6210\u591a\u4e2a\u6700\u5c0fUnique-Cause MC/DC\u6d4b\u8bd5\u5957\u4ef6\uff0c\u5728\u4fdd\u6301N+1\u6700\u5c0f\u6027\u4fdd\u8bc1\u7684\u540c\u65f6\uff0c\u63d0\u4f9b\u4e86\u53d1\u73b0\u6709\u6548\u6d4b\u8bd5\u5957\u4ef6\u7684\u5f39\u6027\u8def\u5f84\u3002", "conclusion": "EQ-Robin\u4e3a\u5728\u73b0\u5b9e\u7ea6\u675f\u6761\u4ef6\u4e0b\u786e\u4fdd\u9c81\u68d2\u7684MC/DC\u8986\u76d6\u7387\u63d0\u4f9b\u4e86\u5b9e\u7528\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u8fc7\u5728TCAS-II\u884d\u751f\u7684SBEs\u4e0a\u7684\u8bc4\u4f30\u8ba1\u5212\u6765\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002"}}
{"id": "2509.26463", "categories": ["cs.SE", "D.2.5"], "pdf": "https://arxiv.org/pdf/2509.26463", "abs": "https://arxiv.org/abs/2509.26463", "authors": ["Junsong Pu", "Yichen Li", "Zhuangbin Chen", "Jinyang Liu", "Zhihan Jiang", "Jianjun Chen", "Rui Shi", "Zibin Zheng", "Tieying Zhang"], "title": "ErrorPrism: Reconstructing Error Propagation Paths in Cloud Service Systems", "comment": "12 pages, 6 figures, 1 table, this paper has been accepted by the\n  40th IEEE/ACM International Conference on Automated Software Engineering, ASE\n  2025", "summary": "Reliability management in cloud service systems is challenging due to the\ncascading effect of failures. Error wrapping, a practice prevalent in modern\nmicroservice development, enriches errors with context at each layer of the\nfunction call stack, constructing an error chain that describes a failure from\nits technical origin to its business impact. However, this also presents a\nsignificant traceability problem when recovering the complete error propagation\npath from the final log message back to its source. Existing approaches are\nineffective at addressing this problem. To fill this gap, we present ErrorPrism\nin this work for automated reconstruction of error propagation paths in\nproduction microservice systems. ErrorPrism first performs static analysis on\nservice code repositories to build a function call graph and map log strings to\nrelevant candidate functions. This significantly reduces the path search space\nfor subsequent analysis. Then, ErrorPrism employs an LLM agent to perform an\niterative backward search to accurately reconstruct the complete, multi-hop\nerror path. Evaluated on 67 production microservices at ByteDance, ErrorPrism\nachieves 97.0% accuracy in reconstructing paths for 102 real-world errors,\noutperforming existing static analysis and LLM-based approaches. ErrorPrism\nprovides an effective and practical tool for root cause analysis in industrial\nmicroservice systems.", "AI": {"tldr": "ErrorPrism\uff1a\u901a\u8fc7\u9759\u6001\u5206\u6790\u548cLLM\u4ee3\u7406\u81ea\u52a8\u91cd\u5efa\u5fae\u670d\u52a1\u7cfb\u7edf\u4e2d\u9519\u8bef\u4f20\u64ad\u8def\u5f84\u7684\u5de5\u5177\uff0c\u5728\u5b57\u8282\u8df3\u52a867\u4e2a\u751f\u4ea7\u5fae\u670d\u52a1\u4e0a\u8fbe\u523097.0%\u7684\u51c6\u786e\u7387", "motivation": "\u4e91\u670d\u52a1\u7cfb\u7edf\u4e2d\u7531\u4e8e\u9519\u8bef\u7ea7\u8054\u6548\u5e94\u5bfc\u81f4\u53ef\u9760\u6027\u7ba1\u7406\u56f0\u96be\uff0c\u9519\u8bef\u5305\u88c5\u5b9e\u8df5\u867d\u7136\u4e30\u5bcc\u4e86\u9519\u8bef\u4e0a\u4e0b\u6587\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u4ece\u6700\u7ec8\u65e5\u5fd7\u6d88\u606f\u56de\u6eaf\u5b8c\u6574\u9519\u8bef\u4f20\u64ad\u8def\u5f84\u7684\u8ffd\u8e2a\u95ee\u9898", "method": "\u9996\u5148\u5bf9\u670d\u52a1\u4ee3\u7801\u5e93\u8fdb\u884c\u9759\u6001\u5206\u6790\u6784\u5efa\u51fd\u6570\u8c03\u7528\u56fe\u5e76\u6620\u5c04\u65e5\u5fd7\u5b57\u7b26\u4e32\u5230\u76f8\u5173\u5019\u9009\u51fd\u6570\uff0c\u7136\u540e\u4f7f\u7528LLM\u4ee3\u7406\u8fdb\u884c\u8fed\u4ee3\u53cd\u5411\u641c\u7d22\u4ee5\u91cd\u5efa\u5b8c\u6574\u7684\u591a\u8df3\u9519\u8bef\u8def\u5f84", "result": "\u5728\u5b57\u8282\u8df3\u52a867\u4e2a\u751f\u4ea7\u5fae\u670d\u52a1\u4e0a\u8bc4\u4f30\uff0c\u5bf9102\u4e2a\u771f\u5b9e\u4e16\u754c\u9519\u8bef\u91cd\u5efa\u8def\u5f84\u8fbe\u523097.0%\u7684\u51c6\u786e\u7387\uff0c\u4f18\u4e8e\u73b0\u6709\u7684\u9759\u6001\u5206\u6790\u548c\u57fa\u4e8eLLM\u7684\u65b9\u6cd5", "conclusion": "ErrorPrism\u4e3a\u5de5\u4e1a\u5fae\u670d\u52a1\u7cfb\u7edf\u4e2d\u7684\u6839\u672c\u539f\u56e0\u5206\u6790\u63d0\u4f9b\u4e86\u6709\u6548\u5b9e\u7528\u7684\u5de5\u5177"}}
{"id": "2509.26546", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.26546", "abs": "https://arxiv.org/abs/2509.26546", "authors": ["Meghana Sistla", "Gogul Balakrishnan", "Pat Rondon", "Jos\u00e9 Cambronero", "Michele Tufano", "Satish Chandra"], "title": "Towards Verified Code Reasoning by LLMs", "comment": "43 pages", "summary": "While LLM-based agents are able to tackle a wide variety of code reasoning\nquestions, the answers are not always correct. This prevents the agent from\nbeing useful in situations where high precision is desired: (1) helping a\nsoftware engineer understand a new code base, (2) helping a software engineer\nduring code review sessions, and (3) ensuring that the code generated by an\nautomated code generation system meets certain requirements (e.g. fixes a bug,\nimproves readability, implements a feature).\n  As a result of this lack of trustworthiness, the agent's answers need to be\nmanually verified before they can be trusted. Manually confirming responses\nfrom a code reasoning agent requires human effort and can result in slower\ndeveloper productivity, which weakens the assistance benefits of the agent. In\nthis paper, we describe a method to automatically validate the answers provided\nby a code reasoning agent by verifying its reasoning steps. At a very high\nlevel, the method consists of extracting a formal representation of the agent's\nresponse and, subsequently, using formal verification and program analysis\ntools to verify the agent's reasoning steps.\n  We applied this approach to a benchmark set of 20 uninitialized variable\nerrors detected by sanitizers and 20 program equivalence queries. For the\nuninitialized variable errors, the formal verification step was able to\nvalidate the agent's reasoning on 13/20 examples, and for the program\nequivalence queries, the formal verification step successfully caught 6/8\nincorrect judgments made by the agent.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u81ea\u52a8\u9a8c\u8bc1\u4ee3\u7801\u63a8\u7406\u4ee3\u7406\u7b54\u6848\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u5f62\u5f0f\u5316\u9a8c\u8bc1\u548c\u7a0b\u5e8f\u5206\u6790\u5de5\u5177\u6765\u68c0\u67e5\u4ee3\u7406\u7684\u63a8\u7406\u6b65\u9aa4\uff0c\u63d0\u9ad8\u4ee3\u7801\u63a8\u7406\u7684\u53ef\u4fe1\u5ea6\u3002", "motivation": "LLM\u4ee3\u7406\u5728\u4ee3\u7801\u63a8\u7406\u4e2d\u7b54\u6848\u4e0d\u603b\u662f\u6b63\u786e\uff0c\u8fd9\u9650\u5236\u4e86\u5176\u5728\u9700\u8981\u9ad8\u7cbe\u5ea6\u573a\u666f\u7684\u5e94\u7528\uff0c\u5982\u4ee3\u7801\u7406\u89e3\u3001\u4ee3\u7801\u5ba1\u67e5\u548c\u81ea\u52a8\u5316\u4ee3\u7801\u751f\u6210\u9a8c\u8bc1\u3002\u624b\u52a8\u9a8c\u8bc1\u4ee3\u7406\u7b54\u6848\u8017\u8d39\u4eba\u529b\u4e14\u964d\u4f4e\u5f00\u53d1\u6548\u7387\u3002", "method": "\u63d0\u53d6\u4ee3\u7406\u54cd\u5e94\u7684\u5f62\u5f0f\u5316\u8868\u793a\uff0c\u7136\u540e\u4f7f\u7528\u5f62\u5f0f\u5316\u9a8c\u8bc1\u548c\u7a0b\u5e8f\u5206\u6790\u5de5\u5177\u6765\u9a8c\u8bc1\u4ee3\u7406\u7684\u63a8\u7406\u6b65\u9aa4\u3002", "result": "\u572820\u4e2a\u672a\u521d\u59cb\u5316\u53d8\u91cf\u9519\u8bef\u68c0\u6d4b\u4e2d\uff0c\u5f62\u5f0f\u5316\u9a8c\u8bc1\u6210\u529f\u9a8c\u8bc1\u4e8613/20\u4e2a\u4f8b\u5b50\u7684\u4ee3\u7406\u63a8\u7406\uff1b\u572820\u4e2a\u7a0b\u5e8f\u7b49\u4ef7\u6027\u67e5\u8be2\u4e2d\uff0c\u6210\u529f\u6355\u83b7\u4e866/8\u4e2a\u4ee3\u7406\u7684\u9519\u8bef\u5224\u65ad\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u80fd\u6709\u6548\u81ea\u52a8\u9a8c\u8bc1\u4ee3\u7801\u63a8\u7406\u4ee3\u7406\u7684\u7b54\u6848\uff0c\u63d0\u9ad8\u4ee3\u7406\u7684\u53ef\u4fe1\u5ea6\u548c\u5b9e\u7528\u6027\uff0c\u51cf\u5c11\u4eba\u5de5\u9a8c\u8bc1\u8d1f\u62c5\u3002"}}

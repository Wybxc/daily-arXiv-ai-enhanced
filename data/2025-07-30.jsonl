{"id": "2507.21317", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.21317", "abs": "https://arxiv.org/abs/2507.21317", "authors": ["Paulette Koronkevich", "William J. Bowman"], "title": "One Weird Trick to Untie Landin's Knot", "comment": null, "summary": "In this work, we explore Landin's Knot, which is understood as a pattern for\nencoding general recursion, including non-termination, that is possible after\nadding higher-order references to an otherwise terminating language. We observe\nthat this isn't always true -- higher-order references, by themselves, don't\nlead to non-termination. The key insight is that Landin's Knot relies not\nprimarily on references storing functions, but on unrestricted quantification\nover a function's environment. We show this through a closure converted\nlanguage, in which the function's environment is made explicit and hides the\ntype of the environment through impredicative quantification. Once references\nare added, this impredicative quantification can be exploited to encode\nrecursion. We conjecture that by restricting the quantification over the\nenvironment, higher-order references can be safely added to terminating\nlanguages, without resorting to more complex type systems such as linearity,\nand without restricting references from storing functions."}
{"id": "2507.21439", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.21439", "abs": "https://arxiv.org/abs/2507.21439", "authors": ["Yong Qi Foo", "Brian Sze-Kai Cheong", "Michael D. Adams"], "title": "Fixed-Point-Oriented Programming: A Concise and Elegant Paradigm", "comment": null, "summary": "Fixed-Point-Oriented Programming (FPOP) is an emerging paradigm designed to\nstreamline the implementation of problems involving self-referential\ncomputations. These include graph algorithms, static analysis, parsing, and\ndistributed computing-domains that traditionally require complex and\ntricky-to-implement work-queue algorithms. Existing programming paradigms lack\ndirect support for these inherently fixed-point computations, leading to\ninefficient and error-prone implementations.\n  This white paper explores the potential of the FPOP paradigm, which offers a\nhigh-level abstraction that enables concise and expressive problem\nformulations. By leveraging structured inference rules and user-directed\noptimizations, FPOP allows developers to write declarative specifications while\nthe compiler ensures efficient execution. It not only reduces implementation\ncomplexity for programmers but also enhances adaptability, making it easier for\nprogrammers to explore alternative solutions and optimizations without\nmodifying the core logic of their program.\n  We demonstrate how FPOP simplifies algorithm implementation, improves\nmaintainability, and enables rapid prototyping by allowing problems to be\nclearly and concisely expressed. For example, the graph distance problem can be\nexpressed in only two executable lines of code with FPOP, while it takes an\norder of magnitude more code in other paradigms. By bridging the gap between\ntheoretical fixed-point formulations and practical implementations, we aim to\nfoster further research and adoption of this paradigm."}
{"id": "2507.22048", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.22048", "abs": "https://arxiv.org/abs/2507.22048", "authors": ["Di Wang"], "title": "Composable Effect Handling for Programming LLM-integrated Scripts", "comment": null, "summary": "Implementing LLM-integrated scripts introduces challenges in modularity and\nperformance, as scripts are often coupled to specific LLM implementations and\nfail to exploit parallelization opportunities. This paper proposes using\ncomposable effect handling to separate workflow logic from effectful\noperations, such as LLM calls, I/O, and concurrency, enabling modularity\nwithout sacrificing the opportunity for performance optimization. By treating\nthese operations as abstract interfaces and discharging them via effect\nhandlers, this paper shows that scripts can achieve significant speedups (e.g.,\n10$\\times$ in a Tree-of-Thoughts case study) without compromising modularity.\nThis paper aims to promote composable effect handling as a programming style\nfor LLM scripting."}
{"id": "2507.21295", "categories": ["cs.LO", "cs.AI", "11A63, 47S20, 68Q55"], "pdf": "https://arxiv.org/pdf/2507.21295", "abs": "https://arxiv.org/abs/2507.21295", "authors": ["Alexander Yu. Chunikhin"], "title": "Semantic Numeration Systems as Dynamical Systems", "comment": "11 pages, 6 figures", "summary": "The foundational concepts of semantic numeration systems theory are briefly\noutlined. The action of cardinal semantic operators unfolds over a set of\ncardinal abstract entities belonging to the cardinal semantic multeity. The\ncardinal abstract object (CAO) formed by them in a certain connectivity\ntopology is proposed to be considered as a linear discrete dynamical system\nwith nonlinear control. Under the assumption of ideal observability, the CAO\nstate equations are provided for both stationary and non-stationary cases. The\nfundamental role of the configuration matrix, which combines information about\nthe types of cardinal semantic operators in the CAO, their parameters and\ntopology of connectivity, is demonstrated."}
{"id": "2507.21271", "categories": ["cs.SE", "K.6.3"], "pdf": "https://arxiv.org/pdf/2507.21271", "abs": "https://arxiv.org/abs/2507.21271", "authors": ["Zhaorui Yang", "Yuxin Qiu", "Haichao Zhu", "Qian Zhang"], "title": "Generating Highly Structured Test Inputs Leveraging Constraint-Guided Graph Refinement", "comment": "ICSME 2025 Registered Reports", "summary": "[Context] Modern AI applications increasingly process highly structured data,\nsuch as 3D meshes and point clouds, where test input generation must preserve\nboth structural and semantic validity. However, existing fuzzing tools and\ninput generators are typically handcrafted for specific input types and often\ngenerate invalid inputs that are subsequently discarded, leading to\ninefficiency and poor generalizability. [Objective] This study investigates\nwhether test inputs for structured domains can be unified through a graph-based\nrepresentation, enabling general, reusable mutation strategies while enforcing\nstructural constraints. We will evaluate the effectiveness of this approach in\nenhancing input validity and semantic preservation across eight AI systems.\n[Method] We develop and evaluate GRAphRef, a graph-based test input generation\nframework that supports constraint-based mutation and refinement. GRAphRef maps\nstructured inputs to graphs, applies neighbor-similarity-guided mutations, and\nuses a constraint-refinement phase to repair invalid inputs. We will conduct a\nconfirmatory study across eight real-world mesh-processing AI systems,\ncomparing GRAphRef with AFL, MeshAttack, Saffron, and two ablated variants.\nEvaluation metrics include structural validity, semantic preservation (via\nprediction consistency), and performance overhead. Experimental data is derived\nfrom ShapeNetCore mesh seeds and model outputs from systems like MeshCNN and\nHodgeNet. Statistical analysis and component latency breakdowns will be used to\nassess each hypothesis."}
{"id": "2507.21598", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.21598", "abs": "https://arxiv.org/abs/2507.21598", "authors": ["Beatrice Melani", "Ezio Bartocci", "Michele Chiari"], "title": "A Tree-Shaped Tableau for Checking the Satisfiability of Signal Temporal Logic with Bounded Temporal Operators", "comment": "25 pages, 8 figures. Accepted for presentation at EMSOFT 2025, to\n  appear in ACM TECS", "summary": "Signal Temporal Logic (STL) is a widely recognized formal specification\nlanguage to express rigorous temporal requirements on mixed analog signals\nproduced by cyber-physical systems (CPS). A relevant problem in CPS design is\nhow to efficiently and automatically check whether a set of STL requirements is\nlogically consistent. This problem reduces to solving the STL satisfiability\nproblem, which is decidable when we assume that our system operates in discrete\ntime steps dictated by an embedded system's clock.\n  This paper introduces a novel tree-shaped, one-pass tableau method for\nsatisfiability checking of discrete-time STL with bounded temporal operators.\nOriginally designed to prove the consistency of a given set of STL\nrequirements, this method has a wide range of applications beyond consistency\nchecking. These include synthesizing example signals that satisfy the given\nrequirements, as well as verifying or refuting the equivalence and implications\nof STL formulas.\n  Our tableau exploits redundancy arising from large time intervals in STL\nformulas to speed up satisfiability checking, and can also be employed to check\nMission-Time Linear Temporal Logic (MLTL) satisfiability. We compare our\ntableau with Satisfiability Modulo Theories (SMT) and First-Order Logic\nencodings from the literature on a benchmark suite, partly collected from the\nliterature, and partly provided by an industrial partner. Our experiments show\nthat, in many cases, our tableau outperforms state-of-the-art encodings."}
{"id": "2507.21280", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.21280", "abs": "https://arxiv.org/abs/2507.21280", "authors": ["Courtney Miller", "Rudrajit Choudhuri", "Mara Ulloa", "Sankeerti Haniyur", "Robert DeLine", "Margaret-Anne Storey", "Emerson Murphy-Hill", "Christian Bird", "Jenna L. Butler"], "title": "\"Maybe We Need Some More Examples:\" Individual and Team Drivers of Developer GenAI Tool Use", "comment": null, "summary": "Despite the widespread availability of generative AI tools in software\nengineering, developer adoption remains uneven. This unevenness is problematic\nbecause it hampers productivity efforts, frustrates management's expectations,\nand creates uncertainty around the future roles of developers. Through paired\ninterviews with 54 developers across 27 teams -- one frequent and one\ninfrequent user per team -- we demonstrate that differences in usage result\nprimarily from how developers perceive the tool (as a collaborator vs.\nfeature), their engagement approach (experimental vs. conservative), and how\nthey respond when encountering challenges (with adaptive persistence vs. quick\nabandonment). Our findings imply that widespread organizational expectations\nfor rapid productivity gains without sufficient investment in learning support\ncreates a \"Productivity Pressure Paradox,\" undermining the very productivity\nbenefits that motivate adoption."}
{"id": "2507.21851", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.21851", "abs": "https://arxiv.org/abs/2507.21851", "authors": ["Christian Alrabbaa", "Stefan Borgwardt", "Philipp Herrmann", "Markus Krötzsch"], "title": "The Shape of $\\mathcal{EL}$ Proofs: A Tale of Three Calculi (Extended Version)", "comment": "Extended version of a paper accepted at 38th International Workshop\n  on Description Logics (DL 2025)", "summary": "Consequence-based reasoning can be used to construct proofs that explain\nentailments of description logic (DL) ontologies. In the literature, one can\nfind multiple consequence-based calculi for reasoning in the $\\mathcal{EL}$\nfamily of DLs, each of which gives rise to proofs of different shapes. Here, we\nstudy three such calculi and the proofs they produce on a benchmark based on\nthe OWL Reasoner Evaluation. The calculi are implemented using a translation\ninto existential rules with stratified negation, which had already been\ndemonstrated to be effective for the calculus of the ELK reasoner. We then use\nthe rule engine NEMO to evaluate the rules and obtain traces of the rule\nexecution. After translating these traces back into DL proofs, we compare them\non several metrics that reflect different aspects of their complexity."}
{"id": "2507.21318", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.21318", "abs": "https://arxiv.org/abs/2507.21318", "authors": ["Yeshayahu Weiss", "Gal Amram", "Achiya Elyasaf", "Eitan Farchi", "Oded Margalit", "Gera Weiss"], "title": "Black-Box Bug-Amplification for Multithreaded Software", "comment": "35 pages, 5 figurs, 4 listing and 3 tables", "summary": "Bugs, especially those in concurrent systems, are often hard to reproduce\nbecause they manifest only under rare conditions. Testers frequently encounter\nfailures that occur only under specific inputs, even when occurring with low\nprobability. We propose an approach to systematically amplify the occurrence of\nsuch elusive bugs. We treat the system under test as a black-box and use\nrepeated trial executions to train a predictive model that estimates the\nprobability of a given input configuration triggering a bug. We evaluate this\napproach on a dataset of 17 representative concurrency bugs spanning diverse\ncategories. Several model-based search techniques are compared against a\nbrute-force random sampling baseline. Our results show that an ensemble of\nregression models can significantly increase bug occurrence rates across nearly\nall scenarios, often achieving an order-of-magnitude improvement over random\nsampling. The contributions of this work include: (i) a novel formulation of\nbug-amplification as a rare-event regression problem; (ii) an empirical\nevaluation of multiple techniques for amplifying bug occurrence, demonstrating\nthe effectiveness of model-guided search; and (iii) a practical, non-invasive\ntesting framework that helps practitioners expose hidden concurrency faults\nwithout altering the internal system architecture."}
{"id": "2507.21955", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2507.21955", "abs": "https://arxiv.org/abs/2507.21955", "authors": ["Anselm Haak", "Patrick Koopmann", "Yasir Mahmood", "Anni-Yasmin Turhan"], "title": "Why not? Developing ABox Abduction beyond Repairs", "comment": null, "summary": "Abduction is the task of computing a sufficient extension of a knowledge base\n(KB) that entails a conclusion not entailed by the original KB. It serves to\ncompute explanations, or hypotheses, for such missing entailments. While this\ntask has been intensively investigated for perfect data and under classical\nsemantics, less is known about abduction when erroneous data results in\ninconsistent KBs. In this paper we define a suitable notion of abduction under\nrepair semantics, and propose a set of minimality criteria that guides\nabduction towards `useful' hypotheses. We provide initial complexity results on\ndeciding existence of and verifying abductive solutions with these criteria,\nunder different repair semantics and for the description logics DL-Lite and\nEL_bot."}
{"id": "2507.21329", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.21329", "abs": "https://arxiv.org/abs/2507.21329", "authors": ["Saikat Mondal", "Chanchal K. Roy"], "title": "Does Editing Improve Answer Quality on Stack Overflow? A Data-Driven Investigation", "comment": "Accepted in the 41st International Conference on Software Maintenance\n  and Evolution (ICSME 2025 - Research Track)", "summary": "High-quality answers in technical Q&A platforms like Stack Overflow (SO) are\ncrucial as they directly influence software development practices. Poor-quality\nanswers can introduce inefficiencies, bugs, and security vulnerabilities, and\nthus increase maintenance costs and technical debt in production software. To\nimprove content quality, SO allows collaborative editing, where users revise\nanswers to enhance clarity, correctness, and formatting. Several studies have\nexamined rejected edits and identified the causes of rejection. However, prior\nresearch has not systematically assessed whether accepted edits enhance key\nquality dimensions. While one study investigated the impact of edits on C/C++\nvulnerabilities, broader quality aspects remain unexplored. In this study, we\nanalyze 94,994 Python-related answers that have at least one accepted edit to\ndetermine whether edits improve (1) semantic relevance, (2) code usability, (3)\ncode complexity, (4) security vulnerabilities, (5) code optimization, and (6)\nreadability. Our findings show both positive and negative effects of edits.\nWhile 53.3% of edits improve how well answers match questions, 38.1% make them\nless relevant. Some previously broken code (9%) becomes executable, yet working\ncode (14.7%) turns non-parsable after edits. Many edits increase complexity\n(32.3%), making code harder to maintain. Instead of fixing security issues,\n20.5% of edits introduce additional issues. Even though 51.0% of edits optimize\nperformance, execution time still increases overall. Readability also suffers,\nas 49.7% of edits make code harder to read. This study highlights the\ninconsistencies in editing outcomes and provides insights into how edits impact\nsoftware maintainability, security, and efficiency that might caution users and\nmoderators and help future improvements in collaborative editing systems."}
{"id": "2507.21382", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.21382", "abs": "https://arxiv.org/abs/2507.21382", "authors": ["Ruiyin Li", "Yiran Zhang", "Xiyu Zhou", "Peng Liang", "Weisong Sun", "Jifeng Xuan", "Zhi Jin", "Yang Liu"], "title": "MAAD: Automate Software Architecture Design through Knowledge-Driven Multi-Agent Collaboration", "comment": "23 pages, 8 images, 1 table, Manuscript submitted to a journal (2025)", "summary": "Software architecture design is a critical, yet inherently complex and\nknowledge-intensive phase of software development. It requires deep domain\nexpertise, development experience, architectural knowledge, careful trade-offs\namong competing quality attributes, and the ability to adapt to evolving\nrequirements. Traditionally, this process is time-consuming and\nlabor-intensive, and relies heavily on architects, often resulting in limited\ndesign alternatives, especially under the pressures of agile development. While\nLarge Language Model (LLM)-based agents have shown promising performance across\nvarious SE tasks, their application to architecture design remains relatively\nscarce and requires more exploration, particularly in light of diverse domain\nknowledge and complex decision-making. To address the challenges, we proposed\nMAAD (Multi-Agent Architecture Design), an automated framework that employs a\nknowledge-driven Multi-Agent System (MAS) for architecture design. MAAD\norchestrates four specialized agents (i.e., Analyst, Modeler, Designer and\nEvaluator) to collaboratively interpret requirements specifications and produce\narchitectural blueprints enriched with quality attributes-based evaluation\nreports. We then evaluated MAAD through a case study and comparative\nexperiments against MetaGPT, a state-of-the-art MAS baseline. Our results show\nthat MAAD's superiority lies in generating comprehensive architectural\ncomponents and delivering insightful and structured architecture evaluation\nreports. Feedback from industrial architects across 11 requirements\nspecifications further reinforces MAAD's practical usability. We finally\nexplored the performance of the MAAD framework with three LLMs (GPT-4o,\nDeepSeek-R1, and Llama 3.3) and found that GPT-4o exhibits better performance\nin producing architecture design, emphasizing the importance of LLM selection\nin MAS-driven architecture design."}
{"id": "2507.21447", "categories": ["cs.SE", "cs.ET"], "pdf": "https://arxiv.org/pdf/2507.21447", "abs": "https://arxiv.org/abs/2507.21447", "authors": ["Zachariah Sollenberger", "Rahul Patel", "Saieda Ali Zada", "Sunita Chandrasekaran"], "title": "LLM4VV: Evaluating Cutting-Edge LLMs for Generation and Evaluation of Directive-Based Parallel Programming Model Compiler Tests", "comment": null, "summary": "The usage of Large Language Models (LLMs) for software and test development\nhas continued to increase since LLMs were first introduced, but only recently\nhave the expectations of LLMs become more realistic. Verifying the correctness\nof code generated by LLMs is key to improving their usefulness, but there have\nbeen no comprehensive and fully autonomous solutions developed yet.\nHallucinations are a major concern when LLMs are applied blindly to problems\nwithout taking the time and effort to verify their outputs, and an inability to\nexplain the logical reasoning of LLMs leads to issues with trusting their\nresults. To address these challenges while also aiming to effectively apply\nLLMs, this paper proposes a dual-LLM system (i.e. a generative LLM and a\ndiscriminative LLM) and experiments with the usage of LLMs for the generation\nof a large volume of compiler tests. We experimented with a number of LLMs\npossessing varying parameter counts and presented results using ten\ncarefully-chosen metrics that we describe in detail in our narrative. Through\nour findings, it is evident that LLMs possess the promising potential to\ngenerate quality compiler tests and verify them automatically."}
{"id": "2507.21485", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.21485", "abs": "https://arxiv.org/abs/2507.21485", "authors": ["Jing Wang", "Shang Liu", "Yao Lu", "Zhiyao Xie"], "title": "HLSDebugger: Identification and Correction of Logic Bugs in HLS Code with LLM Solutions", "comment": "This work has been accepted at ICCAD 2025 (International Conference\n  on Computer-Aided Design)", "summary": "High-level synthesis (HLS) accelerates hardware design by enabling the\nautomatic translation of high-level descriptions into efficient hardware\nimplementations. However, debugging HLS code is a challenging and\nlabor-intensive task, especially for novice circuit designers or software\nengineers without sufficient hardware domain knowledge. The recent emergence of\nLarge Language Models (LLMs) is promising in automating the HLS debugging\nprocess. Despite the great potential, three key challenges persist when\napplying LLMs to HLS logic debugging: 1) High-quality circuit data for training\nLLMs is scarce, posing a significant challenge. 2) Debugging logic bugs in\nhardware is inherently more complex than identifying software bugs with\nexisting golden test cases. 3) The absence of reliable test cases requires\nmulti-tasking solutions, performing both bug identification and correction.\ncomplicates the multi-tasking required for effective HLS debugging. In this\nwork, we propose a customized solution named HLSDebugger to address the\nchallenges. HLSDebugger first generates and releases a large labeled dataset\nwith 300K data samples, targeting HLS logic bugs. The HLSDebugger model adopts\nan encoder-decoder structure, performing bug location identification, bug type\nprediction, and bug correction with the same model. HLSDebugger significantly\noutperforms advanced LLMs like GPT-4 in bug identification and by more than 3x\nin bug correction. It makes a substantial advancement in the exploration of\nautomated debugging of HLS code."}
{"id": "2507.21583", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.21583", "abs": "https://arxiv.org/abs/2507.21583", "authors": ["Sergio Cobos", "Javier Luis Cánovas Izquierdo"], "title": "Ethical Classification of Non-Coding Contributions in Open-Source Projects via Large Language Models", "comment": "Accepted at the 2025 8th AAAI/ACM Conference on AI, Ethics, and\n  Society (AIES'25)", "summary": "The development of Open-Source Software (OSS) is not only a technical\nchallenge, but also a social one due to the diverse mixture of contributors. To\nthis aim, social-coding platforms, such as GitHub, provide the infrastructure\nneeded to host and develop the code, but also the support for enabling the\ncommunity's collaboration, which is driven by non-coding contributions, such as\nissues (i.e., change proposals or bug reports) or comments to existing\ncontributions. As with any other social endeavor, this development process\nfaces ethical challenges, which may put at risk the project's sustainability.\nTo foster a productive and positive environment, OSS projects are increasingly\ndeploying codes of conduct, which define rules to ensure a respectful and\ninclusive participatory environment, with the Contributor Covenant being the\nmain model to follow. However, monitoring and enforcing these codes of conduct\nis a challenging task, due to the limitations of current approaches. In this\npaper, we propose an approach to classify the ethical quality of non-coding\ncontributions in OSS projects by relying on Large Language Models (LLM), a\npromising technology for text classification tasks. We defined a set of ethical\nmetrics based on the Contributor Covenant and developed a classification\napproach to assess ethical behavior in OSS non-coding contributions, using\nprompt engineering to guide the model's output."}
{"id": "2507.21678", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2507.21678", "abs": "https://arxiv.org/abs/2507.21678", "authors": ["Yiming Xu", "Runzhi He", "Hengzhi Ye", "Minghui Zhou", "Huaimin Wang"], "title": "Predicting Maintenance Cessation of Open Source Software Repositories with An Integrated Feature Framework", "comment": null, "summary": "The maintenance risks of open source software (OSS) projects pose significant\nthreats to the quality, security, and resilience of modern software supply\nchains. While prior research has proposed diverse approaches for predicting OSS\nmaintenance risk -- leveraging signals ranging from surface features (e.g.,\nstars, commits) to social network analyses and behavioral patterns -- existing\nmethods often suffer from ambiguous operational definitions, limited\ninterpretability, and datasets of insufficient scale or generalizability. In\nthis work, we introduce ``maintenance cessation'', grounded in both explicit\narchival status and rigorous semantic analysis of project documentation.\nBuilding on this foundation, we curate a large-scale, longitudinal dataset of\n115,466 GitHub repositories -- encompassing 57,733 confirmed cessation events\n-- complemented by comprehensive, timeline-based behavioral features. We\npropose an integrated, multi-perspective feature framework for predicting\nmaintenance cessation, systematically combining user-centric features,\nmaintainer-centric features and project evolution features. AFT survival\nanalysis demonstrates a high C-index (0.846), substantially outperforming\nmodels relying only on surface features. Feature ablation and SHAP analysis\nfurther confirm the effectiveness and interpretability of our approach.\nFinally, we demonstrate real-world applicability by deploying a GBSA classifier\nin the openEuler ecosystem for proactive package risk screening. Our work\nestablishes a scalable, interpretable foundation for maintenance-risk\nprediction, enabling reproducible risk management across large-scale open\nsource ecosystems."}
{"id": "2507.21693", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.21693", "abs": "https://arxiv.org/abs/2507.21693", "authors": ["Basak Demirok", "Mucahid Kutlu", "Selin Mergen"], "title": "MultiAIGCD: A Comprehensive dataset for AI Generated Code Detection Covering Multiple Languages, Models,Prompts, and Scenarios", "comment": null, "summary": "As large language models (LLMs) rapidly advance, their role in code\ngeneration has expanded significantly. While this offers streamlined\ndevelopment, it also creates concerns in areas like education and job\ninterviews. Consequently, developing robust systems to detect AI-generated code\nis imperative to maintain academic integrity and ensure fairness in hiring\nprocesses. In this study, we introduce MultiAIGCD, a dataset for AI-generated\ncode detection for Python, Java, and Go. From the CodeNet dataset's problem\ndefinitions and human-authored codes, we generate several code samples in Java,\nPython, and Go with six different LLMs and three different prompts. This\ngeneration process covered three key usage scenarios: (i) generating code from\nproblem descriptions, (ii) fixing runtime errors in human-written code, and\n(iii) correcting incorrect outputs. Overall, MultiAIGCD consists of 121,271\nAI-generated and 32,148 human-written code snippets. We also benchmark three\nstate-of-the-art AI-generated code detection models and assess their\nperformance in various test scenarios such as cross-model and cross-language.\nWe share our dataset and codes to support research in this field."}
{"id": "2507.21928", "categories": ["cs.SE", "cs.AI", "cs.HC"], "pdf": "https://arxiv.org/pdf/2507.21928", "abs": "https://arxiv.org/abs/2507.21928", "authors": ["Christian Meske", "Tobias Hermanns", "Esther von der Weiden", "Kai-Uwe Loser", "Thorsten Berger"], "title": "Vibe Coding as a Reconfiguration of Intent Mediation in Software Development: Definition, Implications, and Research Agenda", "comment": null, "summary": "Software development is undergoing a fundamental transformation as vibe\ncoding becomes widespread, with large portions of contemporary codebases now\nbeing AI-generated. The disconnect between rapid adoption and limited\nconceptual understanding highlights the need for an inquiry into this emerging\nparadigm. Drawing on an intent perspective and historical analysis, we define\nvibe coding as a software development paradigm where humans and generative AI\nengage in collaborative flow to co-create software artifacts through natural\nlanguage dialogue, shifting the mediation of developer intent from\ndeterministic instruction to probabilistic inference. By intent mediation, we\nrefer to the fundamental process through which developers translate their\nconceptual goals into representations that computational systems can execute.\nOur results show that vibe coding reconfigures cognitive work by redistributing\nepistemic labor between humans and machines, shifting the expertise in the\nsoftware development process away from traditional areas such as design or\ntechnical implementation toward collaborative orchestration. We identify key\nopportunities, including democratization, acceleration, and systemic leverage,\nalongside risks, such as black box codebases, responsibility gaps, and\necosystem bias. We conclude with a research agenda spanning human-,\ntechnology-, and organization-centered directions to guide future\ninvestigations of this paradigm."}
{"id": "2507.21952", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.21952", "abs": "https://arxiv.org/abs/2507.21952", "authors": ["Peihong Lin", "Pengfei Wang", "Xu Zhou", "Wei Xie", "Gen Zhang", "Kai Lu"], "title": "DeepGo: Predictive Directed Greybox Fuzzing", "comment": null, "summary": "The state-of-the-art DGF techniques redefine and optimize the fitness metric\nto reach the target sites precisely and quickly. However, optimizations for\nfitness metrics are mainly based on heuristic algorithms, which usually rely on\nhistorical execution information and lack foresight on paths that have not been\nexercised yet. Thus, those hard-to-execute paths with complex constraints would\nhinder DGF from reaching the targets, making DGF less efficient. In this paper,\nwe propose DeepGo, a predictive directed grey-box fuzzer that can combine\nhistorical and predicted information to steer DGF to reach the target site via\nan optimal path. We first propose the path transition model, which models DGF\nas a process of reaching the target site through specific path transition\nsequences. The new seed generated by mutation would cause the path transition,\nand the path corresponding to the high-reward path transition sequence\nindicates a high likelihood of reaching the target site through it. Then, to\npredict the path transitions and the corresponding rewards, we use deep neural\nnetworks to construct a Virtual Ensemble Environment (VEE), which gradually\nimitates the path transition model and predicts the rewards of path transitions\nthat have not been taken yet. To determine the optimal path, we develop a\nReinforcement Learning for Fuzzing (RLF) model to generate the transition\nsequences with the highest sequence rewards. The RLF model can combine\nhistorical and predicted path transitions to generate the optimal path\ntransition sequences, along with the policy to guide the mutation strategy of\nfuzzing. Finally, to exercise the high-reward path transition sequence, we\npropose the concept of an action group, which comprehensively optimizes the\ncritical steps of fuzzing to realize the optimal path to reach the target\nefficiently."}
{"id": "2507.21954", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.21954", "abs": "https://arxiv.org/abs/2507.21954", "authors": ["Zengyang Li", "Yimeng Li", "Binbin Huang", "Peng Liang", "Ran Mo", "Hui Liu", "Yutao Ma"], "title": "Fine-Tuning Code Language Models to Detect Cross-Language Bugs", "comment": "33 pages, 6 images, 9 tables, Manuscript submitted to a journal\n  (2025)", "summary": "Multilingual programming, which involves using multiple programming languages\n(PLs) in a single project, is increasingly common due to its benefits. However,\nit introduces cross-language bugs (CLBs), which arise from interactions between\ndifferent PLs and are difficult to detect by single-language bug detection\ntools. This paper investigates the potential of pre-trained code language\nmodels (CodeLMs) in CLB detection. We developed CLCFinder, a cross-language\ncode identification tool, and constructed a CLB dataset involving three PL\ncombinations (Python-C/C++, Java-C/C++, and Python-Java) with nine interaction\ntypes. We fine-tuned 13 CodeLMs on this dataset and evaluated their\nperformance, analyzing the effects of dataset size, token sequence length, and\ncode comments. Results show that all CodeLMs performed poorly before\nfine-tuning, but exhibited varying degrees of performance improvement after\nfine-tuning, with UniXcoder-base achieving the best F1 score (0.7407). Notably,\nsmall fine-tuned CodeLMs tended to performe better than large ones. CodeLMs\nfine-tuned on single-language bug datasets performed poorly on CLB detection,\ndemonstrating the distinction between CLBs and single-language bugs.\nAdditionally, increasing the fine-tuning dataset size significantly improved\nperformance, while longer token sequences did not necessarily improve the model\nperformance. The impact of code comments varied across models. Some fine-tuned\nCodeLMs' performance was improved, while others showed degraded performance."}

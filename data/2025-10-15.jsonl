{"id": "2510.12297", "categories": ["cs.LO", "cs.PL", "F.4.1; D.2.4"], "pdf": "https://arxiv.org/pdf/2510.12297", "abs": "https://arxiv.org/abs/2510.12297", "authors": ["Nathan Guermond", "Gopalan Nadathur"], "title": "Ground Stratification for a Logic of Definitions with Induction", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "The logic underlying the Abella proof assistant includes mechanisms for\ninterpreting atomic predicates through fixed point definitions that can\nadditionally be treated inductively or co-inductively. However, the original\nformulation of the logic includes a strict stratification condition on\ndefinitions that is too restrictive for some applications such as those that\nuse a logical relations based approach to semantic equivalence. Tiu has shown\nhow this restriction can be eased by utilizing a weaker notion referred to as\nground stratification. Tiu's results were limited to a version of the logic\nthat does not treat inductive definitions. We show here that they can be\nextended to cover such definitions. While our results are obtained by using\ntechniques that have been previously deployed in related ways in this context,\ntheir use is sensitive to the particular way in which we generalize the logic.\nIn particular, although ground stratification may be used with arbitrary\nfixed-point definitions, we show that weakening stratification to this form for\ninductive definitions leads to inconsistency. The particular generalization we\ndescribe accords well with the way logical relations are used in practice. Our\nresults are also a intermediate step to building a more flexible form for\ndefinitions into the full logic underlying Abella, which additionally includes\nco-induction, generic quantification, and a mechanism referred to as nominal\nabstraction for analyzing occurrences of objects in terms that are governed by\ngeneric quantifiers."}
{"id": "2510.12298", "categories": ["cs.LO", "cs.FL", "68Q60", "F.3.1"], "pdf": "https://arxiv.org/pdf/2510.12298", "abs": "https://arxiv.org/abs/2510.12298", "authors": ["Marek Chalupa", "Thomas A. Henzinger", "Ana Oliveira da Costa"], "title": "Flavors of Quantifiers in Hyperlogics", "comment": null, "summary": "Hypertrace logic is a sorted first-order logic with separate sorts for time\nand execution traces. Its formulas specify hyperproperties, which are\nproperties relating multiple traces. In this work, we extend hypertrace logic\nby introducing trace quantifiers that range over the set of all possible\ntraces. In this extended logic, formulas can quantify over two kinds of trace\nvariables: constrained trace variables, which range over a fixed set of traces\ndefined by the model, and unconstrained trace variables, which can be assigned\nto any trace. In comparison, hyperlogics such as HyperLTL have only constrained\ntrace quantifiers. We use hypertrace logic to study how different quantifier\npatterns affect the decidability of the satisfiability problem. We prove that\nhypertrace logic without constrained trace quantifiers is equivalent to monadic\nsecond-order logic of one successor (S1S), and therefore satisfiable, and that\nthe trace-prefixed fragment (all trace quantifiers precede all time\nquantifiers) is equivalent to HyperQPTL. Moreover, we show that all hypertrace\nformulas where the only alternation between constrained trace quantifiers is\nfrom an existential to a universal quantifier are equisatisfiable to formulas\nwithout constraints on their trace variables and, therefore, decidable as well.\nOur framework allows us to study also time-prefixed hyperlogics, for which we\nprovide new decidability and undecidability results"}
{"id": "2510.12300", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2510.12300", "abs": "https://arxiv.org/abs/2510.12300", "authors": ["Sebasti√°n Urciuoli"], "title": "On the Formal Metatheory of the Pure Type Systems using One-sorted Variable Names and Multiple Substitutions", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "We develop formal theories of conversion for Church-style lambda-terms with\nPi-types in first-order syntax using one-sorted variables names and Stoughton's\nmultiple substitutions. We then formalize the Pure Type Systems along some\nfundamental metatheoretic properties: weakening, syntactic validity, closure\nunder alpha-conversion and substitution. Finally, we compare our formalization\nwith others related. The whole development has been machine-checked using the\nAgda system. Our work demonstrates that the mechanization of dependent type\ntheory by using conventional syntax and without identifying alpha-convertible\nlambda-terms is feasible."}
{"id": "2510.12302", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2510.12302", "abs": "https://arxiv.org/abs/2510.12302", "authors": ["Zhibo Chen", "Frank Pfenning"], "title": "CoLF Logic Programming as Infinitary Proof Exploration", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "Logical Frameworks such as Automath [de Bruijn, 1968] or LF [Harper et al.,\n1993] were originally conceived as metalanguages for the specification of\nfoundationally uncommitted deductive systems, yielding generic proof checkers.\nTheir high level of abstraction was soon exploited to also express algorithms\nover deductive systems such as theorem provers, type-checkers, evaluators,\ncompilers, proof transformers, etc. in the paradigm of\ncomputation-as-proof-construction. This has been realized in languages such as\n$\\lambda$-Prolog [Miller et al., 1991] or Elf [Pfenning, 1991] based on\nbackward chaining, and LolliMon [Lopez et al., 2005] or Celf [Schack-Nielsen\nand Schuermann, 2008], which integrated forward chaining. None of these early\nframeworks supported the direct expression of infinitary objects or proofs,\nwhich are available in the recently developed CoLF$^\\omega$ [Chen, 2023]. In\nthis work-in-progress report, we sketch an approach to\ncomputation-as-proof-construction over the first-order fragment of\nCoLF$^\\omega$ (called CoLF$^\\omega_1$ ) that already includes infinitary\nobjects and proofs. A key idea is the interpretation of logic variables as\ncommunication channels and computation as concurrent message-passing. This is\nrealized in a concrete compiler from CoLF$^\\omega_1$ to Sax, a\nproof-theoretically inspired parallel programming language based on the\nproof-reduction in the semi-axiomatic sequent calculus [DeYoung et al., 2020]."}
{"id": "2510.12481", "categories": ["cs.FL", "20M20, 20M35"], "pdf": "https://arxiv.org/pdf/2510.12481", "abs": "https://arxiv.org/abs/2510.12481", "authors": ["Attila Egri-Nagy"], "title": "Bringing Algebraic Hierarchical Decompositions to Concatenative Functional Languages", "comment": "7 pages, 6 figures, final version will be published elsewhere", "summary": "Programming languages tend to evolve over time to use more and more concepts\nfrom theoretical computer science. Still, there is a gap between programming\nand pure mathematics. Not all theoretical results have realized their promising\napplications. The algebraic decomposition of finite state automata\n(Krohn-Rhodes Theory) constructs an emulating hierarchical structure from\nsimpler components for any computing device. These decompositions provide ways\nto understand and control computational processes, but so far the applications\nwere limited to theoretical investigations. Here, we study how to apply\nalgebraic decompositions to programming languages. We use recent results on\ngeneralizing the algebraic theory to the categorical level (from semigroups to\nsemigroupoids) and work with the special class of concatenative functional\nprogramming languages. As a first application of semigroupoid decompositions,\nwe start to design a family of programming languages with an explicit\nsemigroupoid representation."}
{"id": "2510.11751", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.11751", "abs": "https://arxiv.org/abs/2510.11751", "authors": ["Jan Pedersen", "Kevin Chalmers"], "title": "Verifying Correctness of Shared Channels in a Cooperatively Scheduled Process-Oriented Language", "comment": null, "summary": "Correct concurrent behaviour is important in understanding how components\nwill act within certain conditions. In this work. we analyse the behaviour of\nshared communicating channels within a coorporatively scheduled runtime. We use\nthe refinement checking and modelling tool FDR to develop both specifications\nof how such shared channels should behave and models of the implementations of\nthese channels in the cooperatively scheduled language ProcessJ. Our results\ndemonstrate that although we can certainly implement the correct behaviour of\nsuch channels, the outcome is dependant on having adequate resources available\nto execute all processes involved. We conclude that modelling the runtime\nenvironment of concurrent components is necessary to ensure components behave\nas specified in the real world."}
{"id": "2510.11722", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11722", "abs": "https://arxiv.org/abs/2510.11722", "authors": ["Haruhiko Yoshioka", "Kazumasa Shimari", "Hidetake Uwano", "Kenichi Matsumoto"], "title": "eye2vec: Learning Distributed Representations of Eye Movement for Program Comprehension Analysis", "comment": "2 pages, 1 figure, conference", "summary": "This paper presents eye2vec, an infrastructure for analyzing software\ndevelopers' eye movements while reading source code. In common eye-tracking\nstudies in program comprehension, researchers must preselect analysis targets\nsuch as control flow or syntactic elements, and then develop analysis methods\nto extract appropriate metrics from the fixation for source code. Here,\nresearchers can define various levels of AOIs like words, lines, or code\nblocks, and the difference leads to different results. Moreover, the\ninterpretation of fixation for word/line can vary across the purposes of the\nanalyses. Hence, the eye-tracking analysis is a difficult task that depends on\nthe time-consuming manual work of the researchers. eye2vec represents\ncontinuous two fixations as transitions between syntactic elements using\ndistributed representations. The distributed representation facilitates the\nadoption of diverse data analysis methods with rich semantic interpretations."}
{"id": "2510.12303", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2510.12303", "abs": "https://arxiv.org/abs/2510.12303", "authors": ["Ambrus Kaposi", "Szumi Xie"], "title": "Type Theory with Single Substitutions", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "Type theory can be described as a generalised algebraic theory. This\nautomatically gives a notion of model and the existence of the syntax as the\ninitial model, which is a quotient inductive-inductive type. Algebraic\ndefinitions of type theory include Ehrhard's definition of model, categories\nwith families (CwFs), contextual categories, Awodey's natural models,\nC-systems, B-systems. With the exception of B-systems, these notions are based\non a parallel substitution calculus where substitutions form a category. In\nthis paper we define a single substitution calculus (SSC) for type theory and\nshow that the SSC syntax and the CwF syntax are isomorphic for a theory with\ndependent function space and a hierarchy of universes. SSC only includes single\nsubstitutions and single weakenings, and eight equations relating these: four\nequations describe how to substitute variables, and there are four equations on\ntypes which are needed to typecheck the other equations. SSC provides a simple,\nminimalistic alternative to parallel substitution calculi or B-systems for\ndefining type theory. SSC relates to CwF as extensional combinatory calculus\nrelates to lambda calculus: there are more models of the former, but the\nsyntaxes are equivalent. If we have some additional type formers, we show that\nan SSC model gives rise to a CwF."}
{"id": "2510.12298", "categories": ["cs.LO", "cs.FL", "68Q60", "F.3.1"], "pdf": "https://arxiv.org/pdf/2510.12298", "abs": "https://arxiv.org/abs/2510.12298", "authors": ["Marek Chalupa", "Thomas A. Henzinger", "Ana Oliveira da Costa"], "title": "Flavors of Quantifiers in Hyperlogics", "comment": null, "summary": "Hypertrace logic is a sorted first-order logic with separate sorts for time\nand execution traces. Its formulas specify hyperproperties, which are\nproperties relating multiple traces. In this work, we extend hypertrace logic\nby introducing trace quantifiers that range over the set of all possible\ntraces. In this extended logic, formulas can quantify over two kinds of trace\nvariables: constrained trace variables, which range over a fixed set of traces\ndefined by the model, and unconstrained trace variables, which can be assigned\nto any trace. In comparison, hyperlogics such as HyperLTL have only constrained\ntrace quantifiers. We use hypertrace logic to study how different quantifier\npatterns affect the decidability of the satisfiability problem. We prove that\nhypertrace logic without constrained trace quantifiers is equivalent to monadic\nsecond-order logic of one successor (S1S), and therefore satisfiable, and that\nthe trace-prefixed fragment (all trace quantifiers precede all time\nquantifiers) is equivalent to HyperQPTL. Moreover, we show that all hypertrace\nformulas where the only alternation between constrained trace quantifiers is\nfrom an existential to a universal quantifier are equisatisfiable to formulas\nwithout constraints on their trace variables and, therefore, decidable as well.\nOur framework allows us to study also time-prefixed hyperlogics, for which we\nprovide new decidability and undecidability results"}
{"id": "2510.11759", "categories": ["cs.PL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.11759", "abs": "https://arxiv.org/abs/2510.11759", "authors": ["Hongyu Lin", "Haolin Pan", "Haoran Luo", "Yuchen Li", "Kaichun Yao", "Libo Zhang", "Mingjie Xing", "Yanjun Wu"], "title": "AwareCompiler: Agentic Context-Aware Compiler Optimization via a Synergistic Knowledge-Data Driven Framework", "comment": null, "summary": "Compiler optimization is crucial for enhancing program performance by\ntransforming the sequence of optimization passes while maintaining correctness.\nDespite the promising potential of large language models (LLMs)-based agent for\nsoftware optimization, automating compiler optimization remains challenging due\nto: (1) semantic misalignment between abstract program representations and\nconcrete optimization passes, (2) inefficient interaction mechanisms between\nagents and compiler environments, and (3) reward sparsity from the extensive\ndecision-making process within large optimization spaces. This paper introduces\n\\textbf{AwareCompiler}, an agentic framework for compiler optimization that\naddresses these challenges through three key innovations: structured knowledge\nintegration and dataset construction, knowledge-driven adaptive pass\ngeneration, and data-driven hybrid training pipeline. Experimental results on\nstandard benchmarks demonstrate that AwareCompiler significantly outperforms\nexisting baselines in both performance and efficiency, highlighting the\neffectiveness of our synergistic knowledge-data-driven approach. Our code is\npublicly available at https://github.com/LHY-24/AwareCompiler."}
{"id": "2510.11813", "categories": ["cs.SE", "cs.CL", "cs.DB"], "pdf": "https://arxiv.org/pdf/2510.11813", "abs": "https://arxiv.org/abs/2510.11813", "authors": ["Marcus Emmanuel Barnes", "Taher A. Ghaleb", "Safwat Hassan"], "title": "Task-Aware Reduction for Scalable LLM-Database Systems", "comment": "Preprint. Accepted for presentation at the Workshop on Language\n  Models and Databases (LMD), co-located with CASCON 2025 (IEEE). The final\n  version will appear in IEEE Xplore", "summary": "Large Language Models (LLMs) are increasingly applied to data-intensive\nworkflows, from database querying to developer observability. Yet the\neffectiveness of these systems is constrained by the volume, verbosity, and\nnoise of real-world text-rich data such as logs, telemetry, and monitoring\nstreams. Feeding such data directly into LLMs is costly, environmentally\nunsustainable, and often misaligned with task objectives. Parallel efforts in\nLLM efficiency have focused on model- or architecture-level optimizations, but\nthe challenge of reducing upstream input verbosity remains underexplored. In\nthis paper, we argue for treating the token budget of an LLM as an attention\nbudget and elevating task-aware text reduction as a first-class design\nprinciple for language -- data systems. We position input-side reduction not as\ncompression, but as attention allocation: prioritizing information most\nrelevant to downstream tasks. We outline open research challenges for building\nbenchmarks, designing adaptive reduction pipelines, and integrating\ntoken-budget--aware preprocessing into database and retrieval systems. Our\nvision is to channel scarce attention resources toward meaningful signals in\nnoisy, data-intensive workflows, enabling scalable, accurate, and sustainable\nLLM--data integration."}
{"id": "2510.12304", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.12304", "abs": "https://arxiv.org/abs/2510.12304", "authors": ["Thorsten Altenkirch", "Nathaniel Burke", "Philip Wadler"], "title": "Substitution Without Copy and Paste", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "Defining substitution for a language with binders like the simply typed\n$\\lambda$-calculus requires repetition, defining substitution and renaming\nseparately. To verify the categorical properties of this calculus, we must\nrepeat the same argument many times. We present a lightweight method that\navoids repetition and that gives rise to a simply typed category with families\n(CwF) isomorphic to the initial simply typed CwF. Our paper is a literate Agda\nscript."}
{"id": "2510.12131", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.12131", "abs": "https://arxiv.org/abs/2510.12131", "authors": ["Haobin Ni", "Robbert van Renesse", "Greg Morrisett"], "title": "Functional Reasoning for Distributed Systems with Failures", "comment": null, "summary": "Distributed system theory literature often argues for correctness using an\ninformal, Hoare-like style of reasoning. While these arguments are intuitive,\nthey have not all been foolproof, and whether they directly correspond to\nformal proofs is in question. We formally ground this kind of reasoning and\nconnect it to standard formal approaches through language design and\nmeta-analysis, which leads to a functional style of compositional formal\nreasoning for a class of distributed systems, including cases involving\nByzantine faults. The core of our approach is twin languages: Sync and Async,\nwhich formalize the insight from distributed system theory that an asynchronous\nsystem can be reduced to a synchronous system for more straightforward\nreasoning under certain conditions. Sync describes a distributed system as a\nsingle, synchronous, data-parallel program. It restricts programs syntactically\nand has a functional denotational semantics suitable for Hoare-style formal\nreasoning. Async models a distributed system as a collection of interacting\nmonadic programs, one for each non-faulty node in the system. It has a standard\ntrace-based operational semantics, modeling asynchrony with interleaving. Sync\ncompiles to Async and can then be extracted to yield executable code. We prove\nthat any safety property proven for a Sync program in its denotational\nsemantics is preserved in the operational semantics of its compiled Async\nprograms. We implement the twin languages in Rocq and verify the safety\nproperties of two fault-tolerant consensus protocols: BOSCO and SeqPaxos."}
{"id": "2510.11838", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11838", "abs": "https://arxiv.org/abs/2510.11838", "authors": ["Xu Yang", "Jiayuan Zhou", "Michael Pacheco", "Wenhan Zhu", "Pengfei He", "Shaowei Wang", "Kui Liu", "Ruiqi Pan"], "title": "Lingxi: Repository-Level Issue Resolution Framework Enhanced by Procedural Knowledge Guided Scaling", "comment": null, "summary": "Driven by the advancements of Large Language Models (LLMs), LLM-powered\nagents are making significant improvements in software engineering tasks, yet\nstruggle with complex, repository-level issue resolution. Existing agent-based\nmethods have two key limitations. First, they lack of procedural knowledge\n(i.e., how an issue is fixed step-by-step and rationales behind it) to learn\nand leverage for issue resolution. Second, they rely on massive computational\npower to blindly explore the solution space. % To address those limitations, we\npropose Lingxi, an issue resolution framework that leverages procedural\nknowledge extracted from historical issue-fixing data to guide agents in\nsolving repository-level issues. \\ourTool first constructs this knowledge\noffline through a hierarchical abstraction mechanism, enabling agents to learn\nthe how and why behind a fix, not just the final solution. During online\napplication, it employs a knowledge-driven scaling method that leverages the\nprocedural knowledge of similar issues to intelligently analyze the target\nissue from multiple perspectives, in sharp contrast to undirected, brute-force\nexploration. % Lingxi successfully resolves 74.6\\% of bugs on the SWE-bench\nVerified benchmark in Past@1 setting, outperforming five state-of-the-art\ntechniques by a significant margin (5.4\\% to 14.9\\%). Our comprehensive\nablation study confirmed that the success of Lingxi comes directly from its use\nof procedural knowledge. Without it, the performance gains from scaling alone\nis negligible. Our qualitative study further shows that the ``design patterns\n$\\&$ coding practices'' is the most critical knowledge aspect, and that the\nroles of different knowledge aspects switch across different stages (i.e.,\nanalysis, planning, and fixing)."}
{"id": "2510.12305", "categories": ["cs.LO", "F.4.1"], "pdf": "https://arxiv.org/pdf/2510.12305", "abs": "https://arxiv.org/abs/2510.12305", "authors": ["Maribel Fern√°ndez", "Miguel Pagano", "Nora Szasz", "√Ålvaro Tasistro"], "title": "Dependently Sorted Nominal Signatures", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "We investigate an extension of nominal many-sorted signatures in which\nabstraction has a form of instantiation, called generalised concretion, as\nelimination operator (similarly to lambda-calculi). Expressions are then\nclassified using a system of sorts and sort families that respects\nalpha-conversion (similarly to dependently-typed lambda-calculi) but not\nallowing names to carry abstraction sorts, thus constituting a first-order\ndependent sort system. The system can represent forms of judgement and rules of\ninference of several interesting calculi. We present rules and properties of\nthe system as well as experiments of representation, and discuss how it\nconstitutes a basis on which to build a type theory where raw expressions with\nalpha-equivalence are given a completely formal treatment."}
{"id": "2510.12295", "categories": ["cs.PL", "cs.LO", "ACM F.3.2", "F.3.2"], "pdf": "https://arxiv.org/pdf/2510.12295", "abs": "https://arxiv.org/abs/2510.12295", "authors": ["Roberto M. Amadio"], "title": "Operational methods in semantics", "comment": null, "summary": "The focus of these lecture notes is on abstract models and basic ideas and\nresults that relate to the operational semantics of programming languages\nlargely conceived. The approach is to start with an abstract description of the\ncomputation steps of programs and then to build on top semantic equivalences,\nspecification languages, and static analyses. While other approaches to the\nsemantics of programming languages are possible, it appears that the\noperational one is particularly effective in that it requires a moderate level\nof mathematical sophistication and scales reasonably well to a large variety of\nprogramming features. In practice, operational semantics is a suitable\nframework to build portable language implementations and to specify and test\nprogram properties. It is also used routinely to tackle more ambitious tasks\nsuch as proving the correctness of a compiler or a static analyzer."}
{"id": "2510.11872", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.11872", "abs": "https://arxiv.org/abs/2510.11872", "authors": ["Alessandro Cornacchia", "Vaastav Anand", "Muhammad Bilal", "Zafar Qazi", "Marco Canini"], "title": "DMAS-Forge: A Framework for Transparent Deployment of AI Applications as Distributed Systems", "comment": "1st Workshop on Systems for Agentic AI (SAA '25)", "summary": "Agentic AI applications increasingly rely on multiple agents with distinct\nroles, specialized tools, and access to memory layers to solve complex tasks --\nclosely resembling service-oriented architectures. Yet, in the rapid evolving\nlandscape of programming frameworks and new protocols, deploying and testing AI\nagents as distributed systems remains a daunting and labor-intensive task. We\npresent DMAS-Forge, a framework designed to close this gap. DMAS-Forge\ndecouples application logic from specific deployment choices, and aims at\ntransparently generating the necessary glue code and configurations to spawn\ndistributed multi-agent applications across diverse deployment scenarios with\nminimal manual effort. We present our vision, design principles, and a\nprototype of DMAS-Forge. Finally, we discuss the opportunities and future work\nfor our approach."}
{"id": "2510.12314", "categories": ["cs.LO", "cs.CE"], "pdf": "https://arxiv.org/pdf/2510.12314", "abs": "https://arxiv.org/abs/2510.12314", "authors": ["Stephen F. Siegel", "Ganesh Gopalakrishnan"], "title": "Proceedings of the International Workshop on Verification of Scientific Software", "comment": null, "summary": "This volume contains the proceedings of the Verification of Scientific\nSoftware (VSS 2025) workshop, held on 4 May 2025 at McMaster University,\nCanada, as part of ETAPS 2025. VSS brings together researchers in software\nverification and scientific computing to address challenges in ensuring the\ncorrectness and reliability of large-scale scientific codes. The program\nfeatured five peer-reviewed papers, three invited contributions, and a set of\nchallenge problems, covering themes such as deductive verification,\nfloating-point error analysis, specification of coupled models, and\ndomain-aware testing. VSS builds on the Correctness Workshop series at\nSupercomputing and the 2023 NSF/DOE report on scientific software correctness.\nIt serves as yet another snapshot of this important area, showcasing a wide\nrange of perspectives, problems and their solutions in progress, with the\nchallenge problems having the potential to bring together separate verification\ntools into concerted action."}
{"id": "2510.12582", "categories": ["cs.PL", "cs.SE", "quant-ph"], "pdf": "https://arxiv.org/pdf/2510.12582", "abs": "https://arxiv.org/abs/2510.12582", "authors": ["Mark Koch", "Alan Lawrence", "Kartik Singhal", "Seyon Sivarajah", "Ross Duncan"], "title": "GUPPY: Pythonic Quantum-Classical Programming", "comment": "Presented at the Fourth International Workshop on Programming\n  Languages for Quantum Computing (PLanQC 2024)", "summary": "We present ongoing work on Guppy, a domain-specific language embedded in\nPython that allows users to write high-level hybrid quantum programs with\ncomplex control flow in Pythonic syntax, aiming to run them on actual quantum\nhardware."}
{"id": "2510.12011", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12011", "abs": "https://arxiv.org/abs/2510.12011", "authors": ["Bei Zhou", "Maximilian Balmus", "Cesare Corrado", "Ludovica Cicci", "Shuang Qian", "Steven A. Niederer"], "title": "TorchCor: High-Performance Cardiac Electrophysiology Simulations with the Finite Element Method on GPUs", "comment": null, "summary": "Cardiac electrophysiology (CEP) simulations are increasingly used for\nunderstanding cardiac arrhythmias and guiding clinical decisions. However,\nthese simulations typically require high-performance computing resources with\nnumerous CPU cores, which are often inaccessible to many research groups and\nclinicians. To address this, we present TorchCor, a high-performance Python\nlibrary for CEP simulations using the finite element method on general-purpose\nGPUs. Built on PyTorch, TorchCor significantly accelerates CEP simulations,\nparticularly for large 3D meshes. The accuracy of the solver is verified\nagainst manufactured analytical solutions and the $N$-version benchmark\nproblem. TorchCor is freely available for both academic and commercial use\nwithout restrictions."}
{"id": "2510.12295", "categories": ["cs.PL", "cs.LO", "ACM F.3.2", "F.3.2"], "pdf": "https://arxiv.org/pdf/2510.12295", "abs": "https://arxiv.org/abs/2510.12295", "authors": ["Roberto M. Amadio"], "title": "Operational methods in semantics", "comment": null, "summary": "The focus of these lecture notes is on abstract models and basic ideas and\nresults that relate to the operational semantics of programming languages\nlargely conceived. The approach is to start with an abstract description of the\ncomputation steps of programs and then to build on top semantic equivalences,\nspecification languages, and static analyses. While other approaches to the\nsemantics of programming languages are possible, it appears that the\noperational one is particularly effective in that it requires a moderate level\nof mathematical sophistication and scales reasonably well to a large variety of\nprogramming features. In practice, operational semantics is a suitable\nframework to build portable language implementations and to specify and test\nprogram properties. It is also used routinely to tackle more ambitious tasks\nsuch as proving the correctness of a compiler or a static analyzer."}
{"id": "2510.12297", "categories": ["cs.LO", "cs.PL", "F.4.1; D.2.4"], "pdf": "https://arxiv.org/pdf/2510.12297", "abs": "https://arxiv.org/abs/2510.12297", "authors": ["Nathan Guermond", "Gopalan Nadathur"], "title": "Ground Stratification for a Logic of Definitions with Induction", "comment": "In Proceedings LFMTP 2025, arXiv:2510.11199", "summary": "The logic underlying the Abella proof assistant includes mechanisms for\ninterpreting atomic predicates through fixed point definitions that can\nadditionally be treated inductively or co-inductively. However, the original\nformulation of the logic includes a strict stratification condition on\ndefinitions that is too restrictive for some applications such as those that\nuse a logical relations based approach to semantic equivalence. Tiu has shown\nhow this restriction can be eased by utilizing a weaker notion referred to as\nground stratification. Tiu's results were limited to a version of the logic\nthat does not treat inductive definitions. We show here that they can be\nextended to cover such definitions. While our results are obtained by using\ntechniques that have been previously deployed in related ways in this context,\ntheir use is sensitive to the particular way in which we generalize the logic.\nIn particular, although ground stratification may be used with arbitrary\nfixed-point definitions, we show that weakening stratification to this form for\ninductive definitions leads to inconsistency. The particular generalization we\ndescribe accords well with the way logical relations are used in practice. Our\nresults are also a intermediate step to building a more flexible form for\ndefinitions into the full logic underlying Abella, which additionally includes\nco-induction, generic quantification, and a mechanism referred to as nominal\nabstraction for analyzing occurrences of objects in terms that are governed by\ngeneric quantifiers."}
{"id": "2510.12082", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.12082", "abs": "https://arxiv.org/abs/2510.12082", "authors": ["Huy Nguyen", "Christoph Treude", "Patanamon Thongtanunam"], "title": "Enhancing Neural Code Representation with Additional Context", "comment": "34 pages, 7 figures, 11 tables", "summary": "Automated program comprehension underpins many software engineering tasks,\nfrom code summarisation to clone detection. Recent deep learning models achieve\nstrong results but typically rely on source code alone, overlooking contextual\ninformation such as version history or structural relationships. This limits\ntheir ability to capture how code evolves and operates. We conduct an empirical\nstudy on how enriching code representations with such contextual signals\naffects neural model performance on key comprehension tasks. Two downstream\ntasks, code clone detection and code summarisation, are evaluated using SeSaMe\n(1,679 Java methods) and CodeSearchNet (63,259 methods). Five representative\nmodels (CodeBERT, GraphCodeBERT, CodeT5, PLBART, ASTNN) are fine-tuned under\ncode-only and context-augmented settings. Results show that context generally\nimproves performance: version history consistently boosts clone detection\n(e.g., CodeT5 +15.92% F1) and summarisation (e.g., GraphCodeBERT +5.56%\nMETEOR), while call-graph effects vary by model and task. Combining multiple\ncontexts yields further gains (up to +21.48% macro-F1). Human evaluation on 100\nJava snippets confirms that context-augmented summaries are significantly\npreferred for Accuracy and Content Adequacy (p <= 0.026; |delta| up to 0.55).\nThese findings highlight the potential of contextual signals to enhance code\ncomprehension and open new directions for optimising contextual encoding in\nneural SE models."}
{"id": "2510.12702", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.12702", "abs": "https://arxiv.org/abs/2510.12702", "authors": ["Cedric Richter", "Heike Wehrheim"], "title": "Beyond Postconditions: Can Large Language Models infer Formal Contracts for Automatic Software Verification?", "comment": "under submission", "summary": "Automatic software verifiers have become increasingly effective at the task\nof checking software against (formal) specifications. Yet, their adoption in\npractice has been hampered by the lack of such specifications in real world\ncode. Large Language Models (LLMs) have shown promise in inferring formal\npostconditions from natural language hints embedded in code such as function\nnames, comments or documentation. Using the generated postconditions as\nspecifications in a subsequent verification, however, often leads verifiers to\nsuggest invalid inputs, hinting at potential issues that ultimately turn out to\nbe false alarms.\n  To address this, we revisit the problem of specification inference from\nnatural language in the context of automatic software verification. In the\nprocess, we introduce NL2Contract, the task of employing LLMs to translate\ninformal natural language into formal functional contracts, consisting of\npostconditions as well as preconditions. We introduce metrics to validate and\ncompare different NL2Contract approaches, using soundness, bug discriminative\npower of the generated contracts and their usability in the context of\nautomatic software verification as key metrics. We evaluate NL2Contract with\ndifferent LLMs and compare it to the task of postcondition generation\nnl2postcond. Our evaluation shows that (1) LLMs are generally effective at\ngenerating functional contracts sound for all possible inputs, (2) the\ngenerated contracts are sufficiently expressive for discriminating buggy from\ncorrect behavior, and (3) verifiers supplied with LLM inferred functional\ncontracts produce fewer false alarms than when provided with postconditions\nalone. Further investigations show that LLM inferred preconditions generally\nalign well with developers intentions which allows us to use automatic software\nverifiers to catch real-world bugs."}
{"id": "2510.12120", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12120", "abs": "https://arxiv.org/abs/2510.12120", "authors": ["Zhenyu Mao", "Jacky Keung", "Fengji Zhang", "Shuo Liu", "Yifei Wang", "Jialong Li"], "title": "Towards Engineering Multi-Agent LLMs: A Protocol-Driven Approach", "comment": null, "summary": "The increasing demand for software development has driven interest in\nautomating software engineering (SE) tasks using Large Language Models (LLMs).\nRecent efforts extend LLMs into multi-agent systems (MAS) that emulate\ncollaborative development workflows, but these systems often fail due to three\ncore deficiencies: under-specification, coordination misalignment, and\ninappropriate verification, arising from the absence of foundational SE\nstructuring principles. This paper introduces Software Engineering Multi-Agent\nProtocol (SEMAP), a protocol-layer methodology that instantiates three core SE\ndesign principles for multi-agent LLMs: (1) explicit behavioral contract\nmodeling, (2) structured messaging, and (3) lifecycle-guided execution with\nverification, and is implemented atop Google's Agent-to-Agent (A2A)\ninfrastructure. Empirical evaluation using the Multi-Agent System Failure\nTaxonomy (MAST) framework demonstrates that SEMAP effectively reduces failures\nacross different SE tasks. In code development, it achieves up to a 69.6%\nreduction in total failures for function-level development and 56.7% for\ndeployment-level development. For vulnerability detection, SEMAP reduces\nfailure counts by up to 47.4% on Python tasks and 28.2% on C/C++ tasks."}
{"id": "2510.12186", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12186", "abs": "https://arxiv.org/abs/2510.12186", "authors": ["Yun Peng", "Kisub Kim", "Linghan Meng", "Kui Liu"], "title": "iCodeReviewer: Improving Secure Code Review with Mixture of Prompts", "comment": null, "summary": "Code review is an essential process to ensure the quality of software that\nidentifies potential software issues at an early stage of software development.\nAmong all software issues, security issues are the most important to identify,\nas they can easily lead to severe software crashes and service disruptions.\nRecent research efforts have been devoted to automated approaches to reduce the\nmanual efforts required in the secure code review process. Despite the\nprogress, current automated approaches on secure code review, including static\nanalysis, deep learning models, and prompting approaches, still face the\nchallenges of limited precision and coverage, and a lack of comprehensive\nevaluation.\n  To mitigate these challenges, we propose iCodeReviewer, which is an automated\nsecure code review approach based on large language models (LLMs).\niCodeReviewer leverages a novel mixture-of-prompts architecture that\nincorporates many prompt experts to improve the coverage of security issues.\nEach prompt expert is a dynamic prompt pipeline to check the existence of a\nspecific security issue. iCodeReviewer also implements an effective routing\nalgorithm to activate only necessary prompt experts based on the code features\nin the input program, reducing the false positives induced by LLM\nhallucination. Experiment results in our internal dataset demonstrate the\neffectiveness of iCodeReviewer in security issue identification and\nlocalization with an F1 of 63.98%. The review comments generated by\niCodeReviewer also achieve a high acceptance rate up to 84% when it is deployed\nin production environments."}
{"id": "2510.12294", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12294", "abs": "https://arxiv.org/abs/2510.12294", "authors": ["Gerg≈ë Balogh", "D√°vid K√≥sz√≥", "Homayoun Safarpour Motealegh Mahalegi", "L√°szl√≥ T√≥th", "Bence Szak√°cs", "√Åron B√∫cs√∫"], "title": "Show Your Title! A Scoping Review on Verbalization in Software Engineering with LLM-Assisted Screening", "comment": "preprint of a paper under publication in Quality of Information and\n  Communications Technology 2025", "summary": "Understanding how software developers think, make decisions, and behave\nremains a key challenge in software engineering (SE). Verbalization techniques\n(methods that capture spoken or written thought processes) offer a lightweight\nand accessible way to study these cognitive aspects. This paper presents a\nscoping review of research at the intersection of SE and psychology (PSY),\nfocusing on the use of verbal data. To make large-scale interdisciplinary\nreviews feasible, we employed a large language model (LLM)-assisted screening\npipeline using GPT to assess the relevance of over 9,000 papers based solely on\ntitles. We addressed two questions: what themes emerge from\nverbalization-related work in SE, and how effective are LLMs in supporting\ninterdisciplinary review processes? We validated GPT's outputs against human\nreviewers and found high consistency, with a 13\\% disagreement rate. Prominent\nthemes mainly were tied to the craft of SE, while more human-centered topics\nwere underrepresented. The data also suggests that SE frequently draws on PSY\nmethods, whereas the reverse is rare."}
{"id": "2510.12364", "categories": ["cs.SE", "cs.AI", "cs.HC", "D.2.3"], "pdf": "https://arxiv.org/pdf/2510.12364", "abs": "https://arxiv.org/abs/2510.12364", "authors": ["Kevin Krings", "Nino S. Bohn", "Thomas Ludwig"], "title": "(R)evolution of Programming: Vibe Coding as a Post-Coding Paradigm", "comment": "Workshop Submission at the sixth decennial Aarhus conference in\n  Workshop \"The End of Programming (as we know it) - Envisioning Radical\n  Re-Conceptualizations of Co-Coding with AI\"", "summary": "Recent advancements in generative artificial intelligence (GenAI),\nparticularly large language models, have introduced new possibilities for\nsoftware development practices. In our paper we investigate the emerging Vibe\nCoding (VC) paradigm that emphasizes intuitive, affect-driven, and\nimprovisational interactions between developers and AI systems. Building upon\nthe discourse of End-User Development (EUD), we explore how VC diverges from\nconventional programming approaches such as those supported by tools like\nGitHub Copilot. Through five semi-structured interview sessions with ten\nexperienced software practitioners, we identify five thematic dimensions:\ncreativity, sustainability, the future of programming, collaboration, and\ncriticism. Our analysis conceptualizes VC within the metaphor of co-drifting,\ncontrasting it with the prevalent co-piloting perspective of AI-assisted\ndevelopment. We argue that VC reconfigures the developers role, blurring\nboundaries between professional and non-developers. While VC enables novel\nforms of expression and rapid prototyping, it also introduces challenges\nregarding reproducibility, scalability, and inclusivity. We propose that VC\nrepresents a meaningful shift in programming culture, warranting further\ninvestigation within human-computer interaction (HCI) and software engineering\nresearch."}
{"id": "2510.12397", "categories": ["cs.SE", "cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.12397", "abs": "https://arxiv.org/abs/2510.12397", "authors": ["S√∂ren Henning", "Adriano Vogel", "Esteban Perez-Wohlfeil", "Otmar Ertl", "Rick Rabiser"], "title": "Should I Run My Cloud Benchmark on Black Friday?", "comment": "Accepted for the 16th Symposium on Software Performance 2025", "summary": "Benchmarks and performance experiments are frequently conducted in cloud\nenvironments. However, their results are often treated with caution, as the\npresumed high variability of performance in the cloud raises concerns about\nreproducibility and credibility. In a recent study, we empirically quantified\nthe impact of this variability on benchmarking results by repeatedly executing\na stream processing application benchmark at different times of the day over\nseveral months. Our analysis confirms that performance variability is indeed\nobservable at the application level, although it is less pronounced than often\nassumed. The larger scale of our study compared to related work allowed us to\nidentify subtle daily and weekly performance patterns. We now extend this\ninvestigation by examining whether a major global event, such as Black Friday,\naffects the outcomes of performance benchmarks."}
{"id": "2510.12478", "categories": ["cs.SE", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.12478", "abs": "https://arxiv.org/abs/2510.12478", "authors": ["√òystein Haugen", "Stefan Klikovits", "Martin Arthur Andersen", "Jonathan Beaulieu", "Francis Bordeleau", "Joachim Denil", "Joost Mertens"], "title": "DarTwin made precise by SysMLv2 -- An Experiment", "comment": null, "summary": "The new SysMLv2 adds mechanisms for the built-in specification of\ndomain-specific concepts and language extensions. This feature promises to\nfacilitate the creation of Domain-Specific Languages (DSLs) and interfacing\nwith existing system descriptions and technical designs. In this paper, we\nreview these features and evaluate SysMLv2's capabilities using concrete use\ncases. We develop DarTwin DSL, a DSL that formalizes the existing DarTwin\nnotation for Digital Twin (DT) evolution, through SysMLv2, thereby supposedly\nenabling the wide application of DarTwin's evolution templates using any\nSysMLv2 tool. We demonstrate DarTwin DSL, but also point out limitations in the\ncurrently available tooling of SysMLv2 in terms of graphical notation\ncapabilities. This work contributes to the growing field of Model-Driven\nEngineering (MDE) for DTs and combines it with the release of SysMLv2, thus\nintegrating a systematic approach with DT evolution management in systems\nengineering."}
{"id": "2510.12487", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.12487", "abs": "https://arxiv.org/abs/2510.12487", "authors": ["Evgeniy Glukhov", "Michele Conti", "Egor Bogomolov", "Yaroslav Golubev", "Alexander Bezzubov"], "title": "Diff-XYZ: A Benchmark for Evaluating Diff Understanding", "comment": null, "summary": "Reliable handling of code diffs is central to agents that edit and refactor\nrepositories at scale. We introduce Diff-XYZ, a compact benchmark for code-diff\nunderstanding with three supervised tasks: apply (old code $+$ diff\n$\\rightarrow$ new code), anti-apply (new code $-$ diff $\\rightarrow$ old code),\nand diff generation (new code $-$ old code $\\rightarrow$ diff). Instances in\nthe benchmark are triples $\\langle \\textit{old code}, \\textit{new code},\n\\textit{diff} \\rangle$ drawn from real commits in CommitPackFT, paired with\nautomatic metrics and a clear evaluation protocol. We use the benchmark to do a\nfocused empirical study of the unified diff format and run a cross-format\ncomparison of different diff representations. Our findings reveal that\ndifferent formats should be used depending on the use case and model size. For\nexample, representing diffs in search-replace format is good for larger models\nin the diff generation scenario, yet not suited well for diff analysis and\nsmaller models. The Diff-XYZ benchmark is a reusable foundation for assessing\nand improving diff handling in LLMs that can aid future development of diff\nformats and models editing code. The dataset is published on HuggingFace Hub:\nhttps://huggingface.co/datasets/JetBrains-Research/diff-xyz."}
{"id": "2510.12546", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12546", "abs": "https://arxiv.org/abs/2510.12546", "authors": ["Hashini Gunatilake", "John Grundy", "Rashina Hoda", "Ingo Mueller"], "title": "The EmpathiSEr: Development and Validation of Software Engineering Oriented Empathy Scales", "comment": null, "summary": "Empathy plays a critical role in software engineering (SE), influencing\ncollaboration, communication, and user-centred design. Although SE research has\nincreasingly recognised empathy as a key human aspect, there remains no\nvalidated instrument specifically designed to measure it within the unique\nsocio-technical contexts of SE. Existing generic empathy scales, while\nwell-established in psychology and healthcare, often rely on language,\nscenarios, and assumptions that are not meaningful or interpretable for\nsoftware practitioners. These scales fail to account for the diverse,\nrole-specific, and domain-bound expressions of empathy in SE, such as\nunderstanding a non-technical user's frustrations or another practitioner's\ntechnical constraints, which differ substantially from empathy in clinical or\neveryday contexts. To address this gap, we developed and validated two\ndomain-specific empathy scales: EmpathiSEr-P, assessing empathy among\npractitioners, and EmpathiSEr-U, capturing practitioner empathy towards users.\nGrounded in a practitioner-informed conceptual framework, the scales encompass\nthree dimensions of empathy: cognitive empathy, affective empathy, and empathic\nresponses. We followed a rigorous, multi-phase methodology, including expert\nevaluation, cognitive interviews, and two practitioner surveys. The resulting\ninstruments represent the first psychometrically validated empathy scales\ntailored to SE, offering researchers and practitioners a tool for assessing\nempathy and designing empathy-enhancing interventions in software teams and\nuser interactions."}
{"id": "2510.12566", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.12566", "abs": "https://arxiv.org/abs/2510.12566", "authors": ["Maja H. Kirkeby", "Timmie Lagermann"], "title": "Evaluating End-User Device Energy Models in Sustainability Reporting of Browser-Based Web Services", "comment": null, "summary": "Sustainability reporting in web-based services increasingly relies on\nsimplified energy and carbon models such as the Danish Agency of Digital\nGovernment's Digst framework and the United Kingdom-based DIMPACT model.\nAlthough these models are widely adopted, their accuracy and precision remain\nunderexplored. This paper presents an empirical study evaluating how well such\nmodels reflect actual energy consumption during realistic user interactions\nwith common website categories. Energy use was measured across shopping,\nbooking, navigation, and news services using predefined user flows executed on\nfour laptop platforms. The results show that the commonly applied\nconstant-power approximation (P * t) can diverge substantially from measured\nenergy, depending on website category, device type, and task characteristics.\nThe findings demonstrate that model deviations are systematic rather than\nrandom and highlight the need for category-aware and device-reflective power\nparameters in reproducible sustainability reporting frameworks."}
{"id": "2510.12616", "categories": ["cs.SE", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.12616", "abs": "https://arxiv.org/abs/2510.12616", "authors": ["Muhammad Ashfaq", "Ahmed R. Sadik", "Teerath Das", "Muhammad Waseem", "Niko Makitalo", "Tommi Mikkonen"], "title": "Runtime Composition in Dynamic System of Systems: A Systematic Review of Challenges, Solutions, Tools, and Evaluation Methods", "comment": null, "summary": "Context: Modern Systems of Systems (SoSs) increasingly operate in dynamic\nenvironments (e.g., smart cities, autonomous vehicles) where runtime\ncomposition -- the on-the-fly discovery, integration, and coordination of\nconstituent systems (CSs)--is crucial for adaptability. Despite growing\ninterest, the literature lacks a cohesive synthesis of runtime composition in\ndynamic SoSs. Objective: This study synthesizes research on runtime composition\nin dynamic SoSs and identifies core challenges, solution strategies, supporting\ntools, and evaluation methods. Methods: We conducted a Systematic Literature\nReview (SLR), screening 1,774 studies published between 2019 and 2024 and\nselecting 80 primary studies for thematic analysis (TA). Results: Challenges\nfall into four categories: modeling and analysis, resilient operations, system\norchestration, and heterogeneity of CSs. Solutions span seven areas:\nco-simulation and digital twins, semantic ontologies, integration frameworks,\nadaptive architectures, middleware, formal methods, and AI-driven resilience.\nService-oriented frameworks for composition and integration dominate tooling,\nwhile simulation platforms support evaluation. Interoperability across tools,\nlimited cross-toolchain workflows, and the absence of standardized benchmarks\nremain key gaps. Evaluation approaches include simulation-based,\nimplementation-driven, and human-centered studies, which have been applied in\ndomains such as smart cities, healthcare, defense, and industrial automation.\nConclusions: The synthesis reveals tensions, including autonomy versus\ncoordination, the modeling-reality gap, and socio-technical integration. It\ncalls for standardized evaluation metrics, scalable decentralized\narchitectures, and cross-domain frameworks. The analysis aims to guide\nresearchers and practitioners in developing and implementing dynamically\ncomposable SoSs."}
{"id": "2510.12702", "categories": ["cs.SE", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.12702", "abs": "https://arxiv.org/abs/2510.12702", "authors": ["Cedric Richter", "Heike Wehrheim"], "title": "Beyond Postconditions: Can Large Language Models infer Formal Contracts for Automatic Software Verification?", "comment": "under submission", "summary": "Automatic software verifiers have become increasingly effective at the task\nof checking software against (formal) specifications. Yet, their adoption in\npractice has been hampered by the lack of such specifications in real world\ncode. Large Language Models (LLMs) have shown promise in inferring formal\npostconditions from natural language hints embedded in code such as function\nnames, comments or documentation. Using the generated postconditions as\nspecifications in a subsequent verification, however, often leads verifiers to\nsuggest invalid inputs, hinting at potential issues that ultimately turn out to\nbe false alarms.\n  To address this, we revisit the problem of specification inference from\nnatural language in the context of automatic software verification. In the\nprocess, we introduce NL2Contract, the task of employing LLMs to translate\ninformal natural language into formal functional contracts, consisting of\npostconditions as well as preconditions. We introduce metrics to validate and\ncompare different NL2Contract approaches, using soundness, bug discriminative\npower of the generated contracts and their usability in the context of\nautomatic software verification as key metrics. We evaluate NL2Contract with\ndifferent LLMs and compare it to the task of postcondition generation\nnl2postcond. Our evaluation shows that (1) LLMs are generally effective at\ngenerating functional contracts sound for all possible inputs, (2) the\ngenerated contracts are sufficiently expressive for discriminating buggy from\ncorrect behavior, and (3) verifiers supplied with LLM inferred functional\ncontracts produce fewer false alarms than when provided with postconditions\nalone. Further investigations show that LLM inferred preconditions generally\nalign well with developers intentions which allows us to use automatic software\nverifiers to catch real-world bugs."}
{"id": "2510.12582", "categories": ["cs.PL", "cs.SE", "quant-ph"], "pdf": "https://arxiv.org/pdf/2510.12582", "abs": "https://arxiv.org/abs/2510.12582", "authors": ["Mark Koch", "Alan Lawrence", "Kartik Singhal", "Seyon Sivarajah", "Ross Duncan"], "title": "GUPPY: Pythonic Quantum-Classical Programming", "comment": "Presented at the Fourth International Workshop on Programming\n  Languages for Quantum Computing (PLanQC 2024)", "summary": "We present ongoing work on Guppy, a domain-specific language embedded in\nPython that allows users to write high-level hybrid quantum programs with\ncomplex control flow in Pythonic syntax, aiming to run them on actual quantum\nhardware."}

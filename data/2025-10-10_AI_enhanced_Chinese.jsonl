{"id": "2510.07435", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2510.07435", "abs": "https://arxiv.org/abs/2510.07435", "authors": ["Zixuan Feng", "Sadia Afroz", "Anita Sarma"], "title": "Modeling Developer Burnout with GenAI Adoption", "comment": "10 pages, LLM", "summary": "Generative AI (GenAI) is rapidly reshaping software development workflows.\nWhile prior studies emphasize productivity gains, the adoption of GenAI also\nintroduces new pressures that may harm developers' well-being. In this paper,\nwe investigate the relationship between the adoption of GenAI and developers'\nburnout. We utilized the Job Demands--Resources (JD--R) model as the analytic\nlens in our empirical study. We employed a concurrent embedded mixed-methods\nresearch design, integrating quantitative and qualitative evidence. We first\nsurveyed 442 developers across diverse organizations, roles, and levels of\nexperience. We then employed Partial Least Squares--Structural Equation\nModeling (PLS-SEM) and regression to model the relationships among job demands,\njob resources, and burnout, complemented by a qualitative analysis of\nopen-ended responses to contextualize the quantitative findings. Our results\nshow that GenAI adoption heightens burnout by increasing job demands, while job\nresources and positive perceptions of GenAI mitigate these effects, reframing\nadoption as an opportunity.", "AI": {"tldr": "\u7814\u7a76\u53d1\u73b0GenAI\u91c7\u7528\u901a\u8fc7\u589e\u52a0\u5de5\u4f5c\u9700\u6c42\u52a0\u5267\u5f00\u53d1\u8005\u5026\u6020\uff0c\u4f46\u5de5\u4f5c\u8d44\u6e90\u548c\u79ef\u6781\u8ba4\u77e5\u53ef\u7f13\u89e3\u6b64\u6548\u5e94", "motivation": "\u7814\u7a76GenAI\u91c7\u7528\u4e0e\u5f00\u53d1\u8005\u5026\u6020\u7684\u5173\u7cfb\uff0c\u5173\u6ce8AI\u5de5\u5177\u5728\u63d0\u5347\u751f\u4ea7\u529b\u540c\u65f6\u53ef\u80fd\u5e26\u6765\u7684\u8d1f\u9762\u5f71\u54cd", "method": "\u91c7\u7528\u6df7\u5408\u65b9\u6cd5\u7814\u7a76\u8bbe\u8ba1\uff0c\u8c03\u67e5442\u540d\u5f00\u53d1\u8005\uff0c\u4f7f\u7528PLS-SEM\u548c\u56de\u5f52\u5206\u6790\u5efa\u6a21\uff0c\u8f85\u4ee5\u5b9a\u6027\u5206\u6790", "result": "GenAI\u91c7\u7528\u901a\u8fc7\u589e\u52a0\u5de5\u4f5c\u9700\u6c42\u5bfc\u81f4\u5026\u6020\u52a0\u91cd\uff0c\u4f46\u5de5\u4f5c\u8d44\u6e90\u548c\u79ef\u6781\u8ba4\u77e5\u53ef\u51cf\u8f7b\u8fd9\u79cd\u8d1f\u9762\u5f71\u54cd", "conclusion": "GenAI\u91c7\u7528\u65e2\u662f\u6311\u6218\u4e5f\u662f\u673a\u9047\uff0c\u7ec4\u7ec7\u5e94\u5173\u6ce8\u5de5\u4f5c\u8d44\u6e90\u5efa\u8bbe\u4ee5\u7f13\u89e3AI\u5e26\u6765\u7684\u5026\u6020\u98ce\u9669"}}
{"id": "2510.07529", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07529", "abs": "https://arxiv.org/abs/2510.07529", "authors": ["Carol Hanna", "Federica Sarro", "Mark Harman", "Justyna Petke"], "title": "HotBugs.jar: A Benchmark of Hot Fixes for Time-Critical Bugs", "comment": null, "summary": "Hot fixes are urgent, unplanned changes deployed to production systems to\naddress time-critical issues. Despite their importance, no existing evaluation\nbenchmark focuses specifically on hot fixes. We present HotBugs$.$jar, the\nfirst dataset dedicated to real-world hot fixes. From an initial mining of 10\nactive Apache projects totaling over 190K commits and 150K issue reports, we\nidentified 746 software patches that met our hot-fix criteria. After manual\nevaluation, 679 were confirmed as genuine hot fixes, of which 110 are\nreproducible using a test suite. Building upon the Bugs$.$jar framework,\nHotBugs$.$jar integrates these 110 reproducible cases and makes available all\n679 manually validated hot fixes, each enriched with comprehensive metadata to\nsupport future research. Each hot fix was systematically identified using Jira\nissue data, validated by independent reviewers, and packaged in a reproducible\nformat with buggy and fixed versions, test suites, and metadata. HotBugs$.$jar\nhas already been adopted as the official challenge dataset for the Search-Based\nSoftware Engineering (SBSE) Conference Challenge Track, demonstrating its\nimmediate impact. This benchmark enables the study and evaluation of tools for\nrapid debugging, automated repair, and production-grade resilience in modern\nsoftware systems to drive research in this essential area forward.", "AI": {"tldr": "HotBugs.jar\u662f\u9996\u4e2a\u4e13\u6ce8\u4e8e\u771f\u5b9e\u4e16\u754c\u70ed\u4fee\u590d\u7684\u6570\u636e\u96c6\uff0c\u5305\u542b679\u4e2a\u624b\u52a8\u9a8c\u8bc1\u7684\u70ed\u4fee\u590d\u6848\u4f8b\uff0c\u5176\u4e2d110\u4e2a\u53ef\u590d\u73b0\uff0c\u4e3a\u5feb\u901f\u8c03\u8bd5\u3001\u81ea\u52a8\u4fee\u590d\u548c\u7cfb\u7edf\u5f39\u6027\u7814\u7a76\u63d0\u4f9b\u57fa\u51c6\u3002", "motivation": "\u5c3d\u7ba1\u70ed\u4fee\u590d\u5bf9\u751f\u4ea7\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u73b0\u6709\u8bc4\u4f30\u57fa\u51c6\u7f3a\u4e4f\u4e13\u95e8\u9488\u5bf9\u70ed\u4fee\u590d\u7684\u6570\u636e\u96c6\uff0c\u963b\u788d\u4e86\u76f8\u5173\u5de5\u5177\u7684\u7814\u7a76\u548c\u53d1\u5c55\u3002", "method": "\u901a\u8fc7\u6316\u639810\u4e2aApache\u9879\u76ee\u768419\u4e07\u6b21\u63d0\u4ea4\u548c15\u4e07\u4efd\u95ee\u9898\u62a5\u544a\uff0c\u8bc6\u522b746\u4e2a\u70ed\u4fee\u590d\u8865\u4e01\uff0c\u7ecf\u624b\u52a8\u8bc4\u4f30\u786e\u8ba4679\u4e2a\u771f\u5b9e\u70ed\u4fee\u590d\uff0c\u5176\u4e2d110\u4e2a\u53ef\u590d\u73b0\u6d4b\u8bd5\u3002", "result": "\u6784\u5efa\u4e86HotBugs.jar\u6570\u636e\u96c6\uff0c\u5305\u542b679\u4e2a\u624b\u52a8\u9a8c\u8bc1\u7684\u70ed\u4fee\u590d\u6848\u4f8b\uff08110\u4e2a\u53ef\u590d\u73b0\uff09\uff0c\u6bcf\u4e2a\u6848\u4f8b\u5305\u542b\u9519\u8bef\u548c\u4fee\u590d\u7248\u672c\u3001\u6d4b\u8bd5\u5957\u4ef6\u548c\u5143\u6570\u636e\u3002", "conclusion": "HotBugs.jar\u586b\u8865\u4e86\u70ed\u4fee\u590d\u7814\u7a76\u9886\u57df\u7684\u7a7a\u767d\uff0c\u5df2\u88abSBSE\u4f1a\u8bae\u91c7\u7eb3\u4e3a\u5b98\u65b9\u6311\u6218\u6570\u636e\u96c6\uff0c\u5c06\u63a8\u52a8\u5feb\u901f\u8c03\u8bd5\u3001\u81ea\u52a8\u4fee\u590d\u548c\u7cfb\u7edf\u5f39\u6027\u5de5\u5177\u7684\u7814\u7a76\u3002"}}
{"id": "2510.07604", "categories": ["cs.SE", "D.2.4"], "pdf": "https://arxiv.org/pdf/2510.07604", "abs": "https://arxiv.org/abs/2510.07604", "authors": ["Yubo Bai", "Tapti Palit"], "title": "RustAssure: Differential Symbolic Testing for LLM-Transpiled C-to-Rust Code", "comment": "13 pages to appear in Proceedings of ASE 2025", "summary": "Rust is a memory-safe programming language that significantly improves\nsoftware security. Existing codebases written in unsafe memory languages, such\nas C, must first be transpiled to Rust to take advantage of Rust's improved\nsafety guarantees. RustAssure presents a system that uses Large Language Models\n(LLMs) to automatically transpile existing C codebases to Rust. RustAssure uses\nprompt engineering techniques to maximize the chances of the LLM generating\nidiomatic and safe Rust code. Moreover, because LLMs often generate code with\nsubtle bugs that can be missed under traditional unit or fuzz testing,\nRustAssure performs differential symbolic testing to establish the semantic\nsimilarity between the original C and LLM-transpiled Rust code. We evaluated\nRustAssure with five real-world applications and libraries, and showed that our\nsystem is able to generate compilable Rust functions for 89.8% of all C\nfunctions, of which 69.9% produced equivalent symbolic return values for both\nthe C and Rust functions.", "AI": {"tldr": "RustAssure\u662f\u4e00\u4e2a\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\u81ea\u52a8\u5c06C\u4ee3\u7801\u8f6c\u6362\u4e3aRust\u7684\u7cfb\u7edf\uff0c\u901a\u8fc7\u63d0\u793a\u5de5\u7a0b\u751f\u6210\u60ef\u7528\u5b89\u5168\u7684Rust\u4ee3\u7801\uff0c\u5e76\u91c7\u7528\u5dee\u5206\u7b26\u53f7\u6d4b\u8bd5\u9a8c\u8bc1\u8bed\u4e49\u7b49\u4ef7\u6027\u3002", "motivation": "\u73b0\u6709C\u4ee3\u7801\u5e93\u9700\u8981\u8f6c\u6362\u4e3aRust\u624d\u80fd\u5229\u7528\u5176\u5185\u5b58\u5b89\u5168\u7279\u6027\uff0c\u4f46\u624b\u52a8\u8f6c\u6362\u6210\u672c\u9ad8\u4e14\u6613\u51fa\u9519\u3002", "method": "\u4f7f\u7528LLM\u8fdb\u884cC\u5230Rust\u7684\u81ea\u52a8\u8f6c\u6362\uff0c\u7ed3\u5408\u63d0\u793a\u5de5\u7a0b\u6280\u672f\u751f\u6210\u9ad8\u8d28\u91cf\u4ee3\u7801\uff0c\u5e76\u901a\u8fc7\u5dee\u5206\u7b26\u53f7\u6d4b\u8bd5\u9a8c\u8bc1\u8f6c\u6362\u540e\u7684\u8bed\u4e49\u7b49\u4ef7\u6027\u3002", "result": "\u57285\u4e2a\u771f\u5b9e\u5e94\u7528\u4e2d\uff0c\u7cfb\u7edf\u4e3a89.8%\u7684C\u51fd\u6570\u751f\u6210\u4e86\u53ef\u7f16\u8bd1\u7684Rust\u4ee3\u7801\uff0c\u5176\u4e2d69.9%\u7684\u51fd\u6570\u5728C\u548cRust\u7248\u672c\u95f4\u4ea7\u751f\u4e86\u7b49\u4ef7\u7684\u7b26\u53f7\u8fd4\u56de\u503c\u3002", "conclusion": "RustAssure\u80fd\u591f\u6709\u6548\u81ea\u52a8\u5316C\u5230Rust\u7684\u8f6c\u6362\u8fc7\u7a0b\uff0c\u751f\u6210\u9ad8\u8d28\u91cf\u4e14\u8bed\u4e49\u7b49\u4ef7\u7684Rust\u4ee3\u7801\u3002"}}
{"id": "2510.07740", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.07740", "abs": "https://arxiv.org/abs/2510.07740", "authors": ["Dezhi Ran", "Yuan Cao", "Mengzhou Wu", "Simin Chen", "Yuzhe Guo", "Jun Ren", "Zihe Song", "Hao Yu", "Jialei Wei", "Linyi Li", "Wei Yang", "Baishakhi Ray", "Tao Xie"], "title": "AppForge: From Assistant to Independent Developer -- Are GPTs Ready for Software Development?", "comment": "Under Review. Benchmark and leadboards at\n  https://appforge-bench.github.io/", "summary": "Large language models (LLMs) have demonstrated remarkable capability in\nfunction-level code generation tasks. Unlike isolated functions, real-world\napplications demand reasoning over the entire software system: developers must\norchestrate how different components interact, maintain consistency across\nstates over time, and ensure the application behaves correctly within the\nlifecycle and framework constraints. Yet, no existing benchmark adequately\nevaluates whether LLMs can bridge this gap and construct entire software\nsystems from scratch. To address this gap, we propose APPFORGE, a benchmark\nconsisting of 101 software development problems drawn from real-world Android\napps. Given a natural language specification detailing the app functionality, a\nlanguage model is tasked with implementing the functionality into an Android\napp from scratch. Developing an Android app from scratch requires understanding\nand coordinating app states, lifecycle management, and asynchronous operations,\ncalling for LLMs to generate context-aware, robust, and maintainable code. To\nconstruct APPFORGE, we design a multi-agent system to automatically summarize\nthe main functionalities from app documents and navigate the app to synthesize\ntest cases validating the functional correctness of app implementation.\nFollowing rigorous manual verification by Android development experts, APPFORGE\nincorporates the test cases within an automated evaluation framework that\nenables reproducible assessment without human intervention, making it easily\nadoptable for future research. Our evaluation on 12 flagship LLMs show that all\nevaluated models achieve low effectiveness, with the best-performing model\n(GPT-5) developing only 18.8% functionally correct applications, highlighting\nfundamental limitations in current models' ability to handle complex,\nmulti-component software engineering challenges.", "AI": {"tldr": "APPFORGE\u662f\u4e00\u4e2a\u8bc4\u4f30LLMs\u6784\u5efa\u5b8c\u6574\u8f6f\u4ef6\u7cfb\u7edf\u80fd\u529b\u7684\u57fa\u51c6\uff0c\u5305\u542b101\u4e2a\u771f\u5b9eAndroid\u5e94\u7528\u5f00\u53d1\u95ee\u9898\uff0c\u6d4b\u8bd5\u663e\u793a\u5f53\u524d\u6700\u4f73\u6a21\u578b\u4ec5\u80fd\u5f00\u53d118.8%\u529f\u80fd\u6b63\u786e\u7684\u5e94\u7528\u3002", "motivation": "\u73b0\u6709\u57fa\u51c6\u4e3b\u8981\u8bc4\u4f30\u51fd\u6570\u7ea7\u4ee3\u7801\u751f\u6210\uff0c\u800c\u771f\u5b9e\u8f6f\u4ef6\u5f00\u53d1\u9700\u8981\u534f\u8c03\u591a\u4e2a\u7ec4\u4ef6\u3001\u7ba1\u7406\u72b6\u6001\u751f\u547d\u5468\u671f\u548c\u5f02\u6b65\u64cd\u4f5c\uff0c\u7f3a\u4e4f\u8bc4\u4f30LLMs\u6784\u5efa\u5b8c\u6574\u8f6f\u4ef6\u7cfb\u7edf\u80fd\u529b\u7684\u57fa\u51c6\u3002", "method": "\u8bbe\u8ba1\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u81ea\u52a8\u4ece\u5e94\u7528\u6587\u6863\u4e2d\u603b\u7ed3\u4e3b\u8981\u529f\u80fd\u5e76\u5bfc\u822a\u5e94\u7528\u5408\u6210\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6784\u5efa\u5305\u542b\u6d4b\u8bd5\u7528\u4f8b\u7684\u81ea\u52a8\u5316\u8bc4\u4f30\u6846\u67b6\u3002", "result": "\u8bc4\u4f3012\u4e2a\u4e3b\u6d41LLMs\uff0c\u6240\u6709\u6a21\u578b\u8868\u73b0\u5747\u4e0d\u4f73\uff0c\u6700\u4f73\u6a21\u578bGPT-5\u4ec5\u80fd\u5f00\u53d118.8%\u529f\u80fd\u6b63\u786e\u7684\u5e94\u7528\u3002", "conclusion": "\u5f53\u524dLLMs\u5728\u5904\u7406\u590d\u6742\u3001\u591a\u7ec4\u4ef6\u7684\u8f6f\u4ef6\u5de5\u7a0b\u6311\u6218\u65b9\u9762\u5b58\u5728\u6839\u672c\u6027\u5c40\u9650\u3002"}}
{"id": "2510.07696", "categories": ["cs.FL", "math.LO", "68Q45 (Primary) 03D05, 68Q30, 68Q06 (Secondary)", "F.4.2; F.4.3"], "pdf": "https://arxiv.org/pdf/2510.07696", "abs": "https://arxiv.org/abs/2510.07696", "authors": ["Joey Chen", "Bj\u00f8rn Kjos-Hanssen", "Ivan Koswara", "Linus Richter", "Frank Stephan"], "title": "Languages of Words of Low Automatic Complexity Are Hard to Compute", "comment": "22 pages, 1 figure", "summary": "The automatic complexity of a finite word (string) is an analogue for finite\nautomata of Sipser's distinguishing complexity (1983) and was introduced by\nShallit and Wang (2001). For a finite alphabet $\\Sigma$ of at least two\nelements, we consider the non-deterministic automatic complexity given by\nexactly - yet not necessarily uniquely - accepting automata: a word $x \\in\n\\Sigma^*$ has exact non-deterministic automatic complexity $k \\in \\mathbb{N}$\nif there exists a non-deterministic automaton of $k$ states which accepts $x$\nwhile rejecting every other word of the same length as $x$, and no automaton of\nfewer states has this property. Importantly, and in contrast to the classical\nnotion, the witnessing automaton may have multiple paths of computation\naccepting $x$. We denote this measure of complexity by $A_{Ne}$, and study a\nclass of languages of low $A_{Ne}$-complexity defined as $L_q = \\{ \\, x \\in\n\\Sigma^* : A_{Ne}(x) < q|x| \\, \\}$, which is parameterised by rationals $q \\in\n(0,1/2)$ (generalising a class of sets first studied by Kjos-Hanssen). We show\nthat for every $q \\in (0,1/2)$, this class is neither context-free nor\nrecognisable by certain Boolean circuits. In the process, we answer an open\nquestion of Kjos-Hanssen quantifying the complexity of $L_{1/3}$ in terms of\nBoolean circuits, and also prove the Shannon effect for $A_{Ne}$.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u975e\u786e\u5b9a\u6027\u81ea\u52a8\u590d\u6742\u5ea6A_Ne\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e\u975e\u786e\u5b9a\u6027\u81ea\u52a8\u673a\u7684\u5b57\u7b26\u4e32\u590d\u6742\u5ea6\u5ea6\u91cf\u3002\u4f5c\u8005\u5b9a\u4e49\u4e86\u4f4e\u590d\u6742\u5ea6\u8bed\u8a00\u7c7bL_q\uff0c\u5e76\u8bc1\u660e\u4e86\u5bf9\u4e8e\u4efb\u610fq\u2208(0,1/2)\uff0c\u8be5\u7c7b\u65e2\u4e0d\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\uff0c\u4e5f\u4e0d\u80fd\u88ab\u67d0\u4e9b\u5e03\u5c14\u7535\u8def\u8bc6\u522b\u3002", "motivation": "\u7814\u7a76\u975e\u786e\u5b9a\u6027\u81ea\u52a8\u590d\u6742\u5ea6\u7684\u6027\u8d28\uff0c\u7279\u522b\u662f\u4f4e\u590d\u6742\u5ea6\u8bed\u8a00\u7c7b\u7684\u8ba1\u7b97\u590d\u6742\u6027\uff0c\u4ee5\u6269\u5c55\u5bf9\u81ea\u52a8\u673a\u7406\u8bba\u4e2d\u590d\u6742\u5ea6\u5ea6\u91cf\u7684\u7406\u89e3\u3002", "method": "\u5b9a\u4e49\u975e\u786e\u5b9a\u6027\u81ea\u52a8\u590d\u6742\u5ea6A_Ne\uff0c\u6784\u5efa\u53c2\u6570\u5316\u7684\u8bed\u8a00\u7c7bL_q = {x\u2208\u03a3*: A_Ne(x) < q|x|}\uff0c\u901a\u8fc7\u7406\u8bba\u5206\u6790\u8bc1\u660e\u8fd9\u4e9b\u8bed\u8a00\u7c7b\u7684\u6027\u8d28\u3002", "result": "\u5bf9\u4e8e\u6240\u6709q\u2208(0,1/2)\uff0c\u8bed\u8a00\u7c7bL_q\u65e2\u4e0d\u662f\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\uff0c\u4e5f\u4e0d\u80fd\u88ab\u67d0\u4e9b\u5e03\u5c14\u7535\u8def\u8bc6\u522b\u3002\u540c\u65f6\u89e3\u51b3\u4e86Kjos-Hanssen\u5173\u4e8eL_{1/3}\u5e03\u5c14\u7535\u8def\u590d\u6742\u5ea6\u7684\u5f00\u653e\u95ee\u9898\uff0c\u5e76\u8bc1\u660e\u4e86A_Ne\u7684\u9999\u519c\u6548\u5e94\u3002", "conclusion": "\u975e\u786e\u5b9a\u6027\u81ea\u52a8\u590d\u6742\u5ea6\u5b9a\u4e49\u7684\u8bed\u8a00\u7c7b\u5177\u6709\u9ad8\u5ea6\u7684\u8ba1\u7b97\u590d\u6742\u6027\uff0c\u8fd9\u4e9b\u7ed3\u679c\u6df1\u5316\u4e86\u6211\u4eec\u5bf9\u81ea\u52a8\u673a\u590d\u6742\u5ea6\u548c\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u4e4b\u95f4\u8054\u7cfb\u7684\u7406\u89e3\u3002"}}
{"id": "2510.07361", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.07361", "abs": "https://arxiv.org/abs/2510.07361", "authors": ["Gilles Geeraerts", "Fr\u00e9d\u00e9ric Herbreteau", "Jean-Fran\u00e7ois Raskin", "Alexis Reynouard"], "title": "A Zone-Based Algorithm for Timed Parity Games", "comment": "16 pages, 5 figures, to be published in FSTTCS 2025", "summary": "This paper revisits timed games by building upon the semantics introduced in\n\"The Element of Surprise in Timed Games\". We introduce some modifications to\nthis semantics for two primary reasons: firstly, we recognize instances where\nthe original semantics appears counterintuitive in the context of controller\nsynthesis; secondly, we present methods to develop efficient zone-based\nalgorithms. Our algorithm successfully addresses timed parity games, and we\nhave implemented it using UppAal's zone library. This prototype effectively\ndemonstrates the feasibility of a zone-based algorithm for parity objectives\nand a rich semantics for timed interactions between the players.", "AI": {"tldr": "\u672c\u6587\u57fa\u4e8e\"The Element of Surprise in Timed Games\"\u7684\u8bed\u4e49\u91cd\u65b0\u5ba1\u89c6\u5b9a\u65f6\u6e38\u620f\uff0c\u4fee\u6539\u4e86\u539f\u59cb\u8bed\u4e49\u4ee5\u89e3\u51b3\u63a7\u5236\u5668\u5408\u6210\u4e2d\u7684\u53cd\u76f4\u89c9\u95ee\u9898\uff0c\u5e76\u63d0\u51fa\u4e86\u9ad8\u6548\u7684\u57fa\u4e8e\u533a\u57df\u7684\u7b97\u6cd5\u3002", "motivation": "\u539f\u59cb\u8bed\u4e49\u5728\u63a7\u5236\u5668\u5408\u6210\u4e2d\u5b58\u5728\u53cd\u76f4\u89c9\u7684\u60c5\u51b5\uff0c\u9700\u8981\u6539\u8fdb\u8bed\u4e49\u4ee5\u66f4\u597d\u5730\u652f\u6301\u63a7\u5236\u5668\u5408\u6210\u5e94\u7528\u3002", "method": "\u4fee\u6539\u4e86\u539f\u59cb\u5b9a\u65f6\u6e38\u620f\u8bed\u4e49\uff0c\u5f00\u53d1\u4e86\u57fa\u4e8e\u533a\u57df\u7684\u9ad8\u6548\u7b97\u6cd5\uff0c\u4f7f\u7528UppAal\u7684\u533a\u57df\u5e93\u5b9e\u73b0\u539f\u578b\u3002", "result": "\u7b97\u6cd5\u6210\u529f\u89e3\u51b3\u4e86\u5b9a\u65f6\u5947\u5076\u6e38\u620f\u95ee\u9898\uff0c\u539f\u578b\u8bc1\u660e\u4e86\u57fa\u4e8e\u533a\u57df\u7684\u7b97\u6cd5\u5bf9\u4e8e\u5947\u5076\u76ee\u6807\u548c\u4e30\u5bcc\u5b9a\u65f6\u4ea4\u4e92\u8bed\u4e49\u7684\u53ef\u884c\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u4fee\u6539\u8bed\u4e49\u548c\u57fa\u4e8e\u533a\u57df\u7684\u7b97\u6cd5\u4e3a\u5b9a\u65f6\u6e38\u620f\u63d0\u4f9b\u4e86\u66f4\u76f4\u89c2\u7684\u63a7\u5236\u5668\u5408\u6210\u65b9\u6cd5\u548c\u9ad8\u6548\u5b9e\u73b0\u9014\u5f84\u3002"}}
{"id": "2510.07582", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.07582", "abs": "https://arxiv.org/abs/2510.07582", "authors": ["Yuyan Bao", "Tiark Rompf"], "title": "Type, Ability, and Effect Systems: Perspectives on Purity, Semantics, and Expressiveness", "comment": null, "summary": "Programming benefits from a clear separation between pure, mathematical\ncomputation and impure, effectful interaction with the world. Existing\napproaches to enforce this separation include monads, type-and-effect systems,\nand capability systems. All share a tension between precision and usability,\nand each one has non-obvious strengths and weaknesses.\n  This paper aims to raise the bar in assessing such systems. First, we propose\na semantic definition of purity, inspired by contextual equivalence, as a\nbaseline independent of any specific typing discipline. Second, we propose that\nexpressiveness should be measured by the degree of completeness, i.e., how many\nsemantically pure terms can be typed as pure. Using this measure, we focus on\nminimal meaningful effect and capability systems and show that they are\nincomparable, i.e., neither subsumes the other in terms of expressiveness.\n  Based on this result, we propose a synthesis and show that type, ability, and\neffect systems combine their respective strengths while avoiding their\nweaknesses. As part of our formal model, we provide a logical relation to\nfacilitate proofs of purity and other properties for a variety of effect typing\ndisciplines.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u8bc4\u4f30\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7eaf\u5ea6\u548c\u6548\u5e94\u7cfb\u7edf\u7684\u8bed\u4e49\u57fa\u51c6\uff0c\u6bd4\u8f83\u4e86\u4e0d\u540c\u7c7b\u578b\u7cfb\u7edf\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5e76\u5c55\u793a\u4e86\u7c7b\u578b\u3001\u80fd\u529b\u548c\u6548\u5e94\u7cfb\u7edf\u7684\u7ec4\u5408\u4f18\u52bf\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\uff08\u5982\u5355\u5b50\u3001\u7c7b\u578b\u6548\u5e94\u7cfb\u7edf\u548c\u80fd\u529b\u7cfb\u7edf\uff09\u5728\u7cbe\u786e\u6027\u548c\u53ef\u7528\u6027\u4e4b\u95f4\u5b58\u5728\u5f20\u529b\uff0c\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u9700\u8981\u66f4\u597d\u7684\u8bc4\u4f30\u6807\u51c6\u3002", "method": "\u9996\u5148\u57fa\u4e8e\u4e0a\u4e0b\u6587\u7b49\u4ef7\u63d0\u51fa\u7eaf\u5ea6\u7684\u8bed\u4e49\u5b9a\u4e49\uff0c\u7136\u540e\u901a\u8fc7\u5b8c\u6574\u6027\u5ea6\u91cf\u8868\u8fbe\u80fd\u529b\uff0c\u6bd4\u8f83\u6700\u5c0f\u6548\u5e94\u548c\u80fd\u529b\u7cfb\u7edf\u7684\u8868\u8fbe\u529b\uff0c\u6700\u540e\u63d0\u51fa\u7c7b\u578b\u3001\u80fd\u529b\u548c\u6548\u5e94\u7cfb\u7edf\u7684\u7efc\u5408\u65b9\u6cd5\u3002", "result": "\u53d1\u73b0\u6700\u5c0f\u6548\u5e94\u7cfb\u7edf\u4e0e\u80fd\u529b\u7cfb\u7edf\u5728\u8868\u8fbe\u80fd\u529b\u4e0a\u4e0d\u53ef\u6bd4\u8f83\uff0c\u5373\u5f7c\u6b64\u4e0d\u80fd\u5b8c\u5168\u5305\u542b\u5bf9\u65b9\uff0c\u8bc1\u660e\u4e86\u7ec4\u5408\u65b9\u6cd5\u7684\u5fc5\u8981\u6027\u3002", "conclusion": "\u7c7b\u578b\u3001\u80fd\u529b\u548c\u6548\u5e94\u7cfb\u7edf\u7684\u7ec4\u5408\u80fd\u591f\u7ed3\u5408\u5404\u81ea\u4f18\u52bf\u5e76\u907f\u514d\u5f31\u70b9\uff0c\u4e3a\u5404\u79cd\u6548\u5e94\u7c7b\u578b\u7cfb\u7edf\u63d0\u4f9b\u4e86\u652f\u6301\u7eaf\u5ea6\u8bc1\u660e\u7684\u903b\u8f91\u5173\u7cfb\u6a21\u578b\u3002"}}
{"id": "2510.07815", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07815", "abs": "https://arxiv.org/abs/2510.07815", "authors": ["Zeyu Sun", "Jingjing Liang", "Weiyi Wang", "Chenyao Suo", "Junjie Chen", "Fanjiang Xu"], "title": "Interleaved Learning and Exploration: A Self-Adaptive Fuzz Testing Framework for MLIR", "comment": null, "summary": "MLIR (Multi-Level Intermediate Representation) has rapidly become a\nfoundational technology for modern compiler frameworks, enabling extensibility\nacross diverse domains. However, ensuring the correctness and robustness of\nMLIR itself remains challenging. Existing fuzzing approaches-based on manually\ncrafted templates or rule-based mutations-struggle to generate sufficiently\ndiverse and semantically valid test cases, making it difficult to expose subtle\nor deep-seated bugs within MLIR's complex and evolving code space. In this\npaper, we present FLEX, a novel self-adaptive fuzzing framework for MLIR. FLEX\nleverages neural networks for program generation, a perturbed sampling strategy\nto encourage diversity, and a feedback-driven augmentation loop that\niteratively improves its model using both crashing and non-crashing test cases.\nStarting from a limited seed corpus, FLEX progressively learns valid syntax and\nsemantics and autonomously produces high-quality test inputs. We evaluate FLEX\non the upstream MLIR compiler against four state-of-the-art fuzzers. In a\n30-day campaign, FLEX discovers 80 previously unknown bugs-including multiple\nnew root causes and parser bugs-while in 24-hour fixed-revision comparisons, it\ndetects 53 bugs (over 3.5x as many as the best baseline) and achieves 28.2%\ncode coverage, outperforming the next-best tool by 42%. Ablation studies\nfurther confirm the critical role of both perturbed generation and diversity\naugmentation in FLEX's effectiveness.", "AI": {"tldr": "FLEX\u662f\u4e00\u4e2a\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684MLIR\u81ea\u9002\u5e94\u6a21\u7cca\u6d4b\u8bd5\u6846\u67b6\uff0c\u901a\u8fc7\u6270\u52a8\u91c7\u6837\u548c\u53cd\u9988\u9a71\u52a8\u7684\u589e\u5f3a\u5faa\u73af\uff0c\u80fd\u591f\u81ea\u4e3b\u751f\u6210\u9ad8\u8d28\u91cf\u6d4b\u8bd5\u7528\u4f8b\uff0c\u663e\u8457\u63d0\u5347MLIR\u7f16\u8bd1\u5668\u7684bug\u68c0\u6d4b\u80fd\u529b\u3002", "motivation": "MLIR\u4f5c\u4e3a\u73b0\u4ee3\u7f16\u8bd1\u5668\u6846\u67b6\u7684\u57fa\u7840\u6280\u672f\uff0c\u5176\u6b63\u786e\u6027\u548c\u9c81\u68d2\u6027\u9a8c\u8bc1\u9762\u4e34\u6311\u6218\u3002\u73b0\u6709\u6a21\u7cca\u6d4b\u8bd5\u65b9\u6cd5\u96be\u4ee5\u751f\u6210\u8db3\u591f\u591a\u6837\u5316\u548c\u8bed\u4e49\u6709\u6548\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u65e0\u6cd5\u53d1\u73b0MLIR\u590d\u6742\u4ee3\u7801\u7a7a\u95f4\u4e2d\u7684\u6df1\u5c42bug\u3002", "method": "FLEX\u91c7\u7528\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u7a0b\u5e8f\u751f\u6210\uff0c\u7ed3\u5408\u6270\u52a8\u91c7\u6837\u7b56\u7565\u4fc3\u8fdb\u591a\u6837\u6027\uff0c\u5e76\u901a\u8fc7\u53cd\u9988\u9a71\u52a8\u7684\u589e\u5f3a\u5faa\u73af\u8fed\u4ee3\u6539\u8fdb\u6a21\u578b\uff0c\u5229\u7528\u5d29\u6e83\u548c\u975e\u5d29\u6e83\u6d4b\u8bd5\u7528\u4f8b\u6301\u7eed\u5b66\u4e60\u3002", "result": "\u572830\u5929\u6d4b\u8bd5\u4e2d\u53d1\u73b0\u4e8680\u4e2a\u672a\u77e5bug\uff0c\u5305\u62ec\u591a\u4e2a\u65b0\u7684\u6839\u672c\u539f\u56e0\u548c\u89e3\u6790\u5668bug\uff1b\u572824\u5c0f\u65f6\u56fa\u5b9a\u7248\u672c\u6bd4\u8f83\u4e2d\u68c0\u6d4b\u523053\u4e2abug\uff08\u8d85\u8fc7\u6700\u4f73\u57fa\u7ebf\u76843.5\u500d\uff09\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u8fbe\u523028.2%\uff0c\u6bd4\u6b21\u4f18\u5de5\u5177\u9ad842%\u3002", "conclusion": "FLEX\u901a\u8fc7\u795e\u7ecf\u7a0b\u5e8f\u751f\u6210\u548c\u81ea\u9002\u5e94\u5b66\u4e60\u673a\u5236\uff0c\u663e\u8457\u63d0\u5347\u4e86MLIR\u6a21\u7cca\u6d4b\u8bd5\u7684\u6548\u679c\uff0c\u6d88\u878d\u7814\u7a76\u8bc1\u5b9e\u4e86\u6270\u52a8\u751f\u6210\u548c\u591a\u6837\u6027\u589e\u5f3a\u5728\u6846\u67b6\u6709\u6548\u6027\u4e2d\u7684\u5173\u952e\u4f5c\u7528\u3002"}}
{"id": "2510.08127", "categories": ["cs.FL"], "pdf": "https://arxiv.org/pdf/2510.08127", "abs": "https://arxiv.org/abs/2510.08127", "authors": ["Antoine Amarilli", "Mika\u00ebl Monet", "Paul Rapha\u00ebl", "Sylvain Salvati"], "title": "On the Complexity of Language Membership for Probabilistic Words", "comment": "35 pages including 1 title page, 15 pages of main text, 4 pages of\n  reference, and appendix", "summary": "We study the membership problem to context-free languages L (CFLs) on\nprobabilistic words, that specify for each position a probability distribution\non the letters (assuming independence across positions). Our task is to\ncompute, given a probabilistic word, what is the probability that a word drawn\naccording to the distribution belongs to L. This problem generalizes the\nproblem of counting how many words of length n belong to L, or of counting how\nmany completions of a partial word belong to L.\n  We show that this problem is in polynomial time for unambiguous context-free\nlanguages (uCFLs), but can be #P-hard already for unions of two linear uCFLs.\nMore generally, we show that the problem is in polynomial time for so-called\npoly-slicewise-unambiguous languages, where given a length n we can tractably\ncompute an uCFL for the words of length n in the language. This class includes\nsome inherently ambiguous languages, and implies the tractability of bounded\nCFLs and of languages recognized by unambiguous polynomial-time counter\nautomata; but we show that the problem can be #P-hard for nondeterministic\ncounter automata, even for Parikh automata with a single counter. We then\nintroduce classes of circuits from knowledge compilation which we use for\ntractable counting, and show that this covers the tractability of\npoly-slicewise-unambiguous languages and of some CFLs that are not\npoly-slicewise-unambiguous. Extending these circuits with negation further\nallows us to show tractability for the language of primitive words, and for the\nlanguage of concatenations of two palindromes. We finally show the conditional\nundecidability of the meta-problem that asks, given a CFG, whether the\nprobabilistic membership problem for that CFG is tractable or #P-hard.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\uff08CFL\uff09\u5728\u6982\u7387\u8bcd\u4e0a\u7684\u6210\u5458\u95ee\u9898\uff0c\u5373\u8ba1\u7b97\u4ece\u6982\u7387\u5206\u5e03\u4e2d\u62bd\u53d6\u7684\u8bcd\u5c5e\u4e8e\u7ed9\u5b9aCFL\u7684\u6982\u7387\u3002\u8be5\u95ee\u9898\u63a8\u5e7f\u4e86\u8ba1\u6570\u95ee\u9898\uff0c\u5bf9\u67d0\u4e9b\u8bed\u8a00\u7c7b\u522b\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u89e3\u7684\uff0c\u4f46\u5bf9\u5176\u4ed6\u7c7b\u522b\u53ef\u80fd\u662f#P\u96be\u7684\u3002", "motivation": "\u7814\u7a76\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\u5728\u6982\u7387\u8bcd\u4e0a\u7684\u6210\u5458\u95ee\u9898\uff0c\u8fd9\u63a8\u5e7f\u4e86\u4f20\u7edf\u7684\u8ba1\u6570\u95ee\u9898\uff0c\u5177\u6709\u7406\u8bba\u548c\u5b9e\u9645\u610f\u4e49\uff0c\u7279\u522b\u662f\u5728\u5904\u7406\u4e0d\u786e\u5b9a\u6027\u548c\u6982\u7387\u6027\u6570\u636e\u65f6\u3002", "method": "\u901a\u8fc7\u5206\u6790\u4e0d\u540c\u8bed\u8a00\u7c7b\u522b\u7684\u590d\u6742\u6027\uff0c\u5305\u62ec\u65e0\u6b67\u4e49\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\uff08uCFL\uff09\u3001\u591a\u7247\u6bb5\u65e0\u6b67\u4e49\u8bed\u8a00\u7b49\uff0c\u5e76\u4f7f\u7528\u77e5\u8bc6\u7f16\u8bd1\u4e2d\u7684\u7535\u8def\u7c7b\u8fdb\u884c\u53ef\u8ffd\u8e2a\u8ba1\u6570\u3002", "result": "\u8bc1\u660e\u8be5\u95ee\u9898\u5bf9\u65e0\u6b67\u4e49\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u89e3\u7684\uff0c\u4f46\u5bf9\u67d0\u4e9b\u8bed\u8a00\u7c7b\u522b\uff08\u5982\u4e24\u4e2a\u7ebf\u6027uCFL\u7684\u5e76\u96c6\uff09\u53ef\u80fd\u662f#P\u96be\u7684\u3002\u5f15\u5165\u7684\u7535\u8def\u7c7b\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u975e\u591a\u7247\u6bb5\u65e0\u6b67\u4e49\u7684CFL\u3002", "conclusion": "\u8be5\u95ee\u9898\u7684\u590d\u6742\u6027\u9ad8\u5ea6\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u8bed\u8a00\u7c7b\u522b\uff0c\u5b58\u5728\u6761\u4ef6\u4e0d\u53ef\u5224\u5b9a\u7684\u5143\u95ee\u9898\uff0c\u5373\u7ed9\u5b9aCFG\u65f6\u65e0\u6cd5\u786e\u5b9a\u5176\u6982\u7387\u6210\u5458\u95ee\u9898\u662f\u53ef\u8ffd\u8e2a\u8fd8\u662f#P\u96be\u7684\u3002"}}
{"id": "2510.07422", "categories": ["cs.LO", "cs.DB", "cs.FL"], "pdf": "https://arxiv.org/pdf/2510.07422", "abs": "https://arxiv.org/abs/2510.07422", "authors": ["R\u00e9mi Morvan"], "title": "Homomorphism Problems in Graph Databases and Automatic Structures", "comment": "Ph.D. thesis, in French language, defended on 3 July 2025 at\n  Universit\\'e de Bordeaux", "summary": "This thesis investigates the central role of homomorphism problems\n(structure-preserving maps) in two complementary domains: database querying\nover finite, graph-shaped data, and constraint solving over (potentially\ninfinite) structures. Building on the well-known equivalence between\nconjunctive query evaluation and homomorphism existence, the first part focuses\non conjunctive regular path queries, a standard extension of conjunctive\nqueries that incorporates regular-path predicates. We study the fundamental\nproblem of query minimization under two measures: the number of atoms\n(constraints) and the tree-width of the query graph. In both cases, we prove\nthe problem to be decidable, and provide efficient algorithms for a large\nfragment of queries used in practice. The second part of the thesis lifts\nhomomorphism problems to automatic structures, which are infinite structures\ndescribable by finite automata. We highlight a dichotomy, between homomorphism\nproblems over automatic structures that are decidable in non-deterministic\nlogarithmic space, and those that are undecidable (proving to be the more\ncommon case). In contrast to this prevalence of undecidability, we then focus\non the language-theoretic properties of these structures, and show, relying on\na novel algebraic language theory, that for any well-behaved logic (a\npseudovariety), whether an automatic structure can be described in this logic\nis decidable.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u540c\u6001\u95ee\u9898\u5728\u4e24\u4e2a\u4e92\u8865\u9886\u57df\u4e2d\u7684\u6838\u5fc3\u4f5c\u7528\uff1a\u6709\u9650\u56fe\u7ed3\u6784\u6570\u636e\u7684\u6570\u636e\u5e93\u67e5\u8be2\u548c\uff08\u53ef\u80fd\u65e0\u9650\u7684\uff09\u7ed3\u6784\u4e0a\u7684\u7ea6\u675f\u6c42\u89e3\u3002\u7b2c\u4e00\u90e8\u5206\u7814\u7a76\u67e5\u8be2\u6700\u5c0f\u5316\u95ee\u9898\uff0c\u7b2c\u4e8c\u90e8\u5206\u7814\u7a76\u81ea\u52a8\u7ed3\u6784\u4e0a\u7684\u540c\u6001\u95ee\u9898\u3002", "motivation": "\u57fa\u4e8e\u5408\u53d6\u67e5\u8be2\u8bc4\u4f30\u4e0e\u540c\u6001\u5b58\u5728\u4e4b\u95f4\u7684\u7b49\u4ef7\u5173\u7cfb\uff0c\u7814\u7a76\u7ed3\u6784\u4fdd\u6301\u6620\u5c04\u5728\u6570\u636e\u5e93\u67e5\u8be2\u548c\u7ea6\u675f\u6c42\u89e3\u4e2d\u7684\u57fa\u7840\u4f5c\u7528\uff0c\u63a2\u7d22\u67e5\u8be2\u6700\u5c0f\u5316\u548c\u65e0\u9650\u7ed3\u6784\u4e0a\u7684\u53ef\u5224\u5b9a\u6027\u95ee\u9898\u3002", "method": "\u7b2c\u4e00\u90e8\u5206\uff1a\u7814\u7a76\u5408\u53d6\u6b63\u5219\u8def\u5f84\u67e5\u8be2\u7684\u6700\u5c0f\u5316\u95ee\u9898\uff0c\u8003\u8651\u539f\u5b50\u6570\u91cf\u548c\u67e5\u8be2\u56fe\u6811\u5bbd\u4e24\u4e2a\u5ea6\u91cf\u6807\u51c6\uff1b\u7b2c\u4e8c\u90e8\u5206\uff1a\u7814\u7a76\u81ea\u52a8\u7ed3\u6784\u4e0a\u7684\u540c\u6001\u95ee\u9898\uff0c\u4f7f\u7528\u4ee3\u6570\u8bed\u8a00\u7406\u8bba\u548c\u4f2a\u53d8\u79cd\u903b\u8f91\u65b9\u6cd5\u3002", "result": "\u8bc1\u660e\u4e86\u67e5\u8be2\u6700\u5c0f\u5316\u95ee\u9898\u5728\u4e24\u79cd\u5ea6\u91cf\u4e0b\u90fd\u662f\u53ef\u5224\u5b9a\u7684\uff0c\u5e76\u4e3a\u5b9e\u8df5\u4e2d\u4f7f\u7528\u7684\u5927\u91cf\u67e5\u8be2\u7247\u6bb5\u63d0\u4f9b\u4e86\u9ad8\u6548\u7b97\u6cd5\uff1b\u63ed\u793a\u4e86\u81ea\u52a8\u7ed3\u6784\u4e0a\u540c\u6001\u95ee\u9898\u7684\u4e8c\u5206\u6027\uff1a\u4e00\u4e9b\u5728\u975e\u786e\u5b9a\u6027\u5bf9\u6570\u7a7a\u95f4\u53ef\u5224\u5b9a\uff0c\u800c\u66f4\u591a\u60c5\u51b5\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff1b\u8bc1\u660e\u4e86\u5bf9\u4e8e\u4efb\u4f55\u8868\u73b0\u826f\u597d\u7684\u903b\u8f91\uff0c\u81ea\u52a8\u7ed3\u6784\u662f\u5426\u53ef\u7528\u8be5\u903b\u8f91\u63cf\u8ff0\u662f\u53ef\u5224\u5b9a\u7684\u3002", "conclusion": "\u540c\u6001\u95ee\u9898\u5728\u6570\u636e\u5e93\u67e5\u8be2\u548c\u7ea6\u675f\u6c42\u89e3\u4e2d\u5177\u6709\u6838\u5fc3\u5730\u4f4d\uff0c\u67e5\u8be2\u6700\u5c0f\u5316\u662f\u53ef\u5224\u5b9a\u7684\u4e14\u5b58\u5728\u9ad8\u6548\u7b97\u6cd5\uff0c\u81ea\u52a8\u7ed3\u6784\u4e0a\u7684\u540c\u6001\u95ee\u9898\u867d\u7136\u666e\u904d\u4e0d\u53ef\u5224\u5b9a\uff0c\u4f46\u5176\u903b\u8f91\u53ef\u63cf\u8ff0\u6027\u662f\u53ef\u5224\u5b9a\u7684\u3002"}}
{"id": "2510.07851", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2510.07851", "abs": "https://arxiv.org/abs/2510.07851", "authors": ["Willem Heijltjes"], "title": "The Functional Machine Calculus III: Control", "comment": null, "summary": "The Functional Machine Calculus (Heijltjes 2022) is a new approach to\nunifying the imperative and functional programming paradigms. It extends the\nlambda-calculus, preserving the key features of confluent reduction and typed\ntermination, to embed computational effects, evaluation strategies, and control\nflow operations. The first instalment modelled sequential higher-order\ncomputation with global store, input/output, probabilities, and\nnon-determinism, and embedded both the call-by-name and call-by-value\nlambda-calculus, as well as Moggi's computational metalanguage and Levy's\ncall-by-push-value. The present paper extends the calculus from sequential to\nbranching and looping control flow. This allows the faithful embedding of a\nminimal but complete imperative language, including conditionals, exception\nhandling, and iteration, as well as constants and algebraic data types.\n  The calculus is defined through a simple operational semantics, extending the\n(simplified) Krivine machine for the lambda-calculus with multiple operand\nstacks to model effects and a continuation stack to model sequential,\nbranching, and looping computation. It features a confluent reduction relation\nand a system of simple types that guarantees termination of the machine and\nstrong normalization of reduction (in the absence of iteration). These\nproperties carry over to the embedded imperative language, providing a unified\nfunctional-imperative model of computation that supports simple types, a direct\nand intuitive operational semantics, and a confluent reduction semantics.", "AI": {"tldr": "Functional Machine Calculus\u6269\u5c55\u4e86lambda\u6f14\u7b97\uff0c\u7edf\u4e00\u4e86\u51fd\u6570\u5f0f\u548c\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8303\u5f0f\uff0c\u652f\u6301\u8ba1\u7b97\u6548\u679c\u3001\u63a7\u5236\u6d41\u64cd\u4f5c\uff0c\u5e76\u4fdd\u6301\u4e86\u6c47\u5408\u5f52\u7ea6\u548c\u7c7b\u578b\u7ec8\u6b62\u7279\u6027\u3002", "motivation": "\u7edf\u4e00\u51fd\u6570\u5f0f\u548c\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8303\u5f0f\uff0c\u5728\u4fdd\u6301lambda\u6f14\u7b97\u6838\u5fc3\u7279\u6027\u7684\u540c\u65f6\u5d4c\u5165\u8ba1\u7b97\u6548\u679c\u3001\u8bc4\u4f30\u7b56\u7565\u548c\u63a7\u5236\u6d41\u64cd\u4f5c\u3002", "method": "\u6269\u5c55Krivine\u673a\u5668\uff0c\u6dfb\u52a0\u591a\u4e2a\u64cd\u4f5c\u6570\u6808\u6765\u5efa\u6a21\u6548\u679c\uff0c\u4ee5\u53ca\u7ee7\u7eed\u6808\u6765\u5efa\u6a21\u987a\u5e8f\u3001\u5206\u652f\u548c\u5faa\u73af\u8ba1\u7b97\u3002\u5b9a\u4e49\u4e86\u7b80\u5355\u7684\u64cd\u4f5c\u8bed\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\u3002", "result": "\u6210\u529f\u5d4c\u5165\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6700\u5c0f\u547d\u4ee4\u5f0f\u8bed\u8a00\uff0c\u5305\u62ec\u6761\u4ef6\u8bed\u53e5\u3001\u5f02\u5e38\u5904\u7406\u3001\u8fed\u4ee3\u3001\u5e38\u91cf\u548c\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u3002\u4fdd\u6301\u4e86\u6c47\u5408\u5f52\u7ea6\u5173\u7cfb\u548c\u7c7b\u578b\u4fdd\u8bc1\u7684\u7ec8\u6b62\u6027\u3002", "conclusion": "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u529f\u80fd-\u547d\u4ee4\u5f0f\u8ba1\u7b97\u6a21\u578b\uff0c\u652f\u6301\u7b80\u5355\u7c7b\u578b\u3001\u76f4\u89c2\u7684\u64cd\u4f5c\u8bed\u4e49\u548c\u6c47\u5408\u5f52\u7ea6\u8bed\u4e49\u3002"}}
{"id": "2510.07834", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07834", "abs": "https://arxiv.org/abs/2510.07834", "authors": ["Lingjun Liu", "Feiran Qin", "Owolabi Legunsen", "Marcelo d'Amorim"], "title": "Bug Histories as Sources of Compiler Fuzzing Mutators", "comment": null, "summary": "Bugs in compilers, which are critical infrastructure today, can have outsized\nnegative impacts. Mutational fuzzers aid compiler bug detection by\nsystematically mutating compiler inputs, i.e., programs. Their effectiveness\ndepends on the quality of the mutators used. Yet, no prior work used compiler\nbug histories as a source of mutators. We propose IssueMut, the first approach\nfor extracting compiler fuzzing mutators from bug histories. Our insight is\nthat bug reports contain hints about program elements that induced compiler\nbugs; they can guide fuzzers towards similar bugs. IssueMut uses an automated\nmethod to mine mutators from bug reports and retrofit such mutators into\nexisting mutational compiler fuzzers. Using IssueMut, we mine 587 mutators from\n1760 GCC and LLVM bug reports. Then, we run IssueMut on these compilers, with\nall their test inputs as seed corpora. We find that \"bug history\" mutators are\neffective: they find new bugs that a state-of-the-art mutational compiler\nfuzzer misses-28 in GCC and 37 in LLVM. Of these, 60 were confirmed or fixed,\nvalidating our idea that bug histories have rich information that compiler\nfuzzers should leverage.", "AI": {"tldr": "IssueMut\u4ece\u7f16\u8bd1\u5668bug\u5386\u53f2\u4e2d\u63d0\u53d6\u53d8\u5f02\u5668\uff0c\u7528\u4e8e\u6539\u8fdb\u7f16\u8bd1\u5668\u6a21\u7cca\u6d4b\u8bd5\uff0c\u5728GCC\u548cLLVM\u4e2d\u53d1\u73b0\u4e8665\u4e2a\u65b0bug\u3002", "motivation": "\u7f16\u8bd1\u5668bug\u5f71\u54cd\u91cd\u5927\uff0c\u73b0\u6709\u53d8\u5f02\u6a21\u7cca\u6d4b\u8bd5\u5668\u6548\u679c\u4f9d\u8d56\u4e8e\u53d8\u5f02\u5668\u8d28\u91cf\uff0c\u4f46\u4ece\u672a\u5229\u7528bug\u5386\u53f2\u4f5c\u4e3a\u53d8\u5f02\u5668\u6765\u6e90\u3002", "method": "\u4ecebug\u62a5\u544a\u4e2d\u81ea\u52a8\u6316\u6398\u53d8\u5f02\u5668\uff0c\u5e76\u5c06\u5176\u96c6\u6210\u5230\u73b0\u6709\u53d8\u5f02\u7f16\u8bd1\u5668\u6a21\u7cca\u6d4b\u8bd5\u5668\u4e2d\u3002", "result": "\u4ece1760\u4e2aGCC\u548cLLVM bug\u62a5\u544a\u4e2d\u6316\u6398587\u4e2a\u53d8\u5f02\u5668\uff0c\u5728GCC\u4e2d\u53d1\u73b028\u4e2a\u65b0bug\uff0cLLVM\u4e2d\u53d1\u73b037\u4e2a\u65b0bug\uff0c\u5176\u4e2d60\u4e2a\u88ab\u786e\u8ba4\u6216\u4fee\u590d\u3002", "conclusion": "bug\u5386\u53f2\u5305\u542b\u4e30\u5bcc\u4fe1\u606f\uff0c\u7f16\u8bd1\u5668\u6a21\u7cca\u6d4b\u8bd5\u5668\u5e94\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u53d1\u73b0\u66f4\u591abug\u3002"}}
{"id": "2510.08045", "categories": ["cs.LO", "cs.AI", "cs.CC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08045", "abs": "https://arxiv.org/abs/2510.08045", "authors": ["Artem Chernobrovkin", "Marco S\u00e4lzer", "Fran\u00e7ois Schwarzentruber", "Nicolas Troquard"], "title": "Verifying Graph Neural Networks with Readout is Intractable", "comment": null, "summary": "We introduce a logical language for reasoning about quantized\naggregate-combine graph neural networks with global readout (ACR-GNNs). We\nprovide a logical characterization and use it to prove that verification tasks\nfor quantized GNNs with readout are (co)NEXPTIME-complete. This result implies\nthat the verification of quantized GNNs is computationally intractable,\nprompting substantial research efforts toward ensuring the safety of GNN-based\nsystems. We also experimentally demonstrate that quantized ACR-GNN models are\nlightweight while maintaining good accuracy and generalization capabilities\nwith respect to non-quantized models.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u7528\u4e8e\u91cf\u5316\u805a\u5408-\u7ec4\u5408\u56fe\u795e\u7ecf\u7f51\u7edc\uff08ACR-GNNs\uff09\u7684\u903b\u8f91\u8bed\u8a00\uff0c\u8bc1\u660e\u4e86\u91cf\u5316GNN\u9a8c\u8bc1\u4efb\u52a1\u7684\uff08co)NEXPTIME\u5b8c\u5168\u6027\uff0c\u8868\u660e\u5176\u8ba1\u7b97\u4e0d\u53ef\u884c\u6027\uff0c\u540c\u65f6\u5b9e\u9a8c\u663e\u793a\u91cf\u5316\u6a21\u578b\u8f7b\u91cf\u4e14\u4fdd\u6301\u826f\u597d\u6027\u80fd\u3002", "motivation": "\u91cf\u5316\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u9a8c\u8bc1\u4efb\u52a1\u5728\u8ba1\u7b97\u4e0a\u5177\u6709\u6311\u6218\u6027\uff0c\u9700\u8981\u5f00\u53d1\u903b\u8f91\u6846\u67b6\u6765\u786e\u4fddGNN\u57fa\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002", "method": "\u5f15\u5165\u4e00\u4e2a\u903b\u8f91\u8bed\u8a00\u6765\u63a8\u7406\u91cf\u5316ACR-GNNs\uff0c\u63d0\u4f9b\u903b\u8f91\u7279\u5f81\u5316\uff0c\u5e76\u7528\u4e8e\u8bc1\u660e\u91cf\u5316GNN\u9a8c\u8bc1\u4efb\u52a1\u7684\u590d\u6742\u6027\u3002", "result": "\u8bc1\u660e\u91cf\u5316GNN\u9a8c\u8bc1\u662f(co)NEXPTIME\u5b8c\u5168\u7684\uff0c\u5b9e\u9a8c\u8868\u660e\u91cf\u5316ACR-GNN\u6a21\u578b\u8f7b\u91cf\u4e14\u4fdd\u6301\u4e0e\u975e\u91cf\u5316\u6a21\u578b\u76f8\u5f53\u7684\u51c6\u786e\u6027\u548c\u6cdb\u5316\u80fd\u529b\u3002", "conclusion": "\u91cf\u5316GNN\u9a8c\u8bc1\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\uff0c\u4f46\u91cf\u5316\u6a21\u578b\u5728\u4fdd\u6301\u6027\u80fd\u7684\u540c\u65f6\u663e\u8457\u51cf\u5c11\u4e86\u8ba1\u7b97\u8d44\u6e90\u9700\u6c42\u3002"}}
{"id": "2510.07941", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.07941", "abs": "https://arxiv.org/abs/2510.07941", "authors": ["Srijita Basu", "Haraldsson Bengt", "Miroslaw Staron", "Christian Berger", "Jennifer Horkoff", "Magnus Almgren"], "title": "An AUTOSAR-Aligned Architectural Study of Vulnerabilities in Automotive SoC Software", "comment": "16 pages, 7 figures, 18th International Conference on the Quality of\n  Information and Communications Technology", "summary": "Cooperative, Connected and Automated Mobility (CCAM) are complex\ncyber-physical systems (CPS) that integrate computation, communication, and\ncontrol in safety-critical environments. At their core, System-on-Chip (SoC)\nplatforms consolidate processing units, communication interfaces, AI\naccelerators, and security modules into a single chip. AUTOSAR (AUTomotive Open\nSystem ARchitecture) standard was developed in the automotive domain to better\nmanage this complexity, defining layered software structures and interfaces to\nfacilitate reuse of HW/SW components. However, in practice, this integrated SoC\nsoftware architecture still poses security challenges, particularly in\nreal-time, safety-critical environments. Recent reports highlight a surge in\nSoC-related vulnerabilities, yet systematic analysis of their root causes and\nimpact within AUTOSAR-aligned architectures is lacking. This study fills that\ngap by analyzing 180 publicly reported automotive SoC vulnerabilities, mapped\nto a representative SoC software architecture model that is aligned with\nAUTOSAR principles for layered abstraction and service orientation. We identify\n16 root causes and 56 affected software modules, and examine mitigation delays\nacross Common Weakness Enumeration (CWE) categories and architectural layers.\nWe uncover dominant vulnerability patterns and critical modules with prolonged\npatch delays, and provide actionable insights for securing automotive CPS\nplatforms, including guides for improved detection, prioritization, and\nlocalization strategies for SoC software architectures in SoC-based vehicle\nplatforms.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86180\u4e2a\u516c\u5f00\u62a5\u544a\u7684\u6c7d\u8f66SoC\u6f0f\u6d1e\uff0c\u8bc6\u522b\u51fa16\u4e2a\u6839\u672c\u539f\u56e0\u548c56\u4e2a\u53d7\u5f71\u54cd\u7684\u8f6f\u4ef6\u6a21\u5757\uff0c\u63ed\u793a\u4e86AUTOSAR\u67b6\u6784\u4e2d\u7684\u4e3b\u8981\u6f0f\u6d1e\u6a21\u5f0f\u548c\u5173\u952e\u6a21\u5757\u7684\u8865\u4e01\u5ef6\u8fdf\u95ee\u9898\u3002", "motivation": "\u968f\u7740\u6c7d\u8f66SoC\u76f8\u5173\u6f0f\u6d1e\u6fc0\u589e\uff0c\u4f46\u5728AUTOSAR\u5bf9\u9f50\u67b6\u6784\u4e2d\u7f3a\u4e4f\u5bf9\u5176\u6839\u672c\u539f\u56e0\u548c\u5f71\u54cd\u7684\u7cfb\u7edf\u6027\u5206\u6790\uff0c\u672c\u7814\u7a76\u586b\u8865\u4e86\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u5206\u6790180\u4e2a\u516c\u5f00\u62a5\u544a\u7684\u6c7d\u8f66SoC\u6f0f\u6d1e\uff0c\u5c06\u5176\u6620\u5c04\u5230\u7b26\u5408AUTOSAR\u539f\u5219\u7684\u4ee3\u8868\u6027SoC\u8f6f\u4ef6\u67b6\u6784\u6a21\u578b\u4e2d\uff0c\u8bc6\u522b\u6839\u672c\u539f\u56e0\u548c\u53d7\u5f71\u54cd\u6a21\u5757\u3002", "result": "\u8bc6\u522b\u51fa16\u4e2a\u6839\u672c\u539f\u56e0\u548c56\u4e2a\u53d7\u5f71\u54cd\u8f6f\u4ef6\u6a21\u5757\uff0c\u53d1\u73b0\u4e3b\u8981\u6f0f\u6d1e\u6a21\u5f0f\u548c\u5173\u952e\u6a21\u5757\u7684\u8865\u4e01\u5ef6\u8fdf\u95ee\u9898\uff0c\u5206\u6790\u4e86CWE\u7c7b\u522b\u548c\u67b6\u6784\u5c42\u7684\u7f13\u89e3\u5ef6\u8fdf\u3002", "conclusion": "\u4e3a\u4fdd\u62a4\u6c7d\u8f66CPS\u5e73\u53f0\u63d0\u4f9b\u4e86\u53ef\u884c\u7684\u89c1\u89e3\uff0c\u5305\u62ec\u6539\u8fdb\u68c0\u6d4b\u3001\u4f18\u5148\u7ea7\u6392\u5e8f\u548c\u5b9a\u4f4d\u7b56\u7565\u7684\u6307\u5357\uff0c\u4ee5\u589e\u5f3aSoC\u8f6f\u4ef6\u67b6\u6784\u7684\u5b89\u5168\u6027\u3002"}}
{"id": "2510.08112", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.08112", "abs": "https://arxiv.org/abs/2510.08112", "authors": ["Minna Hirvonen"], "title": "Implication Problems over Positive Semirings", "comment": null, "summary": "We study various notions of dependency in semiring team semantics. Semiring\nteams are essentially database relations, where each tuple is annotated with\nsome element from a positive semiring. We consider semiring generalizations of\nseveral dependency notions from database theory and probability theory,\nincluding functional and inclusion dependencies, marginal identity, and\n(probabilistic) independence. We examine axiomatizations of implication\nproblems, which are rule-based characterizations for the logical implication\nand inference of new dependencies from a given set of dependencies. Semiring\nteam semantics provides a general framework, where different implication\nproblems can be studied simultaneously for various semirings. The choice of the\nsemiring leads to a specific semantic interpretation of the dependencies, and\nhence different semirings offer a way to study different semantics (e.g.,\nrelational, bag, and probabilistic semantics) in a unified framework.", "AI": {"tldr": "\u7814\u7a76\u534a\u73af\u56e2\u961f\u8bed\u4e49\u4e2d\u7684\u5404\u79cd\u4f9d\u8d56\u6982\u5ff5\uff0c\u5305\u62ec\u529f\u80fd\u4f9d\u8d56\u3001\u5305\u542b\u4f9d\u8d56\u3001\u8fb9\u9645\u540c\u4e00\u6027\u548c\u72ec\u7acb\u6027\uff0c\u5e76\u8003\u5bdf\u5176\u8574\u542b\u95ee\u9898\u7684\u516c\u7406\u5316\u3002", "motivation": "\u4e3a\u6570\u636e\u5e93\u7406\u8bba\u548c\u6982\u7387\u8bba\u4e2d\u7684\u4f9d\u8d56\u6982\u5ff5\u63d0\u4f9b\u7edf\u4e00\u7684\u534a\u73af\u56e2\u961f\u8bed\u4e49\u6846\u67b6\uff0c\u80fd\u591f\u540c\u65f6\u7814\u7a76\u4e0d\u540c\u8bed\u4e49\uff08\u5982\u5173\u7cfb\u3001\u5305\u548c\u6982\u7387\u8bed\u4e49\uff09\u4e0b\u7684\u4f9d\u8d56\u95ee\u9898\u3002", "method": "\u4f7f\u7528\u534a\u73af\u56e2\u961f\u8bed\u4e49\u4f5c\u4e3a\u901a\u7528\u6846\u67b6\uff0c\u5c06\u6570\u636e\u5e93\u5173\u7cfb\u4e2d\u7684\u5143\u7ec4\u7528\u6b63\u534a\u73af\u5143\u7d20\u8fdb\u884c\u6807\u6ce8\uff0c\u63a8\u5e7f\u5404\u79cd\u4f9d\u8d56\u6982\u5ff5\u5e76\u7814\u7a76\u5176\u8574\u542b\u95ee\u9898\u7684\u516c\u7406\u5316\u3002", "result": "\u5efa\u7acb\u4e86\u534a\u73af\u56e2\u961f\u8bed\u4e49\u4e0b\u591a\u79cd\u4f9d\u8d56\u6982\u5ff5\u7684\u901a\u7528\u6846\u67b6\uff0c\u80fd\u591f\u7edf\u4e00\u5904\u7406\u4e0d\u540c\u8bed\u4e49\u4e0b\u7684\u4f9d\u8d56\u8574\u542b\u95ee\u9898\u3002", "conclusion": "\u534a\u73af\u56e2\u961f\u8bed\u4e49\u4e3a\u7814\u7a76\u4e0d\u540c\u8bed\u4e49\u4e0b\u7684\u4f9d\u8d56\u6982\u5ff5\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u6570\u5b66\u6846\u67b6\uff0c\u901a\u8fc7\u9009\u62e9\u4e0d\u540c\u7684\u534a\u73af\u53ef\u4ee5\u83b7\u5f97\u7279\u5b9a\u7684\u8bed\u4e49\u89e3\u91ca\u3002"}}
{"id": "2510.08005", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08005", "abs": "https://arxiv.org/abs/2510.08005", "authors": ["Utku Boran Torun", "Mehmet Taha Demircan", "Mahmut Furkan G\u00f6n", "Eray T\u00fcz\u00fcn"], "title": "Past, Present, and Future of Bug Tracking in the Generative AI Era", "comment": "Submitted to ACM TOSEM Special Issue: 2030 Software Engineering\n  Roadmap", "summary": "Traditional bug tracking systems rely heavily on manual reporting,\nreproduction, triaging, and resolution, each carried out by different\nstakeholders such as end users, customer support, developers, and testers. This\ndivision of responsibilities requires significant coordination and widens the\ncommunication gap between non-technical users and technical teams, slowing the\nprocess from bug discovery to resolution. Moreover, current systems are highly\nasynchronous; users often wait hours or days for a first response, delaying\nfixes and contributing to frustration. This paper examines the evolution of bug\ntracking, from early paper-based reporting to today's web-based and SaaS\nplatforms. Building on this trajectory, we propose an AI-powered bug tracking\nframework that augments existing tools with intelligent, large language model\n(LLM)-driven automation. Our framework addresses two main challenges: reducing\ntime-to-fix and minimizing human overhead. Users report issues in natural\nlanguage, while AI agents refine reports, attempt reproduction, and request\nmissing details. Reports are then classified, invalid ones resolved through\nno-code fixes, and valid ones localized and assigned to developers. LLMs also\ngenerate candidate patches, with human oversight ensuring correctness. By\nintegrating automation into each phase, our framework accelerates response\ntimes, improves collaboration, and strengthens software maintenance practices\nfor a more efficient, user-centric future.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684AI\u9a71\u52a8bug\u8ffd\u8e2a\u6846\u67b6\uff0c\u901a\u8fc7\u667a\u80fd\u81ea\u52a8\u5316\u51cf\u5c11\u4eba\u5de5\u53c2\u4e0e\uff0c\u7f29\u77edbug\u4fee\u590d\u65f6\u95f4", "motivation": "\u4f20\u7edfbug\u8ffd\u8e2a\u7cfb\u7edf\u4f9d\u8d56\u4eba\u5de5\u62a5\u544a\u3001\u590d\u73b0\u548c\u89e3\u51b3\uff0c\u5b58\u5728\u6c9f\u901a\u6210\u672c\u9ad8\u3001\u54cd\u5e94\u5ef6\u8fdf\u7b49\u95ee\u9898\uff0c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848", "method": "\u6784\u5efaAI\u9a71\u52a8\u7684bug\u8ffd\u8e2a\u6846\u67b6\uff0c\u4f7f\u7528LLM\u81ea\u52a8\u5316\u5904\u7406\u81ea\u7136\u8bed\u8a00\u62a5\u544a\u3001\u7cbe\u70bc\u62a5\u544a\u5185\u5bb9\u3001\u5c1d\u8bd5\u590d\u73b0\u3001\u5206\u7c7b\u62a5\u544a\u3001\u751f\u6210\u5019\u9009\u8865\u4e01\u7b49\u4efb\u52a1", "result": "\u8be5\u6846\u67b6\u80fd\u591f\u52a0\u901f\u54cd\u5e94\u65f6\u95f4\uff0c\u6539\u5584\u534f\u4f5c\u6548\u7387\uff0c\u51cf\u5c11\u4eba\u5de5\u5f00\u9500\uff0c\u63d0\u5347\u8f6f\u4ef6\u7ef4\u62a4\u5b9e\u8df5", "conclusion": "\u901a\u8fc7\u5728\u6bcf\u4e2a\u9636\u6bb5\u96c6\u6210\u81ea\u52a8\u5316\uff0c\u8be5AI\u9a71\u52a8\u7684bug\u8ffd\u8e2a\u6846\u67b6\u4e3a\u66f4\u9ad8\u6548\u3001\u4ee5\u7528\u6237\u4e3a\u4e2d\u5fc3\u7684\u672a\u6765\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848"}}
{"id": "2510.08122", "categories": ["cs.LO", "math.LO", "03D15, 03B60", "F.2.2; F.4.1"], "pdf": "https://arxiv.org/pdf/2510.08122", "abs": "https://arxiv.org/abs/2510.08122", "authors": ["Aleksi Anttila", "Juha Kontinen", "Fan Yang"], "title": "Complexity Results in Team Semantics: Nonemptiness Is Not So Complex", "comment": "12 pages", "summary": "We initiate the study of the complexity-theoretic properties of convex logics\nin team semantics. We focus on the extension of classical propositional logic\nwith the nonemptiness atom NE, a logic known to be both convex and union\nclosed. We show that the satisfiability problem for this logic is NP-complete,\nthat its validity problem is coNP-complete, and that its model-checking problem\nis in P.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u56e2\u961f\u8bed\u4e49\u4e2d\u51f8\u903b\u8f91\u7684\u590d\u6742\u6027\u7406\u8bba\u6027\u8d28\uff0c\u91cd\u70b9\u5173\u6ce8\u5e26\u6709\u975e\u7a7a\u539f\u5b50NE\u7684\u7ecf\u5178\u547d\u9898\u903b\u8f91\u6269\u5c55\uff0c\u8bc1\u660e\u4e86\u5176\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u4e3aNP\u5b8c\u5168\uff0c\u6709\u6548\u6027\u95ee\u9898\u662fcoNP\u5b8c\u5168\uff0c\u6a21\u578b\u68c0\u6d4b\u95ee\u9898\u5728P\u4e2d\u3002", "motivation": "\u7814\u7a76\u56e2\u961f\u8bed\u4e49\u4e2d\u51f8\u903b\u8f91\u7684\u8ba1\u7b97\u590d\u6742\u6027\uff0c\u7279\u522b\u662f\u5e26\u6709\u975e\u7a7a\u539f\u5b50NE\u7684\u903b\u8f91\u6269\u5c55\uff0c\u586b\u8865\u8be5\u9886\u57df\u590d\u6742\u6027\u5206\u6790\u7684\u7a7a\u767d\u3002", "method": "\u901a\u8fc7\u590d\u6742\u6027\u7406\u8bba\u5206\u6790\uff0c\u8bc1\u660e\u5e26\u6709NE\u539f\u5b50\u7684\u547d\u9898\u903b\u8f91\u7684\u53ef\u6ee1\u8db3\u6027\u3001\u6709\u6548\u6027\u548c\u6a21\u578b\u68c0\u6d4b\u95ee\u9898\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u3002", "result": "\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\u4e3aNP\u5b8c\u5168\uff0c\u6709\u6548\u6027\u95ee\u9898\u4e3acoNP\u5b8c\u5168\uff0c\u6a21\u578b\u68c0\u6d4b\u95ee\u9898\u5728P\u7c7b\u4e2d\u3002", "conclusion": "\u8be5\u51f8\u903b\u8f91\u6269\u5c55\u5177\u6709\u53ef\u5904\u7406\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u7279\u6027\uff0c\u4e3a\u56e2\u961f\u8bed\u4e49\u4e2d\u903b\u8f91\u7684\u590d\u6742\u6027\u5206\u6790\u63d0\u4f9b\u4e86\u91cd\u8981\u57fa\u51c6\u3002"}}
{"id": "2510.08200", "categories": ["cs.SE", "68N15", "D.2.13"], "pdf": "https://arxiv.org/pdf/2510.08200", "abs": "https://arxiv.org/abs/2510.08200", "authors": ["Alexander Hellwig", "Nico Jansen", "Bernhard Rumpe"], "title": "Building Whitespace-Sensitive Languages Using Whitespace-Insensitive Components", "comment": "11 pages, 4 figures, 6 listings", "summary": "In Software Language Engineering, there is a trend towards reusability by\ncomposing modular language components. However, this reusability is severely\ninhibited by a gap in integrating whitespace-sensitive and\nwhitespace-insensitive languages. There is currently no consistent procedure\nfor seamlessly reusing such language components in both cases, such that\nlibraries often cannot be reused, and whitespacesensitive languages are\ndeveloped from scratch. This paper presents a technique for using modular,\nwhitespaceinsensitive language modules to construct whitespace sensitive\nlanguages by pre-processing language artifacts before parsing. The approach is\nevaluated by reconstructing a simplified version of the programming language\nPython. Our solution aims to increase the reusability of existing language\ncomponents to reduce development time and increase the overall quality of\nsoftware languages.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u901a\u8fc7\u9884\u5904\u7406\u8bed\u8a00\u6784\u4ef6\u6765\u6784\u5efa\u7a7a\u683c\u654f\u611f\u8bed\u8a00\u7684\u6280\u672f\uff0c\u4f7f\u7528\u6a21\u5757\u5316\u7684\u7a7a\u683c\u4e0d\u654f\u611f\u8bed\u8a00\u6a21\u5757\uff0c\u4ece\u800c\u63d0\u9ad8\u8bed\u8a00\u7ec4\u4ef6\u7684\u53ef\u91cd\u7528\u6027\u3002", "motivation": "\u8f6f\u4ef6\u8bed\u8a00\u5de5\u7a0b\u4e2d\uff0c\u6a21\u5757\u5316\u8bed\u8a00\u7ec4\u4ef6\u7684\u53ef\u91cd\u7528\u6027\u53d7\u5230\u7a7a\u683c\u654f\u611f\u548c\u7a7a\u683c\u4e0d\u654f\u611f\u8bed\u8a00\u96c6\u6210\u5dee\u8ddd\u7684\u4e25\u91cd\u9650\u5236\uff0c\u5bfc\u81f4\u5e93\u65e0\u6cd5\u91cd\u7528\uff0c\u7a7a\u683c\u654f\u611f\u8bed\u8a00\u9700\u8981\u4ece\u5934\u5f00\u53d1\u3002", "method": "\u5728\u89e3\u6790\u524d\u5bf9\u8bed\u8a00\u6784\u4ef6\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4f7f\u7528\u6a21\u5757\u5316\u7684\u7a7a\u683c\u4e0d\u654f\u611f\u8bed\u8a00\u6a21\u5757\u6765\u6784\u5efa\u7a7a\u683c\u654f\u611f\u8bed\u8a00\u3002", "result": "\u901a\u8fc7\u91cd\u6784\u7b80\u5316\u7248Python\u8bed\u8a00\u6765\u8bc4\u4f30\u8be5\u65b9\u6cd5\uff0c\u9a8c\u8bc1\u4e86\u6280\u672f\u7684\u53ef\u884c\u6027\u3002", "conclusion": "\u8be5\u89e3\u51b3\u65b9\u6848\u65e8\u5728\u63d0\u9ad8\u73b0\u6709\u8bed\u8a00\u7ec4\u4ef6\u7684\u53ef\u91cd\u7528\u6027\uff0c\u51cf\u5c11\u5f00\u53d1\u65f6\u95f4\u5e76\u63d0\u9ad8\u8f6f\u4ef6\u8bed\u8a00\u7684\u603b\u4f53\u8d28\u91cf\u3002"}}
{"id": "2510.08420", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.08420", "abs": "https://arxiv.org/abs/2510.08420", "authors": ["R\u00e9my Cerda", "Alexis Saurin"], "title": "Compression for Coinductive Infinitary Rewriting: A Generic Approach, with Applications to Cut-Elimination for Non-Wellfounded Proofs", "comment": null, "summary": "Infinitary rewriting, i.e. rewriting featuring possibly infinite terms and\nsequences of reduction, is a convenient framework for describing the dynamics\nof non-terminating but productive rewriting systems. In its original definition\nbased on metric convergence of ordinal-indexed sequences of rewriting steps, a\nhighly desirable property of an infinitary rewriting system is Compression,\ni.e. the fact that rewriting sequences of arbitrary ordinal length can always\nbe 'compressed' to equivalent sequences of length at most {\\omega}.\n  Since then, the standard examples of infinitary rewriting systems have been\ngiven another equivalent presentation based on coinduction. In this work, we\nextend this presentation to the rewriting of arbitrary non-wellfounded\nderivations and we investigate compression in this setting. We design a generic\nproof of compression, relying on a characterisation factorising most of the\nproof and identifying the key property a compressible infinitary rewriting\nsystem should enjoy.\n  As running examples, we discuss first-order rewriting and infinitary\n{\\lambda}-calculi. For the latter, compression can in particular be seen as a\njustification of its coinductive presentation in the literature. As a more\nadvanced example, we also address compression of cut-elimination sequences in\nthe non-wellfounded proof system {\\mu}MALL{\\infty} for multiplicative-additive\nlinear logics with fixed points, which is a key lemma of several\ncut-elimination results for similar proof systems.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u65e0\u7a77\u91cd\u5199\u7cfb\u7edf\u4e2d\u7684\u538b\u7f29\u6027\u8d28\uff0c\u8bc1\u660e\u4e86\u4efb\u610f\u5e8f\u6570\u957f\u5ea6\u7684\u91cd\u5199\u5e8f\u5217\u53ef\u4ee5\u538b\u7f29\u4e3a\u957f\u5ea6\u4e0d\u8d85\u8fc7\u03c9\u7684\u7b49\u4ef7\u5e8f\u5217\uff0c\u5e76\u7ed9\u51fa\u4e86\u57fa\u4e8e\u5171\u5f52\u7eb3\u7684\u901a\u7528\u8bc1\u660e\u65b9\u6cd5\u3002", "motivation": "\u65e0\u7a77\u91cd\u5199\u7cfb\u7edf\u662f\u63cf\u8ff0\u975e\u7ec8\u6b62\u4f46\u5177\u6709\u751f\u4ea7\u529b\u7684\u91cd\u5199\u7cfb\u7edf\u52a8\u6001\u884c\u4e3a\u7684\u4fbf\u5229\u6846\u67b6\u3002\u538b\u7f29\u6027\u8d28\u662f\u8be5\u6846\u67b6\u4e2d\u9ad8\u5ea6\u671f\u671b\u7684\u7279\u6027\uff0c\u80fd\u591f\u5c06\u4efb\u610f\u5e8f\u6570\u957f\u5ea6\u7684\u91cd\u5199\u5e8f\u5217\u538b\u7f29\u4e3a\u53ef\u6570\u7684\u7b49\u4ef7\u5e8f\u5217\u3002", "method": "\u6269\u5c55\u4e86\u57fa\u4e8e\u5171\u5f52\u7eb3\u7684\u65e0\u7a77\u91cd\u5199\u8868\u793a\u65b9\u6cd5\uff0c\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u538b\u7f29\u8bc1\u660e\u6846\u67b6\uff0c\u901a\u8fc7\u7279\u5f81\u5316\u5206\u89e3\u8bc1\u660e\u8fc7\u7a0b\uff0c\u8bc6\u522b\u51fa\u53ef\u538b\u7f29\u65e0\u7a77\u91cd\u5199\u7cfb\u7edf\u5e94\u6ee1\u8db3\u7684\u5173\u952e\u6027\u8d28\u3002", "result": "\u6210\u529f\u8bc1\u660e\u4e86\u65e0\u7a77\u91cd\u5199\u7cfb\u7edf\u7684\u538b\u7f29\u6027\u8d28\uff0c\u7279\u522b\u4e3a\u65e0\u7a77\u03bb\u6f14\u7b97\u7684\u5171\u5f52\u7eb3\u8868\u793a\u63d0\u4f9b\u4e86\u7406\u8bba\u4f9d\u636e\uff0c\u5e76\u5e94\u7528\u4e8e\u975e\u826f\u57fa\u8bc1\u660e\u7cfb\u7edf\u03bcMALL\u221e\u4e2d\u7684\u6d88\u53bb\u5e8f\u5217\u538b\u7f29\u3002", "conclusion": "\u63d0\u51fa\u7684\u901a\u7528\u538b\u7f29\u8bc1\u660e\u6846\u67b6\u9002\u7528\u4e8e\u591a\u79cd\u65e0\u7a77\u91cd\u5199\u7cfb\u7edf\uff0c\u5305\u62ec\u4e00\u9636\u91cd\u5199\u3001\u65e0\u7a77\u03bb\u6f14\u7b97\u548c\u7ebf\u6027\u903b\u8f91\u8bc1\u660e\u7cfb\u7edf\uff0c\u4e3a\u8fd9\u4e9b\u7cfb\u7edf\u7684\u7406\u8bba\u7814\u7a76\u63d0\u4f9b\u4e86\u91cd\u8981\u5de5\u5177\u3002"}}
{"id": "2510.08468", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.08468", "abs": "https://arxiv.org/abs/2510.08468", "authors": ["Yang Xu", "Xingxing He", "Shuwei Chen", "Jun Liu", "Xiaomei Zhong"], "title": "Dynamic Automated Deduction by Contradiction Separation: The Standard Extension Algorithm", "comment": "36 pages, 2 figures", "summary": "Automated deduction seeks to enable machines to reason with mathematical\nprecision and logical completeness. Classical resolution-based systems, such as\nProver9, E, and Vampire, rely on binary inference, which inherently limits\nmulti-clause synergy during proof search. The Contradiction Separation\nExtension (CSE) framework, introduced by Xu et al. (2018), overcame this\ntheoretical limitation by extending deduction beyond binary inference. However,\nthe original work did not specify how contradictions are algorithmically\nconstructed and extended in practice. This paper presents the Standard\nExtension algorithm, the first explicit procedural realization of contradiction\nseparation reasoning. The proposed method dynamically constructs contradictions\nthrough complementary literal extension, thereby operationalizing the CSE\ntheory within a unified algorithm for satisfiability and unsatisfiability\nchecking. The algorithm's soundness and completeness are formally proven, and\nits effectiveness is supported indirectly through the performance of CSE-based\nsystems, including CSE, CSE-E, CSI-E, and CSI-Enig in major automated reasoning\ncompetitions (CASC) in the last few years. These results confirm that the\nStandard Extension mechanism constitutes a robust and practically validated\nfoundation for dynamic, multi-clause automated deduction.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u6807\u51c6\u6269\u5c55\u7b97\u6cd5\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u660e\u786e\u5b9e\u73b0\u77db\u76fe\u5206\u79bb\u63a8\u7406\u7684\u7a0b\u5e8f\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u4e92\u8865\u6587\u5b57\u6269\u5c55\u52a8\u6001\u6784\u5efa\u77db\u76fe\uff0c\u5c06CSE\u7406\u8bba\u64cd\u4f5c\u5316\u7528\u4e8e\u53ef\u6ee1\u8db3\u6027\u548c\u4e0d\u53ef\u6ee1\u8db3\u6027\u68c0\u67e5\u3002", "motivation": "\u7ecf\u5178\u57fa\u4e8e\u5f52\u7ed3\u7684\u7cfb\u7edf\uff08\u5982Prover9\u3001E\u3001Vampire\uff09\u4f9d\u8d56\u4e8c\u5143\u63a8\u7406\uff0c\u9650\u5236\u4e86\u8bc1\u660e\u641c\u7d22\u4e2d\u7684\u591a\u5b50\u53e5\u534f\u540c\u3002\u867d\u7136CSE\u6846\u67b6\u7406\u8bba\u4e0a\u514b\u670d\u4e86\u8fd9\u4e00\u9650\u5236\uff0c\u4f46\u539f\u59cb\u5de5\u4f5c\u672a\u8bf4\u660e\u77db\u76fe\u5982\u4f55\u7b97\u6cd5\u5316\u6784\u5efa\u548c\u6269\u5c55\u3002", "method": "\u63d0\u51fa\u6807\u51c6\u6269\u5c55\u7b97\u6cd5\uff0c\u901a\u8fc7\u4e92\u8865\u6587\u5b57\u6269\u5c55\u52a8\u6001\u6784\u5efa\u77db\u76fe\uff0c\u5728\u7edf\u4e00\u7b97\u6cd5\u4e2d\u5b9e\u73b0\u53ef\u6ee1\u8db3\u6027\u548c\u4e0d\u53ef\u6ee1\u8db3\u6027\u68c0\u67e5\u3002\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u548c\u5b8c\u5907\u6027\u5f97\u5230\u5f62\u5f0f\u5316\u8bc1\u660e\u3002", "result": "\u57fa\u4e8eCSE\u7684\u7cfb\u7edf\uff08CSE\u3001CSE-E\u3001CSI-E\u3001CSI-Enig\uff09\u5728\u4e3b\u8981\u81ea\u52a8\u63a8\u7406\u7ade\u8d5b\uff08CASC\uff09\u4e2d\u7684\u8868\u73b0\u95f4\u63a5\u652f\u6301\u4e86\u8be5\u7b97\u6cd5\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u6807\u51c6\u6269\u5c55\u673a\u5236\u4e3a\u52a8\u6001\u3001\u591a\u5b50\u53e5\u7684\u81ea\u52a8\u63a8\u7406\u63d0\u4f9b\u4e86\u7a33\u5065\u4e14\u7ecf\u8fc7\u5b9e\u8df5\u9a8c\u8bc1\u7684\u57fa\u7840\u3002"}}

{"id": "2508.10059", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.10059", "abs": "https://arxiv.org/abs/2508.10059", "authors": ["Yueke Zhang", "Yifan Zhang", "Kevin Leach", "Yu Huang"], "title": "FormalGrad: Integrating Formal Methods with Gradient-Based LLM Refinement", "comment": "6 Pages", "summary": "While Large Language Models (LLMs) have demonstrated remarkable capabilities\nin code generation, they often produce solutions that lack guarantees of\ncorrectness, robustness, and efficiency. The limitation is acute in domains\nrequiring strict constraints. FormalGrad introduces a principled framework that\nintegrates formal methods directly into an iterative LLM-based generation loop.\nIt uniquely treats code as a differentiable variable, converting structured\nfeedback and formal constraints into a textual pseudo-gradient. This gradient\nguides the model to iteratively refine solutions, ensuring they are not only\nfunctional but also robust and formally justified. We evaluate FormalGrad on\nthe HumanEval, HumanEval+, and LiveCodeBench benchmarks. Our implementation\noutperforms strong baselines, achieving an absolute improvement of up to 27% on\nHumanEval and a 41% relative improvement on the challenging LiveCodeBench V6.\nFormalGrad generates formally justified code that is robust and efficient,\npaving the way for reliable AI-assisted software development in high-stakes\napplications.", "AI": {"tldr": "FormalGrad\u901a\u8fc7\u5c06\u5f62\u5f0f\u5316\u65b9\u6cd5\u878d\u5165LLM\u7684\u8fed\u4ee3\u751f\u6210\u5faa\u73af\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3001\u9c81\u68d2\u6027\u548c\u6548\u7387\u3002", "motivation": "LLM\u751f\u6210\u7684\u4ee3\u7801\u5e38\u7f3a\u4e4f\u6b63\u786e\u6027\u3001\u9c81\u68d2\u6027\u548c\u6548\u7387\u7684\u4fdd\u8bc1\uff0c\u5c24\u5176\u5728\u4e25\u683c\u7ea6\u675f\u7684\u9886\u57df\u3002", "method": "\u5c06\u4ee3\u7801\u89c6\u4e3a\u53ef\u5fae\u5206\u53d8\u91cf\uff0c\u5229\u7528\u5f62\u5f0f\u5316\u7ea6\u675f\u751f\u6210\u6587\u672c\u4f2a\u68af\u5ea6\uff0c\u6307\u5bfc\u6a21\u578b\u8fed\u4ee3\u4f18\u5316\u4ee3\u7801\u3002", "result": "\u5728HumanEval\u548cLiveCodeBench\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u7edd\u5bf9\u63d0\u5347\u8fbe27%\uff0c\u76f8\u5bf9\u63d0\u534741%\u3002", "conclusion": "FormalGrad\u4e3a\u9ad8\u98ce\u9669\u5e94\u7528\u4e2d\u7684AI\u8f85\u52a9\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u4e86\u53ef\u9760\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.10068", "categories": ["cs.SE", "cs.CL", "cs.IR", "cs.PL"], "pdf": "https://arxiv.org/pdf/2508.10068", "abs": "https://arxiv.org/abs/2508.10068", "authors": ["Xiaohan Chen", "Zhongying Pan", "Quan Feng", "Yu Tian", "Shuqun Yang", "Mengru Wang", "Lina Gong", "Yuxia Geng", "Piji Li", "Xiang Chen"], "title": "SaraCoder: Orchestrating Semantic and Structural Cues for Profit-Oriented Repository-Level Code Completion", "comment": null, "summary": "Retrieval-augmented generation (RAG) for repository-level code completion\ncommonly relies on superficial text similarity, leading to results plagued by\nsemantic misguidance, redundancy, and homogeneity, while also failing to\nresolve external symbol ambiguity. To address these challenges, we introduce\nSaracoder, a Hierarchical Feature-Optimized retrieval framework. Its core\nHierarchical Feature Optimization module systematically refines candidates by\ndistilling deep semantic relationships, pruning exact duplicates, assessing\nstructural similarity with a novel graph-based metric that weighs edits by\ntheir topological importance, and reranking results to maximize both relevance\nand diversity. Furthermore, an External-Aware Identifier Disambiguator module\naccurately resolves cross-file symbol ambiguity via dependency analysis.\nExtensive experiments on the challenging CrossCodeEval and RepoEval-Updated\nbenchmarks demonstrate that Saracoder significantly outperforms existing\nbaselines across multiple programming languages and models. Our work proves\nthat systematically refining retrieval results across multiple dimensions\nprovides a new paradigm for building more accurate and robust repository-level\ncode completion systems.", "AI": {"tldr": "Saracoder\u901a\u8fc7\u5206\u5c42\u7279\u5f81\u4f18\u5316\u548c\u5916\u90e8\u611f\u77e5\u6807\u8bc6\u7b26\u6d88\u89e3\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u8865\u5168\u7684\u51c6\u786e\u6027\u548c\u591a\u6837\u6027\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u6587\u672c\u76f8\u4f3c\u6027\u7684\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u65b9\u6cd5\u5b58\u5728\u8bed\u4e49\u8bef\u5bfc\u3001\u5197\u4f59\u548c\u540c\u8d28\u5316\u95ee\u9898\uff0c\u4e14\u65e0\u6cd5\u89e3\u51b3\u5916\u90e8\u7b26\u53f7\u6b67\u4e49\u3002", "method": "\u63d0\u51faSaracoder\u6846\u67b6\uff0c\u5305\u62ec\u5206\u5c42\u7279\u5f81\u4f18\u5316\u6a21\u5757\uff08\u8bed\u4e49\u5173\u7cfb\u84b8\u998f\u3001\u91cd\u590d\u4fee\u526a\u3001\u57fa\u4e8e\u56fe\u7684\u7ed3\u6784\u76f8\u4f3c\u6027\u8bc4\u4f30\uff09\u548c\u5916\u90e8\u611f\u77e5\u6807\u8bc6\u7b26\u6d88\u89e3\u6a21\u5757\u3002", "result": "\u5728CrossCodeEval\u548cRepoEval-Updated\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cSaracoder\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u57fa\u7ebf\u3002", "conclusion": "\u7cfb\u7edf\u5316\u591a\u7ef4\u5ea6\u4f18\u5316\u68c0\u7d22\u7ed3\u679c\u4e3a\u6784\u5efa\u66f4\u51c6\u786e\u3001\u9c81\u68d2\u7684\u4ee3\u7801\u8865\u5168\u7cfb\u7edf\u63d0\u4f9b\u4e86\u65b0\u8303\u5f0f\u3002"}}
{"id": "2508.10074", "categories": ["cs.SE", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.10074", "abs": "https://arxiv.org/abs/2508.10074", "authors": ["Ruofan Lu", "Yintong Huo", "Meng Zhang", "Yichen Li", "Michael R. Lyu"], "title": "Next Edit Prediction: Learning to Predict Code Edits from Context and Interaction History", "comment": null, "summary": "The rapid advancement of large language models (LLMs) has led to the\nwidespread adoption of AI-powered coding assistants integrated into a\ndevelopment environment. On one hand, low-latency code completion offers\ncompletion suggestions but is fundamentally constrained to the cursor's current\nposition. On the other hand, chat-based editing can perform complex\nmodifications, yet forces developers to stop their work, describe the intent in\nnatural language, which causes a context-switch away from the code. This\ncreates a suboptimal user experience, as neither paradigm proactively predicts\nthe developer's next edit in a sequence of related edits. To bridge this gap\nand provide the seamless code edit suggestion, we introduce the task of Next\nEdit Prediction, a novel task designed to infer developer intent from recent\ninteraction history to predict both the location and content of the subsequent\nedit. Specifically, we curate a high-quality supervised fine-tuning dataset and\nan evaluation benchmark for the Next Edit Prediction task. Then, we conduct\nsupervised fine-tuning on a series of models and performed a comprehensive\nevaluation of both the fine-tuned models and other baseline models, yielding\nseveral novel findings. This work lays the foundation for a new interaction\nparadigm that proactively collaborate with developers by anticipating their\nfollowing action, rather than merely reacting to explicit instructions.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a\u201cNext Edit Prediction\u201d\u7684\u65b0\u4efb\u52a1\uff0c\u65e8\u5728\u901a\u8fc7\u5f00\u53d1\u8005\u6700\u8fd1\u7684\u4ea4\u4e92\u5386\u53f2\u9884\u6d4b\u5176\u4e0b\u4e00\u6b65\u7f16\u8f91\u7684\u4f4d\u7f6e\u548c\u5185\u5bb9\uff0c\u4ee5\u63d0\u5347\u4ee3\u7801\u7f16\u8f91\u4f53\u9a8c\u3002", "motivation": "\u5f53\u524dAI\u4ee3\u7801\u52a9\u624b\u5b58\u5728\u4e24\u79cd\u6a21\u5f0f\uff1a\u4f4e\u5ef6\u8fdf\u4ee3\u7801\u8865\u5168\u548c\u57fa\u4e8e\u804a\u5929\u7684\u7f16\u8f91\uff0c\u4f46\u5747\u65e0\u6cd5\u4e3b\u52a8\u9884\u6d4b\u5f00\u53d1\u8005\u7684\u4e00\u7cfb\u5217\u76f8\u5173\u7f16\u8f91\uff0c\u5bfc\u81f4\u7528\u6237\u4f53\u9a8c\u4e0d\u4f73\u3002", "method": "\u7814\u7a76\u56e2\u961f\u6784\u5efa\u4e86\u4e00\u4e2a\u9ad8\u8d28\u91cf\u7684\u6709\u76d1\u7763\u5fae\u8c03\u6570\u636e\u96c6\u548c\u8bc4\u4f30\u57fa\u51c6\uff0c\u5e76\u5bf9\u4e00\u7cfb\u5217\u6a21\u578b\u8fdb\u884c\u4e86\u5fae\u8c03\u548c\u5168\u9762\u8bc4\u4f30\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u5fae\u8c03\u540e\u7684\u6a21\u578b\u5728\u9884\u6d4b\u5f00\u53d1\u8005\u4e0b\u4e00\u6b65\u7f16\u8f91\u65b9\u9762\u8868\u73b0\u4f18\u4e8e\u57fa\u7ebf\u6a21\u578b\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u4e00\u79cd\u65b0\u7684\u4ea4\u4e92\u6a21\u5f0f\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u80fd\u591f\u901a\u8fc7\u9884\u6d4b\u5f00\u53d1\u8005\u884c\u4e3a\u4e3b\u52a8\u534f\u4f5c\uff0c\u800c\u975e\u4ec5\u54cd\u5e94\u663e\u5f0f\u6307\u4ee4\u3002"}}
{"id": "2508.10781", "categories": ["cs.PL", "quant-ph"], "pdf": "https://arxiv.org/pdf/2508.10781", "abs": "https://arxiv.org/abs/2508.10781", "authors": ["Abtin Molavi", "Amanda Xu", "Ethan Cecchetti", "Swamit Tannu", "Aws Albarghouthi"], "title": "Generating Compilers for Qubit Mapping and Routing", "comment": null, "summary": "Quantum computers promise to solve important problems faster than classical\ncomputers, potentially unlocking breakthroughs in materials science, chemistry,\nand beyond. Optimizing compilers are key to realizing this potential, as they\nminimize expensive resource usage and limit error rates. A critical compilation\nstep is qubit mapping and routing (QMR), which finds mappings from circuit\nqubits to qubits on a target device and plans instruction execution while\nsatisfying the device's connectivity constraints. The challenge is that the\nlandscape of quantum architectures is incredibly diverse and fast-evolving.\nGiven this diversity, hundreds of papers have addressed the QMR problem for\ndifferent qubit hardware, connectivity constraints, and quantum error\ncorrection schemes.\n  We present an approach for automatically generating qubit mapping and routing\ncompilers for arbitrary quantum architectures. Though each QMR problem is\ndifferent, we identify a common core structure-device state machine-that we use\nto formulate an abstract QMR problem. Our formulation naturally leads to a\ndomain-specific language, Marol, for specifying QMR problems-for example, the\nwell-studied NISQ mapping and routing problem requires only 12 lines of Marol.\nWe demonstrate that QMR problems, defined in Marol, can be solved with a\npowerful parametric solver that can be instantiated for any Marol program. We\nevaluate our approach through case studies of important QMR problems from prior\nand recent work, covering noisy and fault-tolerant quantum architectures on all\nmajor hardware platforms. Our thorough evaluation shows that generated\ncompilers are competitive with handwritten, specialized compilers in terms of\nruntime and solution quality. We envision that our approach will simplify\ndevelopment of future quantum compilers as new quantum architectures continue\nto emerge.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u81ea\u52a8\u751f\u6210\u91cf\u5b50\u6bd4\u7279\u6620\u5c04\u548c\u8def\u7531\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u4efb\u610f\u91cf\u5b50\u67b6\u6784\uff0c\u7b80\u5316\u672a\u6765\u91cf\u5b50\u7f16\u8bd1\u5668\u7684\u5f00\u53d1\u3002", "motivation": "\u91cf\u5b50\u8ba1\u7b97\u673a\u6f5c\u529b\u5de8\u5927\uff0c\u4f46\u9700\u8981\u4f18\u5316\u7f16\u8bd1\u5668\u4ee5\u51cf\u5c11\u8d44\u6e90\u4f7f\u7528\u548c\u9519\u8bef\u7387\u3002\u91cf\u5b50\u6bd4\u7279\u6620\u5c04\u548c\u8def\u7531\uff08QMR\uff09\u662f\u5173\u952e\u6b65\u9aa4\uff0c\u4f46\u73b0\u6709\u65b9\u6cd5\u9488\u5bf9\u4e0d\u540c\u67b6\u6784\u548c\u7ea6\u675f\u6761\u4ef6\uff0c\u7f3a\u4e4f\u901a\u7528\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u901a\u8fc7\u8bc6\u522bQMR\u95ee\u9898\u7684\u5171\u540c\u6838\u5fc3\u7ed3\u6784\uff08\u8bbe\u5907\u72b6\u6001\u673a\uff09\uff0c\u63d0\u51fa\u62bd\u8c61QMR\u95ee\u9898\uff0c\u5e76\u8bbe\u8ba1\u9886\u57df\u7279\u5b9a\u8bed\u8a00Marol\u3002\u4f7f\u7528\u53c2\u6570\u5316\u6c42\u89e3\u5668\u89e3\u51b3Marol\u5b9a\u4e49\u7684QMR\u95ee\u9898\u3002", "result": "\u751f\u6210\u7684\u7f16\u8bd1\u5668\u5728\u8fd0\u884c\u65f6\u548c\u89e3\u51b3\u65b9\u6848\u8d28\u91cf\u4e0a\u4e0e\u624b\u5de5\u7f16\u5199\u7684\u4e13\u7528\u7f16\u8bd1\u5668\u76f8\u5f53\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u786c\u4ef6\u5e73\u53f0\u548c\u67b6\u6784\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u672a\u6765\u91cf\u5b50\u7f16\u8bd1\u5668\u7684\u5f00\u53d1\u63d0\u4f9b\u4e86\u901a\u7528\u4e14\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u9002\u5e94\u4e0d\u65ad\u6f14\u8fdb\u7684\u91cf\u5b50\u67b6\u6784\u3002"}}
{"id": "2508.10157", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.10157", "abs": "https://arxiv.org/abs/2508.10157", "authors": ["Ajibode Adekunle", "Abdul Ali Bangash", "Bram Adams", "Ahmed E. Hassan"], "title": "On the synchronization between Hugging Face pre-trained language models and their upstream GitHub repository", "comment": null, "summary": "Pretrained language models (PTLMs) have advanced natural language processing\n(NLP), enabling progress in tasks like text generation and translation. Like\nsoftware package management, PTLMs are trained using code and environment\nscripts in upstream repositories (e.g., GitHub, GH) and distributed as variants\nvia downstream platforms like Hugging Face (HF). Coordinating development\nbetween GH and HF poses challenges such as misaligned release timelines,\ninconsistent versioning, and limited reuse of PTLM variants. We conducted a\nmixed-method study of 325 PTLM families (904 HF variants) to examine how commit\nactivities are coordinated. Our analysis reveals that GH contributors typically\nmake changes related to specifying the version of the model, improving code\nquality, performance optimization, and dependency management within the\ntraining scripts, while HF contributors make changes related to improving model\ndescriptions, data set handling, and setup required for model inference.\nFurthermore, to understand the synchronization aspects of commit activities\nbetween GH and HF, we examined three dimensions of these activities -- lag\n(delay), type of synchronization, and intensity -- which together yielded eight\ndistinct synchronization patterns. The prevalence of partially synchronized\npatterns, such as Disperse synchronization and Sparse synchronization, reveals\nstructural disconnects in current cross-platform release practices. These\npatterns often result in isolated changes -- where improvements or fixes made\non one platform are never replicated on the other -- and in some cases,\nindicate an abandonment of one repository in favor of the other. Such\nfragmentation risks exposing end users to incomplete, outdated, or behaviorally\ninconsistent models. Hence, recognizing these synchronization patterns is\ncritical for improving oversight and traceability in PTLM release workflows.", "AI": {"tldr": "\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff08PTLM\uff09\u7684\u5f00\u53d1\u6d89\u53caGitHub\u548cHugging Face\u4e24\u4e2a\u5e73\u53f0\uff0c\u4f46\u4e24\u8005\u95f4\u7684\u534f\u8c03\u95ee\u9898\u5bfc\u81f4\u7248\u672c\u4e0d\u4e00\u81f4\u548c\u529f\u80fd\u5b64\u7acb\u3002\u7814\u7a76\u53d1\u73b0\u5b58\u5728\u516b\u79cd\u540c\u6b65\u6a21\u5f0f\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u8de8\u5e73\u53f0\u53d1\u5e03\u5b9e\u8df5\u4e2d\u7684\u7ed3\u6784\u6027\u8131\u8282\u3002", "motivation": "\u63a2\u8ba8GitHub\u548cHugging Face\u5728PTLM\u5f00\u53d1\u4e2d\u7684\u534f\u8c03\u95ee\u9898\uff0c\u4ee5\u89e3\u51b3\u7248\u672c\u4e0d\u4e00\u81f4\u548c\u529f\u80fd\u5b64\u7acb\u7b49\u6311\u6218\u3002", "method": "\u5bf9325\u4e2aPTLM\u5bb6\u65cf\uff08904\u4e2aHugging Face\u53d8\u4f53\uff09\u8fdb\u884c\u6df7\u5408\u65b9\u6cd5\u7814\u7a76\uff0c\u5206\u6790\u63d0\u4ea4\u6d3b\u52a8\u7684\u534f\u8c03\u65b9\u5f0f\u3002", "result": "\u53d1\u73b0\u516b\u79cd\u540c\u6b65\u6a21\u5f0f\uff0c\u90e8\u5206\u540c\u6b65\u6a21\u5f0f\uff08\u5982\u5206\u6563\u540c\u6b65\u548c\u7a00\u758f\u540c\u6b65\uff09\u63ed\u793a\u4e86\u8de8\u5e73\u53f0\u53d1\u5e03\u5b9e\u8df5\u4e2d\u7684\u7ed3\u6784\u6027\u8131\u8282\u3002", "conclusion": "\u8bc6\u522b\u8fd9\u4e9b\u540c\u6b65\u6a21\u5f0f\u5bf9\u6539\u8fdbPTLM\u53d1\u5e03\u6d41\u7a0b\u7684\u76d1\u7763\u548c\u53ef\u8ffd\u6eaf\u6027\u81f3\u5173\u91cd\u8981\u3002"}}
{"id": "2508.10438", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2508.10438", "abs": "https://arxiv.org/abs/2508.10438", "authors": ["Yifan He", "Munyque Mittelmann", "Aniello Murano", "Abdallah Saffidine", "Michael Thielscher"], "title": "Repairing General Game Descriptions (extended version)", "comment": null, "summary": "The Game Description Language (GDL) is a widely used formalism for specifying\nthe rules of general games. Writing correct GDL descriptions can be\nchallenging, especially for non-experts. Automated theorem proving has been\nproposed to assist game design by verifying if a GDL description satisfies\ndesirable logical properties. However, when a description is proved to be\nfaulty, the repair task itself can only be done manually. Motivated by the work\non repairing unsolvable planning domain descriptions, we define a more general\nproblem of finding minimal repairs for GDL descriptions that violate formal\nrequirements, and we provide complexity results for various computational\nproblems related to minimal repair. Moreover, we present an Answer Set\nProgramming-based encoding for solving the minimal repair problem and\ndemonstrate its application for automatically repairing ill-defined game\ndescriptions.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u81ea\u52a8\u5b9a\u7406\u8bc1\u660e\u548c\u56de\u7b54\u96c6\u7f16\u7a0b\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u4fee\u590d\u8fdd\u53cd\u5f62\u5f0f\u8981\u6c42\u7684GDL\u63cf\u8ff0\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u8ba1\u7b97\u95ee\u9898\u7684\u590d\u6742\u6027\u5206\u6790\u3002", "motivation": "GDL\u63cf\u8ff0\u7684\u6b63\u786e\u6027\u5bf9\u975e\u4e13\u5bb6\u6765\u8bf4\u5177\u6709\u6311\u6218\u6027\uff0c\u73b0\u6709\u65b9\u6cd5\u53ea\u80fd\u624b\u52a8\u4fee\u590d\u9519\u8bef\uff0c\u56e0\u6b64\u9700\u8981\u81ea\u52a8\u5316\u4fee\u590d\u5de5\u5177\u3002", "method": "\u5b9a\u4e49\u4e86GDL\u63cf\u8ff0\u7684\u6700\u5c0f\u4fee\u590d\u95ee\u9898\uff0c\u63d0\u4f9b\u4e86\u590d\u6742\u6027\u5206\u6790\uff0c\u5e76\u4f7f\u7528\u56de\u7b54\u96c6\u7f16\u7a0b\u7f16\u7801\u5b9e\u73b0\u81ea\u52a8\u4fee\u590d\u3002", "result": "\u5c55\u793a\u4e86\u8be5\u65b9\u6cd5\u5728\u4fee\u590d\u5b9a\u4e49\u4e0d\u660e\u786e\u7684\u6e38\u620f\u63cf\u8ff0\u4e2d\u7684\u5b9e\u9645\u5e94\u7528\u6548\u679c\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3aGDL\u63cf\u8ff0\u7684\u81ea\u52a8\u5316\u4fee\u590d\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\uff0c\u5e76\u6269\u5c55\u4e86\u76f8\u5173\u7406\u8bba\u3002"}}
{"id": "2508.10535", "categories": ["cs.FL", "F.4.3; I.2.2"], "pdf": "https://arxiv.org/pdf/2508.10535", "abs": "https://arxiv.org/abs/2508.10535", "authors": ["Micha\u0142 Fica", "Jan Otop"], "title": "Active Automata Learning with Advice", "comment": "The full version of the paper accepted to ECAI 2025", "summary": "We present an extended automata learning framework that combines active\nautomata learning with deductive inference. The learning algorithm asks\nmembership and equivalence queries as in the original framework, but it is also\ngiven advice, which is used to infer answers to queries when possible and\nreduce the burden on the teacher. We consider advice given via string rewriting\nsystems, which specify equivalence of words w.r.t. the target languages. The\nmain motivation for the proposed framework is to reduce the number of queries.\nWe show how to adapt Angluin-style learning algorithms to this framework with\nlow overhead. Finally, we present empirical evaluation of our approach and\nobserve substantial improvement in query complexity.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408\u4e3b\u52a8\u81ea\u52a8\u673a\u5b66\u4e60\u548c\u6f14\u7ece\u63a8\u7406\u7684\u6269\u5c55\u6846\u67b6\uff0c\u901a\u8fc7\u5f15\u5165\u5efa\u8bae\u673a\u5236\u51cf\u5c11\u67e5\u8be2\u6b21\u6570\u3002", "motivation": "\u51cf\u5c11\u67e5\u8be2\u6b21\u6570\uff0c\u63d0\u9ad8\u5b66\u4e60\u6548\u7387\u3002", "method": "\u7ed3\u5408\u4e3b\u52a8\u5b66\u4e60\u548c\u6f14\u7ece\u63a8\u7406\uff0c\u5229\u7528\u5b57\u7b26\u4e32\u91cd\u5199\u7cfb\u7edf\u63d0\u4f9b\u5efa\u8bae\u3002", "result": "\u663e\u8457\u964d\u4f4e\u4e86\u67e5\u8be2\u590d\u6742\u5ea6\u3002", "conclusion": "\u8be5\u6846\u67b6\u5728\u51cf\u5c11\u67e5\u8be2\u6b21\u6570\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u4e14\u6613\u4e8e\u96c6\u6210\u5230\u73b0\u6709\u7b97\u6cd5\u4e2d\u3002"}}
{"id": "2508.10517", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.10517", "abs": "https://arxiv.org/abs/2508.10517", "authors": ["Likai Ye", "Mengliang Li", "Dehai Zhao", "Jiamou Sun", "Xiaoxue Ren"], "title": "Bridging Solidity Evolution Gaps: An LLM-Enhanced Approach for Smart Contract Compilation Error Resolution", "comment": "International Conference on Software Maintenance and Evolution\n  (ICSME) 2025", "summary": "Solidity, the dominant smart contract language for Ethereum, has rapidly\nevolved with frequent version updates to enhance security, functionality, and\ndeveloper experience. However, these continual changes introduce significant\nchallenges, particularly in compilation errors, code migration, and\nmaintenance. Therefore, we conduct an empirical study to investigate the\nchallenges in the Solidity version evolution and reveal that 81.68% of examined\ncontracts encounter errors when compiled across different versions, with 86.92%\nof compilation errors.\n  To mitigate these challenges, we conducted a systematic evaluation of large\nlanguage models (LLMs) for resolving Solidity compilation errors during version\nmigrations. Our empirical analysis across both open-source (LLaMA3, DeepSeek)\nand closed-source (GPT-4o, GPT-3.5-turbo) LLMs reveals that although these\nmodels exhibit error repair capabilities, their effectiveness diminishes\nsignificantly for semantic-level issues and shows strong dependency on prompt\nengineering strategies. This underscores the critical need for domain-specific\nadaptation in developing reliable LLM-based repair systems for smart contracts.\n  Building upon these insights, we introduce SMCFIXER, a novel framework that\nsystematically integrates expert knowledge retrieval with LLM-based repair\nmechanisms for Solidity compilation error resolution. The architecture\ncomprises three core phases: (1) context-aware code slicing that extracts\nrelevant error information; (2) expert knowledge retrieval from official\ndocumentation; and (3) iterative patch generation for Solidity migration.\nExperimental validation across Solidity version migrations demonstrates our\napproach's statistically significant 24.24% improvement over baseline GPT-4o on\nreal-world datasets, achieving near-perfect 96.97% accuracy.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86Solidity\u7248\u672c\u5347\u7ea7\u4e2d\u7684\u7f16\u8bd1\u9519\u8bef\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408\u4e13\u5bb6\u77e5\u8bc6\u68c0\u7d22\u548cLLM\u7684\u4fee\u590d\u6846\u67b6SMCFIXER\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4fee\u590d\u51c6\u786e\u7387\u3002", "motivation": "Solidity\u9891\u7e41\u7248\u672c\u66f4\u65b0\u5e26\u6765\u7f16\u8bd1\u9519\u8bef\u548c\u7ef4\u62a4\u6311\u6218\uff0c\u9700\u7814\u7a76\u5982\u4f55\u6709\u6548\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u5b9e\u8bc1\u7814\u7a76\u5206\u6790\u7f16\u8bd1\u9519\u8bef\uff0c\u8bc4\u4f30LLM\u4fee\u590d\u80fd\u529b\uff0c\u5e76\u63d0\u51faSMCFIXER\u6846\u67b6\uff0c\u7ed3\u5408\u4e13\u5bb6\u77e5\u8bc6\u68c0\u7d22\u548cLLM\u4fee\u590d\u673a\u5236\u3002", "result": "SMCFIXER\u5728\u771f\u5b9e\u6570\u636e\u96c6\u4e0a\u6bd4GPT-4o\u63d0\u534724.24%\uff0c\u51c6\u786e\u7387\u8fbe96.97%\u3002", "conclusion": "SMCFIXER\u6846\u67b6\u663e\u8457\u63d0\u5347\u4e86Solidity\u7f16\u8bd1\u9519\u8bef\u7684\u4fee\u590d\u6548\u679c\uff0c\u5f3a\u8c03\u4e86\u9886\u57df\u77e5\u8bc6\u5728LLM\u4fee\u590d\u7cfb\u7edf\u4e2d\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2508.10813", "categories": ["cs.LO", "math.LO"], "pdf": "https://arxiv.org/pdf/2508.10813", "abs": "https://arxiv.org/abs/2508.10813", "authors": ["Philippe Balbiani", "Tinko Tinchev"], "title": "Modal definability in Euclidean modal logics", "comment": null, "summary": "This paper is about the computability of the modal definability problem in\nclasses of frames determined by Euclidean modal logics. We characterize those\nEuclidean modal logics such that the classes of frames they determine give rise\nto an undecidable modal definability problem.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u6b27\u51e0\u91cc\u5f97\u6a21\u6001\u903b\u8f91\u6846\u67b6\u7c7b\u4e2d\u6a21\u6001\u53ef\u5b9a\u4e49\u6027\u95ee\u9898\u7684\u53ef\u8ba1\u7b97\u6027\uff0c\u5e76\u786e\u5b9a\u4e86\u5bfc\u81f4\u8be5\u95ee\u9898\u4e0d\u53ef\u5224\u5b9a\u7684\u903b\u8f91\u7c7b\u522b\u3002", "motivation": "\u63a2\u8ba8\u6b27\u51e0\u91cc\u5f97\u6a21\u6001\u903b\u8f91\u6846\u67b6\u7c7b\u4e2d\u6a21\u6001\u53ef\u5b9a\u4e49\u6027\u95ee\u9898\u7684\u53ef\u8ba1\u7b97\u6027\uff0c\u586b\u8865\u76f8\u5173\u7406\u8bba\u7a7a\u767d\u3002", "method": "\u901a\u8fc7\u5206\u6790\u6b27\u51e0\u91cc\u5f97\u6a21\u6001\u903b\u8f91\u6846\u67b6\u7c7b\u7684\u6027\u8d28\uff0c\u786e\u5b9a\u6a21\u6001\u53ef\u5b9a\u4e49\u6027\u95ee\u9898\u7684\u53ef\u8ba1\u7b97\u6027\u6761\u4ef6\u3002", "result": "\u786e\u5b9a\u4e86\u5bfc\u81f4\u6a21\u6001\u53ef\u5b9a\u4e49\u6027\u95ee\u9898\u4e0d\u53ef\u5224\u5b9a\u7684\u6b27\u51e0\u91cc\u5f97\u6a21\u6001\u903b\u8f91\u7c7b\u522b\u3002", "conclusion": "\u7814\u7a76\u4e3a\u6b27\u51e0\u91cc\u5f97\u6a21\u6001\u903b\u8f91\u7684\u53ef\u8ba1\u7b97\u6027\u63d0\u4f9b\u4e86\u7406\u8bba\u652f\u6301\uff0c\u5e76\u63ed\u793a\u4e86\u5176\u5c40\u9650\u6027\u3002"}}
{"id": "2508.10852", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.10852", "abs": "https://arxiv.org/abs/2508.10852", "authors": ["Souhaila Serbout", "Diana Carolina Mu\u00f1oz Hurtado", "Hassan Atwi", "Edoardo Riggio", "Cesare Pautasso"], "title": "EVOSCAT: Exploring Software Change Dynamics in Large-Scale Historical Datasets", "comment": "Submitted to VISSOFT 2025. For the hi-resolution version of the\n  paper, see https://design.inf.usi.ch/publications/2025/vissoft", "summary": "Long lived software projects encompass a large number of artifacts, which\nundergo many revisions throughout their history. Empirical software engineering\nresearchers studying software evolution gather and collect datasets with\nmillions of events, representing changes introduced to specific artifacts. In\nthis paper, we propose EvoScat, a tool that attempts addressing temporal\nscalability through the usage of interactive density scatterplot to provide a\nglobal overview of large historical datasets mined from open source\nrepositories in a single visualization. EvoScat intents to provide researchers\nwith a mean to produce scalable visualizations that can help them explore and\ncharacterize evolution datasets, as well as comparing the histories of\nindividual artifacts, both in terms of 1) observing how rapidly different\nartifacts age over multiple-year-long time spans 2) how often metrics\nassociated with each artifacts tend towards an improvement or worsening. The\npaper shows how the tool can be tailored to specific analysis needs (pace of\nchange comparison, clone detection, freshness assessment) thanks to its support\nfor flexible configuration of history scaling and alignment along the time\naxis, artifacts sorting and interactive color mapping, enabling the analysis of\nmillions of events obtained by mining the histories of tens of thousands of\nsoftware artifacts. We include in this paper a gallery showcasing datasets\ngathering specific artifacts (OpenAPI descriptions, GitHub workflow\ndefinitions) across multiple repositories, as well as diving into the history\nof specific popular open source projects.", "AI": {"tldr": "EvoScat\u662f\u4e00\u4e2a\u7528\u4e8e\u53ef\u89c6\u5316\u5927\u89c4\u6a21\u8f6f\u4ef6\u5386\u53f2\u6570\u636e\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u4ea4\u4e92\u5f0f\u5bc6\u5ea6\u6563\u70b9\u56fe\u63d0\u4f9b\u5168\u5c40\u89c6\u56fe\uff0c\u652f\u6301\u7075\u6d3b\u914d\u7f6e\u4ee5\u5206\u6790\u6570\u767e\u4e07\u4e8b\u4ef6\u3002", "motivation": "\u957f\u671f\u8f6f\u4ef6\u9879\u76ee\u5305\u542b\u5927\u91cf\u4e0d\u65ad\u4fee\u8ba2\u7684\u5de5\u4ef6\uff0c\u7814\u7a76\u8f6f\u4ef6\u6f14\u5316\u7684\u7814\u7a76\u4eba\u5458\u9700\u8981\u5904\u7406\u6570\u767e\u4e07\u4e8b\u4ef6\u7684\u6570\u636e\u96c6\uff0cEvoScat\u65e8\u5728\u63d0\u4f9b\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u5168\u5c40\u53ef\u89c6\u5316\u65b9\u6cd5\u3002", "method": "EvoScat\u4f7f\u7528\u4ea4\u4e92\u5f0f\u5bc6\u5ea6\u6563\u70b9\u56fe\uff0c\u652f\u6301\u65f6\u95f4\u8f74\u7f29\u653e\u3001\u5bf9\u9f50\u3001\u5de5\u4ef6\u6392\u5e8f\u548c\u4ea4\u4e92\u5f0f\u989c\u8272\u6620\u5c04\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u5206\u6790\u9700\u6c42\uff08\u5982\u53d8\u66f4\u901f\u5ea6\u6bd4\u8f83\u3001\u514b\u9686\u68c0\u6d4b\u3001\u65b0\u9c9c\u5ea6\u8bc4\u4f30\uff09\u3002", "result": "\u5de5\u5177\u80fd\u591f\u5206\u6790\u6765\u81ea\u6570\u4e07\u8f6f\u4ef6\u5de5\u4ef6\u7684\u6570\u767e\u4e07\u4e8b\u4ef6\uff0c\u5e76\u901a\u8fc7\u6848\u4f8b\u5c55\u793a\u4e86\u5176\u5728OpenAPI\u63cf\u8ff0\u548cGitHub\u5de5\u4f5c\u6d41\u5b9a\u4e49\u7b49\u6570\u636e\u96c6\u4e2d\u7684\u5e94\u7528\u3002", "conclusion": "EvoScat\u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u3001\u7075\u6d3b\u7684\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5e2e\u52a9\u63a2\u7d22\u548c\u6bd4\u8f83\u8f6f\u4ef6\u6f14\u5316\u6570\u636e\u96c6\u3002"}}

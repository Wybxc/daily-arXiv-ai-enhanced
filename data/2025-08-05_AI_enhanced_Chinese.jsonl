{"id": "2508.01067", "categories": ["cs.LO", "cs.AI", "F.4.1; F.1.1; I.2.0"], "pdf": "https://arxiv.org/pdf/2508.01067", "abs": "https://arxiv.org/abs/2508.01067", "authors": ["Veeti Ahvonen", "Maurice Funk", "Damian Heiman", "Antti Kuusisto", "Carsten Lutz"], "title": "Expressive Power of Graph Transformers via Logic", "comment": null, "summary": "Transformers are the basis of modern large language models, but relatively\nlittle is known about their precise expressive power on graphs. We study the\nexpressive power of graph transformers (GTs) by Dwivedi and Bresson (2020) and\nGPS-networks by Ramp\\'asek et al. (2022), both under soft-attention and average\nhard-attention. Our study covers two scenarios: the theoretical setting with\nreal numbers and the more practical case with floats. With reals, we show that\nin restriction to vertex properties definable in first-order logic (FO),\nGPS-networks have the same expressive power as graded modal logic (GML) with\nthe global modality. With floats, GPS-networks turn out to be equally\nexpressive as GML with the counting global modality. The latter result is\nabsolute, not restricting to properties definable in a background logic. We\nalso obtain similar characterizations for GTs in terms of propositional logic\nwith the global modality (for reals) and the counting global modality (for\nfloats).", "AI": {"tldr": "\u7814\u7a76\u4e86\u56fe\u53d8\u6362\u5668\uff08GTs\uff09\u548cGPS\u7f51\u7edc\u5728\u8f6f\u6ce8\u610f\u529b\u548c\u5e73\u5747\u786c\u6ce8\u610f\u529b\u4e0b\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5206\u522b\u5728\u5b9e\u6570\u7406\u8bba\u548c\u6d6e\u70b9\u5b9e\u8df5\u573a\u666f\u4e0b\u8fdb\u884c\u4e86\u5206\u6790\u3002", "motivation": "\u63a2\u8ba8\u73b0\u4ee3\u5927\u578b\u8bed\u8a00\u6a21\u578b\u57fa\u7840\u2014\u2014\u53d8\u6362\u5668\u5728\u56fe\u4e0a\u7684\u7cbe\u786e\u8868\u8fbe\u80fd\u529b\u3002", "method": "\u5206\u6790GTs\u548cGPS\u7f51\u7edc\u5728\u8f6f\u6ce8\u610f\u529b\u548c\u5e73\u5747\u786c\u6ce8\u610f\u529b\u4e0b\u7684\u8868\u73b0\uff0c\u6bd4\u8f83\u5b9e\u6570\u7406\u8bba\u548c\u6d6e\u70b9\u5b9e\u8df5\u573a\u666f\u3002", "result": "GPS\u7f51\u7edc\u5728\u5b9e\u6570\u4e0b\u4e0e\u5e26\u5168\u5c40\u6a21\u6001\u7684GML\u8868\u8fbe\u80fd\u529b\u76f8\u540c\uff0c\u6d6e\u70b9\u4e0b\u4e0e\u5e26\u8ba1\u6570\u5168\u5c40\u6a21\u6001\u7684GML\u7b49\u4ef7\uff1bGTs\u5728\u5b9e\u6570\u4e0b\u4e0e\u5e26\u5168\u5c40\u6a21\u6001\u7684\u547d\u9898\u903b\u8f91\u7b49\u4ef7\uff0c\u6d6e\u70b9\u4e0b\u4e0e\u5e26\u8ba1\u6570\u5168\u5c40\u6a21\u6001\u7684\u547d\u9898\u903b\u8f91\u7b49\u4ef7\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86GTs\u548cGPS\u7f51\u7edc\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u4e3a\u56fe\u53d8\u6362\u5668\u7684\u7406\u8bba\u7406\u89e3\u63d0\u4f9b\u4e86\u91cd\u8981\u89c1\u89e3\u3002"}}
{"id": "2508.01535", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2508.01535", "abs": "https://arxiv.org/abs/2508.01535", "authors": ["Yeonseok Lee", "Koji Nakazawa"], "title": "Relative Completeness of Incorrectness Separation Logic", "comment": "This is an extended version of a paper that appeared in the Asian\n  Symposium on Programming Languages and Systems (APLAS) 2024: Lee, Y.,\n  Nakazawa, K. \"Relative Completeness of Incorrectness Separation Logic.\" In:\n  Kiselyov, O. (eds) Programming Languages and Systems. Lecture Notes in\n  Computer Science, vol 15194. Springer, Singapore. DOI:\n  10.1007/978-981-97-8943-6_13", "summary": "Incorrectness Separation Logic (ISL) is a proof system that is tailored\nspecifically to resolve problems of under-approximation in programs that\nmanipulate heaps, and it primarily focuses on bug detection. This approach is\ndifferent from the over-approximation methods that are used in traditional\nlogics such as Hoare Logic or Separation Logic. Although the soundness of ISL\nhas been established, its completeness remains unproven. In this study, we\nestablish relative completeness by leveraging the expressiveness of the weakest\npostconditions; expressiveness is a factor that is critical to demonstrating\nrelative completeness in Reverse Hoare Logic. In our ISL framework, we allow\nfor infinite disjunctions in disjunctive normal forms, where each clause\ncomprises finite symbolic heaps with existential quantifiers. To compute the\nweakest postconditions in ISL, we introduce a canonicalization that includes\nvariable aliasing.", "AI": {"tldr": "ISL\u662f\u4e00\u79cd\u9488\u5bf9\u5806\u64cd\u4f5c\u7a0b\u5e8f\u4e2d\u4e0b\u8fd1\u4f3c\u95ee\u9898\u7684\u8bc1\u660e\u7cfb\u7edf\uff0c\u4e13\u6ce8\u4e8e\u9519\u8bef\u68c0\u6d4b\u3002\u672c\u7814\u7a76\u901a\u8fc7\u6700\u5f31\u540e\u6761\u4ef6\u7684\u8868\u8fbe\u80fd\u529b\u8bc1\u660e\u4e86\u5176\u76f8\u5bf9\u5b8c\u5907\u6027\u3002", "motivation": "\u89e3\u51b3\u4f20\u7edf\u903b\u8f91\uff08\u5982Hoare\u903b\u8f91\u6216\u5206\u79bb\u903b\u8f91\uff09\u4e2d\u4e0a\u8fd1\u4f3c\u65b9\u6cd5\u65e0\u6cd5\u5904\u7406\u7684\u4e0b\u8fd1\u4f3c\u95ee\u9898\uff0c\u7279\u522b\u662f\u5806\u64cd\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u68c0\u6d4b\u3002", "method": "\u5229\u7528\u6700\u5f31\u540e\u6761\u4ef6\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5f15\u5165\u5305\u542b\u53d8\u91cf\u522b\u540d\u7684\u89c4\u8303\u5316\u65b9\u6cd5\uff0c\u5e76\u5141\u8bb8\u65e0\u9650\u6790\u53d6\u8303\u5f0f\u3002", "result": "\u8bc1\u660e\u4e86ISL\u7684\u76f8\u5bf9\u5b8c\u5907\u6027\u3002", "conclusion": "ISL\u901a\u8fc7\u6700\u5f31\u540e\u6761\u4ef6\u7684\u8868\u8fbe\u80fd\u529b\u548c\u89c4\u8303\u5316\u65b9\u6cd5\uff0c\u89e3\u51b3\u4e86\u5806\u64cd\u4f5c\u7a0b\u5e8f\u4e2d\u7684\u4e0b\u8fd1\u4f3c\u95ee\u9898\uff0c\u5e76\u8bc1\u660e\u4e86\u5176\u76f8\u5bf9\u5b8c\u5907\u6027\u3002"}}
{"id": "2508.01758", "categories": ["cs.LO", "cs.MA"], "pdf": "https://arxiv.org/pdf/2508.01758", "abs": "https://arxiv.org/abs/2508.01758", "authors": ["Pinaki Chakraborty", "Tristan Caulfield", "David Pym"], "title": "Causality and Decision-making: A Logical Framework for Systems and Security Modelling", "comment": "28 pages", "summary": "Causal reasoning is essential for understanding decision-making about the\nbehaviour of complex `ecosystems' of systems that underpin modern society, with\nsecurity -- including issues around correctness, safety, resilience, etc. --\ntypically providing critical examples. We present a theory of strategic\nreasoning about system modelling based on minimal structural assumptions and\nemploying the methods of transition systems, supported by a modal logic of\nsystem states in the tradition of van Benthem, Hennessy, and Milner, and\nvalidated through equivalence theorems. Our framework introduces an\nintervention operator and a separating conjunction to capture actual causal\nrelationships between component systems of the ecosystem, aligning naturally\nwith Halpern and Pearl's counterfactual approach based on Structural Causal\nModels. We illustrate the applicability through examples of of decision-making\nabout microservices in distributed systems. We discuss localized\ndecision-making through a separating conjunction. This work unifies a formal,\nminimalistic notion of system behaviour with a Halpern--Pearl-compatible theory\nof counterfactual reasoning, providing a logical foundation for studying\ndecision making about causality in complex interacting systems.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u6700\u5c0f\u7ed3\u6784\u5047\u8bbe\u7684\u6218\u7565\u63a8\u7406\u7406\u8bba\uff0c\u7528\u4e8e\u5efa\u6a21\u590d\u6742\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u56e0\u679c\u5173\u7cfb\uff0c\u7ed3\u5408\u4e86\u5e72\u9884\u64cd\u4f5c\u7b26\u548c\u5206\u79bb\u5408\u53d6\uff0c\u4e0eHalpern\u548cPearl\u7684\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u517c\u5bb9\u3002", "motivation": "\u7406\u89e3\u590d\u6742\u751f\u6001\u7cfb\u7edf\u4e2d\u51b3\u7b56\u5236\u5b9a\u7684\u56e0\u679c\u5173\u7cfb\u5bf9\u5b89\u5168\u6027\u7b49\u95ee\u9898\u81f3\u5173\u91cd\u8981\uff0c\u9700\u8981\u4e00\u79cd\u5f62\u5f0f\u5316\u7684\u7406\u8bba\u6846\u67b6\u3002", "method": "\u91c7\u7528\u8f6c\u79fb\u7cfb\u7edf\u65b9\u6cd5\u548c\u6a21\u6001\u903b\u8f91\uff0c\u5f15\u5165\u5e72\u9884\u64cd\u4f5c\u7b26\u548c\u5206\u79bb\u5408\u53d6\uff0c\u7ed3\u5408Halpern\u548cPearl\u7684\u7ed3\u6784\u56e0\u679c\u6a21\u578b\u3002", "result": "\u901a\u8fc7\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u5fae\u670d\u52a1\u51b3\u7b56\u6848\u4f8b\u9a8c\u8bc1\u4e86\u6846\u67b6\u7684\u9002\u7528\u6027\uff0c\u5e76\u8bc1\u660e\u4e86\u7b49\u4ef7\u5b9a\u7406\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u4e3a\u7814\u7a76\u590d\u6742\u4ea4\u4e92\u7cfb\u7edf\u4e2d\u7684\u56e0\u679c\u51b3\u7b56\u63d0\u4f9b\u4e86\u903b\u8f91\u57fa\u7840\uff0c\u7edf\u4e00\u4e86\u5f62\u5f0f\u5316\u7684\u7cfb\u7edf\u884c\u4e3a\u4e0e\u53cd\u4e8b\u5b9e\u63a8\u7406\u7406\u8bba\u3002"}}
{"id": "2508.01199", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.01199", "abs": "https://arxiv.org/abs/2508.01199", "authors": ["Avinash Malik"], "title": "Efficient compilation and execution of synchronous programs via type-state programming", "comment": null, "summary": "Synchronous programs are used extensively in implementation of safety\ncritical embedded software. Imperative synchronous programming languages model\nmultiple Finite State Machines (FSMs) executing in lockstep at logical clock\nticks. The synchronous view of time along with the FSM based design enables\neasier formal verification. The synchronous composition of multiple FSMs,\nduring compilation, results in the well known state space explosion problem.\nHence, efficiently compiling imperative synchronous programs into small and\nfast executables is challenging. This paper introduces a novel linear time\ncompilation technique for automata based compilation of synchronous programs.\nGraph based rewrite rules for kernel programming constructs are introduced. A\nlinear time algorithm applies these rules to produce a FSM. The FSM is then\nencoded into a type-state program using template meta-programming in C++.\nExperimental results show that the compilation time and generated binary size\nis comparable, while the execution times are on average 31-60% faster than\ncurrent state-of-the-art compilers.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7ebf\u6027\u65f6\u95f4\u7f16\u8bd1\u6280\u672f\uff0c\u7528\u4e8e\u540c\u6b65\u7a0b\u5e8f\u7684\u81ea\u52a8\u673a\u7f16\u8bd1\uff0c\u901a\u8fc7\u56fe\u91cd\u5199\u89c4\u5219\u548c\u6a21\u677f\u5143\u7f16\u7a0b\u751f\u6210\u9ad8\u6548\u7684\u6709\u9650\u72b6\u6001\u673a\uff08FSM\uff09\uff0c\u5b9e\u9a8c\u663e\u793a\u6267\u884c\u901f\u5ea6\u6bd4\u73b0\u6709\u7f16\u8bd1\u5668\u5feb31-60%\u3002", "motivation": "\u540c\u6b65\u7a0b\u5e8f\u5728\u5b89\u5168\u5173\u952e\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f46\u591aFSM\u540c\u6b65\u7ec4\u5408\u4f1a\u5bfc\u81f4\u72b6\u6001\u7a7a\u95f4\u7206\u70b8\u95ee\u9898\uff0c\u9700\u8981\u9ad8\u6548\u7684\u7f16\u8bd1\u65b9\u6cd5\u3002", "method": "\u5f15\u5165\u57fa\u4e8e\u56fe\u7684\u6838\u7f16\u7a0b\u6784\u9020\u91cd\u5199\u89c4\u5219\uff0c\u7ebf\u6027\u65f6\u95f4\u7b97\u6cd5\u751f\u6210FSM\uff0c\u5e76\u901a\u8fc7C++\u6a21\u677f\u5143\u7f16\u7a0b\u7f16\u7801\u4e3a\u7c7b\u578b\u72b6\u6001\u7a0b\u5e8f\u3002", "result": "\u7f16\u8bd1\u65f6\u95f4\u548c\u4e8c\u8fdb\u5236\u5927\u5c0f\u4e0e\u73b0\u6709\u6280\u672f\u76f8\u5f53\uff0c\u6267\u884c\u901f\u5ea6\u5e73\u5747\u5feb31-60%\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86\u540c\u6b65\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\uff0c\u9002\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002"}}
{"id": "2508.01866", "categories": ["cs.LO", "D.3.1; F.3.1; F.3.2; F.3.3; F.4.1"], "pdf": "https://arxiv.org/pdf/2508.01866", "abs": "https://arxiv.org/abs/2508.01866", "authors": ["Berend van Starkenburg", "Henning Basold", "Chase Ford"], "title": "Separation Logic of Generic Resources via Sheafeology", "comment": "55 pages including appendix", "summary": "Separation logic was conceived in order to make the verification of pointer\nprograms scalable to large systems and it has proven extremely effective. The\nkey idea is that programs typically access only small parts of memory, allowing\nfor local reasoning. This idea is implemented in separation logic by extending\nfirst-order logic with separating connectives, which inspect local regions of\nmemory. It turns that this approach not only applies to pointer programs, but\nalso to programs involving other resource structures. Various theories have\nbeen put forward to extract and apply the ideas of separation logic more\nbroadly. This resulted in algebraic abstractions of memory and many variants of\nseparation logic for, e.g., concurrent programs and stochastic processes.\nHowever, none of the existing approaches formulate the combination of\nfirst-order logic with separating connectives in a theory that could\nimmediately yield program logics for different resources. In this paper, we\npropose a framework based on the idea that separation logic can obtained by\nmaking first-order logic resource-aware. First-order logic can be understood in\nterms of categorical logic, specifically fibrations. Our contribution is to\nmake these resource-aware by developing categorical logic internally in\ncategories of sheaves, which is what we call sheafeology. The role of sheaves\nis to model views on resources, through which resources can be localised and\ncombined, which enables the scalability promised by separation logic. We\ncontribute constructions of an internal fibration in sheaf categories that\nmodels predicates on resources, and that admits first-order and separating\nconnectives. Thereby, we attain a general framework of separation logic for\ngeneric resources, a claim we substantiate by instantiating our framework to\nvarious memory models and random variables.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8d44\u6e90\u611f\u77e5\u7684\u4e00\u9636\u903b\u8f91\u6846\u67b6\uff0c\u901a\u8fc7\u8303\u7574\u903b\u8f91\u548csheafeology\uff08\u5c42\u8bba\uff09\u5b9e\u73b0\u5206\u79bb\u903b\u8f91\u7684\u901a\u7528\u5316\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u8d44\u6e90\u6a21\u578b\u3002", "motivation": "\u73b0\u6709\u5206\u79bb\u903b\u8f91\u65b9\u6cd5\u672a\u80fd\u7edf\u4e00\u9002\u7528\u4e8e\u4e0d\u540c\u8d44\u6e90\u7ed3\u6784\u7684\u7a0b\u5e8f\u903b\u8f91\uff0c\u7f3a\u4e4f\u901a\u7528\u6846\u67b6\u3002", "method": "\u5229\u7528\u8303\u7574\u903b\u8f91\u548c\u5c42\u8bba\uff08sheafeology\uff09\u5f00\u53d1\u8d44\u6e90\u611f\u77e5\u7684\u4e00\u9636\u903b\u8f91\uff0c\u6784\u5efa\u5185\u90e8\u7ea4\u7ef4\u5316\u6a21\u578b\u4ee5\u652f\u6301\u8c13\u8bcd\u548c\u5206\u79bb\u8fde\u63a5\u8bcd\u3002", "result": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u901a\u7528\u5206\u79bb\u903b\u8f91\u6846\u67b6\uff0c\u53ef\u5b9e\u4f8b\u5316\u4e3a\u591a\u79cd\u8d44\u6e90\u6a21\u578b\uff08\u5982\u5185\u5b58\u6a21\u578b\u548c\u968f\u673a\u53d8\u91cf\uff09\u3002", "conclusion": "\u901a\u8fc7\u5c42\u8bba\u548c\u8303\u7574\u903b\u8f91\uff0c\u5b9e\u73b0\u4e86\u5206\u79bb\u903b\u8f91\u7684\u901a\u7528\u5316\uff0c\u4e3a\u4e0d\u540c\u8d44\u6e90\u7ed3\u6784\u7684\u7a0b\u5e8f\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u7edf\u4e00\u6846\u67b6\u3002"}}
{"id": "2508.02305", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.02305", "abs": "https://arxiv.org/abs/2508.02305", "authors": ["Rose Bohrer"], "title": "Proceedings 14th International Workshop on Trends in Functional Programming in Education", "comment": null, "summary": "The goal of TFPIE is to gather researchers, teachers and professionals that\nuse, or are interested in the use of, functional programming in education.\nTFPIE aims to be a venue where novel ideas, classroom-tested ideas and\nwork-in-progress on the use of functional programming in education are\ndiscussed. The one-day workshop will foster a spirit of open discussion by\nhaving a review process for publication after the workshop.", "AI": {"tldr": "TFPIE\u662f\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u6559\u80b2\u4e2d\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u7814\u8ba8\u4f1a\uff0c\u65e8\u5728\u6c47\u96c6\u7814\u7a76\u8005\u3001\u6559\u5e08\u548c\u4e13\u4e1a\u4eba\u58eb\uff0c\u8ba8\u8bba\u65b0\u60f3\u6cd5\u3001\u8bfe\u5802\u5b9e\u8df5\u548c\u8fdb\u884c\u4e2d\u7684\u5de5\u4f5c\u3002", "motivation": "\u4fc3\u8fdb\u6559\u80b2\u4e2d\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u5e94\u7528\uff0c\u63d0\u4f9b\u4e00\u4e2a\u5f00\u653e\u7684\u8ba8\u8bba\u5e73\u53f0\u3002", "method": "\u901a\u8fc7\u4e00\u5929\u7684\u7814\u8ba8\u4f1a\u5f62\u5f0f\uff0c\u9f13\u52b1\u5f00\u653e\u8ba8\u8bba\uff0c\u5e76\u5728\u4f1a\u540e\u8fdb\u884c\u8bba\u6587\u8bc4\u5ba1\u3002", "result": "\u4e3a\u53c2\u4e0e\u8005\u63d0\u4f9b\u4e00\u4e2a\u5206\u4eab\u548c\u4ea4\u6d41\u51fd\u6570\u5f0f\u7f16\u7a0b\u6559\u80b2\u7ecf\u9a8c\u7684\u5e73\u53f0\u3002", "conclusion": "TFPIE\u901a\u8fc7\u7814\u8ba8\u4f1a\u5f62\u5f0f\u6210\u529f\u4fc3\u8fdb\u4e86\u6559\u80b2\u4e2d\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u8ba8\u8bba\u4e0e\u5408\u4f5c\u3002"}}
{"id": "2508.01821", "categories": ["cs.FL", "F.4.3"], "pdf": "https://arxiv.org/pdf/2508.01821", "abs": "https://arxiv.org/abs/2508.01821", "authors": ["Dana Fisman", "Elina Sudit"], "title": "Runtime Consultants", "comment": null, "summary": "In this paper we introduce the notion of a runtime consultant. A runtime\nconsultant is defined with respect to some value function on infinite words.\nSimilar to a runtime monitor, it runs in parallel to an execution of the system\nand provides inputs at every step of the run. While a runtime monitor alerts\nwhen a violation occurs, the idea behind a consultant is to be pro-active and\nprovide recommendations for which action to take next in order to avoid\nviolation (or obtain a maximal value for quantitative objectives). It is\nassumed that a runtime-controller can take these recommendations into\nconsideration. The runtime consultant does not assume that its recommendations\nare always followed. Instead, it adjusts to the actions actually taken (similar\nto a vehicle navigation system). We show how to compute a runtime consultant\nfor common value functions used in verification, and that almost all have a\nruntime consultant that works in constant time. We also develop consultants for\n$\\omega$-regular properties, under both their classical Boolean semantics and\ntheir recently proposed quantitative interpretation.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u8fd0\u884c\u65f6\u987e\u95ee\u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u5728\u7cfb\u7edf\u6267\u884c\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u5efa\u8bae\u4ee5\u907f\u514d\u8fdd\u89c4\u6216\u4f18\u5316\u76ee\u6807\u503c\u3002", "motivation": "\u52a8\u673a\u662f\u89e3\u51b3\u8fd0\u884c\u65f6\u76d1\u63a7\u7684\u88ab\u52a8\u6027\u95ee\u9898\uff0c\u901a\u8fc7\u4e3b\u52a8\u63d0\u4f9b\u5efa\u8bae\u6765\u4f18\u5316\u7cfb\u7edf\u884c\u4e3a\u3002", "method": "\u65b9\u6cd5\u5305\u62ec\u5b9a\u4e49\u8fd0\u884c\u65f6\u987e\u95ee\uff0c\u5e76\u9488\u5bf9\u5e38\u89c1\u7684\u503c\u51fd\u6570\u548c\u03c9-\u6b63\u5219\u5c5e\u6027\u8bbe\u8ba1\u987e\u95ee\u7b97\u6cd5\u3002", "result": "\u7ed3\u679c\u8868\u660e\uff0c\u51e0\u4e4e\u6240\u6709\u5e38\u89c1\u503c\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u987e\u95ee\u90fd\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5de5\u4f5c\u3002", "conclusion": "\u7ed3\u8bba\u662f\u8fd0\u884c\u65f6\u987e\u95ee\u80fd\u591f\u6709\u6548\u63d0\u5347\u7cfb\u7edf\u884c\u4e3a\u7684\u4e3b\u52a8\u6027\u548c\u4f18\u5316\u80fd\u529b\u3002"}}
{"id": "2508.01255", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01255", "abs": "https://arxiv.org/abs/2508.01255", "authors": ["Cuong Chi Le", "Cuong Duc Van", "Tung Duy Vu", "Thai Minh Pham Vu", "Hoang Nhat Phan", "Huy Nhat Phan", "Tien N. Nguyen"], "title": "TestWeaver: Execution-aware, Feedback-driven Regression Testing Generation with Large Language Models", "comment": null, "summary": "Regression testing ensures that code changes do not unintentionally break\nexisting functionality. While recent advances in large language models (LLMs)\nhave shown promise in automating test generation for regression testing, they\noften suffer from limited reasoning about program execution, resulting in\nstagnated coverage growth - a phenomenon known as the coverage plateau. In this\npaper, we present TestWeaver, a novel LLM-based approach that integrates\nlightweight program analysis to guide test generation more effectively.\nTestWeaver introduces three key innovations: (1) it reduces hallucinations and\nimproves focus by supplying the LLM with the backward slice from the target\nline instead of full program context; (2) it identifies and incorporates close\ntest cases - those that share control-flow similarities with the path to the\ntarget line - to provide execution context within the LLM's context window; and\n(3) it enhances LLM's reasoning with execution in-line annotations that encode\nvariable states as comments along executed paths. By equipping LLMs with these\ntargeted and contextualized inputs, TestWeaver improves coverage-guided test\ngeneration and mitigates redundant explorations. Empirical results demonstrate\nthat TestWeaver accelerates code coverage growth and generates more effective\nregression test cases than existing LLM-based approaches.", "AI": {"tldr": "TestWeaver\u662f\u4e00\u79cd\u57fa\u4e8eLLM\u7684\u65b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u7a0b\u5e8f\u5206\u6790\u6307\u5bfc\u6d4b\u8bd5\u751f\u6210\uff0c\u89e3\u51b3\u4e86\u73b0\u6709LLM\u65b9\u6cd5\u5728\u56de\u5f52\u6d4b\u8bd5\u4e2d\u7684\u8986\u76d6\u505c\u6ede\u95ee\u9898\u3002", "motivation": "\u73b0\u6709LLM\u65b9\u6cd5\u5728\u56de\u5f52\u6d4b\u8bd5\u4e2d\u56e0\u7f3a\u4e4f\u7a0b\u5e8f\u6267\u884c\u63a8\u7406\u80fd\u529b\u5bfc\u81f4\u8986\u76d6\u505c\u6ede\uff0cTestWeaver\u65e8\u5728\u901a\u8fc7\u66f4\u6709\u6548\u7684\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "TestWeaver\u7ed3\u5408\u8f7b\u91cf\u7ea7\u7a0b\u5e8f\u5206\u6790\uff0c\u63d0\u4f9b\u76ee\u6807\u884c\u7684\u540e\u5411\u5207\u7247\u3001\u76f8\u4f3c\u6d4b\u8bd5\u7528\u4f8b\u548c\u6267\u884c\u5185\u8054\u6ce8\u91ca\uff0c\u4ee5\u589e\u5f3aLLM\u7684\u63a8\u7406\u80fd\u529b\u3002", "result": "\u5b9e\u9a8c\u8bc1\u660e\uff0cTestWeaver\u80fd\u52a0\u901f\u4ee3\u7801\u8986\u76d6\u589e\u957f\u5e76\u751f\u6210\u66f4\u6709\u6548\u7684\u56de\u5f52\u6d4b\u8bd5\u7528\u4f8b\u3002", "conclusion": "TestWeaver\u901a\u8fc7\u9488\u5bf9\u6027\u8f93\u5165\u548c\u4e0a\u4e0b\u6587\u589e\u5f3a\uff0c\u663e\u8457\u63d0\u5347\u4e86LLM\u5728\u56de\u5f52\u6d4b\u8bd5\u4e2d\u7684\u8868\u73b0\u3002"}}
{"id": "2508.02301", "categories": ["cs.LO", "68Q60, 68Q45", "F.3.1; D.3.1"], "pdf": "https://arxiv.org/pdf/2508.02301", "abs": "https://arxiv.org/abs/2508.02301", "authors": ["Marek Chalupa", "Thomas A. Henzinger", "Ana Oliveira da Costa"], "title": "Monitoring Hyperproperties over Observed and Constructed Traces", "comment": null, "summary": "We study the problem of monitoring at runtime whether a system fulfills a\nspecification defined by a hyperproperty, such as linearizability or variants\nof non-interference. For this purpose, we introduce specifications with both\npassive and active quantification over traces. While passive trace quantifiers\nrange over the traces that are observed, active trace quantifiers are\ninstantiated with \\emph{generator functions}, which are part of the\nspecification. Generator functions enable the monitor to construct traces that\nmay never be observed at runtime, such as the linearizations of a concurrent\ntrace. As specification language, we extend hypernode logic with trace\nquantifiers over generator functions and interpret these hypernode formulas\nover possibly infinite domains. We present a corresponding monitoring\nalgorithm, which we implemented and evaluated on a range of hyperproperties for\nconcurrency and security applications. Our method enables, for the first time,\nthe monitoring of asynchronous hyperproperties that contain alternating trace\nquantifiers.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u5982\u4f55\u901a\u8fc7\u8fd0\u884c\u65f6\u76d1\u63a7\u9a8c\u8bc1\u7cfb\u7edf\u662f\u5426\u6ee1\u8db3\u7531\u8d85\u5c5e\u6027\u5b9a\u4e49\u7684\u89c4\u8303\uff0c\u5f15\u5165\u4e86\u5305\u542b\u88ab\u52a8\u548c\u4e3b\u52a8\u8ddf\u8e2a\u91cf\u8bcd\u7684\u89c4\u8303\uff0c\u5e76\u63d0\u51fa\u4e86\u76f8\u5e94\u7684\u76d1\u63a7\u7b97\u6cd5\u3002", "motivation": "\u89e3\u51b3\u8fd0\u884c\u65f6\u76d1\u63a7\u7cfb\u7edf\u662f\u5426\u6ee1\u8db3\u8d85\u5c5e\u6027\uff08\u5982\u7ebf\u6027\u4e00\u81f4\u6027\u6216\u975e\u5e72\u6d89\u6027\u53d8\u4f53\uff09\u7684\u95ee\u9898\uff0c\u6269\u5c55\u4e86\u76d1\u63a7\u80fd\u529b\u3002", "method": "\u6269\u5c55\u4e86\u8d85\u8282\u70b9\u903b\u8f91\uff0c\u5f15\u5165\u8ddf\u8e2a\u91cf\u8bcd\u548c\u751f\u6210\u5668\u51fd\u6570\uff0c\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86\u76d1\u63a7\u7b97\u6cd5\u3002", "result": "\u5b9e\u73b0\u4e86\u5bf9\u5f02\u6b65\u8d85\u5c5e\u6027\u7684\u76d1\u63a7\uff0c\u9996\u6b21\u652f\u6301\u4ea4\u66ff\u8ddf\u8e2a\u91cf\u8bcd\u7684\u76d1\u63a7\u3002", "conclusion": "\u63d0\u51fa\u7684\u65b9\u6cd5\u6269\u5c55\u4e86\u8d85\u5c5e\u6027\u76d1\u63a7\u7684\u8303\u56f4\uff0c\u9002\u7528\u4e8e\u5e76\u53d1\u548c\u5b89\u5168\u5e94\u7528\u3002"}}
{"id": "2508.01974", "categories": ["cs.SE", "cs.PL"], "pdf": "https://arxiv.org/pdf/2508.01974", "abs": "https://arxiv.org/abs/2508.01974", "authors": ["Jiahao Zhang", "Xiao Cheng", "Yuxiang Lei"], "title": "Flow Sensitivity without Control Flow Graph: An Efficient Andersen-Style Flow-Sensitive Pointer Analysis", "comment": null, "summary": "Flow-sensitive pointer analysis constitutes an essential component of precise\nprogram analysis for accurately modeling pointer behaviors by incorporating\ncontrol flows. Flow-sensitive pointer analysis is extensively used in alias\nanalysis, taint analysis, program understanding, compiler optimization, etc.\nExisting flow-sensitive pointer analysis approaches, which are conducted based\non control flow graphs, have significantly advanced the precision of pointer\nanalysis via sophisticated techniques to leverage control flow information.\nHowever, they inevitably suffer from computational inefficiencies when\nresolving points-to information due to the inherent complex structures of\ncontrol flow graphs. We present CG-FSPTA, a Flow-Sensitive Constraint Graph\n(FSConsG) based flow-sensitive pointer analysis to overcome the inefficiency of\ncontrol-flow-graph-based analysis. CG-FSPTA uses a flow-sensitive variant to\nleverage the structural advantages of set-constraint graphs (which are commonly\nused in flow-insensitive pointer analysis) while keeping the flow sensitivity\nof variable definitions and uses, allowing the incorporation of sophisticated\ngraph optimization and dynamic solving techniques. In this way, CG-FSPTA\nachieves significant efficiency improvements while keeping the precision of\nflow-sensitive analysis. Experimental evaluations on benchmark programs\ndemonstrate that CG-FSPTA, significantly reduces both memory usage and\nexecution time while maintaining precision. In particular, by solving in the\nFSConsG, CG-FSPTA achieves an average memory reduction of 33.05\\% and\naccelerates flow-sensitive pointer analysis by 7.27x compared to the\nstate-of-art method. These experimental results underscore the efficacy of\nCG-FSPTA as a scalable solution to analyze large-scale software systems,\nestablishing a robust foundation for future advancements in efficient program\nanalysis frameworks.", "AI": {"tldr": "CG-FSPTA\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u6d41\u654f\u611f\u7ea6\u675f\u56fe\u7684\u6307\u9488\u5206\u6790\u65b9\u6cd5\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6548\u7387\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u7cbe\u5ea6\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u63a7\u5236\u6d41\u56fe\u7684\u6d41\u654f\u611f\u6307\u9488\u5206\u6790\u65b9\u6cd5\u5b58\u5728\u8ba1\u7b97\u6548\u7387\u4f4e\u7684\u95ee\u9898\u3002", "method": "CG-FSPTA\u91c7\u7528\u6d41\u654f\u611f\u7684\u7ea6\u675f\u56fe\uff08FSConsG\uff09\uff0c\u7ed3\u5408\u56fe\u4f18\u5316\u548c\u52a8\u6001\u6c42\u89e3\u6280\u672f\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0cCG-FSPTA\u5e73\u5747\u51cf\u5c1133.05%\u5185\u5b58\u4f7f\u7528\uff0c\u52a0\u901f7.27\u500d\u3002", "conclusion": "CG-FSPTA\u4e3a\u5927\u89c4\u6a21\u8f6f\u4ef6\u7cfb\u7edf\u5206\u6790\u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u7cbe\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.01337", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01337", "abs": "https://arxiv.org/abs/2508.01337", "authors": ["Wei Liu", "Linqiang Guo", "Yi Wen Heng", "Chenglin Li", "Tse-Hsun", "Chen", "Ahmed E. Hassan"], "title": "Screencast-Based Analysis of User-Perceived GUI Responsiveness", "comment": null, "summary": "GUI responsiveness is critical for a positive user experience in mobile\napplications. Even brief delays in visual feedback can frustrate users and lead\nto negative reviews. However, detecting and quantifying such user-perceived\ndelays remains challenging, especially in industrial testing pipelines that\nevaluate thousands of apps daily across diverse devices and OS versions.\nExisting techniques based on static analysis or system metrics, while useful,\nmay not accurately capture user-perceived issues or scale effectively.\n  In this experience paper, we present \\tool, a lightweight and black-box\ntechnique that measures GUI responsiveness directly from mobile screencasts --\nvideo recordings captured during automated GUI testing. \\tool detects user\ninteractions and visual delays, helping developers identify GUI performance\nissues that affect the user experience. It uses computer vision to detect user\ninteractions and analyzes frame-level visual changes to compute two key\nmetrics: response time (from user action to first visual feedback) and finish\ntime (until visual feedback stabilizes). We evaluate \\tool on a manually\nannotated benchmark of 2,458 interactions from 64 popular Android apps. \\tool\nachieves 0.96 precision and 0.93 recall in detecting interactions, and measures\nresponse and finish times within 50\\,ms and 100\\,ms error, respectively, for\nover 89\\% of interactions. The tool has been deployed in an industrial testing\npipeline and analyzes thousands of screencasts daily, uncovering responsiveness\nissues missed by traditional tools and improving performance debugging\nefficiency.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3a\\tool\u7684\u8f7b\u91cf\u7ea7\u9ed1\u76d2\u6280\u672f\uff0c\u901a\u8fc7\u5206\u6790\u79fb\u52a8\u8bbe\u5907\u5c4f\u5e55\u5f55\u50cf\u76f4\u63a5\u6d4b\u91cfGUI\u54cd\u5e94\u6027\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u6355\u6349\u7528\u6237\u611f\u77e5\u5ef6\u8fdf\u7684\u95ee\u9898\u3002", "motivation": "GUI\u54cd\u5e94\u6027\u5bf9\u79fb\u52a8\u5e94\u7528\u7528\u6237\u4f53\u9a8c\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u73b0\u6709\u65b9\u6cd5\u96be\u4ee5\u51c6\u786e\u68c0\u6d4b\u548c\u91cf\u5316\u7528\u6237\u611f\u77e5\u7684\u5ef6\u8fdf\uff0c\u5c24\u5176\u662f\u5728\u5927\u89c4\u6a21\u5de5\u4e1a\u6d4b\u8bd5\u73af\u5883\u4e2d\u3002", "method": "\\tool\u5229\u7528\u8ba1\u7b97\u673a\u89c6\u89c9\u6280\u672f\u68c0\u6d4b\u7528\u6237\u4ea4\u4e92\uff0c\u5e76\u901a\u8fc7\u5206\u6790\u5e27\u7ea7\u89c6\u89c9\u53d8\u5316\u8ba1\u7b97\u4e24\u4e2a\u5173\u952e\u6307\u6807\uff1a\u54cd\u5e94\u65f6\u95f4\uff08\u4ece\u7528\u6237\u64cd\u4f5c\u5230\u9996\u6b21\u89c6\u89c9\u53cd\u9988\uff09\u548c\u5b8c\u6210\u65f6\u95f4\uff08\u76f4\u5230\u89c6\u89c9\u53cd\u9988\u7a33\u5b9a\uff09\u3002", "result": "\u57282,458\u6b21\u4ea4\u4e92\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\\tool\u7684\u4ea4\u4e92\u68c0\u6d4b\u7cbe\u5ea6\u4e3a0.96\uff0c\u53ec\u56de\u7387\u4e3a0.93\uff1b\u54cd\u5e94\u65f6\u95f4\u548c\u5b8c\u6210\u65f6\u95f4\u7684\u8bef\u5dee\u5206\u522b\u63a7\u5236\u572850ms\u548c100ms\u4ee5\u5185\uff0c\u8986\u76d689%\u4ee5\u4e0a\u7684\u4ea4\u4e92\u3002", "conclusion": "\\tool\u5df2\u90e8\u7f72\u4e8e\u5de5\u4e1a\u6d4b\u8bd5\u6d41\u7a0b\u4e2d\uff0c\u80fd\u591f\u9ad8\u6548\u53d1\u73b0\u4f20\u7edf\u5de5\u5177\u9057\u6f0f\u7684\u54cd\u5e94\u6027\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u6027\u80fd\u8c03\u8bd5\u6548\u7387\u3002"}}
{"id": "2302.06506", "categories": ["cs.FL", "cs.DS", "cs.LO"], "pdf": "https://arxiv.org/pdf/2302.06506", "abs": "https://arxiv.org/abs/2302.06506", "authors": ["Nicola Cotumaccio"], "title": "A Myhill-Nerode Theorem for Generalized Automata, with Applications to Pattern Matching and Compression", "comment": null, "summary": "The model of generalized automata, introduced by Eilenberg in 1974, allows\nrepresenting a regular language more concisely than conventional automata by\nallowing edges to be labeled not only with characters, but also strings.\nGiammaresi and Montalbano introduced a notion of determinism for generalized\nautomata [STACS 1995]. While generalized deterministic automata retain many\nproperties of conventional deterministic automata, the uniqueness of a minimal\ngeneralized deterministic automaton is lost.\n  In the first part of the paper, we show that the lack of uniqueness can be\nexplained by introducing a set $ \\mathcal{W(A)} $ associated with a generalized\nautomaton $ \\mathcal{A} $. By fixing $ \\mathcal{W(A)} $, we are able to derive\nfor the first time a full Myhill-Nerode theorem for generalized automata, which\ncontains the textbook Myhill-Nerode theorem for conventional automata as a\ndegenerate case.\n  In the second part of the paper, we show that the set $ \\mathcal{W(A)} $\nleads to applications for pattern matching and data compression. Wheeler\nautomata [TCS 2017, SODA 2020] are a popular class of automata that can be\ncompactly stored using $ e \\log \\sigma (1 + o(1)) + O(e) $ bits ($ e $ being\nthe number of edges, $ \\sigma $ being the size of the alphabet) in such a way\nthat pattern matching queries can be solved in $ \\tilde{O}(m) $ time ($ m $\nbeing the length of the pattern). In the paper, we show how to extend these\nresults to generalized automata. More precisely, a Wheeler generalized automata\ncan be stored using $ \\mathfrak{e} \\log \\sigma (1 + o(1)) + O(e + rn) $ bits so\nthat pattern matching queries can be solved in $ \\tilde{O}(r m) $ time, where $\n\\mathfrak{e} $ is the total length of all edge labels, $ r $ is the maximum\nlength of an edge label and $ n $ is the number of states.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5e7f\u4e49\u81ea\u52a8\u673a\u7684\u786e\u5b9a\u6027\u53ca\u5176\u6700\u5c0f\u5316\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2a\u96c6\u5408$\\mathcal{W(A)}$\u6765\u89e3\u91ca\u6700\u5c0f\u5316\u552f\u4e00\u6027\u7684\u7f3a\u5931\uff0c\u5e76\u6269\u5c55\u4e86Myhill-Nerode\u5b9a\u7406\u3002\u6b64\u5916\uff0c\u8bba\u6587\u8fd8\u5c55\u793a\u4e86$\\mathcal{W(A)}$\u5728\u6a21\u5f0f\u5339\u914d\u548c\u6570\u636e\u538b\u7f29\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662f\u5bf9Wheeler\u81ea\u52a8\u673a\u7684\u6269\u5c55\u3002", "motivation": "\u5e7f\u4e49\u81ea\u52a8\u673a\u6bd4\u4f20\u7edf\u81ea\u52a8\u673a\u66f4\u7b80\u6d01\uff0c\u4f46\u5176\u786e\u5b9a\u6027\u6700\u5c0f\u5316\u7684\u552f\u4e00\u6027\u7f3a\u5931\u95ee\u9898\u5c1a\u672a\u88ab\u5b8c\u5168\u7406\u89e3\u3002\u8bba\u6587\u65e8\u5728\u89e3\u91ca\u8fd9\u4e00\u73b0\u8c61\uff0c\u5e76\u63a2\u7d22\u5e7f\u4e49\u81ea\u52a8\u673a\u5728\u6a21\u5f0f\u5339\u914d\u548c\u6570\u636e\u538b\u7f29\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3002", "method": "\u901a\u8fc7\u5f15\u5165\u96c6\u5408$\\mathcal{W(A)}$\uff0c\u8bba\u6587\u91cd\u65b0\u5b9a\u4e49\u4e86\u5e7f\u4e49\u81ea\u52a8\u673a\u7684\u786e\u5b9a\u6027\uff0c\u5e76\u6269\u5c55\u4e86Myhill-Nerode\u5b9a\u7406\u3002\u6b64\u5916\uff0c\u8bba\u6587\u8fd8\u7814\u7a76\u4e86\u5982\u4f55\u5c06Wheeler\u81ea\u52a8\u673a\u7684\u538b\u7f29\u548c\u67e5\u8be2\u6280\u672f\u6269\u5c55\u5230\u5e7f\u4e49\u81ea\u52a8\u673a\u3002", "result": "\u8bba\u6587\u8bc1\u660e\u4e86\u901a\u8fc7\u56fa\u5b9a$\\mathcal{W(A)}$\uff0c\u53ef\u4ee5\u63a8\u5bfc\u51fa\u5e7f\u4e49\u81ea\u52a8\u673a\u7684\u5b8c\u6574Myhill-Nerode\u5b9a\u7406\u3002\u540c\u65f6\uff0c\u5c55\u793a\u4e86\u5e7f\u4e49Wheeler\u81ea\u52a8\u673a\u5728\u5b58\u50a8\u548c\u6a21\u5f0f\u5339\u914d\u4e2d\u7684\u9ad8\u6548\u6027\u3002", "conclusion": "\u8bba\u6587\u4e0d\u4ec5\u89e3\u51b3\u4e86\u5e7f\u4e49\u81ea\u52a8\u673a\u6700\u5c0f\u5316\u552f\u4e00\u6027\u7684\u7406\u8bba\u95ee\u9898\uff0c\u8fd8\u5c55\u793a\u4e86\u5176\u5728\u6a21\u5f0f\u5339\u914d\u548c\u6570\u636e\u538b\u7f29\u4e2d\u7684\u5b9e\u9645\u5e94\u7528\u4ef7\u503c\u3002"}}
{"id": "2508.01357", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01357", "abs": "https://arxiv.org/abs/2508.01357", "authors": ["Yunhao Liang", "Ruixuan Ying", "Takuya Taniguchi", "Guwen Lyu", "Zhe Cui"], "title": "HyClone: Bridging LLM Understanding and Dynamic Execution for Semantic Code Clone Detection", "comment": null, "summary": "Code clone detection is a critical task in software engineering, aimed at\nidentifying duplicated or similar code fragments within or across software\nsystems. Traditional methods often fail to capture functional equivalence,\nparticularly for semantic clones (Type 4), where code fragments implement\nidentical functionality despite differing syntactic structures. Recent advances\nin large language models (LLMs) have shown promise in understanding code\nsemantics. However, directly applying LLMs to code clone detection yields\nsuboptimal results due to their sensitivity to syntactic differences. To\naddress these challenges, we propose a novel two-stage framework that combines\nLLM-based screening with execution-based validation for detecting semantic\nclones in Python programs. In the first stage, an LLM evaluates code pairs to\nfilter out obvious non-clones based on semantic analysis. For pairs not\nidentified as clones, the second stage employs an execution-based validation\napproach, utilizing LLM-generated test inputs to assess functional equivalence\nthrough cross-execution validation. Our experimental evaluation demonstrates\nsignificant improvements in precision, recall, and F1-score compared to direct\nLLM-based detection, highlighting the framework's effectiveness in identifying\nsemantic clones. Future work includes exploring cross-language clone detection\nand optimizing the framework for large-scale applications.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7ed3\u5408LLM\u7b5b\u9009\u548c\u57fa\u4e8e\u6267\u884c\u7684\u9a8c\u8bc1\u7684\u4e24\u9636\u6bb5\u6846\u67b6\uff0c\u7528\u4e8e\u68c0\u6d4bPython\u7a0b\u5e8f\u4e2d\u7684\u8bed\u4e49\u514b\u9686\uff0c\u663e\u8457\u63d0\u5347\u4e86\u68c0\u6d4b\u6548\u679c\u3002", "motivation": "\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u6355\u6349\u529f\u80fd\u7b49\u6548\u7684\u8bed\u4e49\u514b\u9686\uff08Type 4\uff09\uff0c\u800c\u76f4\u63a5\u5e94\u7528LLM\u6548\u679c\u4e0d\u4f73\u3002", "method": "\u4e24\u9636\u6bb5\u6846\u67b6\uff1aLLM\u7b5b\u9009\u8bed\u4e49\u76f8\u4f3c\u4ee3\u7801\u5bf9\uff0c\u6267\u884c\u9a8c\u8bc1\u529f\u80fd\u7b49\u6548\u6027\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0c\u6846\u67b6\u5728\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u548cF1\u5206\u6570\u4e0a\u663e\u8457\u4f18\u4e8e\u76f4\u63a5LLM\u68c0\u6d4b\u3002", "conclusion": "\u6846\u67b6\u6709\u6548\u8bc6\u522b\u8bed\u4e49\u514b\u9686\uff0c\u672a\u6765\u53ef\u6269\u5c55\u81f3\u8de8\u8bed\u8a00\u68c0\u6d4b\u548c\u4f18\u5316\u5927\u89c4\u6a21\u5e94\u7528\u3002"}}
{"id": "2508.01358", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01358", "abs": "https://arxiv.org/abs/2508.01358", "authors": ["Elijah Kayode Adejumo", "Brittany Johnson"], "title": "An Empirical Validation of Open Source Repository Stability Metrics", "comment": null, "summary": "Over the past few decades, open source software has been continuously\nintegrated into software supply chains worldwide, drastically increasing\nreliance and dependence. Because of the role this software plays, it is\nimportant to understand ways to measure and promote its stability and potential\nfor sustainability. Recent work proposed the use of control theory to\nunderstand repository stability and evaluate repositories' ability to return to\nequilibrium after a disturbance such as the introduction of a new feature\nrequest, a spike in bug reports, or even the influx or departure of\ncontributors. This approach leverages commit frequency patterns, issue\nresolution rate, pull request merge rate, and community activity engagement to\nprovide a Composite Stability Index (CSI). While this framework has theoretical\nfoundations, there is no empirical validation of the CSI in practice. In this\npaper, we present the first empirical validation of the proposed CSI by\nexperimenting with 100 highly ranked GitHub repositories. Our results suggest\nthat (1) sampling weekly commit frequency pattern instead of daily is a more\nfeasible measure of commit frequency stability across repositories and (2)\nimproved statistical inferences (swapping mean with median), particularly with\nascertaining resolution and review times in issues and pull request, improves\nthe overall issue and pull request stability index. Drawing on our empirical\ndataset, we also derive data-driven half-width parameters that better align\nstability scores with real project behavior. These findings both confirm the\nviability of a control-theoretic lens on open-source health and provide\nconcrete, evidence-backed applications for real-world project monitoring tools.", "AI": {"tldr": "\u8bba\u6587\u901a\u8fc7\u5b9e\u8bc1\u9a8c\u8bc1\u4e86\u57fa\u4e8e\u63a7\u5236\u7406\u8bba\u7684Composite Stability Index (CSI)\u5728\u5f00\u6e90\u9879\u76ee\u7a33\u5b9a\u6027\u8bc4\u4f30\u4e2d\u7684\u53ef\u884c\u6027\uff0c\u5e76\u63d0\u51fa\u6539\u8fdb\u65b9\u6cd5\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u5728\u5168\u7403\u8f6f\u4ef6\u4f9b\u5e94\u94fe\u4e2d\u7684\u91cd\u8981\u6027\u65e5\u76ca\u589e\u52a0\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u5176\u7a33\u5b9a\u6027\u548c\u53ef\u6301\u7eed\u6027\u7684\u5b9e\u8bc1\u8bc4\u4f30\u65b9\u6cd5\u3002", "method": "\u4f7f\u7528100\u4e2a\u9ad8\u6392\u540dGitHub\u4ed3\u5e93\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u6539\u8fdbCSI\u7684\u6d4b\u91cf\u65b9\u6cd5\uff08\u5982\u5468\u63d0\u4ea4\u9891\u7387\u3001\u4e2d\u4f4d\u6570\u7edf\u8ba1\u63a8\u65ad\uff09\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5468\u63d0\u4ea4\u9891\u7387\u66f4\u53ef\u884c\uff0c\u4e2d\u4f4d\u6570\u7edf\u8ba1\u63a8\u65ad\u80fd\u63d0\u5347\u95ee\u9898\u4e0e\u62c9\u53d6\u8bf7\u6c42\u7684\u7a33\u5b9a\u6027\u6307\u6570\u3002", "conclusion": "\u5b9e\u8bc1\u7ed3\u679c\u652f\u6301\u63a7\u5236\u7406\u8bba\u5728\u5f00\u6e90\u5065\u5eb7\u8bc4\u4f30\u4e2d\u7684\u5e94\u7528\uff0c\u5e76\u4e3a\u5b9e\u9645\u9879\u76ee\u76d1\u63a7\u5de5\u5177\u63d0\u4f9b\u4e86\u6539\u8fdb\u5efa\u8bae\u3002"}}
{"id": "2508.01430", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01430", "abs": "https://arxiv.org/abs/2508.01430", "authors": ["Kaveh Shahedi", "Matthew Khouzam", "Heng Li", "Maxime Lamothe", "Foutse Khomh"], "title": "From Technical Excellence to Practical Adoption: Lessons Learned Building an ML-Enhanced Trace Analysis Tool", "comment": null, "summary": "System tracing has become essential for understanding complex software\nbehavior in modern systems, yet sophisticated trace analysis tools face\nsignificant adoption gaps in industrial settings. Through a year-long\ncollaboration with Ericsson Montr\\'eal, developing TMLL (Trace-Server Machine\nLearning Library, now in the Eclipse Foundation), we investigated barriers to\ntrace analysis adoption. Contrary to assumptions about complexity or automation\nneeds, practitioners struggled with translating expert knowledge into\nactionable insights, integrating analysis into their workflows, and trusting\nautomated results they could not validate. We identified what we called the\nExcellence Paradox: technical excellence can actively impede adoption when\nconflicting with usability, transparency, and practitioner trust. TMLL\naddresses this through adoption-focused design that embeds expert knowledge in\ninterfaces, provides transparent explanations, and enables incremental\nadoption. Validation through Ericsson's experts' feedback, Eclipse Foundation's\nintegration, and a survey of 40 industry and academic professionals revealed\nconsistent patterns: survey results showed that 77.5% prioritize quality and\ntrust in results over technical sophistication, while 67.5% prefer\nsemi-automated analysis with user control, findings supported by qualitative\nfeedback from industrial collaboration and external peer review. Results\nvalidate three core principles: cognitive compatibility, embedded expertise,\nand transparency-based trust. This challenges conventional capability-focused\ntool development, demonstrating that sustainable adoption requires\nreorientation toward adoption-focused design with actionable implications for\nautomated software engineering tools.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u590d\u6742\u8f6f\u4ef6\u884c\u4e3a\u5206\u6790\u5de5\u5177\u5728\u5de5\u4e1a\u5e94\u7528\u4e2d\u7684\u91c7\u7528\u969c\u788d\uff0c\u63d0\u51fa\u4e86\u201c\u5353\u8d8a\u6096\u8bba\u201d\uff0c\u5e76\u901a\u8fc7TMLL\u7684\u8bbe\u8ba1\u89e3\u51b3\u4e86\u8fd9\u4e9b\u95ee\u9898\u3002", "motivation": "\u7814\u7a76\u5de5\u4e1a\u73af\u5883\u4e2d\u9ad8\u7ea7\u8ddf\u8e2a\u5206\u6790\u5de5\u5177\u91c7\u7528\u7387\u4f4e\u7684\u6839\u672c\u539f\u56e0\uff0c\u7279\u522b\u662f\u4e13\u5bb6\u77e5\u8bc6\u4e0e\u5b9e\u9645\u5e94\u7528\u4e4b\u95f4\u7684\u9e3f\u6c9f\u3002", "method": "\u901a\u8fc7\u4e0eEricsson\u5408\u4f5c\u5f00\u53d1TMLL\uff0c\u7ed3\u5408\u7528\u6237\u53cd\u9988\u548c\u8c03\u67e5\uff0840\u540d\u884c\u4e1a\u4e0e\u5b66\u672f\u4e13\u5bb6\uff09\uff0c\u5206\u6790\u91c7\u7528\u969c\u788d\u5e76\u63d0\u51fa\u89e3\u51b3\u65b9\u6848\u3002", "result": "\u53d1\u73b0\u7528\u6237\u66f4\u6ce8\u91cd\u7ed3\u679c\u8d28\u91cf\u4e0e\u4fe1\u4efb\uff0877.5%\uff09\u800c\u975e\u6280\u672f\u590d\u6742\u6027\uff0c67.5%\u504f\u597d\u534a\u81ea\u52a8\u5316\u5206\u6790\u3002TMLL\u901a\u8fc7\u5d4c\u5165\u4e13\u5bb6\u77e5\u8bc6\u3001\u900f\u660e\u89e3\u91ca\u548c\u6e10\u8fdb\u5f0f\u91c7\u7528\u89e3\u51b3\u4e86\u95ee\u9898\u3002", "conclusion": "\u53ef\u6301\u7eed\u91c7\u7528\u9700\u8f6c\u5411\u4ee5\u91c7\u7528\u4e3a\u4e2d\u5fc3\u7684\u8bbe\u8ba1\uff0c\u5f3a\u8c03\u8ba4\u77e5\u517c\u5bb9\u6027\u3001\u5d4c\u5165\u4e13\u5bb6\u77e5\u8bc6\u548c\u900f\u660e\u4fe1\u4efb\uff0c\u6311\u6218\u4f20\u7edf\u4ee5\u80fd\u529b\u4e3a\u5bfc\u5411\u7684\u5de5\u5177\u5f00\u53d1\u6a21\u5f0f\u3002"}}
{"id": "2508.01443", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.01443", "abs": "https://arxiv.org/abs/2508.01443", "authors": ["Jingzhi Gong", "Rafail Giavrimis", "Paul Brookes", "Vardan Voskanyan", "Fan Wu", "Mari Ashiga", "Matthew Truscott", "Mike Basios", "Leslie Kanthan", "Jie Xu", "Zheng Wang"], "title": "Tuning LLM-based Code Optimization via Meta-Prompting: An Industrial Perspective", "comment": "Submitted to ASE'25 Industry Showcase", "summary": "There is a growing interest in leveraging large language models (LLMs) for\nautomated code optimization. However, industrial platforms deploying multiple\nLLMs face a critical challenge: prompts optimized for one LLM often fail with\nothers, requiring expensive model-specific prompt engineering. This cross-model\nprompt engineering bottleneck severely limits the practical deployment of\nmulti-LLM optimization systems in production environments. To address this, we\nintroduce Meta-Prompted Code Optimization (MPCO), a framework that\nautomatically generates high-quality, task-specific prompts across diverse LLMs\nwhile maintaining industrial efficiency requirements. MPCO leverages\nmeta-prompting to dynamically synthesize context-aware optimization prompts by\nintegrating project metadata, task requirements, and LLM-specific contexts, and\nit seamlessly deploys on the ARTEMIS industrial platform for automated\nvalidation and scaling.\n  Our comprehensive evaluation on five real-world codebases with 366 hours of\nruntime benchmarking demonstrates MPCO's effectiveness: it achieves overall\nperformance improvements up to 19.06% with the best statistical rank across all\nsystems compared to baseline methods. Analysis shows that 96% of the\ntop-performing optimizations stem from meaningful edits. Through systematic\nablation studies and meta-prompter sensitivity analysis, we identify that\ncomprehensive context integration is essential for effective meta-prompting,\nand that all three major LLMs can serve effectively as meta-prompters,\nproviding actionable insights for industrial practitioners.", "AI": {"tldr": "MPCO\u6846\u67b6\u901a\u8fc7\u5143\u63d0\u793a\u6280\u672f\u81ea\u52a8\u751f\u6210\u8de8LLM\u7684\u9ad8\u8d28\u91cf\u4ee3\u7801\u4f18\u5316\u63d0\u793a\uff0c\u89e3\u51b3\u4e86\u5de5\u4e1a\u5e73\u53f0\u4e2d\u591aLLM\u90e8\u7f72\u7684\u63d0\u793a\u5de5\u7a0b\u74f6\u9888\uff0c\u6027\u80fd\u63d0\u5347\u8fbe19.06%\u3002", "motivation": "\u5de5\u4e1a\u5e73\u53f0\u4e2d\u591aLLM\u90e8\u7f72\u65f6\uff0c\u9488\u5bf9\u5355\u4e00LLM\u4f18\u5316\u7684\u63d0\u793a\u5728\u5176\u4ed6LLM\u4e0a\u6548\u679c\u4e0d\u4f73\uff0c\u5bfc\u81f4\u9ad8\u6602\u7684\u6a21\u578b\u7279\u5b9a\u63d0\u793a\u5de5\u7a0b\u6210\u672c\uff0c\u9650\u5236\u4e86\u591aLLM\u4f18\u5316\u7cfb\u7edf\u7684\u5b9e\u9645\u5e94\u7528\u3002", "method": "MPCO\u5229\u7528\u5143\u63d0\u793a\u6280\u672f\u52a8\u6001\u5408\u6210\u4e0a\u4e0b\u6587\u611f\u77e5\u7684\u4f18\u5316\u63d0\u793a\uff0c\u6574\u5408\u9879\u76ee\u5143\u6570\u636e\u3001\u4efb\u52a1\u9700\u6c42\u548cLLM\u7279\u5b9a\u4e0a\u4e0b\u6587\uff0c\u5e76\u5728ARTEMIS\u5e73\u53f0\u4e0a\u5b9e\u73b0\u81ea\u52a8\u5316\u9a8c\u8bc1\u548c\u6269\u5c55\u3002", "result": "\u5728\u4e94\u4e2a\u771f\u5b9e\u4ee3\u7801\u5e93\u7684366\u5c0f\u65f6\u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cMPCO\u6027\u80fd\u63d0\u5347\u6700\u9ad8\u8fbe19.06%\uff0c96%\u7684\u4f18\u5316\u6765\u81ea\u6709\u6548\u7f16\u8f91\u3002", "conclusion": "MPCO\u8bc1\u660e\u4e86\u5143\u63d0\u793a\u6280\u672f\u7684\u6709\u6548\u6027\uff0c\u5168\u9762\u4e0a\u4e0b\u6587\u6574\u5408\u662f\u5173\u952e\uff0c\u4e14\u4e09\u5927LLM\u5747\u53ef\u4f5c\u4e3a\u5143\u63d0\u793a\u5668\uff0c\u4e3a\u5de5\u4e1a\u5b9e\u8df5\u63d0\u4f9b\u4e86\u5b9e\u7528\u89c1\u89e3\u3002"}}
{"id": "2508.01472", "categories": ["cs.SE", "68N99", "D.2.5"], "pdf": "https://arxiv.org/pdf/2508.01472", "abs": "https://arxiv.org/abs/2508.01472", "authors": ["Lukas Kirschner", "Ezekiel Soremekun"], "title": "Directed Grammar-Based Test Generation", "comment": "21 pages, 10 figures, 13 tables, submitted to IEEE Transactions on\n  Software Engineering, for replication package, see\n  https://tinyurl.com/FDLoop-V3", "summary": "To effectively test complex software, it is important to generate\ngoal-specific inputs, i.e., inputs that achieve a specific testing goal.\nHowever, most state-of-the-art test generators are not designed to target\nspecific goals. Notably, grammar-based test generators, which (randomly)\nproduce syntactically valid inputs via an input specification (i.e., grammar)\nhave a low probability of achieving an arbitrary testing goal. This work\naddresses this challenge by proposing an automated test generation approach\n(called FdLoop) which iteratively learns relevant input properties from\nexisting inputs to drive the generation of goal-specific inputs. Given a\ntesting goal, FdLoop iteratively selects, evolves and learn the input\ndistribution of goal-specific test inputs via test feedback and a probabilistic\ngrammar. We concretize FdLoop for four testing goals, namely unique code\ncoverage, input-to-code complexity, program failures (exceptions) and long\nexecution time. We evaluate FdLoop using three (3) well-known input formats\n(JSON, CSS and JavaScript) and 20 open-source software. In most (86%) settings,\nFdLoop outperforms all five tested baselines namely the baseline grammar-based\ntest generators (random, probabilistic and inverse-probabilistic methods),\nEvoGFuzz and DynaMosa. FdLoop is (up to) twice (2X) as effective as the best\nbaseline (EvoGFuzz) in inducing erroneous behaviors. In addition, we show that\nthe main components of FdLoop (i.e., input mutator, grammar mutator and test\nfeedbacks) contribute positively to its effectiveness. Finally, our evaluation\ndemonstrates that FdLoop effectively achieves single testing goals (revealing\nerroneous behaviors, generating complex inputs, or inducing long execution\ntime) and scales to multiple testing goals across varying parameter settings.", "AI": {"tldr": "FdLoop\u662f\u4e00\u79cd\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u65b9\u6cd5\uff0c\u901a\u8fc7\u8fed\u4ee3\u5b66\u4e60\u8f93\u5165\u5c5e\u6027\u6765\u751f\u6210\u76ee\u6807\u7279\u5b9a\u7684\u6d4b\u8bd5\u8f93\u5165\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u57fa\u7ebf\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u8bed\u6cd5\u6d4b\u8bd5\u751f\u6210\u5668\u96be\u4ee5\u9488\u5bf9\u7279\u5b9a\u6d4b\u8bd5\u76ee\u6807\u751f\u6210\u6709\u6548\u8f93\u5165\uff0cFdLoop\u65e8\u5728\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "FdLoop\u901a\u8fc7\u8fed\u4ee3\u9009\u62e9\u3001\u6f14\u5316\u548c\u5b66\u4e60\u8f93\u5165\u5206\u5e03\uff0c\u7ed3\u5408\u6d4b\u8bd5\u53cd\u9988\u548c\u6982\u7387\u8bed\u6cd5\uff0c\u751f\u6210\u76ee\u6807\u7279\u5b9a\u7684\u6d4b\u8bd5\u8f93\u5165\u3002", "result": "\u572886%\u7684\u60c5\u51b5\u4e0b\uff0cFdLoop\u4f18\u4e8e\u4e94\u79cd\u57fa\u7ebf\u65b9\u6cd5\uff0c\u4e14\u5728\u8bf1\u5bfc\u9519\u8bef\u884c\u4e3a\u65b9\u9762\u6548\u679c\u662f\u6700\u597d\u57fa\u7ebf\u7684\u4e24\u500d\u3002", "conclusion": "FdLoop\u80fd\u6709\u6548\u5b9e\u73b0\u5355\u4e00\u548c\u591a\u4e2a\u6d4b\u8bd5\u76ee\u6807\uff0c\u4e14\u5176\u6838\u5fc3\u7ec4\u4ef6\u5bf9\u5176\u6548\u679c\u6709\u79ef\u6781\u8d21\u732e\u3002"}}
{"id": "2508.01489", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01489", "abs": "https://arxiv.org/abs/2508.01489", "authors": ["SK. Golam Saroar", "Waseefa Ahmed", "Elmira Onagh", "Maleknaz Nayebi"], "title": "GitHub Marketplace: Driving Automation and Fostering Innovation in Software Development", "comment": "SANER 2025 journal first paper", "summary": "GitHub, a central hub for collaborative software development, has\nrevolutionized the open-source software (OSS) ecosystem through its GitHub\nMarketplace, a platform launched in 2017 to host automation tools aimed at\nenhancing the efficiency and scalability of software projects. As the adoption\nof automation in OSS production grows, understanding the trends,\ncharacteristics, and underlying dynamics of this marketplace has become vital.\nFurthermore, despite the rich repository of academic research on software\nautomation, a disconnect persists between academia and industry practices. This\nstudy seeks to bridge this gap by providing a systematic analysis of the GitHub\nMarketplace, comparing trends observed in industry tools with advancements\nreported in academic literature, and identifying areas where academia can\ncontribute to practical innovation.", "AI": {"tldr": "\u672c\u6587\u5206\u6790\u4e86GitHub Marketplace\u5728\u5f00\u6e90\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u4f5c\u7528\uff0c\u63a2\u8ba8\u4e86\u81ea\u52a8\u5316\u5de5\u5177\u7684\u8d8b\u52bf\u4e0e\u5b66\u672f\u7814\u7a76\u7684\u8131\u8282\uff0c\u5e76\u63d0\u51fa\u5f25\u5408\u5dee\u8ddd\u7684\u65b9\u6cd5\u3002", "motivation": "GitHub Marketplace\u4f5c\u4e3a\u81ea\u52a8\u5316\u5de5\u5177\u5e73\u53f0\uff0c\u5bf9\u5f00\u6e90\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u4ea7\u751f\u4e86\u6df1\u8fdc\u5f71\u54cd\uff0c\u4f46\u5b66\u672f\u754c\u4e0e\u884c\u4e1a\u5b9e\u8df5\u4e4b\u95f4\u5b58\u5728\u8131\u8282\uff0c\u9700\u8981\u7cfb\u7edf\u5206\u6790\u4ee5\u5f25\u5408\u5dee\u8ddd\u3002", "method": "\u901a\u8fc7\u7cfb\u7edf\u5206\u6790GitHub Marketplace\u7684\u8d8b\u52bf\u548c\u7279\u70b9\uff0c\u5e76\u4e0e\u5b66\u672f\u6587\u732e\u4e2d\u7684\u8fdb\u5c55\u8fdb\u884c\u6bd4\u8f83\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u884c\u4e1a\u5de5\u5177\u4e0e\u5b66\u672f\u7814\u7a76\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u5e76\u8bc6\u522b\u4e86\u5b66\u672f\u754c\u53ef\u4ee5\u8d21\u732e\u7684\u5b9e\u9645\u521b\u65b0\u9886\u57df\u3002", "conclusion": "\u7814\u7a76\u4e3a\u5f25\u5408\u5b66\u672f\u754c\u4e0e\u884c\u4e1a\u5b9e\u8df5\u4e4b\u95f4\u7684\u5dee\u8ddd\u63d0\u4f9b\u4e86\u65b9\u5411\uff0c\u5f3a\u8c03\u4e86\u5b66\u672f\u7814\u7a76\u5bf9\u5b9e\u9645\u521b\u65b0\u7684\u6f5c\u5728\u8d21\u732e\u3002"}}
{"id": "2508.01492", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01492", "abs": "https://arxiv.org/abs/2508.01492", "authors": ["Angel C. Chavez-Moreno", "Cristina L. Abad"], "title": "OpenLambdaVerse: A Dataset and Analysis of Open-Source Serverless Applications", "comment": "8 pages, 7 figures, 13th IEEE International Conference on Cloud\n  Engineering (IC2E 2025, accepted, to appear)", "summary": "Function-as-a-Service (FaaS) is at the core of serverless computing, enabling\ndevelopers to easily deploy applications without managing computing resources.\nWith an Infrastructure-as-Code (IaC) approach, frameworks like the Serverless\nFramework use YAML configurations to define and deploy APIs, tasks, workflows,\nand event-driven applications on cloud providers, promoting zero-friction\ndevelopment. As with any rapidly evolving ecosystem, there is a need for\nupdated insights into how these tools are used in real-world projects. Building\non the methodology established by the Wonderless dataset for serverless\ncomputing (and applying multiple new filtering steps), OpenLambdaVerse\naddresses this gap by creating a dataset of current GitHub repositories that\nuse the Serverless Framework in applications that contain one or more AWS\nLambda functions. We then analyze and characterize this dataset to get an\nunderstanding of the state-of-the-art in serverless architectures based on this\nstack. Through this analysis we gain important insights on the size and\ncomplexity of current applications, which languages and runtimes they employ,\nhow are the functions triggered, the maturity of the projects, and their\nsecurity practices (or lack of). OpenLambdaVerse thus offers a valuable,\nup-to-date resource for both practitioners and researchers that seek to better\nunderstand evolving serverless workloads.", "AI": {"tldr": "OpenLambdaVerse\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8eServerless Framework\u548cAWS Lambda\u7684GitHub\u4ed3\u5e93\u6570\u636e\u96c6\uff0c\u5206\u6790\u4e86\u5f53\u524d\u65e0\u670d\u52a1\u5668\u67b6\u6784\u7684\u73b0\u72b6\uff0c\u5305\u62ec\u5e94\u7528\u89c4\u6a21\u3001\u8bed\u8a00\u3001\u89e6\u53d1\u65b9\u5f0f\u3001\u9879\u76ee\u6210\u719f\u5ea6\u548c\u5b89\u5168\u6027\u3002", "motivation": "\u968f\u7740\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u9700\u8981\u4e86\u89e3\u5b9e\u9645\u9879\u76ee\u4e2d\u8fd9\u4e9b\u5de5\u5177\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u586b\u8865\u73b0\u6709\u7814\u7a76\u7684\u7a7a\u767d\u3002", "method": "\u57fa\u4e8eWonderless\u6570\u636e\u96c6\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u65b0\u7684\u8fc7\u6ee4\u6b65\u9aa4\u521b\u5efa\u4e86\u4e00\u4e2a\u4f7f\u7528Serverless Framework\u548cAWS Lambda\u7684GitHub\u4ed3\u5e93\u6570\u636e\u96c6\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u6790\u3002", "result": "\u6570\u636e\u96c6\u63ed\u793a\u4e86\u5f53\u524d\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7684\u89c4\u6a21\u3001\u590d\u6742\u6027\u3001\u8bed\u8a00\u9009\u62e9\u3001\u89e6\u53d1\u65b9\u5f0f\u3001\u9879\u76ee\u6210\u719f\u5ea6\u548c\u5b89\u5168\u6027\u5b9e\u8df5\u3002", "conclusion": "OpenLambdaVerse\u4e3a\u5b9e\u8df5\u8005\u548c\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u8d44\u6e90\uff0c\u5e2e\u52a9\u4ed6\u4eec\u66f4\u597d\u5730\u7406\u89e3\u65e0\u670d\u52a1\u5668\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6f14\u53d8\u3002"}}
{"id": "2508.01523", "categories": ["cs.SE", "cs.HC"], "pdf": "https://arxiv.org/pdf/2508.01523", "abs": "https://arxiv.org/abs/2508.01523", "authors": ["Ningzhi Tang", "Emory Smith", "Yu Huang", "Collin McMillan", "Toby Jia-Jun Li"], "title": "Exploring Direct Instruction and Summary-Mediated Prompting in LLM-Assisted Code Modification", "comment": null, "summary": "This paper presents a study of using large language models (LLMs) in\nmodifying existing code. While LLMs for generating code have been widely\nstudied, their role in code modification remains less understood. Although\n\"prompting\" serves as the primary interface for developers to communicate\nintents to LLMs, constructing effective prompts for code modification\nintroduces challenges different from generation. Prior work suggests that\nnatural language summaries may help scaffold this process, yet such approaches\nhave been validated primarily in narrow domains like SQL rewriting. This study\ninvestigates two prompting strategies for LLM-assisted code modification:\nDirect Instruction Prompting, where developers describe changes explicitly in\nfree-form language, and Summary-Mediated Prompting, where changes are made by\nediting the generated summaries of the code. We conducted an exploratory study\nwith 15 developers who completed modification tasks using both techniques\nacross multiple scenarios. Our findings suggest that developers followed an\niterative workflow: understanding the code, localizing the edit, and validating\noutputs through execution or semantic reasoning. Each prompting strategy\npresented trade-offs: direct instruction prompting was more flexible and easier\nto specify, while summary-mediated prompting supported comprehension, prompt\nscaffolding, and control. Developers' choice of strategy was shaped by task\ngoals and context, including urgency, maintainability, learning intent, and\ncode familiarity. These findings highlight the need for more usable prompt\ninteractions, including adjustable summary granularity, reliable summary-code\ntraceability, and consistency in generated summaries.", "AI": {"tldr": "\u7814\u7a76\u63a2\u8ba8\u4e86\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u4fee\u6539\u4ee3\u7801\u7684\u4e24\u79cd\u63d0\u793a\u7b56\u7565\uff1a\u76f4\u63a5\u6307\u4ee4\u63d0\u793a\u548c\u6458\u8981\u4e2d\u4ecb\u63d0\u793a\uff0c\u53d1\u73b0\u5f00\u53d1\u8005\u9009\u62e9\u7b56\u7565\u53d7\u4efb\u52a1\u76ee\u6807\u548c\u4e0a\u4e0b\u6587\u5f71\u54cd\u3002", "motivation": "\u5c3d\u7ba1LLM\u751f\u6210\u4ee3\u7801\u5df2\u88ab\u5e7f\u6cdb\u7814\u7a76\uff0c\u4f46\u5176\u5728\u4ee3\u7801\u4fee\u6539\u4e2d\u7684\u4f5c\u7528\u5c1a\u4e0d\u660e\u786e\uff0c\u4e14\u6784\u5efa\u6709\u6548\u7684\u4fee\u6539\u63d0\u793a\u5b58\u5728\u6311\u6218\u3002", "method": "\u901a\u8fc715\u540d\u5f00\u53d1\u8005\u5728\u591a\u79cd\u573a\u666f\u4e0b\u4f7f\u7528\u4e24\u79cd\u63d0\u793a\u7b56\u7565\uff08\u76f4\u63a5\u6307\u4ee4\u63d0\u793a\u548c\u6458\u8981\u4e2d\u4ecb\u63d0\u793a\uff09\u5b8c\u6210\u4fee\u6539\u4efb\u52a1\u7684\u63a2\u7d22\u6027\u7814\u7a76\u3002", "result": "\u76f4\u63a5\u6307\u4ee4\u63d0\u793a\u66f4\u7075\u6d3b\u6613\u6307\u5b9a\uff0c\u6458\u8981\u4e2d\u4ecb\u63d0\u793a\u6709\u52a9\u4e8e\u7406\u89e3\u548c\u63a7\u5236\uff1b\u5f00\u53d1\u8005\u9009\u62e9\u7b56\u7565\u53d7\u4efb\u52a1\u76ee\u6807\u548c\u4e0a\u4e0b\u6587\u5f71\u54cd\u3002", "conclusion": "\u7814\u7a76\u5f3a\u8c03\u9700\u8981\u66f4\u6613\u7528\u7684\u63d0\u793a\u4ea4\u4e92\uff0c\u5305\u62ec\u53ef\u8c03\u6458\u8981\u7c92\u5ea6\u3001\u53ef\u9760\u7684\u6458\u8981-\u4ee3\u7801\u53ef\u8ffd\u6eaf\u6027\u548c\u751f\u6210\u6458\u8981\u7684\u4e00\u81f4\u6027\u3002"}}
{"id": "2508.01550", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.01550", "abs": "https://arxiv.org/abs/2508.01550", "authors": ["Zhilong Chen", "Chengzong Zhao", "Boyuan Chen", "Dayi Lin", "Yihao Chen", "Arthur Leung", "Gopi Krishnan Rajbahadur", "Gustavo A. Oliva", "Ahmed E. Hassan"], "title": "RepoForge: Training a SOTA Fast-thinking SWE Agent with an End-to-End Data Curation Pipeline Synergizing SFT and RL at Scale", "comment": null, "summary": "Training software engineering (SWE) LLMs is bottlenecked by expensive\ninfrastructure, inefficient evaluation pipelines, scarce training data, and\ncostly quality control. We present RepoForge, an autonomous, end-to-end\npipeline that generates, evaluates, and trains SWE agents at scale. Our key\ncontributions include: (1) RepoForge-8B-Agent, achieving 17.4\\% on\nSWE-Bench-Verified~\\citep{swebench_verified2024}, establishing new\nstate-of-the-art for $\\leq$8B non-thinking LLMs; (2) 7,304 executable\nenvironments auto-generated from real GitHub commits with zero manual\nintervention; (3) 14$\\times$ storage reduction (1.4GB $\\rightarrow$ 102MB per\ninstance) via intelligent dependency management and image pruning; (4) $>$70\\%\nfaster evaluation using a Ray-powered~\\citep{ray2018} distributed RepoForge\nharness; (5) 19,000$\\times$ cheaper labeling through our automated\nSPICE~\\citep{spice2024} difficulty assessment technique. By unifying\nstorage-efficient sandboxing, Ray-powered evaluation harness, automated data\ngeneration, SPICE-based labeling, and bubble-free RL scaffold, we demonstrate\nthat even $\\leq$8B models can reach new state-of-the-art performance on\ndemanding benchmarks like SWE-Bench-Verified. Our approach addresses critical\nbottlenecks in SWE agent training: high storage costs of container-based\nevaluation, inefficient sequential reward pipelines, limited availability of\nhigh-quality training data, expensive manual labeling, and multi-turn RL\npipeline bottlenecks.", "AI": {"tldr": "RepoForge\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u7aef\u5230\u7aef\u6d41\u6c34\u7ebf\uff0c\u7528\u4e8e\u751f\u6210\u3001\u8bc4\u4f30\u548c\u8bad\u7ec3\u8f6f\u4ef6\u5de5\u7a0b\uff08SWE\uff09\u4ee3\u7406\uff0c\u89e3\u51b3\u4e86\u57fa\u7840\u8bbe\u65bd\u6602\u8d35\u3001\u8bc4\u4f30\u6548\u7387\u4f4e\u3001\u6570\u636e\u7a00\u7f3a\u548c\u8d28\u91cf\u63a7\u5236\u6210\u672c\u9ad8\u7b49\u95ee\u9898\u3002", "motivation": "\u89e3\u51b3SWE LLMs\u8bad\u7ec3\u4e2d\u7684\u74f6\u9888\u95ee\u9898\uff0c\u5305\u62ec\u6602\u8d35\u7684\u57fa\u7840\u8bbe\u65bd\u3001\u4f4e\u6548\u7684\u8bc4\u4f30\u6d41\u7a0b\u3001\u7a00\u7f3a\u7684\u8bad\u7ec3\u6570\u636e\u548c\u9ad8\u8d28\u91cf\u63a7\u5236\u7684\u6210\u672c\u3002", "method": "RepoForge\u901a\u8fc7\u7edf\u4e00\u7684\u5b58\u50a8\u9ad8\u6548\u6c99\u76d2\u3001Ray\u9a71\u52a8\u7684\u8bc4\u4f30\u5de5\u5177\u3001\u81ea\u52a8\u5316\u6570\u636e\u751f\u6210\u3001\u57fa\u4e8eSPICE\u7684\u6807\u6ce8\u548c\u65e0\u6c14\u6ce1RL\u6846\u67b6\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684SWE\u4ee3\u7406\u8bad\u7ec3\u3002", "result": "RepoForge-8B-Agent\u5728SWE-Bench-Verified\u4e0a\u8fbe\u523017.4%\u7684\u51c6\u786e\u7387\uff0c\u5b58\u50a8\u51cf\u5c1114\u500d\uff0c\u8bc4\u4f30\u901f\u5ea6\u63d0\u534770%\uff0c\u6807\u6ce8\u6210\u672c\u964d\u4f4e19,000\u500d\u3002", "conclusion": "RepoForge\u5c55\u793a\u4e86\u5373\u4f7f\u662f\u22648B\u7684\u6a21\u578b\u4e5f\u80fd\u5728SWE-Bench-Verified\u7b49\u8981\u6c42\u9ad8\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fbe\u5230\u6700\u65b0\u6280\u672f\u6c34\u5e73\uff0c\u89e3\u51b3\u4e86SWE\u4ee3\u7406\u8bad\u7ec3\u4e2d\u7684\u5173\u952e\u74f6\u9888\u3002"}}
{"id": "2508.02023", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02023", "abs": "https://arxiv.org/abs/2508.02023", "authors": ["Huashan Lei", "Guanping Xiao", "Yepang Liu", "Zheng Zheng"], "title": "PCREQ: Automated Inference of Compatible Requirements for Python Third-party Library Upgrades", "comment": "52 pages, 33 figures", "summary": "Python third-party libraries (TPLs) are essential in modern software\ndevelopment, but upgrades often cause compatibility issues, leading to system\nfailures. These issues fall into two categories: version compatibility issues\n(VCIs) and code compatibility issues (CCIs). Existing tools mainly detect\ndependency conflicts but overlook code-level incompatibilities, with no\nsolution fully automating the inference of compatible versions for both VCIs\nand CCIs. To fill this gap, we propose PCREQ, the first approach to\nautomatically infer compatible requirements by combining version and code\ncompatibility analysis. PCREQ integrates six modules: knowledge acquisition,\nversion compatibility assessment, invoked APIs and modules extraction, code\ncompatibility assessment, version change, and missing TPL completion. PCREQ\ncollects candidate versions, checks for conflicts, identifies API usage,\nevaluates code compatibility, and iteratively adjusts versions to generate a\ncompatible requirements.txt with a detailed repair report. To evaluate PCREQ,\nwe construct REQBench, a large-scale benchmark with 2,095 upgrade test cases\n(including 406 unsolvable by pip). Results show PCREQ achieves a 94.03%\ninference success rate, outperforming PyEGo (37.02%), ReadPyE (37.16%), and\nLLM-based approaches (GPT-4o, DeepSeek V3/R1) by 18-20%. PCREQ processes each\ncase from REQBench in 60.79s on average, demonstrating practical efficiency.\nPCREQ significantly reduces manual effort in troubleshooting upgrades,\nadvancing Python dependency maintenance automation.", "AI": {"tldr": "PCREQ\u662f\u4e00\u79cd\u81ea\u52a8\u5316\u5de5\u5177\uff0c\u7528\u4e8e\u89e3\u51b3Python\u7b2c\u4e09\u65b9\u5e93\u5347\u7ea7\u4e2d\u7684\u7248\u672c\u548c\u4ee3\u7801\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u901a\u8fc7\u6574\u5408\u591a\u4e2a\u6a21\u5757\u5b9e\u73b0\u9ad8\u6548\u517c\u5bb9\u6027\u63a8\u65ad\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u5de5\u5177\u3002", "motivation": "Python\u7b2c\u4e09\u65b9\u5e93\u5347\u7ea7\u5e38\u5f15\u53d1\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u73b0\u6709\u5de5\u5177\u672a\u80fd\u5168\u9762\u89e3\u51b3\u7248\u672c\u548c\u4ee3\u7801\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u4e9f\u9700\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\u3002", "method": "PCREQ\u7ed3\u5408\u7248\u672c\u548c\u4ee3\u7801\u517c\u5bb9\u6027\u5206\u6790\uff0c\u901a\u8fc7\u516d\u4e2a\u6a21\u5757\uff08\u5982\u77e5\u8bc6\u83b7\u53d6\u3001\u517c\u5bb9\u6027\u8bc4\u4f30\u7b49\uff09\u81ea\u52a8\u63a8\u65ad\u517c\u5bb9\u7248\u672c\u5e76\u751f\u6210\u4fee\u590d\u62a5\u544a\u3002", "result": "\u5728REQBench\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cPCREQ\u6210\u529f\u7387\u8fbe94.03%\uff0c\u8fdc\u8d85\u5176\u4ed6\u5de5\u5177\uff0c\u5e73\u5747\u5904\u7406\u65f6\u95f4\u4e3a60.79\u79d2\u3002", "conclusion": "PCREQ\u663e\u8457\u51cf\u5c11\u624b\u52a8\u8c03\u8bd5\u5de5\u4f5c\uff0c\u63a8\u52a8\u4e86Python\u4f9d\u8d56\u7ef4\u62a4\u7684\u81ea\u52a8\u5316\u8fdb\u7a0b\u3002"}}
{"id": "2508.02144", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02144", "abs": "https://arxiv.org/abs/2508.02144", "authors": ["Yusaku Kato", "Norihiro Yoshida", "Erina Makihara", "Katsuro Inoue"], "title": "BiFuzz: A Two-Stage Fuzzing Tool for Open-World Video Games", "comment": "4 pages, 5 figures", "summary": "Open-world video games present a broader search space than other games,\nposing challenges for test automation. Fuzzing, which generates new inputs by\nmutating an initial input, is commonly used to uncover failures. In this study,\nwe proposed BiFuzz, a two-stage fuzzer designed for automated testing of\nopen-world video games, and investigated its effectiveness. The results\nrevealed that BiFuzz mutated the overall strategy of gameplay and test cases,\nincluding actual movement paths, step by step. Consequently, BiFuzz can detect\n`stucking' failures. The tool and its video are at\nhttps://github.com/Yusaku-Kato/BiFuzz.", "AI": {"tldr": "BiFuzz\u662f\u4e00\u79cd\u9488\u5bf9\u5f00\u653e\u4e16\u754c\u89c6\u9891\u6e38\u620f\u7684\u4e24\u9636\u6bb5\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\uff0c\u901a\u8fc7\u9010\u6b65\u53d8\u5f02\u6e38\u620f\u7b56\u7565\u548c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u80fd\u591f\u68c0\u6d4b\u201c\u5361\u4f4f\u201d\u6545\u969c\u3002", "motivation": "\u5f00\u653e\u4e16\u754c\u89c6\u9891\u6e38\u620f\u7684\u641c\u7d22\u7a7a\u95f4\u8f83\u5927\uff0c\u4f20\u7edf\u6d4b\u8bd5\u81ea\u52a8\u5316\u65b9\u6cd5\u9762\u4e34\u6311\u6218\u3002", "method": "\u63d0\u51faBiFuzz\uff0c\u4e00\u79cd\u4e24\u9636\u6bb5\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\uff0c\u901a\u8fc7\u9010\u6b65\u53d8\u5f02\u6e38\u620f\u7b56\u7565\u548c\u6d4b\u8bd5\u7528\u4f8b\u751f\u6210\u65b0\u8f93\u5165\u3002", "result": "BiFuzz\u80fd\u591f\u68c0\u6d4b\u201c\u5361\u4f4f\u201d\u6545\u969c\uff0c\u5e76\u5c55\u793a\u4e86\u5176\u6709\u6548\u6027\u3002", "conclusion": "BiFuzz\u4e3a\u5f00\u653e\u4e16\u754c\u89c6\u9891\u6e38\u620f\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u6548\u5de5\u5177\u3002"}}
{"id": "2508.02167", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02167", "abs": "https://arxiv.org/abs/2508.02167", "authors": ["Yuxuan Wang", "Cristian Tirelli", "Giovanni Ansaloni", "Laura Pozzi", "David Atienza"], "title": "An MLIR-based Compilation Framework for Control Flow Management on CGRAs", "comment": null, "summary": "Coarse Grained Reconfigurable Arrays (CGRAs) present both high flexibility\nand efficiency, making them well-suited for the acceleration of intensive\nworkloads. Nevertheless, a key barrier towards their widespread adoption is\nposed by CGRA compilation, which must cope with a multi-dimensional space\nspanning both the spatial and the temporal domains. Indeed, state-of-the-art\ncompilers are limited in scope as they mostly deal with the data flow of\napplications, while having little or no support for control flow. Hence, they\nmostly target the mapping of single loops and/or delegate the management of\ncontrol flow divergences to ad-hoc hardware units.\n  Conversely, in this paper we show that control flow can be effectively\nmanaged and optimized at the compilation level, allowing for a broad set of\napplications to be targeted while being hardware-agnostic and achieving high\nperformance. We embody our methodology in a modular compilation framework\nconsisting of transformation and optimization passes, enabling support for\napplications with arbitrary control flows running on abstract CGRA meshes. We\nalso introduce a novel mapping methodology that acts as a compilation back-end,\naddressing the limitations in available CGRA hardware resources and\nguaranteeing a feasible solution in the compilation process. Our framework\nachieves up to 2.1X speedups over state-of-the-art approaches, purely through\ncompilation optimizations.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u7c97\u7c92\u5ea6\u53ef\u91cd\u6784\u9635\u5217\uff08CGRA\uff09\u7684\u7f16\u8bd1\u6846\u67b6\uff0c\u901a\u8fc7\u4f18\u5316\u63a7\u5236\u6d41\u7ba1\u7406\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6027\u80fd\u3002", "motivation": "\u73b0\u6709CGRA\u7f16\u8bd1\u5668\u4e3b\u8981\u5173\u6ce8\u6570\u636e\u6d41\uff0c\u7f3a\u4e4f\u5bf9\u63a7\u5236\u6d41\u7684\u652f\u6301\uff0c\u9650\u5236\u4e86\u5176\u9002\u7528\u8303\u56f4\u548c\u6027\u80fd\u3002\u672c\u6587\u65e8\u5728\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u63d0\u51fa\u6a21\u5757\u5316\u7f16\u8bd1\u6846\u67b6\uff0c\u5305\u542b\u8f6c\u6362\u548c\u4f18\u5316\u6b65\u9aa4\uff0c\u652f\u6301\u4efb\u610f\u63a7\u5236\u6d41\u7684\u5e94\u7528\uff0c\u5e76\u5f15\u5165\u65b0\u7684\u6620\u5c04\u65b9\u6cd5\u4ee5\u89e3\u51b3\u786c\u4ef6\u8d44\u6e90\u9650\u5236\u3002", "result": "\u6846\u67b6\u6027\u80fd\u63d0\u5347\u9ad8\u8fbe2.1\u500d\uff0c\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "conclusion": "\u901a\u8fc7\u7f16\u8bd1\u4f18\u5316\uff0c\u63a7\u5236\u6d41\u7ba1\u7406\u53ef\u4ee5\u9ad8\u6548\u5b9e\u73b0\uff0c\u4e14\u786c\u4ef6\u65e0\u5173\uff0c\u9002\u7528\u4e8e\u5e7f\u6cdb\u7684\u5e94\u7528\u573a\u666f\u3002"}}
{"id": "2508.02176", "categories": ["cs.SE", "cs.HC", "D.2.3; D.2.6; D.2.5; H.5.2"], "pdf": "https://arxiv.org/pdf/2508.02176", "abs": "https://arxiv.org/abs/2508.02176", "authors": ["Andrew Tropin"], "title": "Highly Interactive Testing for Uninterrupted Development Flow", "comment": "12 pages, ICFP-2025", "summary": "Highly interactive development environments (HIDEs) enable uninterrupted\ndevelopment flow through continuous program evolution and rapid hypothesis\nchecking. However, traditional testing approaches -- typically executed\nseparately via CLI -- isolate tests from HIDE tooling (interactive debuggers,\nvalue and stack inspectors, etc.) and introduce disruptive delays due to coarse\nexecution granularity and lack of runtime context. This disconnect breaks\ndevelopment flow by exceeding critical attention thresholds. In this paper we\npresent a library that provides runtime representation for tests, allowing\ntight integration with HIDEs, and enabling immediate access to HIDE tooling in\nthe context of test failure. We then describe development workflows enhanced\nwith testing and demonstrate how they achieve subsecond test reexecution times\ncrucial for maintaining developer focus.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u5e93\uff0c\u7528\u4e8e\u5728\u9ad8\u5ea6\u4ea4\u4e92\u7684\u5f00\u53d1\u73af\u5883\uff08HIDE\uff09\u4e2d\u65e0\u7f1d\u96c6\u6210\u6d4b\u8bd5\uff0c\u51cf\u5c11\u5f00\u53d1\u6d41\u7a0b\u4e2d\u7684\u4e2d\u65ad\u3002", "motivation": "\u4f20\u7edf\u6d4b\u8bd5\u65b9\u6cd5\u5728HIDE\u4e2d\u9694\u79bb\u4e86\u6d4b\u8bd5\u5de5\u5177\uff0c\u5bfc\u81f4\u5f00\u53d1\u6d41\u7a0b\u4e2d\u65ad\uff0c\u5f71\u54cd\u5f00\u53d1\u8005\u7684\u6ce8\u610f\u529b\u3002", "method": "\u63d0\u51fa\u4e00\u4e2a\u63d0\u4f9b\u6d4b\u8bd5\u8fd0\u884c\u65f6\u8868\u793a\u7684\u5e93\uff0c\u5b9e\u73b0\u4e0eHIDE\u7684\u7d27\u5bc6\u96c6\u6210\uff0c\u5e76\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u63d0\u4f9b\u5373\u65f6\u8bbf\u95eeHIDE\u5de5\u5177\u7684\u80fd\u529b\u3002", "result": "\u5c55\u793a\u4e86\u589e\u5f3a\u7684\u6d4b\u8bd5\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5b9e\u73b0\u4e86\u4e9a\u79d2\u7ea7\u7684\u6d4b\u8bd5\u91cd\u65b0\u6267\u884c\u65f6\u95f4\uff0c\u6709\u52a9\u4e8e\u4fdd\u6301\u5f00\u53d1\u8005\u4e13\u6ce8\u3002", "conclusion": "\u8be5\u5e93\u663e\u8457\u6539\u5584\u4e86HIDE\u4e2d\u7684\u6d4b\u8bd5\u4f53\u9a8c\uff0c\u51cf\u5c11\u4e86\u5f00\u53d1\u6d41\u7a0b\u4e2d\u7684\u4e2d\u65ad\u3002"}}
{"id": "2508.02233", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02233", "abs": "https://arxiv.org/abs/2508.02233", "authors": ["Vincenzo De Martino", "Joel Casta\u00f1o", "Fabio Palomba", "Xavier Franch", "Silverio Mart\u00ednez-Fern\u00e1ndez"], "title": "A Methodological Framework for LLM-Based Mining of Software Repositories", "comment": null, "summary": "Large Language Models (LLMs) are increasingly used in software engineering\nresearch, offering new opportunities for automating repository mining tasks.\nHowever, despite their growing popularity, the methodological integration of\nLLMs into Mining Software Repositories (MSR) remains poorly understood.\nExisting studies tend to focus on specific capabilities or performance\nbenchmarks, providing limited insight into how researchers utilize LLMs across\nthe full research pipeline. To address this gap, we conduct a mixed-method\nstudy that combines a rapid review and questionnaire survey in the field of\nLLM4MSR. We investigate (1) the approaches and (2) the threats that affect the\nempirical rigor of researchers involved in this field. Our findings reveal 15\nmethodological approaches, nine main threats, and 25 mitigation strategies.\nBuilding on these findings, we present PRIMES 2.0, a refined empirical\nframework organized into six stages, comprising 23 methodological substeps,\neach mapped to specific threats and corresponding mitigation strategies,\nproviding prescriptive and adaptive support throughout the lifecycle of\nLLM-based MSR studies. Our work contributes to establishing a more transparent\nand reproducible foundation for LLM-based MSR research.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63a2\u8ba8\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u8f6f\u4ef6\u5de5\u7a0b\u7814\u7a76\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662f\u6316\u6398\u8f6f\u4ef6\u4ed3\u5e93\uff08MSR\uff09\u4efb\u52a1\u4e2d\u7684\u65b9\u6cd5\u8bba\u6574\u5408\u95ee\u9898\u3002\u901a\u8fc7\u6df7\u5408\u65b9\u6cd5\u7814\u7a76\uff0c\u63d0\u51fa\u4e86PRIMES 2.0\u6846\u67b6\uff0c\u4ee5\u652f\u6301\u900f\u660e\u548c\u53ef\u91cd\u590d\u7684LLM-based MSR\u7814\u7a76\u3002", "motivation": "\u5c3d\u7ba1LLMs\u5728MSR\u7814\u7a76\u4e2d\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\uff0c\u4f46\u5176\u65b9\u6cd5\u8bba\u6574\u5408\u4ecd\u7f3a\u4e4f\u6df1\u5165\u7406\u89e3\u3002\u73b0\u6709\u7814\u7a76\u591a\u5173\u6ce8\u7279\u5b9a\u80fd\u529b\u6216\u6027\u80fd\u57fa\u51c6\uff0c\u672a\u80fd\u5168\u9762\u5c55\u793aLLMs\u5728\u6574\u4e2a\u7814\u7a76\u6d41\u7a0b\u4e2d\u7684\u5e94\u7528\u3002", "method": "\u91c7\u7528\u6df7\u5408\u65b9\u6cd5\u7814\u7a76\uff0c\u7ed3\u5408\u5feb\u901f\u6587\u732e\u7efc\u8ff0\u548c\u95ee\u5377\u8c03\u67e5\uff0c\u5206\u6790LLM4MSR\u9886\u57df\u4e2d\u7684\u65b9\u6cd5\u8bba\u548c\u5a01\u80c1\u3002", "result": "\u8bc6\u522b\u4e8615\u79cd\u65b9\u6cd5\u8bba\u30019\u79cd\u4e3b\u8981\u5a01\u80c1\u53ca25\u79cd\u7f13\u89e3\u7b56\u7565\uff0c\u5e76\u63d0\u51fa\u4e86PRIMES 2.0\u6846\u67b6\uff0c\u5305\u542b6\u4e2a\u9636\u6bb5\u548c23\u4e2a\u5b50\u6b65\u9aa4\u3002", "conclusion": "PRIMES 2.0\u6846\u67b6\u4e3aLLM-based MSR\u7814\u7a76\u63d0\u4f9b\u4e86\u900f\u660e\u548c\u53ef\u91cd\u590d\u7684\u65b9\u6cd5\u8bba\u652f\u6301\uff0c\u586b\u8865\u4e86\u73b0\u6709\u7814\u7a76\u7684\u7a7a\u767d\u3002"}}
{"id": "2508.02279", "categories": ["cs.SE", "cs.AI", "cs.CL"], "pdf": "https://arxiv.org/pdf/2508.02279", "abs": "https://arxiv.org/abs/2508.02279", "authors": ["Mikio Nakano", "Hironori Takeuchi", "Sadahiro Yoshikawa", "Yoichi Matsuyama", "Kazunori Komatani"], "title": "Dialogue Systems Engineering: A Survey and Future Directions", "comment": "18 pages, 2 figures", "summary": "This paper proposes to refer to the field of software engineering related to\nthe life cycle of dialogue systems as Dialogue Systems Engineering, and surveys\nthis field while also discussing its future directions. With the advancement of\nlarge language models, the core technologies underlying dialogue systems have\nsignificantly progressed. As a result, dialogue system technology is now\nexpected to be applied to solving various societal issues and in business\ncontexts. To achieve this, it is important to build, operate, and continuously\nimprove dialogue systems correctly and efficiently. Accordingly, in addition to\napplying existing software engineering knowledge, it is becoming increasingly\nimportant to evolve software engineering tailored specifically to dialogue\nsystems. In this paper, we enumerate the knowledge areas of dialogue systems\nengineering based on those of software engineering, as defined in the Software\nEngineering Body of Knowledge (SWEBOK) Version 4.0, and survey each area. Based\non this survey, we identify unexplored topics in each area and discuss the\nfuture direction of dialogue systems engineering.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u5c06\u5bf9\u8bdd\u7cfb\u7edf\u751f\u547d\u5468\u671f\u7684\u8f6f\u4ef6\u5de5\u7a0b\u9886\u57df\u79f0\u4e3a\u5bf9\u8bdd\u7cfb\u7edf\u5de5\u7a0b\uff0c\u5e76\u7efc\u8ff0\u8be5\u9886\u57df\u53ca\u5176\u672a\u6765\u65b9\u5411\u3002\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8fdb\u6b65\uff0c\u5bf9\u8bdd\u7cfb\u7edf\u6280\u672f\u6709\u671b\u89e3\u51b3\u793e\u4f1a\u95ee\u9898\u548c\u5546\u4e1a\u9700\u6c42\uff0c\u9700\u6b63\u786e\u9ad8\u6548\u5730\u6784\u5efa\u3001\u8fd0\u8425\u548c\u6539\u8fdb\u3002\u672c\u6587\u57fa\u4e8eSWEBOK 4.0\u5217\u4e3e\u5bf9\u8bdd\u7cfb\u7edf\u5de5\u7a0b\u7684\u77e5\u8bc6\u9886\u57df\uff0c\u5e76\u63a2\u8ba8\u672a\u63a2\u7d22\u4e3b\u9898\u548c\u672a\u6765\u65b9\u5411\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u7684\u53d1\u5c55\uff0c\u5bf9\u8bdd\u7cfb\u7edf\u6280\u672f\u8fdb\u6b65\u663e\u8457\uff0c\u9700\u9002\u5e94\u793e\u4f1a\u4e0e\u5546\u4e1a\u9700\u6c42\uff0c\u56e0\u6b64\u9700\u4e13\u95e8\u9488\u5bf9\u5bf9\u8bdd\u7cfb\u7edf\u6f14\u8fdb\u8f6f\u4ef6\u5de5\u7a0b\u65b9\u6cd5\u3002", "method": "\u57fa\u4e8eSWEBOK 4.0\u5217\u4e3e\u5bf9\u8bdd\u7cfb\u7edf\u5de5\u7a0b\u7684\u77e5\u8bc6\u9886\u57df\uff0c\u5e76\u7efc\u8ff0\u5404\u9886\u57df\u3002", "result": "\u8bc6\u522b\u4e86\u5404\u77e5\u8bc6\u9886\u57df\u4e2d\u7684\u672a\u63a2\u7d22\u4e3b\u9898\u3002", "conclusion": "\u8ba8\u8bba\u4e86\u5bf9\u8bdd\u7cfb\u7edf\u5de5\u7a0b\u7684\u672a\u6765\u53d1\u5c55\u65b9\u5411\u3002"}}
{"id": "2508.02335", "categories": ["cs.SE", "cs.DL"], "pdf": "https://arxiv.org/pdf/2508.02335", "abs": "https://arxiv.org/abs/2508.02335", "authors": ["Matteo Cancellieri", "Martin Docekal", "David Pride", "Morane Gruenpeter", "David Douard", "Petr Knoth"], "title": "Interoperable verification and dissemination of software assets in repositories using COAR Notify", "comment": "8 pages. Presented at the 20th International Conference on Open\n  Repositories, June 15-18 2025, Chicago, Illinois, USA", "summary": "The discoverability, attribution, and reusability of open research software\nare often hindered by its obscurity within academic manuscripts. To address\nthis, the SoFAIR project (2024-2025) introduces a comprehensive workflow\nleveraging machine learning tools for extracting software mentions from\nresearch papers. The project integrates repository systems, authors, and\nservices like HAL and Software Heritage to ensure proper archiving, citation,\nand accessibility of research software in alignment with FAIR principles. To\nenable interoperable communication across the various systems we present an\nintegration of the COAR Notify Protocol, which facilitates automated,\ninteroperable communication among repositories and authors to validate and\ndisseminate software mentions. This paper outlines the SoFAIR workflow and the\nimplementation of the COAR Notify Protocol, emphasising its potential to\nenhance the visibility and credibility of research software as first-class\nbibliographic records.", "AI": {"tldr": "SoFAIR\u9879\u76ee\uff082024-2025\uff09\u63d0\u51fa\u4e86\u4e00\u79cd\u5229\u7528\u673a\u5668\u5b66\u4e60\u5de5\u5177\u4ece\u7814\u7a76\u8bba\u6587\u4e2d\u63d0\u53d6\u8f6f\u4ef6\u63d0\u53ca\u7684\u5de5\u4f5c\u6d41\uff0c\u7ed3\u5408COAR Notify\u534f\u8bae\uff0c\u63d0\u5347\u7814\u7a76\u8f6f\u4ef6\u7684\u53ef\u89c1\u6027\u548c\u53ef\u4fe1\u5ea6\u3002", "motivation": "\u5f00\u653e\u7814\u7a76\u8f6f\u4ef6\u7684\u53d1\u73b0\u3001\u5f52\u5c5e\u548c\u91cd\u7528\u6027\u5e38\u56e0\u5176\u5728\u5b66\u672f\u6587\u732e\u4e2d\u7684\u9690\u853d\u6027\u800c\u53d7\u9650\u3002", "method": "\u9879\u76ee\u91c7\u7528\u673a\u5668\u5b66\u4e60\u5de5\u5177\u63d0\u53d6\u8f6f\u4ef6\u63d0\u53ca\uff0c\u5e76\u6574\u5408\u5b58\u50a8\u5e93\u7cfb\u7edf\u3001\u4f5c\u8005\u53ca\u670d\u52a1\uff08\u5982HAL\u548cSoftware Heritage\uff09\uff0c\u7ed3\u5408COAR Notify\u534f\u8bae\u5b9e\u73b0\u7cfb\u7edf\u95f4\u4e92\u64cd\u4f5c\u901a\u4fe1\u3002", "result": "\u901a\u8fc7\u81ea\u52a8\u5316\u6d41\u7a0b\u786e\u4fdd\u7814\u7a76\u8f6f\u4ef6\u7684\u6b63\u786e\u5f52\u6863\u3001\u5f15\u7528\u548c\u53ef\u8bbf\u95ee\u6027\uff0c\u7b26\u5408FAIR\u539f\u5219\u3002", "conclusion": "SoFAIR\u5de5\u4f5c\u6d41\u548cCOAR Notify\u534f\u8bae\u7684\u6574\u5408\u6709\u671b\u663e\u8457\u63d0\u5347\u7814\u7a76\u8f6f\u4ef6\u4f5c\u4e3a\u4e00\u6d41\u6587\u732e\u8bb0\u5f55\u7684\u53ef\u89c1\u6027\u548c\u53ef\u4fe1\u5ea6\u3002"}}
{"id": "2508.02338", "categories": ["cs.SE", "cs.RO"], "pdf": "https://arxiv.org/pdf/2508.02338", "abs": "https://arxiv.org/abs/2508.02338", "authors": ["Jiahui Wu", "Chengjie Lu", "Aitor Arrieta", "Shaukat Ali", "Thomas Peyrucain"], "title": "Vision Language Model-based Testing of Industrial Autonomous Mobile Robots", "comment": null, "summary": "Autonomous Mobile Robots (AMRs) are deployed in diverse environments (e.g.,\nwarehouses, retail spaces, and offices), where they work alongside humans.\nGiven that human behavior can be unpredictable and that AMRs may not have been\ntrained to handle all possible unknown and uncertain behaviors, it is important\nto test AMRs under a wide range of human interactions to ensure their safe\nbehavior. Moreover, testing in real environments with actual AMRs and humans is\noften costly, impractical, and potentially hazardous (e.g., it could result in\nhuman injury). To this end, we propose a Vision Language Model (VLM)-based\ntesting approach (RVSG) for industrial AMRs developed by PAL Robotics in Spain.\nBased on the functional and safety requirements, RVSG uses the VLM to generate\ndiverse human behaviors that violate these requirements. We evaluated RVSG with\nseveral requirements and navigation routes in a simulator using the latest AMR\nfrom PAL Robotics. Our results show that, compared with the baseline, RVSG can\neffectively generate requirement-violating scenarios. Moreover, RVSG-generated\nscenarios increase variability in robot behavior, thereby helping reveal their\nuncertain behaviors.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\uff08VLM\uff09\u7684\u6d4b\u8bd5\u65b9\u6cd5RVSG\uff0c\u7528\u4e8e\u751f\u6210\u8fdd\u53cd\u5de5\u4e1aAMR\u529f\u80fd\u548c\u5b89\u5168\u8981\u6c42\u7684\u591a\u6837\u5316\u4eba\u7c7b\u884c\u4e3a\uff0c\u4ee5\u6d4b\u8bd5AMR\u7684\u5b89\u5168\u6027\u3002", "motivation": "\u7531\u4e8e\u4eba\u7c7b\u884c\u4e3a\u4e0d\u53ef\u9884\u6d4b\u4e14\u5b9e\u9645\u6d4b\u8bd5\u6210\u672c\u9ad8\u3001\u98ce\u9669\u5927\uff0c\u9700\u8981\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5AMR\u7684\u5b89\u5168\u6027\u3002", "method": "\u5229\u7528VLM\u751f\u6210\u8fdd\u53cd\u8981\u6c42\u7684\u4eba\u7c7b\u884c\u4e3a\uff0c\u5e76\u5728\u6a21\u62df\u5668\u4e2d\u8bc4\u4f30AMR\u7684\u53cd\u5e94\u3002", "result": "RVSG\u80fd\u6709\u6548\u751f\u6210\u8fdd\u53cd\u8981\u6c42\u7684\u573a\u666f\uff0c\u5e76\u589e\u52a0\u673a\u5668\u4eba\u884c\u4e3a\u7684\u591a\u6837\u6027\uff0c\u63ed\u793a\u5176\u4e0d\u786e\u5b9a\u6027\u3002", "conclusion": "RVSG\u4e3aAMR\u7684\u5b89\u5168\u6d4b\u8bd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u4e14\u5b9e\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.02397", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02397", "abs": "https://arxiv.org/abs/2508.02397", "authors": ["Lida Zhao", "Chaofan Li", "Yueming Wu", "Lyuye Zhang", "Jiahui Wu", "Chengwei Liu", "Sen Chen", "Yutao Hu", "Zhengzi Xu", "Yi Liu", "Jingquan Ge", "Jun Sun", "Yang Liu"], "title": "JC-Finder: Detecting Java Clone-based Third-Party Library by Class-level Tree Analysis", "comment": null, "summary": "While reusing third-party libraries (TPL) facilitates software development,\nits chaotic management has brought great threats to software maintenance and\nthe unauthorized use of source code also raises ethical problems such as\nmisconduct on copyrighted code. To identify TPL reuse in projects, Software\nComposition Analysis (SCA) is employed, and two categories of SCA techniques\nare used based on how TPLs are introduced: clone-based SCA and\npackage-manager-based SCA (PM-based SCA). Although introducing TPLs by clones\nis prevalent in Java, no clone-based SCA tools are specially designed for Java.\nAlso, directly applying clone-based SCA techniques from other tools is\nproblematic. To fill this gap, we introduce JC-Finder, a novel clone-based SCA\ntool that aims to accurately and comprehensively identify instances of TPL\nreuse introduced by source code clones in Java projects. JC-Finder achieves\nboth accuracy and efficiency in identifying TPL reuse from code cloning by\ncapturing features at the class level, maintaining inter-function\nrelationships, and excluding trivial or duplicated elements. To evaluate the\nefficiency of JC-Finder, we applied it to 9,965 most popular Maven libraries as\nreference data and tested the TPL reuse of 1,000 GitHub projects. The result\nshows that JC-Finder achieved an F1-score of 0.818, outperforming the other\nfunction-level tool by 0.427. The average time taken for resolving TPL reuse is\n14.2 seconds, which is approximately 9 times faster than the other tool. We\nfurther applied JC-Finder to 7,947 GitHub projects, revealing TPL reuse by code\nclones in 789 projects (about 9.89% of all projects) and identifying a total of\n2,142 TPLs. JC-Finder successfully detects 26.20% more TPLs that are not\nexplicitly declared in package managers.", "AI": {"tldr": "JC-Finder\u662f\u4e00\u4e2a\u9488\u5bf9Java\u9879\u76ee\u7684\u514b\u9686\u68c0\u6d4b\u5de5\u5177\uff0c\u7528\u4e8e\u8bc6\u522b\u7b2c\u4e09\u65b9\u5e93\uff08TPL\uff09\u7684\u4ee3\u7801\u91cd\u7528\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u5de5\u5177\u5728Java\u4e2d\u7684\u4e0d\u8db3\uff0c\u5e76\u5728\u51c6\u786e\u6027\u548c\u6548\u7387\u4e0a\u8868\u73b0\u4f18\u5f02\u3002", "motivation": "\u7b2c\u4e09\u65b9\u5e93\uff08TPL\uff09\u7684\u6df7\u4e71\u7ba1\u7406\u548c\u672a\u7ecf\u6388\u6743\u7684\u4ee3\u7801\u4f7f\u7528\u5e26\u6765\u4e86\u7ef4\u62a4\u548c\u4f26\u7406\u95ee\u9898\uff0c\u800c\u73b0\u6709\u7684\u514b\u9686\u68c0\u6d4b\u5de5\u5177\u5728Java\u4e2d\u7f3a\u4e4f\u9488\u5bf9\u6027\u3002", "method": "JC-Finder\u901a\u8fc7\u7c7b\u7ea7\u7279\u5f81\u6355\u83b7\u3001\u7ef4\u62a4\u51fd\u6570\u95f4\u5173\u7cfb\u5e76\u6392\u9664\u5197\u4f59\u5143\u7d20\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u4e14\u51c6\u786e\u7684TPL\u91cd\u7528\u68c0\u6d4b\u3002", "result": "\u5728\u6d4b\u8bd5\u4e2d\uff0cJC-Finder\u7684F1\u5f97\u5206\u4e3a0.818\uff0c\u6bd4\u540c\u7c7b\u5de5\u5177\u9ad80.427\uff0c\u5904\u7406\u901f\u5ea6\u63d0\u53479\u500d\uff0c\u5e76\u6210\u529f\u68c0\u6d4b\u523026.20%\u672a\u58f0\u660e\u7684TPL\u3002", "conclusion": "JC-Finder\u586b\u8865\u4e86Java\u514b\u9686\u68c0\u6d4b\u5de5\u5177\u7684\u7a7a\u767d\uff0c\u4e3aTPL\u91cd\u7528\u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u5168\u9762\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.02407", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02407", "abs": "https://arxiv.org/abs/2508.02407", "authors": ["Xinyi Wang", "Qinghua Xu", "Paolo Arcaini", "Shaukat Ali", "Thomas Peyrucain"], "title": "Quantum Machine Learning-based Test Oracle for Autonomous Mobile Robots", "comment": null, "summary": "Robots are increasingly becoming part of our daily lives, interacting with\nboth the environment and humans to perform their tasks. The software of such\nrobots often undergoes upgrades, for example, to add new functionalities, fix\nbugs, or delete obsolete functionalities. As a result, regression testing of\nrobot software becomes necessary. However, determining the expected correct\nbehavior of robots (i.e., a test oracle) is challenging due to the potentially\nunknown environments in which the robots must operate. To address this\nchallenge, machine learning (ML)-based test oracles present a viable solution.\nThis paper reports on the development of a test oracle to support regression\ntesting of autonomous mobile robots built by PAL Robotics (Spain), using\nquantum machine learning (QML), which enables faster training and the\nconstruction of more precise test oracles. Specifically, we propose a hybrid\nframework, QuReBot, that combines both quantum reservoir computing (QRC) and a\nsimple neural network, inspired by residual connection, to predict the expected\nbehavior of a robot. Results show that QRC alone fails to converge in our case,\nyielding high prediction error. In contrast, QuReBot converges and achieves 15%\nreduction of prediction error compared to the classical neural network\nbaseline. Finally, we further examine QuReBot under different configurations\nand offer practical guidance on optimal settings to support future robot\nsoftware testing.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u91cf\u5b50\u673a\u5668\u5b66\u4e60\u7684\u6d4b\u8bd5\u9884\u8a00\u6846\u67b6QuReBot\uff0c\u7528\u4e8e\u81ea\u4e3b\u79fb\u52a8\u673a\u5668\u4eba\u7684\u56de\u5f52\u6d4b\u8bd5\uff0c\u76f8\u6bd4\u4f20\u7edf\u795e\u7ecf\u7f51\u7edc\u964d\u4f4e\u4e8615%\u7684\u9884\u6d4b\u8bef\u5dee\u3002", "motivation": "\u673a\u5668\u4eba\u8f6f\u4ef6\u5347\u7ea7\u540e\u9700\u8981\u56de\u5f52\u6d4b\u8bd5\uff0c\u4f46\u7531\u4e8e\u73af\u5883\u4e0d\u786e\u5b9a\u6027\uff0c\u6d4b\u8bd5\u9884\u8a00\u96be\u4ee5\u786e\u5b9a\u3002\u91cf\u5b50\u673a\u5668\u5b66\u4e60\u63d0\u4f9b\u4e86\u4e00\u79cd\u5feb\u901f\u8bad\u7ec3\u548c\u9ad8\u7cbe\u5ea6\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u63d0\u51fa\u6df7\u5408\u6846\u67b6QuReBot\uff0c\u7ed3\u5408\u91cf\u5b50\u50a8\u5907\u8ba1\u7b97\uff08QRC\uff09\u548c\u7b80\u5355\u795e\u7ecf\u7f51\u7edc\uff0c\u9884\u6d4b\u673a\u5668\u4eba\u884c\u4e3a\u3002", "result": "QRC\u5355\u72ec\u4f7f\u7528\u65f6\u65e0\u6cd5\u6536\u655b\uff0c\u800cQuReBot\u964d\u4f4e\u4e8615%\u7684\u9884\u6d4b\u8bef\u5dee\u3002", "conclusion": "QuReBot\u5728\u673a\u5668\u4eba\u8f6f\u4ef6\u6d4b\u8bd5\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u5e76\u63d0\u4f9b\u4e86\u4f18\u5316\u914d\u7f6e\u7684\u5b9e\u7528\u5efa\u8bae\u3002"}}
{"id": "2508.02455", "categories": ["cs.SE", "cs.AI", "cs.IR"], "pdf": "https://arxiv.org/pdf/2508.02455", "abs": "https://arxiv.org/abs/2508.02455", "authors": ["Daniele Cipollone", "Egor Bogomolov", "Arie van Deursen", "Maliheh Izadi"], "title": "TreeRanker: Fast and Model-agnostic Ranking System for Code Suggestions in IDEs", "comment": null, "summary": "Token-level code completion is one of the most critical features in modern\nIntegrated Development Environments (IDEs). It assists developers by suggesting\nrelevant identifiers and APIs during coding. While completions are typically\nderived from static analysis, their usefulness depends heavily on how they are\nranked, as correct predictions buried deep in the list are rarely seen by\nusers. Most current systems rely on hand-crafted heuristics or lightweight\nmachine learning models trained on user logs, which can be further improved to\ncapture context information and generalize across projects and coding styles.\nIn this work, we propose a new scoring approach to ranking static completions\nusing language models in a lightweight and model-agnostic way. Our method\norganizes all valid completions into a prefix tree and performs a single greedy\ndecoding pass to collect token-level scores across the tree. This enables a\nprecise token-aware ranking without needing beam search, prompt engineering, or\nmodel adaptations. The approach is fast, architecture-agnostic, and compatible\nwith already deployed models for code completion. These findings highlight a\npractical and effective pathway for integrating language models into already\nexisting tools within IDEs, and ultimately providing smarter and more\nresponsive developer assistance.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8bed\u8a00\u6a21\u578b\u7684\u8f7b\u91cf\u7ea7\u3001\u6a21\u578b\u65e0\u5173\u7684\u4ee3\u7801\u8865\u5168\u6392\u5e8f\u65b9\u6cd5\uff0c\u901a\u8fc7\u524d\u7f00\u6811\u548c\u8d2a\u5a6a\u89e3\u7801\u63d0\u5347\u8865\u5168\u5efa\u8bae\u7684\u51c6\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u7684\u4ee3\u7801\u8865\u5168\u7cfb\u7edf\u4f9d\u8d56\u624b\u5de5\u542f\u53d1\u5f0f\u6216\u8f7b\u91cf\u7ea7\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u96be\u4ee5\u6355\u6349\u4e0a\u4e0b\u6587\u4fe1\u606f\u5e76\u6cdb\u5316\u5230\u4e0d\u540c\u9879\u76ee\u548c\u7f16\u7801\u98ce\u683c\u3002", "method": "\u5c06\u6240\u6709\u6709\u6548\u8865\u5168\u7ec4\u7ec7\u6210\u524d\u7f00\u6811\uff0c\u901a\u8fc7\u5355\u6b21\u8d2a\u5a6a\u89e3\u7801\u6536\u96c6\u4ee4\u724c\u7ea7\u5206\u6570\uff0c\u5b9e\u73b0\u65e0\u9700\u675f\u641c\u7d22\u6216\u6a21\u578b\u8c03\u6574\u7684\u7cbe\u786e\u6392\u5e8f\u3002", "result": "\u8be5\u65b9\u6cd5\u5feb\u901f\u3001\u67b6\u6784\u65e0\u5173\uff0c\u4e14\u517c\u5bb9\u73b0\u6709\u4ee3\u7801\u8865\u5168\u6a21\u578b\uff0c\u4e3aIDE\u5de5\u5177\u63d0\u4f9b\u4e86\u66f4\u667a\u80fd\u7684\u5f00\u53d1\u8005\u8f85\u52a9\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u8bed\u8a00\u6a21\u578b\u96c6\u6210\u5230\u73b0\u6709IDE\u5de5\u5177\u63d0\u4f9b\u4e86\u4e00\u6761\u5b9e\u7528\u4e14\u6709\u6548\u7684\u8def\u5f84\uff0c\u63d0\u5347\u4e86\u4ee3\u7801\u8865\u5168\u7684\u54cd\u5e94\u6027\u548c\u667a\u80fd\u6027\u3002"}}
{"id": "2508.02473", "categories": ["cs.SE", "cs.LG", "68N30", "D.2.3; D.1.2; I.2.2"], "pdf": "https://arxiv.org/pdf/2508.02473", "abs": "https://arxiv.org/abs/2508.02473", "authors": ["Xinfang Chen", "Siyang Xiao", "Xianying Zhu", "Junhong Xie", "Ming Liang", "Dajun Chen", "Wei Jiang", "Yong Li", "Peng Di"], "title": "An Efficient and Adaptive Next Edit Suggestion Framework with Zero Human Instructions in IDEs", "comment": "13 pages", "summary": "Code editing, including modifying, refactoring, and maintaining existing\ncode, is the most frequent task in software development and has garnered\nsignificant attention from AI-powered tools. However, existing solutions that\ntranslate explicit natural language instructions into code edits face critical\nlimitations, such as heavy reliance on human instruction input and high\nlatency, which hinder their effective integration into a developer's workflow.\nWe observe that developers' habitual behaviors and coding objectives are often\nreflected in their historical editing patterns, making this data key to\naddressing existing limitations. To leverage these insights, we propose NES\n(Next Edit Suggestion), an LLM-driven code editing framework that delivers an\ninstruction-free and low-latency experience. Built on a dual-model architecture\nand trained with our high-quality SFT and DAPO datasets, NES enhances\nproductivity by understanding developer intent while optimizing inference to\nminimize latency. NES is a scalable, industry-ready solution with a continuous\nTab key interaction workflow, seamlessly adopted by a FinTech company with over\n20,000 developers. Evaluations on real-world datasets show NES achieves 75.6%\nand 81.6% accuracy in two tasks of predicting next edit locations, alongside\n91.36% ES and 27.7% EMR for intent-aligned edits, outperforming SOTA models.\nOur open-sourced SFT and DAPO datasets have been demonstrated to enhance the\nperformance of open-source CodeLLMs. The demonstration of NES is available at\nhttps://youtu.be/yGoyYOe6fbY.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aNES\u7684LLM\u9a71\u52a8\u4ee3\u7801\u7f16\u8f91\u6846\u67b6\uff0c\u901a\u8fc7\u5206\u6790\u5f00\u53d1\u8005\u5386\u53f2\u7f16\u8f91\u6a21\u5f0f\u5b9e\u73b0\u65e0\u6307\u4ee4\u3001\u4f4e\u5ef6\u8fdf\u7684\u4ee3\u7801\u7f16\u8f91\u5efa\u8bae\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u81ea\u7136\u8bed\u8a00\u6307\u4ee4\u7684\u4ee3\u7801\u7f16\u8f91\u5de5\u5177\u4f9d\u8d56\u4eba\u5de5\u8f93\u5165\u4e14\u5ef6\u8fdf\u9ad8\uff0c\u96be\u4ee5\u878d\u5165\u5f00\u53d1\u8005\u5de5\u4f5c\u6d41\u3002", "method": "\u91c7\u7528\u53cc\u6a21\u578b\u67b6\u6784\uff0c\u5229\u7528SFT\u548cDAPO\u6570\u636e\u96c6\u8bad\u7ec3\uff0c\u4f18\u5316\u63a8\u7406\u4ee5\u51cf\u5c11\u5ef6\u8fdf\u3002", "result": "\u5728\u9884\u6d4b\u7f16\u8f91\u4f4d\u7f6e\u4efb\u52a1\u4e2d\u51c6\u786e\u7387\u8fbe75.6%\u548c81.6%\uff0c\u610f\u56fe\u5bf9\u9f50\u7f16\u8f91\u7684ES\u548cEMR\u5206\u522b\u4e3a91.36%\u548c27.7%\uff0c\u4f18\u4e8e\u73b0\u6709\u6a21\u578b\u3002", "conclusion": "NES\u662f\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u884c\u4e1a\u89e3\u51b3\u65b9\u6848\uff0c\u663e\u8457\u63d0\u5347\u5f00\u53d1\u6548\u7387\uff0c\u5176\u6570\u636e\u96c6\u5bf9\u5f00\u6e90CodeLLMs\u6027\u80fd\u6709\u63d0\u5347\u4f5c\u7528\u3002"}}
{"id": "2508.02487", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02487", "abs": "https://arxiv.org/abs/2508.02487", "authors": ["Elijah Kayode Adejumo", "Brittany Johnson", "Mariam Guizani"], "title": "Commit Stability as a Signal for Risk in Open-Source Projects", "comment": null, "summary": "Open source software (OSS) generates trillions of dollars in economic value\nand has become essential to technical infrastructures worldwide. As\norganizations increasingly depend on OSS, understanding project evolution is\ncritical. While existing metrics provide insights into project health, one\ndimension remains understudied: project resilience -- the ability to return to\nnormal operations after disturbances such as contributor departures, security\nvulnerabilities, and bug report spikes. We hypothesize that stable commit\npatterns reflect underlying project characteristics such as mature governance,\nsustained contributors, and robust development processes that enable\nresilience. Building on the Composite Stability Index (CSI) framework, we\nempirically validate commit frequency patterns across 100 highly ranked\nrepositories. Our findings reveal that only 2\\% of repositories exhibit daily\nstability, 29\\% achieve weekly stability, and 50\\% demonstrate monthly\nstability, while half remain unstable across all temporal levels. Programming\nlanguages and blockchain applications were the most stable. We identified two\nexemplary repositories that achieved stability at all three granularities,\nwhose governance models, CI cadence, and release policies could serve as\nreference frameworks. We observed that large yearly commit throughput does not\nnecessarily correlate with stability. Beyond commits, stability can be enriched\nwith issue-resolution times, PR merge rates, and community-engagement metrics\nto broaden resilience assessment and sharpen stability-based risk evaluation.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u7684\u97e7\u6027\uff0c\u63d0\u51fa\u901a\u8fc7\u63d0\u4ea4\u9891\u7387\u6a21\u5f0f\u8bc4\u4f30\u9879\u76ee\u7a33\u5b9a\u6027\uff0c\u53d1\u73b0\u4ec5\u6709\u5c11\u6570\u9879\u76ee\u80fd\u5728\u4e0d\u540c\u65f6\u95f4\u7c92\u5ea6\u4e0a\u4fdd\u6301\u7a33\u5b9a\uff0c\u5e76\u8bc6\u522b\u4e86\u5f71\u54cd\u7a33\u5b9a\u6027\u7684\u5173\u952e\u56e0\u7d20\u3002", "motivation": "\u968f\u7740\u5f00\u6e90\u8f6f\u4ef6\u5728\u5168\u7403\u6280\u672f\u57fa\u7840\u8bbe\u65bd\u4e2d\u7684\u91cd\u8981\u6027\u63d0\u5347\uff0c\u7406\u89e3\u9879\u76ee\u6f14\u5316\u53ca\u5176\u97e7\u6027\uff08\u5373\u5e94\u5bf9\u5e72\u6270\u540e\u6062\u590d\u6b63\u5e38\u7684\u80fd\u529b\uff09\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u73b0\u6709\u6307\u6807\u5bf9\u9879\u76ee\u5065\u5eb7\u7684\u8bc4\u4f30\u4e0d\u8db3\uff0c\u5c24\u5176\u662f\u97e7\u6027\u7ef4\u5ea6\u3002", "method": "\u57fa\u4e8e\u590d\u5408\u7a33\u5b9a\u6027\u6307\u6570\uff08CSI\uff09\u6846\u67b6\uff0c\u5bf9100\u4e2a\u9ad8\u6392\u540d\u4ed3\u5e93\u7684\u63d0\u4ea4\u9891\u7387\u6a21\u5f0f\u8fdb\u884c\u5b9e\u8bc1\u5206\u6790\uff0c\u8bc4\u4f30\u5176\u5728\u4e0d\u540c\u65f6\u95f4\u7c92\u5ea6\uff08\u65e5\u3001\u5468\u3001\u6708\uff09\u4e0a\u7684\u7a33\u5b9a\u6027\u3002", "result": "\u7ed3\u679c\u663e\u793a\uff0c\u4ec52%\u7684\u4ed3\u5e93\u5b9e\u73b0\u65e5\u7a33\u5b9a\u6027\uff0c29%\u5b9e\u73b0\u5468\u7a33\u5b9a\u6027\uff0c50%\u5b9e\u73b0\u6708\u7a33\u5b9a\u6027\uff0c\u800c\u4e00\u534a\u4ed3\u5e93\u5728\u6240\u6709\u65f6\u95f4\u7c92\u5ea6\u4e0a\u5747\u4e0d\u7a33\u5b9a\u3002\u7f16\u7a0b\u8bed\u8a00\u548c\u533a\u5757\u94fe\u5e94\u7528\u8868\u73b0\u6700\u7a33\u5b9a\u3002", "conclusion": "\u9879\u76ee\u7a33\u5b9a\u6027\u4e0e\u6cbb\u7406\u6a21\u5f0f\u3001\u6301\u7eed\u8d21\u732e\u8005\u548c\u5f00\u53d1\u6d41\u7a0b\u76f8\u5173\uff0c\u672a\u6765\u53ef\u901a\u8fc7\u7ed3\u5408\u95ee\u9898\u89e3\u51b3\u65f6\u95f4\u3001PR\u5408\u5e76\u7387\u7b49\u6307\u6807\u8fdb\u4e00\u6b65\u4e30\u5bcc\u97e7\u6027\u8bc4\u4f30\u3002"}}
{"id": "2508.02497", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2508.02497", "abs": "https://arxiv.org/abs/2508.02497", "authors": ["Elijah Kayode Adejumo", "Brittany Johnson", "Mariam Guizani"], "title": "Bridging Language Gaps in Open-Source Documentation with Large-Language-Model Translation", "comment": null, "summary": "While open source communities attract diverse contributors globally, few\nrepositories provide essential documentation in languages other than English.\nLarge language models (LLMs) have demonstrated remarkable capabilities in\nsoftware engineering tasks and translations across domains. However, little is\nknown about LLM capabilities in translating open-source technical\ndocumentation, which mixes natural language, code, URLs, and markdown\nformatting. To understand the need and potential for LLMs in technical\ndocumentation translation, we evaluated community translation activity and\nEnglish-to-German translations of 50 README files using OpenAI's ChatGPT 4 and\nAnthropic's Claude. We found scarce translation activity, mostly in larger\nrepositories and community-driven in nature. LLM performance comparison\nsuggests they can provide accurate translations. However, analysis revealed\nfidelity challenges: both models struggled to preserve structural components\n(e.g., hyperlinks) and exhibited formatting inconsistencies. These findings\nhighlight both promise and challenges of LLM-assisted documentation\ninternationalization. As a first step toward translation-aware continuous\nintegration pipelines, we introduce TRIFID, an early-stage translation fidelity\nscoring framework that automatically checks how well translations preserve\ncode, links, and formatting. Our efforts provide a foundation for automated\nLLM-driven support for creating and maintaining open source documentation.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728\u5f00\u6e90\u6280\u672f\u6587\u6863\u7ffb\u8bd1\u4e2d\u7684\u6f5c\u529b\u4e0e\u6311\u6218\uff0c\u53d1\u73b0\u5176\u80fd\u63d0\u4f9b\u51c6\u786e\u7ffb\u8bd1\u4f46\u5b58\u5728\u683c\u5f0f\u548c\u7ed3\u6784\u4fdd\u7559\u95ee\u9898\uff0c\u5e76\u63d0\u51fa\u4e86TRIFID\u6846\u67b6\u4ee5\u8bc4\u4f30\u7ffb\u8bd1\u4fdd\u771f\u5ea6\u3002", "motivation": "\u5f00\u6e90\u793e\u533a\u7684\u6280\u672f\u6587\u6863\u591a\u4ec5\u4ee5\u82f1\u8bed\u63d0\u4f9b\uff0c\u9650\u5236\u4e86\u5168\u7403\u8d21\u732e\u8005\u7684\u53c2\u4e0e\u3002\u7814\u7a76\u65e8\u5728\u63a2\u7d22LLMs\u5728\u591a\u8bed\u8a00\u6280\u672f\u6587\u6863\u7ffb\u8bd1\u4e2d\u7684\u80fd\u529b\u3002", "method": "\u8bc4\u4f30\u4e8650\u4e2aREADME\u6587\u4ef6\u7684\u82f1\u5fb7\u7ffb\u8bd1\uff0c\u4f7f\u7528ChatGPT 4\u548cClaude\u6a21\u578b\uff0c\u5e76\u5206\u6790\u4e86\u7ffb\u8bd1\u4fdd\u771f\u5ea6\u3002", "result": "LLMs\u80fd\u63d0\u4f9b\u51c6\u786e\u7ffb\u8bd1\uff0c\u4f46\u5728\u4fdd\u7559\u8d85\u94fe\u63a5\u548c\u683c\u5f0f\u4e00\u81f4\u6027\u4e0a\u8868\u73b0\u4e0d\u4f73\u3002", "conclusion": "LLMs\u5728\u6587\u6863\u56fd\u9645\u5316\u4e2d\u6709\u6f5c\u529b\uff0c\u4f46\u9700\u89e3\u51b3\u4fdd\u771f\u5ea6\u95ee\u9898\uff1bTRIFID\u6846\u67b6\u4e3a\u81ea\u52a8\u5316\u7ffb\u8bd1\u652f\u6301\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2508.02541", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.02541", "abs": "https://arxiv.org/abs/2508.02541", "authors": ["Peter Hamfelt", "Ricardo Britto", "Lincoln Rocha", "Camilo Almendra"], "title": "Automatic Identification of Machine Learning-Specific Code Smells", "comment": null, "summary": "Machine learning (ML) has rapidly grown in popularity, becoming vital to many\nindustries. Currently, the research on code smells in ML applications lacks\ntools and studies that address the identification and validity of ML-specific\ncode smells. This work investigates suitable methods and tools to design and\ndevelop a static code analysis tool (MLpylint) based on code smell criteria.\nThis research employed the Design Science Methodology. In the problem\nidentification phase, a literature review was conducted to identify ML-specific\ncode smells. In solution design, a secondary literature review and\nconsultations with experts were performed to select methods and tools for\nimplementing the tool. We evaluated the tool on data from 160 open-source ML\napplications sourced from GitHub. We also conducted a static validation through\nan expert survey involving 15 ML professionals. The results indicate the\neffectiveness and usefulness of the MLpylint. We aim to extend our current\napproach by investigating ways to introduce MLpylint seamlessly into\ndevelopment workflows, fostering a more productive and innovative developer\nenvironment.", "AI": {"tldr": "\u7814\u7a76\u5f00\u53d1\u4e86\u57fa\u4e8e\u4ee3\u7801\u5f02\u5473\u6807\u51c6\u7684\u9759\u6001\u4ee3\u7801\u5206\u6790\u5de5\u5177MLpylint\uff0c\u7528\u4e8e\u8bc6\u522bML\u5e94\u7528\u4e2d\u7684\u7279\u5b9a\u4ee3\u7801\u5f02\u5473\uff0c\u5e76\u901a\u8fc7\u4e13\u5bb6\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "motivation": "\u5f53\u524d\u7f3a\u4e4f\u9488\u5bf9ML\u5e94\u7528\u4e2d\u7279\u5b9a\u4ee3\u7801\u5f02\u5473\u7684\u8bc6\u522b\u5de5\u5177\u548c\u7814\u7a76\uff0c\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u91c7\u7528\u8bbe\u8ba1\u79d1\u5b66\u65b9\u6cd5\uff0c\u901a\u8fc7\u6587\u732e\u7efc\u8ff0\u548c\u4e13\u5bb6\u54a8\u8be2\u8bbe\u8ba1\u5de5\u5177\uff0c\u5e76\u5728160\u4e2a\u5f00\u6e90ML\u5e94\u7528\u4e0a\u8bc4\u4f30\u3002", "result": "MLpylint\u88ab\u8bc1\u660e\u6709\u6548\u4e14\u5b9e\u7528\uff0c\u4e13\u5bb6\u8c03\u67e5\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u4e86\u5176\u4ef7\u503c\u3002", "conclusion": "\u8ba1\u5212\u5c06MLpylint\u65e0\u7f1d\u96c6\u6210\u5230\u5f00\u53d1\u6d41\u7a0b\u4e2d\uff0c\u63d0\u5347\u5f00\u53d1\u6548\u7387\u548c\u521b\u65b0\u6027\u3002"}}
{"id": "2508.02611", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.02611", "abs": "https://arxiv.org/abs/2508.02611", "authors": ["Vali Tawosia", "Salwa Alamir", "Xiaomo Liu", "Manuela Veloso"], "title": "Meta-RAG on Large Codebases Using Code Summarization", "comment": null, "summary": "Large Language Model (LLM) systems have been at the forefront of applied\nArtificial Intelligence (AI) research in a multitude of domains. One such\ndomain is software development, where researchers have pushed the automation of\na number of code tasks through LLM agents. Software development is a complex\necosystem, that stretches far beyond code implementation and well into the\nrealm of code maintenance. In this paper, we propose a multi-agent system to\nlocalize bugs in large pre-existing codebases using information retrieval and\nLLMs. Our system introduces a novel Retrieval Augmented Generation (RAG)\napproach, Meta-RAG, where we utilize summaries to condense codebases by an\naverage of 79.8\\%, into a compact, structured, natural language representation.\nWe then use an LLM agent to determine which parts of the codebase are critical\nfor bug resolution, i.e. bug localization. We demonstrate the usefulness of\nMeta-RAG through evaluation with the SWE-bench Lite dataset. Meta-RAG scores\n84.67 % and 53.0 % for file-level and function-level correct localization\nrates, respectively, achieving state-of-the-art performance.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aMeta-RAG\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\uff0c\u7528\u4e8e\u901a\u8fc7\u4fe1\u606f\u68c0\u7d22\u548c\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u5b9a\u4f4d\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\u7684\u9519\u8bef\u3002", "motivation": "\u8f6f\u4ef6\u5f00\u53d1\u7684\u590d\u6742\u6027\u4e0d\u4ec5\u9650\u4e8e\u4ee3\u7801\u5b9e\u73b0\uff0c\u8fd8\u5305\u62ec\u4ee3\u7801\u7ef4\u62a4\u3002\u73b0\u6709\u65b9\u6cd5\u5728\u5b9a\u4f4d\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\u7684\u9519\u8bef\u65f6\u6548\u7387\u4e0d\u8db3\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u66f4\u9ad8\u6548\u7684\u65b9\u6cd5\u3002", "method": "\u91c7\u7528\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff08RAG\uff09\u65b9\u6cd5Meta-RAG\uff0c\u901a\u8fc7\u6458\u8981\u5c06\u4ee3\u7801\u5e93\u538b\u7f2979.8%\uff0c\u751f\u6210\u7d27\u51d1\u7684\u7ed3\u6784\u5316\u81ea\u7136\u8bed\u8a00\u8868\u793a\uff0c\u5e76\u5229\u7528LLM\u667a\u80fd\u4f53\u786e\u5b9a\u4e0e\u9519\u8bef\u89e3\u51b3\u76f8\u5173\u7684\u5173\u952e\u4ee3\u7801\u90e8\u5206\u3002", "result": "\u5728SWE-bench Lite\u6570\u636e\u96c6\u4e0a\uff0cMeta-RAG\u5728\u6587\u4ef6\u7ea7\u522b\u548c\u51fd\u6570\u7ea7\u522b\u7684\u6b63\u786e\u5b9a\u4f4d\u7387\u5206\u522b\u8fbe\u523084.67%\u548c53.0%\uff0c\u6027\u80fd\u8fbe\u5230\u5f53\u524d\u6700\u4f18\u6c34\u5e73\u3002", "conclusion": "Meta-RAG\u901a\u8fc7\u9ad8\u6548\u7684\u4ee3\u7801\u5e93\u538b\u7f29\u548c\u667a\u80fd\u5b9a\u4f4d\uff0c\u663e\u8457\u63d0\u5347\u4e86\u5927\u578b\u4ee3\u7801\u5e93\u4e2d\u9519\u8bef\u5b9a\u4f4d\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002"}}

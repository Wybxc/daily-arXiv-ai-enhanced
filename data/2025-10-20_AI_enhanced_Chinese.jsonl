{"id": "2510.15681", "categories": ["cs.LO", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15681", "abs": "https://arxiv.org/abs/2510.15681", "authors": ["Prithwish Jana", "Kaan Kale", "Ahmet Ege Tanriverdi", "Cruise Song", "Sriram Vishwanath", "Vijay Ganesh"], "title": "ProofBridge: Auto-Formalization of Natural Language Proofs in Lean via Joint Embeddings", "comment": null, "summary": "Translating human-written mathematical theorems and proofs from natural\nlanguage (NL) into formal languages (FLs) like Lean 4 has long been a\nsignificant challenge for AI. Most state-of-the-art methods address this\nseparately, first translating theorems and then generating proofs, creating a\nfundamental disconnect vis-a-vis true proof auto-formalization. This two-step\nprocess and its limitations were evident even in AlphaProof's silver-medal\nperformance at the 2024 IMO, where problem statements needed manual translation\nbefore automated proof synthesis.\n  We present ProofBridge, a unified framework for automatically translating\nentire NL theorems and proofs into Lean 4. At its core is a joint embedding\nmodel that aligns NL and FL (NL-FL) theorem-proof pairs in a shared semantic\nspace, enabling cross-modal retrieval of semantically relevant FL examples to\nguide translation. Our training ensures that NL-FL theorems (and their proofs)\nare mapped close together in this space if and only if the NL-FL pairs are\nsemantically equivalent. ProofBridge integrates retrieval-augmented fine-tuning\nwith iterative proof repair, leveraging Lean's type checker and semantic\nequivalence feedback to ensure both syntactic correctness and semantic\nfidelity. Experiments show substantial improvements in proof auto-formalization\nover strong baselines (including GPT-5, Gemini-2.5, Kimina-Prover,\nDeepSeek-Prover), with our retrieval-augmented approach yielding significant\ngains in semantic correctness (SC, via proving bi-directional equivalence) and\ntype correctness (TC, via type-checking theorem+proof) across pass@k metrics on\nminiF2F-Test-PF, a dataset we curated. In particular, ProofBridge improves\ncross-modal retrieval quality by up to 3.28x Recall@1 over all-MiniLM-L6-v2,\nand achieves +31.14% SC and +1.64% TC (pass@32) compared to the baseline\nKimina-Prover-RL-1.7B.", "AI": {"tldr": "ProofBridge\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u5c06\u81ea\u7136\u8bed\u8a00\u6570\u5b66\u5b9a\u7406\u548c\u8bc1\u660e\u81ea\u52a8\u7ffb\u8bd1\u6210Lean 4\u5f62\u5f0f\u5316\u8bed\u8a00\uff0c\u901a\u8fc7\u8054\u5408\u5d4c\u5165\u6a21\u578b\u5728\u5171\u4eab\u8bed\u4e49\u7a7a\u95f4\u4e2d\u5bf9\u9f50\u81ea\u7136\u8bed\u8a00\u548c\u5f62\u5f0f\u5316\u8bed\u8a00\u7684\u5b9a\u7406-\u8bc1\u660e\u5bf9\uff0c\u5b9e\u73b0\u8de8\u6a21\u6001\u68c0\u7d22\u5f15\u5bfc\u7ffb\u8bd1\u3002", "motivation": "\u89e3\u51b3\u73b0\u6709\u65b9\u6cd5\u5c06\u5b9a\u7406\u7ffb\u8bd1\u548c\u8bc1\u660e\u751f\u6210\u5206\u5f00\u5904\u7406\u7684\u95ee\u9898\uff0c\u8fd9\u79cd\u4e24\u9636\u6bb5\u65b9\u6cd5\u5728AlphaProof\u7684IMO\u8868\u73b0\u4e2d\u663e\u793a\u51fa\u5c40\u9650\u6027\uff0c\u9700\u8981\u624b\u52a8\u7ffb\u8bd1\u95ee\u9898\u9648\u8ff0\u3002", "method": "\u4f7f\u7528\u8054\u5408\u5d4c\u5165\u6a21\u578b\u5728\u5171\u4eab\u8bed\u4e49\u7a7a\u95f4\u4e2d\u5bf9\u9f50NL-FL\u5b9a\u7406\u8bc1\u660e\u5bf9\uff0c\u7ed3\u5408\u68c0\u7d22\u589e\u5f3a\u5fae\u8c03\u548c\u8fed\u4ee3\u8bc1\u660e\u4fee\u590d\uff0c\u5229\u7528Lean\u7684\u7c7b\u578b\u68c0\u67e5\u5668\u548c\u8bed\u4e49\u7b49\u4ef7\u53cd\u9988\u786e\u4fdd\u8bed\u6cd5\u6b63\u786e\u6027\u548c\u8bed\u4e49\u4fdd\u771f\u5ea6\u3002", "result": "\u5728miniF2F-Test-PF\u6570\u636e\u96c6\u4e0a\u663e\u8457\u4f18\u4e8e\u5f3a\u57fa\u7ebf\u6a21\u578b\uff0c\u8de8\u6a21\u6001\u68c0\u7d22\u8d28\u91cf\u63d0\u53473.28\u500dRecall@1\uff0c\u8bed\u4e49\u6b63\u786e\u6027\u63d0\u534731.14%\uff0c\u7c7b\u578b\u6b63\u786e\u6027\u63d0\u53471.64%\u3002", "conclusion": "ProofBridge\u901a\u8fc7\u7edf\u4e00\u7684\u7aef\u5230\u7aef\u6846\u67b6\u663e\u8457\u63d0\u5347\u4e86\u81ea\u52a8\u5f62\u5f0f\u5316\u8bc1\u660e\u7684\u6027\u80fd\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u4e24\u9636\u6bb5\u65b9\u6cd5\u7684\u5c40\u9650\u6027\u3002"}}
{"id": "2510.15718", "categories": ["cs.LO"], "pdf": "https://arxiv.org/pdf/2510.15718", "abs": "https://arxiv.org/abs/2510.15718", "authors": ["Ben M. Andrew"], "title": "Weakening Goals in Logical Specifications", "comment": null, "summary": "Logical specifications are widely used to represent software systems and\ntheir desired properties. Under system degradation or environmental changes,\ncommonly seen in complex real-world robotic systems, these properties may no\nlonger hold and so traditional verification methods will simply fail to\nconstruct a proof. However, weaker versions of these properties do still hold\nand can be useful for understanding the system's behaviour in uncertain\nconditions, as well as aiding compositional verification. We present a\ncounterexample-guided technique for iteratively weakening properties, apply it\nto propositional logic specifications, and discuss planned extensions to\nstate-based representations.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u53cd\u4f8b\u5f15\u5bfc\u7684\u5c5e\u6027\u5f31\u5316\u6280\u672f\uff0c\u7528\u4e8e\u5904\u7406\u7cfb\u7edf\u9000\u5316\u6216\u73af\u5883\u53d8\u5316\u65f6\u4f20\u7edf\u9a8c\u8bc1\u65b9\u6cd5\u5931\u6548\u7684\u60c5\u51b5\u3002", "motivation": "\u5728\u590d\u6742\u673a\u5668\u4eba\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u9000\u5316\u6216\u73af\u5883\u53d8\u5316\u53ef\u80fd\u5bfc\u81f4\u903b\u8f91\u5c5e\u6027\u4e0d\u518d\u6210\u7acb\uff0c\u4f20\u7edf\u9a8c\u8bc1\u65b9\u6cd5\u4f1a\u5931\u8d25\uff0c\u4f46\u8f83\u5f31\u7684\u5c5e\u6027\u7248\u672c\u4ecd\u7136\u6709\u7528\u3002", "method": "\u91c7\u7528\u53cd\u4f8b\u5f15\u5bfc\u7684\u8fed\u4ee3\u5f31\u5316\u6280\u672f\uff0c\u5e94\u7528\u4e8e\u547d\u9898\u903b\u8f91\u89c4\u8303\uff0c\u5e76\u8ba1\u5212\u6269\u5c55\u5230\u57fa\u4e8e\u72b6\u6001\u7684\u8868\u793a\u3002", "result": "\u5f00\u53d1\u4e86\u4e00\u79cd\u80fd\u591f\u81ea\u52a8\u5f31\u5316\u903b\u8f91\u5c5e\u6027\u7684\u65b9\u6cd5\uff0c\u4f7f\u7cfb\u7edf\u5728\u4e0d\u786e\u5b9a\u6761\u4ef6\u4e0b\u4ecd\u80fd\u4fdd\u6301\u6709\u7528\u7684\u884c\u4e3a\u7406\u89e3\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u52a9\u4e8e\u5728\u7cfb\u7edf\u53d8\u5316\u65f6\u7406\u89e3\u7cfb\u7edf\u884c\u4e3a\uff0c\u5e76\u652f\u6301\u7ec4\u5408\u9a8c\u8bc1\u3002"}}
{"id": "2510.15747", "categories": ["cs.PL", "cs.CR", "cs.DC", "cs.LO", "cs.MA"], "pdf": "https://arxiv.org/pdf/2510.15747", "abs": "https://arxiv.org/abs/2510.15747", "authors": ["Ehud Shapiro"], "title": "Grassroots Logic Programs: A Secure, Multiagent, Concurrent, Logic Programming Language", "comment": null, "summary": "Grassroots platforms are distributed applications run by\\linebreak\ncryptographically-identified people on their networked personal devices, where\nmultiple disjoint platform instances emerge independently and coalesce when\nthey interoperate. Their foundation is the grassroots social graph, upon which\ngrassroots social networks, grassroots cryptocurrencies, and grassroots\ndemocratic federations can be built.\n  Grassroots platforms have yet to be implemented, the key challenge being\nfaulty and malicious participants: without secure programming support, correct\nparticipants cannot reliably identify each other, establish secure\ncommunication, or verify each other's code integrity.\n  We present Grassroots Logic Programs (GLP), a secure, multiagent, concurrent,\nlogic programming language for implementing grassroots platforms. GLP extends\nlogic programs with paired single-reader/single-writer (SRSW) logic variables,\nproviding secure communication channels among cryptographically-identified\npeople through encrypted, signed and attested messages, which enable identity\nand code integrity verification. We present GLP progressively: logic programs,\nconcurrent GLP, multiagent GLP, augmenting it with cryptographic security, and\nproviding smartphone implementation-ready specifications. We prove safety\nproperties including that GLP computations are deductions, SRSW preservation,\nacyclicity, and monotonicity. We prove multiagent GLP is grassroots and that\nGLP streams achieve blockchain security properties. We present a grassroots\nsocial graph protocol establishing authenticated peer-to-peer connections and\ndemonstrate secure grassroots social networking applications.", "AI": {"tldr": "GLP\u662f\u4e00\u79cd\u5b89\u5168\u7684\u591a\u667a\u80fd\u4f53\u5e76\u53d1\u903b\u8f91\u7f16\u7a0b\u8bed\u8a00\uff0c\u7528\u4e8e\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u7684\u8349\u6839\u5e73\u53f0\uff0c\u901a\u8fc7\u52a0\u5bc6\u7b7e\u540d\u6d88\u606f\u63d0\u4f9b\u5b89\u5168\u901a\u4fe1\u901a\u9053\uff0c\u652f\u6301\u8eab\u4efd\u548c\u4ee3\u7801\u5b8c\u6574\u6027\u9a8c\u8bc1\u3002", "motivation": "\u8349\u6839\u5e73\u53f0\u9762\u4e34\u6076\u610f\u53c2\u4e0e\u8005\u7684\u6311\u6218\uff0c\u7f3a\u4e4f\u5b89\u5168\u7f16\u7a0b\u652f\u6301\u4f7f\u5f97\u6b63\u786e\u53c2\u4e0e\u8005\u65e0\u6cd5\u53ef\u9760\u8bc6\u522b\u5f7c\u6b64\u3001\u5efa\u7acb\u5b89\u5168\u901a\u4fe1\u6216\u9a8c\u8bc1\u4ee3\u7801\u5b8c\u6574\u6027\u3002", "method": "\u6269\u5c55\u903b\u8f91\u7a0b\u5e8f\uff0c\u6dfb\u52a0\u914d\u5bf9\u5355\u8bfb\u5355\u5199\u903b\u8f91\u53d8\u91cf\uff0c\u901a\u8fc7\u52a0\u5bc6\u7b7e\u540d\u548c\u8ba4\u8bc1\u6d88\u606f\u63d0\u4f9b\u5b89\u5168\u901a\u4fe1\u901a\u9053\uff0c\u9010\u6b65\u6784\u5efa\u5e76\u53d1\u3001\u591a\u667a\u80fd\u4f53GLP\u5e76\u589e\u5f3a\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u3002", "result": "\u8bc1\u660e\u4e86GLP\u8ba1\u7b97\u662f\u6f14\u7ece\u3001SRSW\u4fdd\u6301\u6027\u3001\u65e0\u73af\u6027\u548c\u5355\u8c03\u6027\u7b49\u5b89\u5168\u5c5e\u6027\uff0c\u591a\u667a\u80fd\u4f53GLP\u5177\u6709\u8349\u6839\u7279\u6027\uff0cGLP\u6d41\u5b9e\u73b0\u533a\u5757\u94fe\u5b89\u5168\u5c5e\u6027\uff0c\u5e76\u5c55\u793a\u4e86\u5b89\u5168\u7684\u8349\u6839\u793e\u4ea4\u7f51\u7edc\u5e94\u7528\u3002", "conclusion": "GLP\u4e3a\u8349\u6839\u5e73\u53f0\u63d0\u4f9b\u4e86\u5b89\u5168\u53ef\u9760\u7684\u5b9e\u73b0\u57fa\u7840\uff0c\u80fd\u591f\u5efa\u7acb\u8ba4\u8bc1\u7684\u70b9\u5bf9\u70b9\u8fde\u63a5\u5e76\u652f\u6301\u5b89\u5168\u7684\u8349\u6839\u793e\u4ea4\u7f51\u7edc\u5e94\u7528\u3002"}}
{"id": "2510.15178", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.15178", "abs": "https://arxiv.org/abs/2510.15178", "authors": ["Brysen Pfingsten", "Jason Hemann"], "title": "Visualizing miniKanren Search with a Fine-Grained Small-Step Semantics", "comment": "2025 miniKanren Workshop", "summary": "We present a deterministic small-step operational semantics for miniKanren\nthat explicitly represents the evolving search tree during execution. This\nsemantics models interleaving and goal scheduling at fine granularity, allowing\neach evaluation step-goal activation, suspension, resumption, and success -- to\nbe visualized precisely. Building on this model, we implement an interactive\nvisualizer that renders the search tree as it develops and lets users step\nthrough execution. The tool acts as a pedagogical notional machine for\nreasoning about miniKanren's fair search behavior, helping users understand\nsurprising answer orders and operational effects. Our semantics and tool are\nvalidated through property-based testing and illustrated with several examples.", "AI": {"tldr": "\u4e3aminiKanren\u5f00\u53d1\u4e86\u786e\u5b9a\u6027\u5c0f\u6b65\u64cd\u4f5c\u8bed\u4e49\uff0c\u663e\u5f0f\u8868\u793a\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u641c\u7d22\u6811\u6f14\u5316\uff0c\u5e76\u57fa\u4e8e\u6b64\u5b9e\u73b0\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\u5de5\u5177", "motivation": "\u5e2e\u52a9\u7528\u6237\u7406\u89e3miniKanren\u7684\u516c\u5e73\u641c\u7d22\u884c\u4e3a\u548c\u64cd\u4f5c\u6548\u679c\uff0c\u89e3\u91ca\u4ee4\u4eba\u60ca\u8bb6\u7684\u7b54\u6848\u987a\u5e8f", "method": "\u6784\u5efa\u663e\u5f0f\u8868\u793a\u641c\u7d22\u6811\u6f14\u5316\u7684\u64cd\u4f5c\u8bed\u4e49\u6a21\u578b\uff0c\u5b9e\u73b0\u4ea4\u4e92\u5f0f\u53ef\u89c6\u5316\u5668\uff0c\u901a\u8fc7\u57fa\u4e8e\u5c5e\u6027\u7684\u6d4b\u8bd5\u8fdb\u884c\u9a8c\u8bc1", "result": "\u5f00\u53d1\u4e86\u80fd\u591f\u7cbe\u786e\u53ef\u89c6\u5316\u6bcf\u4e2a\u8bc4\u4f30\u6b65\u9aa4\uff08\u76ee\u6807\u6fc0\u6d3b\u3001\u6302\u8d77\u3001\u6062\u590d\u548c\u6210\u529f\uff09\u7684\u6559\u5b66\u5de5\u5177", "conclusion": "\u8be5\u8bed\u4e49\u6a21\u578b\u548c\u5de5\u5177\u4e3a\u7406\u89e3miniKanren\u7684\u641c\u7d22\u884c\u4e3a\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u6559\u5b66\u6982\u5ff5\u673a\u5668"}}
{"id": "2510.15004", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15004", "abs": "https://arxiv.org/abs/2510.15004", "authors": ["Zhiming Zhang", "Qingfu Zhu", "Xianzhen Luo", "Yixuan Wang", "Bohan Li", "Wanxiang Che"], "title": "Automated Snippet-Alignment Data Augmentation for Code Translation", "comment": null, "summary": "Code translation aims to translate the code from its source language to the\ntarget language and is used in various software development scenarios. Recent\ndevelopments in Large Language Models (LLMs) have showcased their capabilities\nin code translation, and parallel corpora play a crucial role in training\nmodels for code translation. Parallel corpora can be categorized into\nprogram-alignment (PA) and snippet-alignment (SA) data. Although PA data has\ncomplete context and is suitable for semantic alignment learning, it may not\nprovide adequate fine-grained training signals due to its extended length,\nwhile the brevity of SA data enables more fine-grained alignment learning. Due\nto limited parallel corpora, researchers explore several augmentation methods\nfor code translation. Previous studies mainly focus on augmenting PA data. In\nthis paper, we propose a data augmentation method that leverages LLMs to\ngenerate SA data automatically. To fully leverage both PA data and SA data, we\nexplore a simple yet effective two-stage training strategy, which consistently\nenhances model performance compared to fine-tuning solely on PA data.\nExperiments on TransCoder-test demonstrate that our augmented SA data combined\nwith the two-stage training approach yields consistent improvements over the\nbaseline, achieving a maximum gain of 3.78% on pass@k.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u5e76\u7ed3\u5408\u4e24\u9636\u6bb5\u8bad\u7ec3\u7b56\u7565\u63d0\u5347\u4ee3\u7801\u7ffb\u8bd1\u6027\u80fd\u3002", "motivation": "\u4ee3\u7801\u7ffb\u8bd1\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u6709\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f46\u5e73\u884c\u8bed\u6599\u5e93\u6709\u9650\u3002\u73b0\u6709\u7684\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u867d\u7136\u4e0a\u4e0b\u6587\u5b8c\u6574\u4f46\u957f\u5ea6\u8fc7\u957f\uff0c\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u66f4\u7cbe\u7ec6\u4f46\u6570\u91cf\u4e0d\u8db3\u3002", "method": "\u4f7f\u7528LLM\u81ea\u52a8\u751f\u6210\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\uff0c\u5e76\u91c7\u7528\u4e24\u9636\u6bb5\u8bad\u7ec3\u7b56\u7565\uff1a\u5148\u5728\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u4e0a\u9884\u8bad\u7ec3\uff0c\u518d\u5728\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u4e0a\u5fae\u8c03\u3002", "result": "\u5728TransCoder-test\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u76f8\u6bd4\u4ec5\u5728\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u4e0a\u5fae\u8c03\u7684\u57fa\u7ebf\u6709\u663e\u8457\u63d0\u5347\uff0c\u6700\u5927\u589e\u76ca\u8fbe3.78% on pass@k\u3002", "conclusion": "\u7ed3\u5408\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u548c\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u7684\u4f18\u52bf\uff0c\u901a\u8fc7\u6570\u636e\u589e\u5f3a\u548c\u4e24\u9636\u6bb5\u8bad\u7ec3\u80fd\u6709\u6548\u63d0\u5347\u4ee3\u7801\u7ffb\u8bd1\u6a21\u578b\u7684\u6027\u80fd\u3002"}}
{"id": "2510.15079", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15079", "abs": "https://arxiv.org/abs/2510.15079", "authors": ["Changshu Liu", "Yang Chen", "Reyhaneh Jabbarvand"], "title": "Assessing Coherency and Consistency of Code Execution Reasoning by Large Language Models", "comment": null, "summary": "This paper proposes CES, a task to evaluate the abilities of LLMs in\nsimulating program execution and using that reasoning in programming tasks.\nBesides measuring the correctness of variable predictions during execution\nsimulation, CES introduces the notion of coherence to determine whether the\nsimulation complies with commonsense execution logic, even if the predicted\nvalues along the simulations are incorrect. This enables CES to rule out\nsuspiciously correct output predictions due to reasoning shortcuts,\nhallucinations, or potential data leakage. CES also introduces a novel metric\nto measure reasoning consistency across tests with the same or different prime\npath coverage in a spectrum: strong, weak, and random. Evaluating 16 LLMs\n(including three reasoning LLMs) using CES indicates 81.42% coherent execution\nsimulation on HumanEval, 46.92% and 53.08% of which result in correct and\nincorrect output predictions. Frontier LLMs such as GPT-4 and DeepSeek-R1 have\nthe most incoherent execution reasoning, mostly due to natural language\nshortcuts. Despite relatively coherent execution simulation, LLMs' reasoning\nperformance across different tests is inconsistent, mostly random (48.87%) or\nweak (45.37%), potentially explaining their weakness in programming tasks that\nrequire path-sensitive program analysis to succeed. We also compare CES with\nbug prediction/localization/repair, which intuitively requires control- and\ndata-flow awareness. We observe that LLMs barely incorporate execution\nreasoning into their analysis for bug-related tasks, and their success is\nprimarily due to inherent abilities in pattern matching or natural language\nshortcuts, if not data leakage. Without reasoning, there is a threat to the\ngeneralizability of LLMs in dealing with unseen bugs or patterns in different\ncontexts. CES can be used to vet the suspicious success of LLMs in these tasks\nsystematically.", "AI": {"tldr": "CES\u662f\u4e00\u4e2a\u8bc4\u4f30LLM\u5728\u7a0b\u5e8f\u6267\u884c\u6a21\u62df\u548c\u7f16\u7a0b\u4efb\u52a1\u4e2d\u63a8\u7406\u80fd\u529b\u7684\u65b0\u4efb\u52a1\uff0c\u901a\u8fc7\u6d4b\u91cf\u6267\u884c\u6a21\u62df\u7684\u6b63\u786e\u6027\u548c\u8fde\u8d2f\u6027\u6765\u6392\u9664\u63a8\u7406\u6377\u5f84\u3001\u5e7b\u89c9\u6216\u6570\u636e\u6cc4\u9732\u5bfc\u81f4\u7684\u865a\u5047\u6b63\u786e\u9884\u6d4b\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u53d8\u91cf\u9884\u6d4b\u7684\u6b63\u786e\u6027\uff0c\u4f46\u65e0\u6cd5\u533a\u5206\u771f\u6b63\u7684\u6267\u884c\u63a8\u7406\u4e0e\u865a\u5047\u7684\u6210\u529f\u3002CES\u5f15\u5165\u8fde\u8d2f\u6027\u6982\u5ff5\u6765\u8bc4\u4f30LLM\u662f\u5426\u9075\u5faa\u5e38\u8bc6\u6267\u884c\u903b\u8f91\uff0c\u5373\u4f7f\u9884\u6d4b\u503c\u4e0d\u6b63\u786e\u3002", "method": "\u63d0\u51faCES\u4efb\u52a1\uff0c\u5f15\u5165\u8fde\u8d2f\u6027\u8bc4\u4f30\u6267\u884c\u6a21\u62df\u662f\u5426\u7b26\u5408\u5e38\u8bc6\u903b\u8f91\uff0c\u5e76\u8bbe\u8ba1\u65b0\u6307\u6807\u6d4b\u91cf\u4e0d\u540c\u6d4b\u8bd5\u8986\u76d6\u5ea6\u4e0b\u7684\u63a8\u7406\u4e00\u81f4\u6027\uff08\u5f3a\u3001\u5f31\u3001\u968f\u673a\uff09\u3002\u8bc4\u4f3016\u4e2aLLM\u5728HumanEval\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u3002", "result": "\u5728HumanEval\u4e0a\uff0c81.42%\u7684\u6267\u884c\u6a21\u62df\u662f\u8fde\u8d2f\u7684\uff0c\u5176\u4e2d46.92%\u9884\u6d4b\u6b63\u786e\uff0c53.08%\u9884\u6d4b\u9519\u8bef\u3002\u524d\u6cbfLLM\u5982GPT-4\u548cDeepSeek-R1\u7684\u63a8\u7406\u6700\u4e0d\u8fde\u8d2f\uff0c\u4e3b\u8981\u7531\u4e8e\u81ea\u7136\u8bed\u8a00\u6377\u5f84\u3002LLM\u7684\u63a8\u7406\u4e00\u81f4\u6027\u5927\u591a\u4e3a\u968f\u673a(48.87%)\u6216\u5f31(45.37%)\u3002", "conclusion": "LLM\u5728bug\u76f8\u5173\u4efb\u52a1\u4e2d\u5f88\u5c11\u878d\u5165\u6267\u884c\u63a8\u7406\uff0c\u6210\u529f\u4e3b\u8981\u4f9d\u8d56\u6a21\u5f0f\u5339\u914d\u6216\u81ea\u7136\u8bed\u8a00\u6377\u5f84\u3002\u7f3a\u4e4f\u63a8\u7406\u80fd\u529b\u5a01\u80c1LLM\u5904\u7406\u672a\u89c1bug\u6216\u4e0d\u540c\u4e0a\u4e0b\u6587\u6a21\u5f0f\u7684\u6cdb\u5316\u80fd\u529b\u3002CES\u53ef\u7cfb\u7edf\u6027\u5730\u9a8c\u8bc1LLM\u5728\u8fd9\u4e9b\u4efb\u52a1\u4e2d\u7684\u53ef\u7591\u6210\u529f\u3002"}}
{"id": "2510.15585", "categories": ["cs.SE", "cs.CL", "cs.PL", "F.2.2; I.2.7"], "pdf": "https://arxiv.org/pdf/2510.15585", "abs": "https://arxiv.org/abs/2510.15585", "authors": ["Dr Simon Thorne", "Dr Advait Sarkar"], "title": "Leveraging Test Driven Development with Large Language Models for Reliable and Verifiable Spreadsheet Code Generation: A Research Framework", "comment": "16 pages", "summary": "Large Language Models (LLMs), such as ChatGPT, are increasingly leveraged for\ngenerating both traditional software code and spreadsheet logic. Despite their\nimpressive generative capabilities, these models frequently exhibit critical\nissues such as hallucinations, subtle logical inconsistencies, and syntactic\nerrors, risks particularly acute in high stakes domains like financial\nmodelling and scientific computations, where accuracy and reliability are\nparamount. This position paper proposes a structured research framework that\nintegrates the proven software engineering practice of Test-Driven Development\n(TDD) with Large Language Model (LLM) driven generation to enhance the\ncorrectness of, reliability of, and user confidence in generated outputs. We\nhypothesise that a \"test first\" methodology provides both technical constraints\nand cognitive scaffolding, guiding LLM outputs towards more accurate,\nverifiable, and comprehensible solutions. Our framework, applicable across\ndiverse programming contexts, from spreadsheet formula generation to scripting\nlanguages such as Python and strongly typed languages like Rust, includes an\nexplicitly outlined experimental design with clearly defined participant\ngroups, evaluation metrics, and illustrative TDD based prompting examples. By\nemphasising test driven thinking, we aim to improve computational thinking,\nprompt engineering skills, and user engagement, particularly benefiting\nspreadsheet users who often lack formal programming training yet face serious\nconsequences from logical errors. We invite collaboration to refine and\nempirically evaluate this approach, ultimately aiming to establish responsible\nand reliable LLM integration in both educational and professional development\npractices.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u5c06\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD)\u4e0e\u5927\u578b\u8bed\u8a00\u6a21\u578b(LLM)\u751f\u6210\u76f8\u7ed3\u5408\u7684\u7814\u7a76\u6846\u67b6\uff0c\u901a\u8fc7\"\u6d4b\u8bd5\u4f18\u5148\"\u65b9\u6cd5\u63d0\u9ad8\u751f\u6210\u4ee3\u7801\u7684\u6b63\u786e\u6027\u548c\u53ef\u9760\u6027\u3002", "motivation": "LLM\u5728\u751f\u6210\u4ee3\u7801\u65f6\u7ecf\u5e38\u51fa\u73b0\u5e7b\u89c9\u3001\u903b\u8f91\u4e0d\u4e00\u81f4\u548c\u8bed\u6cd5\u9519\u8bef\u7b49\u95ee\u9898\uff0c\u5728\u91d1\u878d\u5efa\u6a21\u548c\u79d1\u5b66\u8ba1\u7b97\u7b49\u9ad8\u98ce\u9669\u9886\u57df\u5c24\u5176\u5371\u9669\uff0c\u9700\u8981\u63d0\u9ad8\u751f\u6210\u7ed3\u679c\u7684\u51c6\u786e\u6027\u548c\u53ef\u9760\u6027\u3002", "method": "\u63d0\u51fa\u7ed3\u6784\u5316\u7814\u7a76\u6846\u67b6\uff0c\u5c06TDD\u5b9e\u8df5\u4e0eLLM\u9a71\u52a8\u751f\u6210\u76f8\u7ed3\u5408\uff0c\u91c7\u7528\"\u6d4b\u8bd5\u4f18\u5148\"\u65b9\u6cd5\uff0c\u4e3aLLM\u8f93\u51fa\u63d0\u4f9b\u6280\u672f\u7ea6\u675f\u548c\u8ba4\u77e5\u652f\u6301\u3002", "result": "\u6846\u67b6\u9002\u7528\u4e8e\u591a\u79cd\u7f16\u7a0b\u73af\u5883\uff0c\u5305\u62ec\u7535\u5b50\u8868\u683c\u516c\u5f0f\u751f\u6210\u3001Python\u811a\u672c\u548cRust\u7b49\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u5e76\u5305\u542b\u660e\u786e\u7684\u5b9e\u9a8c\u8bbe\u8ba1\u3001\u8bc4\u4f30\u6307\u6807\u548cTDD\u63d0\u793a\u793a\u4f8b\u3002", "conclusion": "\u901a\u8fc7\u5f3a\u8c03\u6d4b\u8bd5\u9a71\u52a8\u601d\u7ef4\uff0c\u65e8\u5728\u63d0\u9ad8\u8ba1\u7b97\u601d\u7ef4\u3001\u63d0\u793a\u5de5\u7a0b\u6280\u80fd\u548c\u7528\u6237\u53c2\u4e0e\u5ea6\uff0c\u6700\u7ec8\u76ee\u6807\u662f\u5728\u6559\u80b2\u548c\u4e13\u4e1a\u5f00\u53d1\u5b9e\u8df5\u4e2d\u5efa\u7acb\u8d1f\u8d23\u4efb\u548c\u53ef\u9760\u7684LLM\u96c6\u6210\u3002"}}
{"id": "2510.15408", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15408", "abs": "https://arxiv.org/abs/2510.15408", "authors": ["Mohit", "Kuljit Kaur Chahal"], "title": "Community Engagement and the Lifespan of Open-Source Software Projects", "comment": null, "summary": "Open-source software (OSS) projects depend on community engagement (CE) for\nlongevity. However, CE's quantifiable impact on project dynamics and lifespan\nis underexplored. Objectives: This study defines CE in OSS, identifies key\nmetrics, and evaluates their influence on project dynamics (releases, commits,\nbranches) and lifespan. Methods: We analyzed 33,946 GitHub repositories,\ndefining and operationalizing CE with validated per-month metrics (issues,\ncomments, watchers, stargazers). Non-parametric tests and correlations assessed\nrelationships with project dynamics and lifespan across quartiles. Results: CE\nmetrics significantly associate with project dynamics, with stronger\ncorrelations in highly engaged projects. For lifespan, a complex pattern\nemerged: per-month CE rates are highest in younger projects, declining with\nage. Yet, a subset of long-lived projects maintains exceptionally high\nactivity. Initial CE bursts appear crucial for establishment, while sustained\nhigh engagement drives extreme longevity. Active issue engagement's influence\nintensifies with age, but passive attention's declines. Conclusion: CE\ndynamically drives OSS project longevity and development. Our findings\nestablish validated CE metrics and offer deeper insights into how diverse\ncommunity activity patterns contribute to project longevity.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u4e2d\u793e\u533a\u53c2\u4e0e\u5ea6\u5bf9\u9879\u76ee\u52a8\u6001\u548c\u5bff\u547d\u7684\u5f71\u54cd\uff0c\u901a\u8fc733,946\u4e2aGitHub\u4ed3\u5e93\u6570\u636e\u53d1\u73b0\u793e\u533a\u53c2\u4e0e\u5ea6\u4e0e\u9879\u76ee\u52a8\u6001\u663e\u8457\u76f8\u5173\uff0c\u4e14\u5bf9\u9879\u76ee\u5bff\u547d\u6709\u590d\u6742\u5f71\u54cd\u6a21\u5f0f\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u4f9d\u8d56\u793e\u533a\u53c2\u4e0e\u5ea6\u6765\u7ef4\u6301\u957f\u671f\u53d1\u5c55\uff0c\u4f46\u5176\u5bf9\u9879\u76ee\u52a8\u6001\u548c\u5bff\u547d\u7684\u53ef\u91cf\u5316\u5f71\u54cd\u5c1a\u672a\u5f97\u5230\u5145\u5206\u63a2\u7d22\u3002", "method": "\u5206\u679033,946\u4e2aGitHub\u4ed3\u5e93\uff0c\u4f7f\u7528\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6708\u5ea6\u6307\u6807\uff08\u95ee\u9898\u3001\u8bc4\u8bba\u3001\u5173\u6ce8\u8005\u3001\u661f\u6807\uff09\u5b9a\u4e49\u548c\u64cd\u4f5c\u5316\u793e\u533a\u53c2\u4e0e\u5ea6\uff0c\u901a\u8fc7\u975e\u53c2\u6570\u68c0\u9a8c\u548c\u76f8\u5173\u5206\u6790\u8bc4\u4f30\u4e0e\u9879\u76ee\u52a8\u6001\u548c\u5bff\u547d\u7684\u5173\u7cfb\u3002", "result": "\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\u4e0e\u9879\u76ee\u52a8\u6001\u663e\u8457\u76f8\u5173\uff0c\u5728\u9ad8\u5ea6\u53c2\u4e0e\u7684\u9879\u76ee\u4e2d\u76f8\u5173\u6027\u66f4\u5f3a\u3002\u5bf9\u4e8e\u9879\u76ee\u5bff\u547d\uff0c\u5448\u73b0\u590d\u6742\u6a21\u5f0f\uff1a\u6708\u5ea6\u53c2\u4e0e\u7387\u5728\u5e74\u8f7b\u9879\u76ee\u4e2d\u6700\u9ad8\uff0c\u968f\u9879\u76ee\u5e74\u9f84\u4e0b\u964d\uff0c\u4f46\u90e8\u5206\u957f\u5bff\u9879\u76ee\u4fdd\u6301\u5f02\u5e38\u9ad8\u6d3b\u8dc3\u5ea6\u3002\u521d\u59cb\u53c2\u4e0e\u7206\u53d1\u5bf9\u9879\u76ee\u5efa\u7acb\u81f3\u5173\u91cd\u8981\uff0c\u6301\u7eed\u9ad8\u53c2\u4e0e\u5ea6\u9a71\u52a8\u6781\u7aef\u957f\u5bff\u3002", "conclusion": "\u793e\u533a\u53c2\u4e0e\u5ea6\u52a8\u6001\u9a71\u52a8\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u7684\u5bff\u547d\u548c\u5f00\u53d1\u3002\u7814\u7a76\u5efa\u7acb\u4e86\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\uff0c\u5e76\u6df1\u5165\u63ed\u793a\u4e86\u4e0d\u540c\u793e\u533a\u6d3b\u52a8\u6a21\u5f0f\u5982\u4f55\u4fc3\u8fdb\u9879\u76ee\u957f\u5bff\u3002"}}
{"id": "2510.15480", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15480", "abs": "https://arxiv.org/abs/2510.15480", "authors": ["Muslim Chochlov", "Gul Aftab Ahmed", "James Vincent Patten", "Yuanhua Han", "Guoxian Lu", "David Gregg", "Jim Buckley"], "title": "Selecting and Combining Large Language Models for Scalable Code Clone Detection", "comment": null, "summary": "Source code clones pose risks ranging from intellectual property violations\nto unintended vulnerabilities. Effective and efficient scalable clone\ndetection, especially for diverged clones, remains challenging. Large language\nmodels (LLMs) have recently been applied to clone detection tasks. However, the\nrapid emergence of LLMs raises questions about optimal model selection and\npotential LLM-ensemble efficacy.\n  This paper addresses the first question by identifying 76 LLMs and filtering\nthem down to suitable candidates for large-scale clone detection. The\ncandidates were evaluated on two public industrial datasets, BigCloneBench, and\na commercial large-scale dataset. No uniformly 'best-LLM' emerged, though\nCodeT5+110M, CuBERT and SPTCode were top-performers. Analysis of LLM-candidates\nsuggested that smaller embedding sizes, smaller tokenizer vocabularies and\ntailored datasets are advantageous. On commercial large-scale dataset a\ntop-performing CodeT5+110M achieved 39.71\\% precision: twice the precision of\npreviously used CodeBERT.\n  To address the second question, this paper explores ensembling of the\nselected LLMs: effort-effective approach to improving effectiveness. Results\nsuggest the importance of score normalization and favoring ensembling methods\nlike maximum or sum over averaging. Also, findings indicate that ensembling\napproach can be statistically significant and effective on larger datasets: the\nbest-performing ensemble achieved even higher precision of 46.91\\% over\nindividual LLM on the commercial large-scale code.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86LLM\u5728\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u7b5b\u900976\u4e2aLLM\u6a21\u578b\u5e76\u8bc4\u4f30\u5176\u5728\u5de5\u4e1a\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\uff0c\u53d1\u73b0\u6ca1\u6709\u5355\u4e00\u6700\u4f73\u6a21\u578b\uff0c\u4f46CodeT5+110M\u3001CuBERT\u548cSPTCode\u8868\u73b0\u8f83\u597d\u3002\u540c\u65f6\u63a2\u7d22\u4e86LLM\u96c6\u6210\u65b9\u6cd5\uff0c\u5728\u5927\u578b\u5546\u4e1a\u6570\u636e\u96c6\u4e0a\u96c6\u6210\u6a21\u578b\u7cbe\u5ea6\u8fbe\u523046.91%\u3002", "motivation": "\u6e90\u4ee3\u7801\u514b\u9686\u5b58\u5728\u77e5\u8bc6\u4ea7\u6743\u4fb5\u6743\u548c\u5b89\u5168\u6f0f\u6d1e\u98ce\u9669\uff0c\u4f46\u6709\u6548\u7684\u53ef\u6269\u5c55\u514b\u9686\u68c0\u6d4b\uff08\u7279\u522b\u662f\u9488\u5bf9\u53d8\u5f02\u514b\u9686\uff09\u4ecd\u7136\u5177\u6709\u6311\u6218\u6027\u3002\u867d\u7136LLM\u5df2\u88ab\u5e94\u7528\u4e8e\u514b\u9686\u68c0\u6d4b\uff0c\u4f46\u6a21\u578b\u5feb\u901f\u6d8c\u73b0\u5e26\u6765\u4e86\u6700\u4f73\u6a21\u578b\u9009\u62e9\u548c\u96c6\u6210\u6548\u679c\u7684\u95ee\u9898\u3002", "method": "1. \u8bc6\u522b76\u4e2aLLM\u5e76\u7b5b\u9009\u9002\u5408\u5927\u89c4\u6a21\u514b\u9686\u68c0\u6d4b\u7684\u5019\u9009\u6a21\u578b\uff1b2. \u5728\u4e24\u4e2a\u516c\u5171\u5de5\u4e1a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u5546\u4e1a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\u5019\u9009\u6a21\u578b\uff1b3. \u63a2\u7d22LLM\u96c6\u6210\u65b9\u6cd5\uff0c\u5305\u62ec\u5206\u6570\u5f52\u4e00\u5316\u548c\u4e0d\u540c\u96c6\u6210\u7b56\u7565\uff08\u6700\u5927\u503c\u3001\u6c42\u548c\u3001\u5e73\u5747\uff09\u3002", "result": "\u6ca1\u6709\u53d1\u73b0\u7edf\u4e00\u7684'\u6700\u4f73LLM'\uff0c\u4f46CodeT5+110M\u3001CuBERT\u548cSPTCode\u8868\u73b0\u6700\u4f73\u3002\u5728\u5546\u4e1a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\uff0cCodeT5+110M\u8fbe\u523039.71%\u7cbe\u5ea6\uff0c\u662f\u4e4b\u524dCodeBERT\u7684\u4e24\u500d\u3002\u96c6\u6210\u65b9\u6cd5\u5728\u5927\u578b\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u66f4\u597d\uff0c\u6700\u4f73\u96c6\u6210\u6a21\u578b\u7cbe\u5ea6\u8fbe\u523046.91%\u3002\u5206\u6790\u8868\u660e\u8f83\u5c0f\u7684\u5d4c\u5165\u5c3a\u5bf8\u3001\u8f83\u5c0f\u7684\u5206\u8bcd\u5668\u8bcd\u6c47\u91cf\u548c\u5b9a\u5236\u6570\u636e\u96c6\u5177\u6709\u4f18\u52bf\u3002", "conclusion": "LLM\u5728\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u6ca1\u6709\u5355\u4e00\u6700\u4f73\u6a21\u578b\u3002\u96c6\u6210\u65b9\u6cd5\uff08\u7279\u522b\u662f\u6700\u5927\u503c\u6216\u6c42\u548c\u7b56\u7565\uff09\u80fd\u663e\u8457\u63d0\u9ad8\u68c0\u6d4b\u7cbe\u5ea6\uff0c\u5c24\u5176\u5728\u5927\u578b\u6570\u636e\u96c6\u4e0a\u6548\u679c\u66f4\u660e\u663e\u3002\u8f83\u5c0f\u7684\u6a21\u578b\u914d\u7f6e\u548c\u5b9a\u5236\u8bad\u7ec3\u6570\u636e\u6709\u52a9\u4e8e\u63d0\u5347\u6027\u80fd\u3002"}}
{"id": "2510.15494", "categories": ["cs.SE", "cs.AI", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15494", "abs": "https://arxiv.org/abs/2510.15494", "authors": ["Lirong Yi", "Gregory Gay", "Philipp Leitner"], "title": "An Experimental Study of Real-Life LLM-Proposed Performance Improvements", "comment": null, "summary": "Large Language Models (LLMs) can generate code, but can they generate fast\ncode? In this paper, we study this question using a dataset of 65 real-world\ntasks mined from open-source Java programs. We specifically select tasks where\ndevelopers achieved significant speedups, and employ an automated pipeline to\ngenerate patches for these issues using two leading LLMs under four prompt\nvariations. By rigorously benchmarking the results against the baseline and\nhuman-authored solutions, we demonstrate that LLM-generated code indeed\nimproves performance over the baseline in most cases. However, patches proposed\nby human developers outperform LLM fixes by a statistically significant margin,\nindicating that LLMs often fall short of finding truly optimal solutions. We\nfurther find that LLM solutions are semantically identical or similar to the\ndeveloper optimization idea in approximately two-thirds of cases, whereas they\npropose a more original idea in the remaining one-third. However, these\noriginal ideas only occasionally yield substantial performance gains.", "AI": {"tldr": "LLM\u80fd\u751f\u6210\u4ee3\u7801\uff0c\u4f46\u5728\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\u65b9\u9762\u8868\u73b0\u6709\u9650\u3002\u572865\u4e2a\u771f\u5b9eJava\u4efb\u52a1\u4e2d\uff0cLLM\u751f\u6210\u7684\u4ee3\u7801\u5927\u591a\u80fd\u63d0\u5347\u6027\u80fd\uff0c\u4f46\u4ecd\u663e\u8457\u843d\u540e\u4e8e\u4eba\u5de5\u4f18\u5316\u65b9\u6848\u3002", "motivation": "\u7814\u7a76LLM\u662f\u5426\u80fd\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u529f\u80fd\u6b63\u786e\u7684\u4ee3\u7801\u3002", "method": "\u4ece\u5f00\u6e90Java\u7a0b\u5e8f\u4e2d\u9009\u53d665\u4e2a\u5f00\u53d1\u8005\u5b9e\u73b0\u663e\u8457\u52a0\u901f\u7684\u4efb\u52a1\uff0c\u4f7f\u7528\u4e24\u79cd\u9886\u5148LLM\u548c\u56db\u79cd\u63d0\u793a\u53d8\u4f53\u81ea\u52a8\u751f\u6210\u8865\u4e01\uff0c\u5e76\u4e0e\u57fa\u51c6\u548c\u4eba\u5de5\u65b9\u6848\u8fdb\u884c\u4e25\u683c\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "LLM\u751f\u6210\u7684\u4ee3\u7801\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u786e\u5b9e\u63d0\u5347\u4e86\u6027\u80fd\uff0c\u4f46\u4eba\u5de5\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u8865\u4e01\u5728\u7edf\u8ba1\u4e0a\u663e\u8457\u4f18\u4e8eLLM\u4fee\u590d\u65b9\u6848\u3002\u7ea6\u4e09\u5206\u4e4b\u4e8c\u7684LLM\u89e3\u51b3\u65b9\u6848\u4e0e\u5f00\u53d1\u8005\u4f18\u5316\u601d\u8def\u8bed\u4e49\u76f8\u540c\u6216\u76f8\u4f3c\uff0c\u5176\u4f59\u4e09\u5206\u4e4b\u4e00\u63d0\u51fa\u66f4\u539f\u521b\u7684\u60f3\u6cd5\u4f46\u5f88\u5c11\u5e26\u6765\u5b9e\u8d28\u6027\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "LLM\u5728\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\u65b9\u9762\u4ecd\u6709\u5c40\u9650\uff0c\u867d\u7136\u80fd\u4ea7\u751f\u6027\u80fd\u6539\u8fdb\uff0c\u4f46\u5f80\u5f80\u65e0\u6cd5\u627e\u5230\u771f\u6b63\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.15512", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15512", "abs": "https://arxiv.org/abs/2510.15512", "authors": ["Wachiraphan Charoenwet", "Patanamon Thongtanunam", "Van-Thuan Pham", "Christoph Treude"], "title": "Enhancing Code Review through Fuzzing and Likely Invariants", "comment": null, "summary": "Many software projects employ manual code review to gatekeep defects and\nvulnerabilities in the code before integration. However, reviewers often work\nunder time pressure and rely primarily on static inspection, leaving the\ndynamic aspects of the program unexplored. Dynamic analyses could reveal such\nbehaviors, but they are rarely integrated into reviews. Among them, fuzzing is\ntypically applied later to uncover crashing bugs. Yet its ability to exercise\ncode with diverse inputs makes it promising for exposing non-crashing, but\nunexpected, behaviors earlier. Still, without suitable mechanisms to analyze\nprogram behaviors, the rich data produced during fuzzing remains inaccessible\nto reviewers, limiting its practical value in this context.\n  We hypothesize that unexpected variations in program behaviors could signify\npotential bugs. The impact of code changes can be automatically captured at\nruntime. Representing program behavior as likely invariants, dynamic properties\nconsistently observed at specific program points, can provide practical signals\nof behavioral changes. Such signals offer a way to distinguish between intended\nchanges and unexpected behavioral shifts from code changes.\n  We present FuzzSight, a framework that leverages likely invariants from\nnon-crashing fuzzing inputs to highlight behavioral differences across program\nversions. By surfacing such differences, it provides insights into which code\nblocks may need closer attention. In our evaluation, FuzzSight flagged 75% of\nregression bugs and up to 80% of vulnerabilities uncovered by 24-hour fuzzing.\nIt also outperformed SAST in identifying buggy code blocks, achieving ten times\nhigher detection rates with fewer false alarms. In summary, FuzzSight\ndemonstrates the potential and value of leveraging fuzzing and invariant\nanalysis for early-stage code review, bridging static inspection with dynamic\nbehavioral insights.", "AI": {"tldr": "FuzzSight\u662f\u4e00\u4e2a\u5229\u7528\u6a21\u7cca\u6d4b\u8bd5\u548c\u4e0d\u53d8\u5f0f\u5206\u6790\u6765\u589e\u5f3a\u4ee3\u7801\u5ba1\u67e5\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u68c0\u6d4b\u7a0b\u5e8f\u884c\u4e3a\u53d8\u5316\u6765\u8bc6\u522b\u6f5c\u5728\u7f3a\u9677\u3002", "motivation": "\u4f20\u7edf\u4ee3\u7801\u5ba1\u67e5\u4e3b\u8981\u4f9d\u8d56\u9759\u6001\u68c0\u67e5\uff0c\u96be\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u52a8\u6001\u884c\u4e3a\u95ee\u9898\u3002\u6a21\u7cca\u6d4b\u8bd5\u80fd\u751f\u6210\u591a\u6837\u5316\u8f93\u5165\u4f46\u4ea7\u751f\u7684\u4e30\u5bcc\u6570\u636e\u96be\u4ee5\u88ab\u5ba1\u67e5\u8005\u5229\u7528\u3002", "method": "\u5c06\u7a0b\u5e8f\u884c\u4e3a\u8868\u793a\u4e3a\u53ef\u80fd\u4e0d\u53d8\u5f0f\uff0c\u901a\u8fc7\u975e\u5d29\u6e83\u6a21\u7cca\u6d4b\u8bd5\u8f93\u5165\u6355\u83b7\u8fd0\u884c\u65f6\u884c\u4e3a\u53d8\u5316\uff0c\u7a81\u51fa\u663e\u793a\u8de8\u7248\u672c\u7684\u884c\u4e3a\u5dee\u5f02\u3002", "result": "\u5728\u8bc4\u4f30\u4e2d\uff0cFuzzSight\u6807\u8bb0\u4e8675%\u7684\u56de\u5f52\u7f3a\u9677\u548c\u9ad8\u8fbe80%\u7684\u6f0f\u6d1e\uff0c\u68c0\u6d4b\u7387\u6bd4SAST\u9ad810\u500d\u4e14\u8bef\u62a5\u66f4\u5c11\u3002", "conclusion": "FuzzSight\u5c55\u793a\u4e86\u5c06\u6a21\u7cca\u6d4b\u8bd5\u548c\u4e0d\u53d8\u5f0f\u5206\u6790\u7528\u4e8e\u65e9\u671f\u4ee3\u7801\u5ba1\u67e5\u7684\u6f5c\u529b\uff0c\u8fde\u63a5\u4e86\u9759\u6001\u68c0\u67e5\u4e0e\u52a8\u6001\u884c\u4e3a\u6d1e\u5bdf\u3002"}}
{"id": "2510.15565", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15565", "abs": "https://arxiv.org/abs/2510.15565", "authors": ["Vinicius Moraes de Jesus", "Andre Georghton Cardoso Pacheco"], "title": "Colepp: uma ferramenta multiplataforma para coleta de dados de dispositivos vestiveis", "comment": "in Portuguese language", "summary": "The widespread adoption of wearable devices such as smartwatches and fitness\ntrackers has fueled the demand for reliable physiological and movement data\ncollection tools. However, challenges such as limited access to large,\nhigh-quality public datasets and a lack of control over data collection\nconditions hinder the development of robust algorithms. This work presents\nColepp, an open-source, cross-platform tool designed to collect and synchronize\ndata from multiple wearable devices, including heart rate (via ECG and PPG) and\nmotion signals (accelerometer and gyroscope). The system integrates a\nsmartphone as a central hub, receiving data from a Polar H10 chest strap and a\nWear OS smartwatch, and exporting synchronized datasets in CSV format. Through\na custom synchronization protocol and user-friendly interface, Colepp\nfacilitates the generation of customizable, real-world datasets suitable for\napplications such as human activity recognition and heart rate estimation. A\nuse case shows the effectiveness of the tool in producing consistent and\nsynchronized signals.", "AI": {"tldr": "Colepp\u662f\u4e00\u4e2a\u5f00\u6e90\u8de8\u5e73\u53f0\u5de5\u5177\uff0c\u7528\u4e8e\u4ece\u591a\u4e2a\u53ef\u7a7f\u6234\u8bbe\u5907\u6536\u96c6\u548c\u540c\u6b65\u5fc3\u7387\u548c\u8fd0\u52a8\u6570\u636e\uff0c\u901a\u8fc7\u667a\u80fd\u624b\u673a\u4f5c\u4e3a\u4e2d\u5fc3\u67a2\u7ebd\uff0c\u751f\u6210\u9002\u5408\u4eba\u7c7b\u6d3b\u52a8\u8bc6\u522b\u548c\u5fc3\u7387\u4f30\u8ba1\u7684\u5b9a\u5236\u5316\u6570\u636e\u96c6\u3002", "motivation": "\u53ef\u7a7f\u6234\u8bbe\u5907\u5e7f\u6cdb\u4f7f\u7528\u4f46\u9762\u4e34\u9ad8\u8d28\u91cf\u516c\u5171\u6570\u636e\u96c6\u6709\u9650\u548c\u6570\u636e\u6536\u96c6\u6761\u4ef6\u63a7\u5236\u4e0d\u8db3\u7684\u6311\u6218\uff0c\u963b\u788d\u4e86\u7a33\u5065\u7b97\u6cd5\u7684\u53d1\u5c55\u3002", "method": "\u5f00\u53d1\u4e86Colepp\u7cfb\u7edf\uff0c\u96c6\u6210\u667a\u80fd\u624b\u673a\u4f5c\u4e3a\u4e2d\u5fc3\u67a2\u7ebd\uff0c\u63a5\u6536\u6765\u81eaPolar H10\u80f8\u5e26\u548cWear OS\u667a\u80fd\u624b\u8868\u7684\u6570\u636e\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u540c\u6b65\u534f\u8bae\u548c\u7528\u6237\u53cb\u597d\u754c\u9762\u5bfc\u51fa\u540c\u6b65\u7684CSV\u683c\u5f0f\u6570\u636e\u96c6\u3002", "result": "\u901a\u8fc7\u5b9e\u9645\u7528\u4f8b\u5c55\u793a\u4e86\u8be5\u5de5\u5177\u80fd\u591f\u4ea7\u751f\u4e00\u81f4\u4e14\u540c\u6b65\u7684\u4fe1\u53f7\uff0c\u6709\u6548\u652f\u6301\u4eba\u7c7b\u6d3b\u52a8\u8bc6\u522b\u548c\u5fc3\u7387\u4f30\u8ba1\u7b49\u5e94\u7528\u3002", "conclusion": "Colepp\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u4fc3\u8fdb\u53ef\u7a7f\u6234\u8bbe\u5907\u6570\u636e\u6536\u96c6\u548c\u7b97\u6cd5\u5f00\u53d1\uff0c\u7279\u522b\u662f\u5728\u771f\u5b9e\u4e16\u754c\u573a\u666f\u4e2d\u751f\u6210\u9ad8\u8d28\u91cf\u540c\u6b65\u6570\u636e\u96c6\u3002"}}
{"id": "2510.15642", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15642", "abs": "https://arxiv.org/abs/2510.15642", "authors": ["Sian Brooke"], "title": "Interact and React: Exploring Gender Patterns in Development and the Impact on Innovation and Robustness of a User Interface Tool", "comment": "Published in AoIR 2025", "summary": "In open-source software design, the inclusion of women is often highlighted\nsimply to remind programmers that women exist. Yet, little attention is given\nto how greater gender diversity, specifically women's participation, could\nfundamentally alter development patterns. To understand the potential impact of\ngender inclusion, this study investigates React, a widely used JavaScript\nlibrary for building user interfaces with an active contributor community. I\nexamine gender differences in metrics of robustness and innovation, as well as\nshifts in contribution patterns leading up to major version releases over 11\nyears of the React project. My results show that the exclusion of women is\ndetrimental to software as women contribute significantly more to feature\nenhancement and dependency management. By exploring how gender influences\ninnovation and robustness in the development of React, the study offers\ncritical insights into how increasing gender diversity could lead to more\ninclusive, innovative, and robust software.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86React\u9879\u76ee\u4e2d\u6027\u522b\u591a\u6837\u6027\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u5973\u6027\u5728\u529f\u80fd\u589e\u5f3a\u548c\u4f9d\u8d56\u7ba1\u7406\u65b9\u9762\u8d21\u732e\u663e\u8457\uff0c\u6027\u522b\u6392\u65a5\u5bf9\u8f6f\u4ef6\u8d28\u91cf\u6709\u5bb3\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u8bbe\u8ba1\u4e2d\uff0c\u5973\u6027\u53c2\u4e0e\u5e38\u88ab\u7b80\u5355\u63d0\u53ca\uff0c\u4f46\u5f88\u5c11\u5173\u6ce8\u6027\u522b\u591a\u6837\u6027\u5982\u4f55\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u5f00\u53d1\u6a21\u5f0f\u3002\u672c\u7814\u7a76\u65e8\u5728\u7406\u89e3\u6027\u522b\u5305\u5bb9\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u6a21\u5f0f\u7684\u6f5c\u5728\u5f71\u54cd\u3002", "method": "\u7814\u7a76\u8c03\u67e5\u4e86React\u8fd9\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684JavaScript\u5e93\uff0c\u5206\u6790\u4e8611\u5e74\u95f4\u6027\u522b\u5dee\u5f02\u5728\u7a33\u5065\u6027\u548c\u521b\u65b0\u6307\u6807\u4e0a\u7684\u8868\u73b0\uff0c\u4ee5\u53ca\u4e3b\u8981\u7248\u672c\u53d1\u5e03\u524d\u7684\u8d21\u732e\u6a21\u5f0f\u53d8\u5316\u3002", "result": "\u7ed3\u679c\u663e\u793a\u5973\u6027\u5728\u529f\u80fd\u589e\u5f3a\u548c\u4f9d\u8d56\u7ba1\u7406\u65b9\u9762\u8d21\u732e\u663e\u8457\u66f4\u591a\uff0c\u6392\u9664\u5973\u6027\u5bf9\u8f6f\u4ef6\u8d28\u91cf\u6709\u5bb3\u3002", "conclusion": "\u901a\u8fc7\u63a2\u7d22\u6027\u522b\u5982\u4f55\u5f71\u54cdReact\u5f00\u53d1\u4e2d\u7684\u521b\u65b0\u548c\u7a33\u5065\u6027\uff0c\u8be5\u7814\u7a76\u4e3a\u589e\u52a0\u6027\u522b\u591a\u6837\u6027\u5982\u4f55\u5e26\u6765\u66f4\u5305\u5bb9\u3001\u521b\u65b0\u548c\u7a33\u5065\u7684\u8f6f\u4ef6\u63d0\u4f9b\u4e86\u5173\u952e\u89c1\u89e3\u3002"}}
{"id": "2510.15690", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.15690", "abs": "https://arxiv.org/abs/2510.15690", "authors": ["Shiwen Ou", "Yuwei Li", "Lu Yu", "Chengkun Wei", "Tingke Wen", "Qiangpu Chen", "Yu Chen", "Haizhi Tang", "Zulie Pan"], "title": "MirrorFuzz: Leveraging LLM and Shared Bugs for Deep Learning Framework APIs Fuzzing", "comment": "Accepted for publication in IEEE Transactions on Software Engineering\n  (TSE), 2025", "summary": "Deep learning (DL) frameworks serve as the backbone for a wide range of\nartificial intelligence applications. However, bugs within DL frameworks can\ncascade into critical issues in higher-level applications, jeopardizing\nreliability and security. While numerous techniques have been proposed to\ndetect bugs in DL frameworks, research exploring common API patterns across\nframeworks and the potential risks they entail remains limited. Notably, many\nDL frameworks expose similar APIs with overlapping input parameters and\nfunctionalities, rendering them vulnerable to shared bugs, where a flaw in one\nAPI may extend to analogous APIs in other frameworks. To address this\nchallenge, we propose MirrorFuzz, an automated API fuzzing solution to discover\nshared bugs in DL frameworks. MirrorFuzz operates in three stages: First,\nMirrorFuzz collects historical bug data for each API within a DL framework to\nidentify potentially buggy APIs. Second, it matches each buggy API in a\nspecific framework with similar APIs within and across other DL frameworks.\nThird, it employs large language models (LLMs) to synthesize code for the API\nunder test, leveraging the historical bug data of similar APIs to trigger\nanalogous bugs across APIs. We implement MirrorFuzz and evaluate it on four\npopular DL frameworks (TensorFlow, PyTorch, OneFlow, and Jittor). Extensive\nevaluation demonstrates that MirrorFuzz improves code coverage by 39.92\\% and\n98.20\\% compared to state-of-the-art methods on TensorFlow and PyTorch,\nrespectively. Moreover, MirrorFuzz discovers 315 bugs, 262 of which are newly\nfound, and 80 bugs are fixed, with 52 of these bugs assigned CNVD IDs.", "AI": {"tldr": "MirrorFuzz\u662f\u4e00\u4e2a\u81ea\u52a8\u5316API\u6a21\u7cca\u6d4b\u8bd5\u89e3\u51b3\u65b9\u6848\uff0c\u7528\u4e8e\u53d1\u73b0\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u5171\u4eabbug\u3002\u5b83\u901a\u8fc7\u6536\u96c6\u5386\u53f2bug\u6570\u636e\u3001\u5339\u914d\u76f8\u4f3cAPI\u4ee5\u53ca\u4f7f\u7528LLM\u5408\u6210\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5728\u56db\u4e2a\u6d41\u884cDL\u6846\u67b6\u4e2d\u53d1\u73b0\u4e86315\u4e2abug\uff0c\u5176\u4e2d262\u4e2a\u662f\u65b0\u53d1\u73b0\u7684\u3002", "motivation": "\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684bug\u4f1a\u7ea7\u8054\u5f71\u54cd\u4e0a\u5c42\u5e94\u7528\uff0c\u4f46\u73b0\u6709\u7814\u7a76\u5bf9\u8de8\u6846\u67b6API\u6a21\u5f0f\u53ca\u5176\u6f5c\u5728\u98ce\u9669\u63a2\u7d22\u6709\u9650\u3002\u8bb8\u591aDL\u6846\u67b6\u66b4\u9732\u76f8\u4f3c\u7684API\uff0c\u4f7f\u5b83\u4eec\u5bb9\u6613\u53d7\u5230\u5171\u4eabbug\u7684\u5f71\u54cd\u3002", "method": "MirrorFuzz\u91c7\u7528\u4e09\u9636\u6bb5\u65b9\u6cd5\uff1a1)\u6536\u96c6\u6bcf\u4e2aAPI\u7684\u5386\u53f2bug\u6570\u636e\u8bc6\u522b\u6f5c\u5728buggy API\uff1b2)\u5728\u6846\u67b6\u5185\u548c\u8de8\u6846\u67b6\u5339\u914d\u76f8\u4f3cAPI\uff1b3)\u4f7f\u7528LLM\u57fa\u4e8e\u76f8\u4f3cAPI\u7684\u5386\u53f2bug\u6570\u636e\u5408\u6210\u6d4b\u8bd5\u4ee3\u7801\u6765\u89e6\u53d1\u7c7b\u4f3cbug\u3002", "result": "\u5728TensorFlow\u3001PyTorch\u3001OneFlow\u548cJittor\u56db\u4e2a\u6846\u67b6\u4e0a\u7684\u8bc4\u4f30\u663e\u793a\uff0cMirrorFuzz\u76f8\u6bd4\u6700\u5148\u8fdb\u65b9\u6cd5\u5728TensorFlow\u548cPyTorch\u4e0a\u5206\u522b\u63d0\u9ad8\u4e8639.92%\u548c98.20%\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002\u53d1\u73b0\u4e86315\u4e2abug\uff0c\u5176\u4e2d262\u4e2a\u662f\u65b0\u53d1\u73b0\u7684\uff0c80\u4e2a\u5df2\u4fee\u590d\uff0c52\u4e2a\u83b7\u5f97CNVD ID\u3002", "conclusion": "MirrorFuzz\u901a\u8fc7\u5229\u7528\u8de8\u6846\u67b6API\u76f8\u4f3c\u6027\u548c\u5386\u53f2bug\u6570\u636e\uff0c\u6709\u6548\u53d1\u73b0\u4e86\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u5171\u4eabbug\uff0c\u8bc1\u660e\u4e86\u5176\u5728\u63d0\u9ad8\u4ee3\u7801\u8986\u76d6\u7387\u548cbug\u53d1\u73b0\u80fd\u529b\u65b9\u9762\u7684\u6709\u6548\u6027\u3002"}}
{"id": "2510.15767", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15767", "abs": "https://arxiv.org/abs/2510.15767", "authors": ["Rathi Adarshi Rammohan", "Moritz Meier", "Dennis K\u00fcster", "Tanja Schultz"], "title": "EASELAN: An Open-Source Framework for Multimodal Biosignal Annotation and Data Management", "comment": null, "summary": "Recent advancements in machine learning and adaptive cognitive systems are\ndriving a growing demand for large and richly annotated multimodal data. A\nprominent example of this trend are fusion models, which increasingly\nincorporate multiple biosignals in addition to traditional audiovisual\nchannels. This paper introduces the EASELAN annotation framework to improve\nannotation workflows designed to address the resulting rising complexity of\nmultimodal and biosignals datasets. It builds on the robust ELAN tool by adding\nnew components tailored to support all stages of the annotation pipeline: From\nstreamlining the preparation of annotation files to setting up additional\nchannels, integrated version control with GitHub, and simplified\npost-processing. EASELAN delivers a seamless workflow designed to integrate\nbiosignals and facilitate rich annotations to be readily exported for further\nanalyses and machine learning-supported model training. The EASELAN framework\nis successfully applied to a high-dimensional biosignals collection initiative\non human everyday activities (here, table setting) for cognitive robots within\nthe DFG-funded Collaborative Research Center 1320 Everyday Activity Science and\nEngineering (EASE). In this paper we discuss the opportunities, limitations,\nand lessons learned when using EASELAN for this initiative. To foster research\non biosignal collection, annotation, and processing, the code of EASELAN is\npublicly available(https://github.com/cognitive-systems-lab/easelan), along\nwith the EASELAN-supported fully annotated Table Setting Database.", "AI": {"tldr": "EASELAN\u662f\u4e00\u4e2a\u57fa\u4e8eELAN\u7684\u591a\u6a21\u6001\u751f\u7269\u4fe1\u53f7\u6807\u6ce8\u6846\u67b6\uff0c\u901a\u8fc7\u96c6\u6210GitHub\u7248\u672c\u63a7\u5236\u548c\u7b80\u5316\u5de5\u4f5c\u6d41\u7a0b\uff0c\u652f\u6301\u590d\u6742\u751f\u7269\u4fe1\u53f7\u6570\u636e\u96c6\u7684\u6807\u6ce8\u5904\u7406\u3002", "motivation": "\u968f\u7740\u673a\u5668\u5b66\u4e60\u548c\u81ea\u9002\u5e94\u8ba4\u77e5\u7cfb\u7edf\u7684\u53d1\u5c55\uff0c\u5bf9\u5927\u89c4\u6a21\u591a\u6a21\u6001\u6807\u6ce8\u6570\u636e\u7684\u9700\u6c42\u65e5\u76ca\u589e\u957f\uff0c\u7279\u522b\u662f\u878d\u5408\u591a\u79cd\u751f\u7269\u4fe1\u53f7\u7684\u590d\u6742\u6570\u636e\u96c6\u9700\u8981\u66f4\u9ad8\u6548\u7684\u6807\u6ce8\u5de5\u5177\u3002", "method": "\u57fa\u4e8eELAN\u5de5\u5177\u6784\u5efa\uff0c\u6dfb\u52a0\u4e86\u65b0\u7684\u7ec4\u4ef6\u6765\u652f\u6301\u6807\u6ce8\u6d41\u7a0b\u7684\u5404\u4e2a\u9636\u6bb5\uff1a\u4ece\u51c6\u5907\u6807\u6ce8\u6587\u4ef6\u5230\u8bbe\u7f6e\u989d\u5916\u901a\u9053\u3001\u96c6\u6210GitHub\u7248\u672c\u63a7\u5236\u4ee5\u53ca\u7b80\u5316\u540e\u5904\u7406\u3002", "result": "\u6210\u529f\u5e94\u7528\u4e8eDFG\u8d44\u52a9\u7684EASE\u9879\u76ee\u4e2d\u7684\u4eba\u7c7b\u65e5\u5e38\u6d3b\u52a8\uff08\u9910\u684c\u5e03\u7f6e\uff09\u9ad8\u7ef4\u751f\u7269\u4fe1\u53f7\u6536\u96c6\u8ba1\u5212\uff0c\u5e76\u53d1\u5e03\u4e86\u5b8c\u5168\u6807\u6ce8\u7684Table Setting Database\u3002", "conclusion": "EASELAN\u63d0\u4f9b\u4e86\u65e0\u7f1d\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u80fd\u591f\u6709\u6548\u6574\u5408\u751f\u7269\u4fe1\u53f7\u5e76\u4fc3\u8fdb\u4e30\u5bcc\u6807\u6ce8\uff0c\u4e3a\u751f\u7269\u4fe1\u53f7\u6536\u96c6\u3001\u6807\u6ce8\u548c\u5904\u7406\u7814\u7a76\u63d0\u4f9b\u4e86\u5b9e\u7528\u5de5\u5177\u3002"}}
{"id": "2510.15794", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15794", "abs": "https://arxiv.org/abs/2510.15794", "authors": ["Rachna Raj", "Diego Elias Costa"], "title": "Towards Supporting Open Source Library Maintainers with Community-Based Analytics", "comment": null, "summary": "Open-source software (OSS) is a pillar of modern software development. Its\nsuccess depends on the dedication of maintainers who work constantly to keep\ntheir libraries stable, adapt to changing needs, and support a growing\ncommunity. Yet, they receive little to no continuous feedback on how the\nprojects that rely on their libraries actually use their APIs. We believe that\ngaining these insights can help maintainers make better decisions, such as\nrefining testing strategies, understanding the impact of changes, and guiding\nthe evolution of their libraries more effectively. We propose the use of\ncommunity-based analytics to analyze how an OSS library is used across its\ndependent ecosystem. We conduct an empirical study of 10 popular Java libraries\nand each with their respective dependent ecosystem of 50 projects. Our results\nreveal that while library developers offer a wide range of API methods, only\n16% on average are actively used by their dependent ecosystem. Moreover, only\n74% of the used API methods are partially or fully covered by their library\ntest suite. We propose two metrics to help developers evaluate their test suite\naccording to the APIs used by their community, and we conduct a survey on\nopen-source practitioners to assess the practical value of these insights in\nguiding maintenance decisions.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4f7f\u7528\u793e\u533a\u5206\u6790\u6765\u4e86\u89e3\u5f00\u6e90\u5e93\u5728\u5176\u4f9d\u8d56\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53d1\u73b0\u5e73\u5747\u53ea\u670916%\u7684API\u65b9\u6cd5\u88ab\u5b9e\u9645\u4f7f\u7528\uff0c\u4e14\u4ec574%\u7684\u88ab\u4f7f\u7528API\u65b9\u6cd5\u5728\u5e93\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u5f97\u5230\u8986\u76d6\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u7ef4\u62a4\u8005\u7f3a\u4e4f\u5bf9\u5176\u5e93\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5982\u4f55\u4f7f\u7528\u7684\u6301\u7eed\u53cd\u9988\uff0c\u8fd9\u4e9b\u89c1\u89e3\u53ef\u4ee5\u5e2e\u52a9\u7ef4\u62a4\u8005\u6539\u8fdb\u6d4b\u8bd5\u7b56\u7565\u3001\u7406\u89e3\u53d8\u66f4\u5f71\u54cd\u5e76\u66f4\u6709\u6548\u5730\u6307\u5bfc\u5e93\u7684\u6f14\u8fdb\u3002", "method": "\u5bf910\u4e2a\u6d41\u884cJava\u5e93\u53ca\u5176\u5404\u81ea50\u4e2a\u4f9d\u8d56\u9879\u76ee\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u5206\u6790API\u4f7f\u7528\u60c5\u51b5\u548c\u6d4b\u8bd5\u8986\u76d6\u60c5\u51b5\uff0c\u5e76\u63d0\u51fa\u4e86\u4e24\u4e2a\u8bc4\u4f30\u6d4b\u8bd5\u5957\u4ef6\u7684\u6307\u6807\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5e93\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u5e7f\u6cdb\u7684API\u65b9\u6cd5\uff0c\u4f46\u5e73\u5747\u53ea\u670916%\u88ab\u751f\u6001\u7cfb\u7edf\u5b9e\u9645\u4f7f\u7528\uff0c\u4e14\u4ec574%\u7684\u88ab\u4f7f\u7528API\u65b9\u6cd5\u5728\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u5f97\u5230\u90e8\u5206\u6216\u5b8c\u5168\u8986\u76d6\u3002", "conclusion": "\u793e\u533a\u5206\u6790\u53ef\u4ee5\u4e3a\u5f00\u6e90\u5e93\u7ef4\u62a4\u8005\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u89c1\u89e3\uff0c\u5e2e\u52a9\u5176\u57fa\u4e8e\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\u505a\u51fa\u66f4\u597d\u7684\u7ef4\u62a4\u51b3\u7b56\uff0c\u5982\u4f18\u5316\u6d4b\u8bd5\u7b56\u7565\u548c\u6307\u5bfc\u5e93\u7684\u6f14\u8fdb\u3002"}}
